# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト46(荷物自動分割)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
    # ■異常系
    # 1. 車両数 : 1、配送先数 : 1(分割単位 -1)とした場合に
    # "load dividing number (aka demdivideunit) must be 0 or positive integer"のエラーメッセージを出力して終了することを確認
    ('46_1_1', '46_1_1_request.json','2x2_cost.json', True),

    # 2. 車両数 : 1、配送先数 : 2(分割単位 1、0)、大量輸送モードとした場合に
    # "all load dividing numbers (aka demdivideunit) must be 1 when bulkShipping (aka bulkShipping_flag) is true"のエラーメッセージを出力して終了することを確認
    ('46_1_2', '46_1_2_request.json','3x3_cost.json', True),

    # 32. 車両数 : 1、配送先数 : 1、初期解 0→1→1→0とした場合に
    # "custno of customer class (aka _custs) must include all customer id (aka custno) of iniroutes"のエラーメッセージを出力して終了することを確認
    ('46_1_32', '46_1_32_request.json','2x2_cost.json', True),

    # 33. 車両数 : 1、配送先数 : 2(CUSTNO 1、1、荷作業時間 1、2)、初期解 0→1→1→0とした場合に
    # "load divided customers include wrong parameters"のエラーメッセージを出力して終了することを確認
    ('46_1_33', '46_1_33_request.json','2x2_cost.json', True),

    # 34. 車両数 : 1、配送先数 : 2(CUSTNO 1、1、分割単位 0、2)、初期解 0→1→1→0とした場合に
    # "load divided customers include wrong parameters"のエラーメッセージを出力して終了することを確認
    ('46_1_34', '46_1_34_request.json','2x2_cost.json', True),

    # 35. 車両数 : 1、配送先数 : 2(CUSTNO 1、1、分割単位 1、2、積載量 10、30)、初期解 0→1→1→0とした場合に
    # "load divided customers include wrong parameters"のエラーメッセージを出力して終了することを確認
    ('46_1_35', '46_1_35_request.json','2x2_cost.json', True),

    # 37. 車両数 : 1、配送先数 : 2(CUSTNO 1、1、分割単位 0、0)、初期解 0→1→1→0とした場合に
    # "load divided customers are succesive"のエラーメッセージを出力して終了することを確認
    ('46_1_37', '46_1_37_request.json','2x2_cost.json', True),

    # 38. 車両数 : 1、配送先数 : 2(CUSTNO 1、1、荷物種類 DELIVERY、PICKUP)、初期解 0→1→1→0とした場合に
    # "load divided customers include wrong request type of load (aka requestType)"のエラーメッセージを出力して終了することを確認
    ('46_1_38', '46_1_38_request.json','2x2_cost.json', True),

    # ■正常系
    # 3. 車両数 : 2(積載量上限 300、300)、配送先数 : 2(荷物量 500、100、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
    # 0→2→1(荷物量 200)→0および0→1(荷物量 300)→0となることを確認
    ('46_1_3', '46_1_3_request.json','3x3_cost.json', True),

    # 4. 車両数 : 2(積載量上限 300、300)、配送先数 : 2(荷物量 500(集荷)、100(集荷)、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
    # 0→2→1(荷物量 200(集荷))→0および0→1(荷物量 300(集荷))→0となることを確認(集荷)
    ('46_1_4', '46_1_4_request.json','3x3_cost.json', True),

    # 5. 車両数 : 2(第2積載量上限 300、300)、配送先数 : 2(第2荷物量 500、100、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
    # 0→2→1(第2荷物量 200)→0および0→1(第2荷物量 300)→0となることを確認(第2積載量)
    ('46_1_5', '46_1_5_request.json','3x3_cost.json', True),

    # 6. 車両数 : 2(第2積載量上限 300、300)、配送先数 : 2(第2荷物量 500(集荷)、100(集荷)、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
    # 0→2→1(第2荷物量 200(集荷))→0および0→1(第2荷物量 300(集荷))→0となることを確認(第2積載量、集荷)
    ('46_1_6', '46_1_6_request.json','3x3_cost.json', True),

    # 7. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(荷物量 500、100、第2荷物量 100、500、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 50、第2荷物量 250)→1(荷物量 250、第2荷物量 50)→0および0→1(荷物量 250、第2荷物量 50)→2(荷物量 50、第2荷物量 250)→0となることを確認
    ('46_1_7', '46_1_7_request.json','3x3_cost.json', True),

    # 8. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(荷物量 500(集荷)、100(集荷)、第2荷物量 100(集荷)、500(集荷)、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 50(集荷)、第2荷物量 250(集荷))→1(荷物量 250(集荷)、第2荷物量 50(集荷))→0および0→1(荷物量 250(集荷)、第2荷物量 50(集荷))→2(荷物量 50(集荷)、第2荷物量 250(集荷))→0となることを確認
    ('46_1_8', '46_1_8_request.json','3x3_cost.json', True),

    # 9. 車両数 : 2(積載量上限 10、300、第2積載量上限 500、300)、配送先数 : 3(荷物量 100、100、100、第2荷物量 200、200、200、分割単位 0、0、0)、初期解 0→1→2→0および0→3→0とした場合に
    # 0→1(荷物量 70、第2荷物量 140)→2(荷物量 80、第2荷物量 160)→0および0→1(荷物量 30、第2荷物量 60)→3→2(荷物量 20、第2荷物量 40)→0となることを確認
    ('46_1_9', '46_1_9_request.json','4x4_cost.json', True),

    # 10. 車両数 : 2(積載量上限 10、300、第2積載量上限 500、300)、配送先数 : 3(荷物量 100(集荷)、100(集荷)、100(集荷)、第2荷物量 200(集荷)、200(集荷)、200(集荷)、分割単位 0、0、0)、初期解 0→1→2→0および0→3→0とした場合に
    # 0→1(荷物量 70(集荷)、第2荷物量 140(集荷))→2(荷物量 80(集荷)、第2荷物量 160(集荷))→0および0→2(荷物量 20(集荷)、第2荷物量 40(集荷))+3→1(荷物量 30(集荷)、第2荷物量 60(集荷))→0となることを確認
    ('46_1_10', '46_1_10_request.json','4x4_cost.json', True),

    # 11. 車両数 : 2(積載量上限 150、300、第2積載量上限 500、300)、配送先数 : 3(荷物量 100、100、100、第2荷物量 200、200、200、分割単位 0、0、0)、初期解 0→1→2→0および0→3→0とした場合に
    # 0→1(荷物量 50、第2荷物量 100)→2→0および0→1(荷物量 50、第2荷物量 100)→3→0となることを確認
    ('46_1_11', '46_1_11_request.json','4x4_cost.json', True),

    # 12. 車両数 : 2(積載量上限 150、300、第2積載量上限 500、300)、配送先数 : 3(荷物量 100(集荷)、100(集荷)、100(集荷)、第2荷物量 200(集荷)、200(集荷)、200(集荷)、分割単位 0、0、0)、初期解 0→1→2→0および0→3→0とした場合に
    # 0→1(荷物量 50(集荷)、第2荷物量 100(集荷))→2→0および0→1(荷物量 50(集荷)、第2荷物量 100(集荷))→3→0となることを確認
    ('46_1_12', '46_1_12_request.json','4x4_cost.json', True),

    # 13. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(荷物量 200、200、200、分割単位 0、0、0、
    # 配送時間枠 2000/1/1 9:00:00～2000/1/1 20:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00)、初期解 0→1→2→0および0→3→0とした場合に
    # 0→1→2(荷物量 100)→0および0→2(荷物量 100)→3→0となることを確認(荷量が同じ場合、受け入れ時間が長い荷物を分割)
    ('46_1_13', '46_1_13_request.json','4x4_cost.json', True),

    # 14. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(荷物量 200、200、200、分割単位 0、0、0、
    # 荷作業時間 2、1、2)、初期解 0→1→2→0および0→3→0とした場合に
    # 0→1→2(荷物量 100)→0および0→2(荷物量 100)→3→0となることを確認(受け入れ時間も同じ場合、荷作業時間が短い荷物を分割)
    ('46_1_14', '46_1_14_request.json','4x4_cost.json', True),

    # 15. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(荷物量 200、200、200、分割単位 0、0、0)、初期解 0→2→1→0および0→3→0とした場合に
    # 0→2→1(荷物量 100)→0および0→1(荷物量 100)→3→0となることを確認(荷作業時間も同じ場合、CUST NO>が若い荷物を分割)
    ('46_1_15', '46_1_15_request.json','4x4_cost.json', True),

    # 16. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(荷物量 200、200、200、分割単位 1、0、0)、初期解 0→1→2→0および0→3→0とした場合に
    # 0→1→2(荷物量 100)→0および0→2(荷物量 100)→3→0となることを確認(分割可能な荷物を分割)
    ('46_1_16', '46_1_16_request.json','4x4_cost.json', True),

    # 17. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(荷物量 500、100、第2荷物量 100、500、分割単位 10、10)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 50、第2荷物量 250)→1(荷物量 250、第2荷物量 50)→0および0→1(荷物量 250、第2荷物量 50)→2(荷物量 50、第2荷物量 250)→0となることを確認(分割単位)
    ('46_1_17', '46_1_17_request.json','3x3_cost.json', True),

    # 18. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(荷物量 500(集荷)、100(集荷)、第2荷物量 100(集荷)、500(集荷)、分割単位 10、10)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 50(集荷)、第2荷物量 250(集荷))→1(荷物量 250(集荷)、第2荷物量 50(集荷))→0および0→1(荷物量 250(集荷)、第2荷物量 50(集荷))→2(荷物量 50(集荷)、第2荷物量 250(集荷))→0となることを確認(分割単位、集荷)
    ('46_1_18', '46_1_18_request.json','3x3_cost.json', True),

    # 19. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(荷物量 500、100、第2荷物量 100、500、分割単位 3、3)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 33.3、第2荷物量 166.7)→1(荷物量 333.3、第2荷物量 66.7)→0および0→1(荷物量 166.7、第2荷物量 33.3)→2(荷物量 66.7、第2荷物量 333.3)→0となることを確認(分割単位)
    ('46_1_19', '46_1_19_request.json','3x3_cost.json', True),

    # 20. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(荷物量 500(集荷)、100(集荷)、第2荷物量 100(集荷)、500(集荷)、分割単位 3、3)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 33(集荷).3、第2荷物量 166(集荷).7)→1(荷物量 333(集荷).3、第2荷物量 66(集荷).7)→0および0→1(荷物量 166(集荷).7、第2荷物量 33(集荷).3)→2(荷物量 66(集荷).7、第2荷物量 333(集荷).3)→0となることを確認(分割単位、集荷)
    ('46_1_20', '46_1_20_request.json','3x3_cost.json', True),

    # 21. 車両数 : 2(積載量上限 300、300)、配送先数 : 2(荷物量 500、300、分割単位 3、0)、初期解 0→1→0および0→2→0とした場合に
    # 初期解のままとなることを確認
    ('46_1_21', '46_1_21_request.json','3x3_cost.json', True),

    # 22. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(荷物量 300(集荷)、100、200、分割単位 0、0、0、2→1および3→1および2→3および3→2は通行不可)、初期解 0→1→2→0および0→3→0とした場合に
    # 0→1(荷物量 200(集荷))→2→0および0→1(荷物量 100(集荷))→3→0となることを確認
    ('46_1_22', '46_1_22_request.json','4x4_cost_46_1_22.json', True),

    # 23. 車両数 : 3(積載量上限 300、100、500)、配送先数 : 3(荷物量 200、200、200、分割単位 0、0、0)、初期解 0→1→2→0および0→3→0および0→4→0、台数削減モードとした場合に
    # 0→2(荷物量 100)→0(2台目)および0→2(荷物量 100)→1→3→0(3台目)となることを確認(台数削減)
    ('46_1_23', '46_1_23_request.json','4x4_cost.json', True),

    # 24. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300、訪問数上限 2、2)、配送先数 : 2(荷物量 500、100、第2荷物量 100、500、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 50、第2荷物量 250)→1(荷物量 250、第2荷物量 50)→0および0→1(荷物量 250、第2荷物量 50)→2(荷物量 50、第2荷物量 250)→0となることを確認(訪問数上限)
    ('46_1_24', '46_1_24_request.json','3x3_cost.json', True),

    # 25. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(荷物量 300、200、300、分割単位 3、0、0)、初期解 0→1→2→0および0→3→0、avevisits_ape=0とした場合に
    # 0→1(荷物量 100)→2→0および0→1(荷物量 100)→3→0となることを確認(件数平準化)
    ('46_1_25', '46_1_25_request.json','4x4_cost.json', True),

    # 26. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(荷物量 400、400、100、分割単位 0、0、0)、初期解 0→1→0→2→0および0→3→0、回転モードとした場合に
    # 0→1(荷物量 300)→0→2(荷物量 300)→0および0→2(荷物量 100)→1(荷物量 100)→3→0となることを確認(回転モード)
    ('46_1_26', '46_1_26_request.json','4x4_cost.json', True),

    # 27. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(荷物量 400(集荷)、400(集荷)、100(集荷)、分割単位 0、0、0)、初期解 0→1→0→2→0および0→3→0、回転モードとした場合に
    # 0→1(荷物量 300(集荷))→0→2(荷物量 300(集荷))→0および0→2(荷物量 100(集荷))→1(荷物量 100(集荷))→3→0となることを確認(回転モード、集荷)
    ('46_1_27', '46_1_27_request.json','4x4_cost.json', True),

    # 28. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(荷物量 500、100、第2荷物量 100、500、分割単位 0、0、荷作業時間 180、0、
    # 配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 50、第2荷物量 250)→1(荷物量 250、第2荷物量 50)→0および0→1(荷物量 250、第2荷物量 50)→2(荷物量 50、第2荷物量 250)→0となることを確認(荷作業時間)
    ('46_1_28', '46_1_28_request.json','3x3_cost.json', True),

    # 29. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(荷物量 500、100、第2荷物量 100、500、分割単位 0、0、拠点作業時間 180、0、荷作業時間 0、0、
    # 配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00)、初期解 0→1→0および0→2→0とした場合に
    # 0→2(荷物量 50、第2荷物量 250)→1(荷物量 250、第2荷物量 50)→0および0→1(荷物量 250、第2荷物量 50)→2(荷物量 50、第2荷物量 250)→0となることを確認(拠点作業時間)
    ('46_1_29', '46_1_29_request.json','3x3_cost.json', True),

    # 30. 車両数 : 2(積載量上限 300、300、車両営業時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 12:00:00～2000/1/1 17:00:00)、
    # 配送先数 : 2(荷物量 500、100、分割単位 0、0、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/1 12:00:00～2000/1/1 17:00:00)、初期解 0→1→0および0→2→0とした場合に
    # 0→2→1(荷物量 200)→0および0→10001(荷物量 300)→0となることを確認(飛び地)
    ('46_1_30', '46_1_30_request.json','3x3_cost.json', True),

    # 31. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300、車両営業時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 12:00:00～2000/1/1 17:00:00)、
    # 配送先数 : 2(荷物量 500、100、第2荷物量 100、500、分割単位 0、0、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/1 12:00:00～2000/1/1 17:00:00)、初期解 0→1→0および0→2→0、時間最適化とした場合に
    # 0→2(荷物量 50、第2荷物量 250)→1(荷物量 250、第2荷物量 50)→0および0→10001(荷物量 250、第2荷物量 50)→2(荷物量 50、第2荷物量 250)→0となることを確認(飛び地)
    ('46_1_31', '46_1_31_request.json','3x3_cost.json', True),

    # 36. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 3(CUSTNO=1、1、2、荷物量 200、300、100、第2荷物量 40、60、500、分割単位 4、6、10)、初期解 0→1→0および0→1→2→0とした場合に
    # 0→2(荷物量 50、第2荷物量 250)→1(荷物量 250、第2荷物量 50)→0および0→1(荷物量 250、第2荷物量 50)→2(荷物量 50、第2荷物量 250)→0となることを確認(荷物分割初期解)
    ('46_1_36', '46_1_36_request.json','3x3_cost.json', True),

    # 39. 車両数 : 1(積載量上限 300、第2積載量上限 0)、配送先数 : 1(CUSTNO=1、荷物量 400、第2荷物量 0、分割単位 0、初期解生成とした場合に
    # 0→1(荷物量 300、第2荷物量 0)→0→1(荷物量 100、第2荷物量 0)→0となることを確認
    ('46_1_39', '46_1_39_request.json','2x2_cost.json', True),

    # 40. 車両数 : 2(積載量上限 300、300、第2積載量上限 0、0、回転数上限 0、1)、配送先数 : 2(CUSTNO=1、2、荷物量 200、400、第2荷物量 0、0、分割単位 0、0、SPOTID 1、1)、初期解生成とした場合に
    # 0→2(荷物量 100、第2荷物量 0)→1→0および0→2(荷物量 300、第2荷物量 0)→0となることを確認
    ('46_1_40', '46_1_40_request.json','2x2_cost.json', True),

    # 41. 車両数 : 2(積載量上限 300、300、第2積載量上限 0、0、回転数上限 0、1)、配送先数 : 2(CUSTNO=1、2、荷物量 300、400、第2荷物量 0、0、分割単位 0、0、SPOTID 1、1)、SPOTID 1、1、初期解 0→1→0および0→2→0とした場合に
    # 0→1→0→2(荷物量 100、第2荷物量 0)→0および0→2(荷物量 300、第2荷物量 0)→0となることを確認
    ('46_1_41', '46_1_41_request.json','2x2_cost.json', True),

]
