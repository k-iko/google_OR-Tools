# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト13(最終訪問先指定)
#-----------------------------------------------------------------
#指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
	# ■異常系
	# 1. 車両数 : 1、配送先数 : 1(最終訪問先 custnoおよびspotid="2"、1→2は通行不可、初期解0→1→0)とした場合に
	# "failed to read initial solution due to cost of -1"のエラーメッセージを出力して終了することを確認
	('13_1_1', '13_1_1_request.json','3x3_cost_modify1.json', True),

	# 2. 車両数 : 1、配送先数 : 1(最終訪問先 custnoおよびspotid="2"、最終訪問先に1番目の車両立寄不可、初期解0→1→0)とした場合に
	# "end spot (aka enddepot) has unvisitable vehicles (aka reje_ve)"のエラーメッセージを出力して終了することを確認
	('13_1_2', '13_1_2_request.json','3x3_cost.json', True),

	# ■正常系
	# 3. 車両数 : 1、配送先数 : 1(最終訪問先 custnoおよびspotid="2"、初期解 0→1→0)とした場合に
	# 0→1→2となることを確認(初期解より最終訪問先指定が優先されることを確認)
	('13_1_3', '13_1_3_request.json','3x3_cost.json', True),

	# 4. 車両数 : 1、配送先数 : 2(最終訪問先 custno="0"およびspotid="1"、初期解 0→1→2→0)とした場合に
	# 0→1→2→0となることを確認
	('13_1_4', '13_1_4_request.json','3x3_cost.json', True),

	# 5. 車両数 : 1、配送先数 : 2(最終訪問先 1番目の配送先と同じ(オブジェクトは異なる)、初期解 0→1→2→0)とした場合に
	# 0→1→2→1となることを確認
	# 上記3つ目のcustno=1と4つ目のcustno=1のオブジェクトが異なることは、4つ目のカスタマークラスに対しx=y=0とし、Vehicleクラスの出力結果から区別する
	('13_1_5', '13_1_5_request.json','3x3_cost.json', True),

	# 6. 車両数 : 1、配送先数 : 2(最終訪問先 custno="1"およびspotid="2"、初期解 0→2→1→0)とした場合に
	# 0→2→1→1となることを確認
	('13_1_6', '13_1_6_request.json','3x3_cost.json', True),

	# 7. 車両数 : 1、配送先数 : 2(最終訪問先 custno="3"およびspotid="0"、距離 1→0で100、初期解 0→1→2→0)とした場合に
	# 0→1→2→3となることを確認
	('13_1_7', '13_1_7_request.json','3x3_cost_modify2.json', True),

	# 8. 車両数 : 2、配送先数 : 2(最終訪問先 custno="3"およびspotid="3"、custno="4"およびspotid="4"、距離 1→4および2→3で100、初期解 0→1→0および0→2→0)とした場合に
	# 0→1→3および0→2→4となることを確認
	('13_1_8', '13_1_8_request.json','5x5_cost_modify2.json', True),

	# 9. 車両数 : 2、配送先数 : 2(最終訪問先 custno="3"およびspotid="3"および配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、custno="4"およびspotid="4"、移動時間 0→1で2、初期解 0→1→0および0→2→0)、巡回モードとした場合に
	# 0→2→3および0→1→4となることを確認(最終訪問先の配送時間枠指定)
	('13_1_9', '13_1_9_request.json','5x5_cost_13_1_9.json', True),

	# 10. 車両数 : 1、配送先数 : 1(最終訪問先 custnoおよびspotid="2"、初期解 0→1→2)とした場合に
	# 0→1→2となることを確認(初期解の最後が0でなくても動作することを確認)
	('13_1_10', '13_1_10_request.json','3x3_cost.json', True),
]

