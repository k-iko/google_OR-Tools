# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト49(未割当荷物)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1、荷作業時間は1(充電スポットは0)、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
	# ■異常系
	# 1. 車両数 : 1、配送先数 : 1(割当済荷物の変更条件 addition)とした場合に
	# "change mode of initial customers (aka init_changecust) set to other than "free" or "additive""のエラーメッセージを出力して終了することを確認
	('49_1_1', '49_1_1_request.json','2x2_cost.json', True),

	# 2. 車両数 : 1、配送先数 : 1(割当済荷物の変更条件 additive)、evplanとした場合に
	# "both divided package and evplan (aka evplan) set"のエラーメッセージを出力して終了することを確認
	('49_1_2', '49_1_2_request.json','2x2_cost.json', True),

	# 15. 車両数 : 3、配送先数 : 3(割当済荷物の変更条件 additive)、初期解 空、0→1→2→0、空とした場合に
	# "failed to create initial solution due to cost of -1 or unvisitable vehicles or max visits or fixed vehicles"のエラーメッセージを出力して終了することを確認
	('49_1_15', '49_1_15_request.json','4x4_cost.json', True),

	# 30. 車両数 : 3、配送先数 : 3(割当済荷物の変更条件 free)、初期解 空、0→1→0、0→0→0とした場合に
	# "initial solution (aka iniroutes) includes plan without customers"のエラーメッセージを出力して終了することを確認
	('49_1_30', '49_1_30_request.json','4x4_cost.json', True),

	# ■正常系
	# 3. 車両数 : 1、配送先数 : 3(割当済荷物の変更条件 free、配送時間枠 2000/1/1 11:00:00～2000/1/1 13:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 10:00:00～2000/1/1 12:00:00)、初期解 0→1→2→0とした場合に
	# 0→2→3→1→0となることを確認(前後関係変更可)
	('49_1_3', '49_1_3_request.json','4x4_cost.json', True),

	# 4. 車両数 : 1、配送先数 : 3(割当済荷物の変更条件 additive、配送時間枠 2000/1/1 11:00:00～2000/1/1 13:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 10:00:00～2000/1/1 12:00:00)、初期解 0→1→2→0とした場合に
	# 0→1→2→3→0となることを確認(前後関係変更不可)
	('49_1_4', '49_1_4_request.json','4x4_cost.json', True),

	# 5. 車両数 : 2(車両営業時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 13:00:00～2000/1/1 17:00:00)、
	# 配送先数 : 3(割当済荷物の変更条件 free、配送時間枠 2000/1/1 13:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 9:00:00～2000/1/1 12:00:00)、初期解 0→1→0および0→2→0とした場合に
	# 0→3→2→0および0→1→0となることを確認(移管可)
	('49_1_5', '49_1_5_request.json','4x4_cost.json', True),

	# 6. 車両数 : 2(車両営業時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 13:00:00～2000/1/1 17:00:00)、
	# 配送先数 : 3(割当済荷物の変更条件 additive、配送時間枠 2000/1/1 13:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 9:00:00～2000/1/1 12:00:00)、初期解 0→1→0および0→2→0とした場合に
	# 0→3→1→0および0→2→0となることを確認(移管不可)
	('49_1_6', '49_1_6_request.json','4x4_cost.json', True),

	# 7. 車両数 : 1、配送先数 : 2(割当済荷物の変更条件 free、配送時間枠 2000/1/1 9:00:00～2000/1/1 9:30:00、2000/1/1 9:00:00～2000/1/1 17:00:00、1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/1 10:00:00～2000/1/1 11:00:00)、初期解 0→1→0とした場合に
	# 0→10001→2→0となることを確認(選択的配送の変更可)
	('49_1_7', '49_1_7_request.json','3x3_cost.json', True),

	# 8. 車両数 : 1、配送先数 : 2(割当済荷物の変更条件 additive、配送時間枠 2000/1/1 9:00:00～2000/1/1 9:30:00、2000/1/1 9:00:00～2000/1/1 17:00:00、1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/1 10:00:00～2000/1/1 11:00:00)、初期解 0→1→0とした場合に
	# 0→1→2→0となることを確認(選択的配送の変更不可)
	('49_1_8', '49_1_8_request.json','3x3_cost.json', True),

	# 9. 車両数 : 1、配送先数 : 3(割当済荷物の変更条件 free)、初期解 0→1→0→2→0、回転モードとした場合に
	# 0→3→1→2→0となることを確認(便番号変更可)
	('49_1_9', '49_1_9_request.json','4x4_cost.json', True),

	# 10. 車両数 : 1、配送先数 : 3(割当済荷物の変更条件 additive)、初期解 0→1→0→2→0、回転モードとした場合に
	# 0→3→1→0→2→0となることを確認(便番号変更不可)
	('49_1_10', '49_1_10_request.json','4x4_cost.json', True),

	# 11. 車両数 : 3、配送先数 : 3(割当済荷物の変更条件 free)、初期解 空、0→1→0、空とした場合に
	# 0→3→0、0→1→0、0→2→0となることを確認(初期解空車両)
	('49_1_11', '49_1_11_request.json','4x4_cost.json', True),

	# 12. 車両数 : 3、配送先数 : 3(割当済荷物の変更条件 free)、初期解 空、0→1→2→0、空とした場合に
	# 0→3→0、0→1→0、0→2→0となることを確認(初期解空車両)
	('49_1_12', '49_1_12_request.json','4x4_cost.json', True),

	# 13. 車両数 : 3、配送先数 : 3(割当済荷物の変更条件 free)、初期解 空、空、空とした場合に
	# 0→3→0、0→1→0、0→2→0となることを確認(初期解空車両)
	('49_1_13', '49_1_13_request.json','4x4_cost.json', True),

	# 14. 車両数 : 3、配送先数 : 3(割当済荷物の変更条件 free)、初期解 なしとした場合に
	# 0→3→0、0→1→0、0→2→0となることを確認(初期解読み込み(初期解なし))
	('49_1_14', '49_1_14_request.json','4x4_cost.json', True),

	# 16. 車両数 : 1、配送先数 : 4(割当済荷物の変更条件 free、SPOTID 1、1、2、2)、初期解 0→1→2→0、bulk-shippingモードとした場合に
	# 0→3→4→1→2→0(1と2、3と4はtie-up)となることを確認(大量輸送モード)
	('49_1_16', '49_1_16_request.json','3x3_cost.json', True),

	# 17. 車両数 : 1、配送先数 : 4(割当済荷物の変更条件 additive、SPOTID 1、1、2、2)、初期解 0→1→2→0、bulk-shippingモードとした場合に
	# 0→3→4→1→2→0(3と4はtie-up)となることを確認(大量輸送モード)
	('49_1_17', '49_1_17_request.json','3x3_cost.json', True),

	# 18. 車両数 : 2、配送先数 : 3(割当済荷物の変更条件 free)、初期解 0→1→0、0→2→0、台数削減モードとした場合に
	# 0→3→1→2→0(2台目)となることを確認(台数削減可)
	('49_1_18', '49_1_18_request.json','4x4_cost.json', True),

	# 19. 車両数 : 2、配送先数 : 3(割当済荷物の変更条件 additive)、初期解 0→1→0、0→2→0、台数削減モードとした場合に
	# 0→3→1→0および0→2→0となることを確認(台数削減不可)
	('49_1_19', '49_1_19_request.json','4x4_cost.json', True),

	# 20. 車両数 : 2、配送先数 : 4(割当済荷物の変更条件 free、SPOTID 1、2、3、3、荷物量 1、1、150、150)、初期解 0→1→2→0、空とした場合に
	# 0→1→2→0および0→3→4→0(直送便)となることを確認(直送便)
	('49_1_20', '49_1_20_request.json','4x4_cost.json', True),

	# 21. 車両数 : 2、配送先数 : 4(割当済荷物の変更条件 free、SPOTID 1、2、3、3、荷物量 1、1、150、150)、初期解 0→1→2→0、空、bulk-shippingモードとした場合に
	# 0→1→2→0および0→3→4→0(直送便、tie-up)となることを確認(直送便)
	('49_1_21', '49_1_21_request.json','4x4_cost.json', True),

	# 22. 車両数 : 3、配送先数 : 6(割当済荷物の変更条件 additive、opskill 1.0、0.8、0.1、drskill 1.0、0.5、1.5、
	# 初期解 0→1→2→3→0および0→4→5→0および0→6→0)とした場合に
	# 初期解のままとなることを確認(additiveの場合スキルシャッフルしない)
	('49_1_22', '49_1_22_request.json','7x7_cost.json', True),

	# 23. 車両数 : 1、配送先数 : 3(割当済荷物の変更条件 additive、荷物量 150、150、150)、初期解 0→1→2→0、回転モードとした場合に
	# 0→1→2→0→3→0となることを確認(回転モード)
	('49_1_23', '49_1_23_request.json','4x4_cost.json', True),

	# 24. 車両数 : 2(積載量上限 300、300)、配送先数 : 2(割当済荷物の変更条件 additive、荷物量 500、100、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
	# 0→1(荷物量 300)→0および0→1(荷物量 200)→2→0となることを確認(分割可)
	('49_1_24', '49_1_24_request.json','3x3_cost.json', True),

	# 25. 車両数 : 2(積載量上限 300、300)、配送先数 : 3(割当済荷物の変更条件 additive、荷物量 400、400、100、分割単位 0、0、0、CUSTNO 1、1、2)、初期解 0→1→0→2→0および0→1→0、回転モードとした場合に
	# 0→1(荷物量 300)→0→1(荷物量 200)→2→0および0→1(荷物量 300)→0となることを確認(分割後は移管、結合可)
	('49_1_25', '49_1_25_request.json','3x3_cost.json', True),

	# 26. 車両数 : 2(積載量上限 300、300、第2積載量上限 300、300)、配送先数 : 2(割当済荷物の変更条件 additive、荷物量 500、100、第2荷物量 100、500、分割単位 0、0)、初期解 0→1→0および0→2→0とした場合に
	# 0→1(荷物量 250、第2荷物量 50)→2(荷物量 50、第2荷物量 250)→0および0→2(荷物量 50、第2荷物量 250)→1(荷物量 250、第2荷物量 50)→0となることを確認(割当済荷物は結合可)
	('49_1_26', '49_1_26_request.json','3x3_cost.json', True),

	# 27. 車両数 : 1(積載量上限 300、300、回転数上限 2)、配送先数 : 3(割当済荷物の変更条件 additive、荷物量 100、400、100、分割単位 0、0、0、CUSTNO 1、1、2)、初期解 0→1→0→2→0、回転モードとした場合に
	# 0→1(荷物量 300)→0→2→1(荷物量 200)→0となることを確認(割当済荷物に未割当荷物を結合可)
	('49_1_27', '49_1_27_request.json','3x3_cost.json', True),

	# 28. 車両数 : 1(積載量上限 300、300、回転数上限 2)、配送先数 : 3(割当済荷物の変更条件 additive、荷物量 100、200、100、分割単位 0、0、0、CUSTNO 1、1、2)、初期解 0→1→0→2→0、回転モードとした場合に
	# 0→1(荷物量 300)→0→2→0となることを確認(未割当荷物は結合消滅可)
	('49_1_28', '49_1_28_request.json','3x3_cost.json', True),

	# 29. 車両数 : 1、配送先数 : 2(割当済荷物の変更条件 additive、配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、初期解 0→1→2→0)、遅延最適化モードとした場合に
	# 初期解のまま(拠点の出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認(遅延最適化)
	('49_1_29', '49_1_29_request.json','3x3_cost.json', True),

	# 31. 車両数 : 3、配送先数 : 3(割当済荷物の変更条件 free)、初期解 空、0→1→0、0→0→0、回転モードとした場合に
	# 0→3→0、0→1→0、0→2→0となることを確認
	('49_1_31', '49_1_31_request.json','4x4_cost.json', True),

	# 32. 車両数 : 3、配送先数 : 6(割当済荷物の変更条件 free、custno=1,2,3,4,5,7、移動時間はa→bはa+b)、avetime_ape=0.5、初期解 0→1→0、0→2→0、0→3→0とした場合に
	# 時間のAPE<=0.5の解が作成されることを確認
	('49_1_32', '49_1_32_request.json','7x7_cost_ttable_add2.json', True),
]

