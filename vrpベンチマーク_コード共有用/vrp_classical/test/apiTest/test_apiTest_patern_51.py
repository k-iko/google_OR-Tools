# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト51-1(未割り当て荷物最適化)
#-----------------------------------------------------------------
# 記載のないものは距離は1000、時間は1で固定、配送時間枠は配送先、車両ともに1000/1/1 0:00:00～3000/1/1 23:59:00で固定、荷作業時間は1で固定
# 配送先は未割り当て荷物可。車両2台の場合は1台目は通常車両、2台目は予約車両。
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00


test_args=[

    # ■異常系
    # 1. 車両数 : 1(1台目は予約車両)、配送先数 : 2、
    # 初期解 0→1→2→0とした場合に
    # "there is no normal vehicle"のエラーメッセージを出力して終了することを確認
    ('51_1_1', '51_1_1_request.json','3x3_cost.json', True),

    # 3. 車両数 : 2、配送先数 : 2(1番目の配送先の飛び地 CUSTNO 10001、未割り当て荷物不可)、
    # 初期解 0→1→2→0、未入力とした場合に
    # "denying unassigned (aka deny_unassigned_flag) of additionalcust must be set to the same of original customer"のエラーメッセージを出力して終了することを確認
    ('51_1_3', '51_1_3_request.json','4x4_cost.json', True),

    # 16. 車両数 : 2、配送先数 : 2(未割り当て荷物 不可、可)、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 1→2、2→1は通行禁止}]、
    # 初期解 0→1→2→0、未入力とした場合に
    #"failed to read initial solution due to cost of -1"のエラーメッセージを出力して終了することを確認
    ('51_1_16', '51_1_16_request.json','3x3_cost_51_1_16.json', True),

    # 17. 車両数 : 2、配送先数 : 2(未割り当て荷物 可、不可)、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 0→2通行禁止}]、
    # 初期解 0→1→0、0→2→0とした場合に
    # "failed to read initial solution due to cost of -1"のエラーメッセージを出力して終了することを確認
    ('51_1_17', '51_1_17_request.json','3x3_cost_51_1_17.json', True),

    # 47. 車両数 : 2、配送先数 : 2(未割り当て荷物 不可、不可)、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 1→2、2→1は通行禁止}]、
    # 初期解生成とした場合に
    # failed to read initial solution due to cost of -1"のエラーメッセージを出力して終了することを確認
    ('51_1_47', '51_1_47_request.json','3x3_cost_51_1_47.json', True),

    # 48. 車両数 : 2、配送先数 : 3(CUSTNO 1、1、2、未割り当て荷物 可、不可、可)、
    # 初期解 0→1→1→2→0、未入力とした場合に
    # "denying unassigned (aka deny_unassigned_flag) of same customer id (aka custno) must be set to same flag"のエラーメッセージを出力して終了することを確認
    ('51_1_48', '51_1_48_request.json','2x2_cost.json', True),


    # ■正常系
    # 4. 車両数 : 2、配送先数 : 2、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 1→2、2→1は通行禁止}]、
    # 初期解 0→1→2→0、未入力とした場合に
    # 0→1→0、0→2→0となることを確認(通行不可)
    ('51_1_4', '51_1_4_request.json','3x3_cost_51_1_4.json', True),

    # 5. 車両数 : 2、配送先数 : 2(立寄り不可 []、[0])、
    # 初期解 0→1→2→0、未入力とした場合に
    # 0→1→0、0→2→0となることを確認(立寄り不可)
    ('51_1_5', '51_1_5_request.json','3x3_cost.json', True),

    # 6. 車両数 : 2(訪問数上限 1、0)、配送先数 : 3、
    # 初期解 0→1→2→3→0、未入力とした場合に
    # 0→1→0、0→3→2→0となることを確認(訪問数上限)
    ('51_1_6', '51_1_6_request.json','4x4_cost.json', True),

    # 7. 車両数 : 2(回転上限 2、0)、配送先数 : 3(荷物量 300、300、300)、
    # 初期解 0→1→0→2→0→3→0、未入力、回転モードとした場合
    # 0→1→0→2→0、0→3→0となることを確認(回転数上限)
    ('51_1_7', '51_1_7_request.json','4x4_cost.json', True),

    # 8. 車両数 : 2、配送先数 : 2、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:00:00～2000/1/1 12:00:00)、0、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 3→1、3→2通行禁止}]、
    # 初期解 0→1→2→b1→0、0→0とした場合に
    # 0→1→b1→0、0→2→0となることを確認(休憩スポット)
    ('51_1_8', '51_1_8_request.json','4x4_cost_51_1_8.json', True),

    # 10. 車両数 : 2、配送先数 : 2、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 0→2通行禁止}]、
    # 初期解 0→1→0、0→2→0とした場合に
    # 0→1→0、未入力となることを確認(除外・通行不可)
    ('51_1_10', '51_1_10_request.json','3x3_cost_51_1_10.json', True),

    # 11. 車両数 : 2、配送先数 : 2(立寄り不可 []、[0,1])、
    # 初期解 0→1→0、0→2→0とした場合に
    # 0→1→0、2は除外荷物となり車両削減となることを確認(除外・立寄り不可)
    ('51_1_11', '51_1_11_request.json','3x3_cost.json', True),

    # 12. 車両数 : 2(訪問数上限 1、1)、配送先数 : 3、
    # 初期解 0→1→2→3→0、未入力とした場合に
    # 0→1→0、0→2→0となることを確認(3は除外される)(除外・訪問数上限)
    ('51_1_12', '51_1_12_request.json','4x4_cost.json', True),

    # 13. 車両数 : 2(回転上限 1、2)、配送先数 : 4(荷物量 300、300、300、300 通行不可 全部0→4,4-0以外)、
    # 初期解 0→1→0、0→2→0→3→0→4→0、回転モードとした場合
    # 0→1→0、0→2→0→3→4→0となることを確認(回転数上限エラーを回避するため、積載量オーバーの解が作られる)(除外・回転数上限)
    ('51_1_13', '51_1_13_request.json','5x5_cost.json', True),

    # 14. 車両数 : 2、配送先数 : 3、
    # 休憩スポット数 : 0、1(休憩期間 2000/1/1 11:00:00～2000/1/1 12:00:00)、
    # 初期解 0→1→0、0→2→3→b1→0とした場合に
    # 0→1→0、0→2→b1→0となることを確認(除外・休憩スポット)
    ('51_1_14', '51_1_14_request.json','5x5_cost.json', True),

    # 18. 車両数 : 2、配送先数 : 5(割当済荷物の変更条件 全てadditive)、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 1→2、2→1は通行禁止、3→2を100}]、
    # 初期解 0→1→2→0、0→3→4→5→0とした場合に
    # 0→1→0、0→3→2→4→5→0となることを確認(additive→free)
    ('51_1_18', '51_1_18_request.json','6x6_cost_51_1_18.json', True),

    # 19. 車両数 : 2、配送先数 : 5(割当済荷物の変更条件 全てfree、立寄り不可 []、[0]、[]、[]、[])、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 1→2は通行禁止、3→2を100}]、
    # 初期解 0→1→2→0、0→3→4→5→0とした場合に
    # 0→2→1→0、0→3→4→5→0となることを確認(free→free→free)
    ('51_1_19', '51_1_19_request.json','6x6_cost_51_1_19.json', True),

    # 20. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 4(割当済荷物の変更条件 additive、additive、additive、free)、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 1→2は通行禁止、0→2、1→4、3→2を10}]、
    # 初期解 0→1→2→0、0→3→0、未入力とした場合に
    # 0→1→4→2→0、0→3→0、から車両となることを確認(additive→free→additive)(addtive順序が守られていること、freeと混在)
    ('51_1_20', '51_1_20_request.json','5x5_cost_51_1_20.json', True),

    # 22. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 3(荷物量 300、1、1、割当済荷物の変更条件 additive、additive、additive、free)、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 0→2は通行禁止、4→2を10}]、
    # 初期解 0→1→0→2→0、0→3→0、未入力、回転モードとした場合に
    # 0→1→0→2→4→0、0→3→0、未入力となることを確認(additive→free→additive)(additive回転数が守られていること、freeと混在)
    ('51_1_22', '51_1_22_request.json','5x5_cost_51_1_22.json', True),

    # 24. 車両数 : 2(台数削減優先度 2、0)、配送先数 : 2、初期解 0→1→0および0→2→0、台数削減モードとした場合に
    # 0→2→1→0、削除車両となることを確認(台数削減)
    ('51_1_24', '51_1_24_request.json','3x3_cost.json', True),

    # 26. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 7(立寄り不可 []、[]、[]、[]、[]、[0,1])、
    # 初期解 0→1→2→3→4→5→0および0→6→7→0および未入力)、avetime_ae=0とした場合に
    # 0→3→4→5→0、0→2→1→6→0、0→7→0となることを確認
    ('51_1_26', '51_1_26_request.json','8x8_cost.json', True),

    # 27. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 7(立寄り不可 []、[]、[]、[]、[]、[0,1])、
    # 初期解 0→1→2→3→4→5→0および0→6→7→0および未入力)、avevisit_ae=0とした場合に
    # 0→3→4→5→0、0→2→1→6→0、0→7→0となることを確認
    ('51_1_27', '51_1_27_request.json','8x8_cost.json', True),

    #28. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 7(立寄り不可 []、[]、[]、[]、[]、[0,1])、
    # 初期解 0→1→2→3→4→5→0および0→6→7→0および未入力)、avedist_ae=0とした場合に
    # 0→3→4→5→0、0→2→1→6→0、0→7→0となることを確認
    ('51_1_28', '51_1_28_request.json','8x8_cost.json', True),

    # 29. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 4(opskill 1.0、1.1、1.2、drskill 10.0、1.0、0.8、立寄り不可 []、[]、[]、[0,1])
    # 車両営業時間枠および配送時間枠はすべて2000/1/1 0:00:00～2000/1/1 23:59:00、初期解 0→1→2→0および0→3→0および0→4→0)とした場合に
    # 0→2→0(drskill=10.0)、0→1→3→0(drskill=1.0)、0→4→0(drskill=0.8)となることを確認(スキルシャッフル)
    ('51_1_29', '51_1_29_request.json','5x5_cost.json', True),

    # 30. 車両数 : 2、配送先数 : 4(配送時間枠 全て2000/1/1 12:00:00～2000/1/1 17:00:00)、初期解 0→1→2→0、0→3→4→0、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻 2000/1/1/10:00:00(遅延処理)、2000/1/1/09:00:00(遅延処理無し))となることを確認(出発遅延)
    ('51_1_30', '51_1_30_request.json','5x5_cost.json', True),

    # 31. 車両数 : 2、配送先数 : 4(配送時間枠 全て2000/1/1 12:00:00～2000/1/1 17:00:00)、初期解 0→1→2→0、0→3→4→0、遅延最適化モードとした場合に
    # 初期解のまま(拠点の出発時刻 2000/1/1/10:00:00(遅延処理)、2000/1/1/09:00:00(遅延処理無し))となることを確認(遅延最適化)
    ('51_1_31', '51_1_31_request.json','5x5_cost.json', True),

    # 32. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、120、50、100、1、立寄り不可 [0]、[0]、[]、[0]、[])、初期解生成モードとした場合に
    # 80、120、100の荷物で1台の車両(直送便)とならないことを確認
    ('51_1_32', '51_1_32_request.json','3x3_cost.json', True),

    # 33. 車両数 : 2、配送先数 : 4(立寄り不可 []、[0]、[0]、[0])、
    # 初期解 0→1→2→0および0→3→4→0、ltime=1、utime=2とした場合に
    # 0→1→0、0→2→3→4→0となることを確認(予約車両はutimeを超えているが無視される)
    ('51_1_33', '51_1_33_request.json','5x5_cost.json', True),

    # 34. 車両数 : 2、配送先数 : 2(SPOTID 1、1、未割り当て 不可、可 )、
    # 初期解生成モード、bulk-shippingモードとした場合に
    # 0→1→2→0または0→2→1→0(1と2はtie-upしないこと)となることを確認
    ('51_1_34', '51_1_34_request.json','2x2_cost.json', True),

    # 35. 車両数 : 2、配送先数 : 2(SPOTID 1、1、未割り当て 不可、可 )、
    # 初期解 0→1→2→0、bulk-shippingモードとした場合に
    # 0→1→2→0または0→2→1→0(1と2はtie-upしないこと)となることを確認
    ('51_1_35', '51_1_35_request.json','2x2_cost.json', True),

    # 36. 車両数 : 2、配送先数 : 3(距離 3→1は100)、未割り当て荷物最適化ペナルティ重み : 0、
    # 初期解 0→1→2→0および0→3→0とした場合に
    # 0→2→0および0→3→1→0となることを確認(未割り当て荷物最適化ペナルティは無視)
    ('51_1_36', '51_1_36_request.json','4x4_cost_51_1_36.json', True),

    # 37. 車両数 : 2、配送先数 : 3(SPOTID 1、2、1、立寄り不可 []、[0]、[])、
    # 初期解 0→1→2→3→0、bulk-shippingモードとした場合に
    # 0→1→3→0、0→2→0(1と3はtie-upする)となることを確認
    ('51_1_37', '51_1_37_request.json','3x3_cost.json', True),

    # 38. 車両数 : 3(通常車両、予約車両、予約車両)、配送先数 : 3(立寄り不可 []、[0,1]、[0])、
    # 初期解 0→1→2→0、未入力とした場合に、
    # 0→1→0、0→3→0、0→2→0となることを確認(車両立寄制限)
    ('51_1_38', '51_1_38_request.json','4x4_cost.json', True),

    # 41. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 6(SPOTID 1、1、1、2、3、3未割り当て可能、5はfree、それ以外はadditive)、
    # management_dtable": [{"vtype": "common","start_time": 0.0 : 全部 1000.0},{"vtype": "time common","start_time": 9.0 : 0-1 通行止め}]、
    # 初期解 0→4→0、0→1→2→3→0、0→6→0とした場合に
    # 0→4→1→3→2→0、0→5→0、0→6→0(1,2,3はtie-upしない)となることを確認
    ('51_1_41', '51_1_41_request.json','4x4_cost_51_1_41.json', True),

    # 42. 車両数 : 2(電力容量 5、0、初期電力 5、0)、充電スポット数 : 1、配送先数 : 4(消費電力はすべて3)、
    # 初期解 0→1→2→3→4→0、未入力、evplan=Trueとした場合に
    # 0→e0→1→2→0(e0で3充電)、0→3→4→0となることを確認(予約車両は充電関係なし)
    ('51_1_42', '51_1_42_request.json','6x6_cost_51_1_42.json', True),

    # 43. 車両数 : 2、配送先数 : 2(荷物量 500、100、立寄り不可 [0]、[])、回転モード
    # 初期解 0→1→2→0、未入力とした場合に
    # 0→2→0、0→1→0→1→0となることを確認(荷物自動分割)
    ('51_1_43', '51_1_43_request.json','3x3_cost.json', True),

    # 44. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 7(立寄り不可 []、[]、[]、[]、[]、[0,1])、
    # 初期解 0→1→2→3→4→5→0および0→6→7→0および未入力)、avetime_ape=0とした場合に
    # 0→3→4→5→0、0→2→1→6→0、0→7→0となることを確認
    ('51_1_44', '51_1_44_request.json','8x8_cost.json', True),

    # 45. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 7(立寄り不可 []、[]、[]、[]、[]、[0,1])、
    # 初期解 0→1→2→3→4→5→0および0→6→7→0および未入力)、avevisit_ape=0とした場合に
    # 0→3→4→5→0、0→2→1→6→0、0→7→0となることを確認
    ('51_1_45', '51_1_45_request.json','8x8_cost.json', True),

    #46. 車両数 : 3(通常車両、通常車両、予約車両)、配送先数 : 7(立寄り不可 []、[]、[]、[]、[]、[0,1])、
    # 初期解 0→1→2→3→4→5→0および0→6→7→0および未入力)、avedist_ape=0とした場合に
    # 0→3→4→5→0、0→2→1→6→0、0→7→0となることを確認
    ('51_1_46', '51_1_46_request.json','8x8_cost.json', True),

]
