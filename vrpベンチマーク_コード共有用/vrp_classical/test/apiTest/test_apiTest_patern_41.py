# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト1-1(配送時間枠指定)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1、電力は3で固定、電力容量は10、初期電力量は10、電力マージンは1、充電レートは1e12、荷作業時間は1(充電スポットは0)、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00
test_args=[
	#■異常系
	# 1. 車両数 : 1、配送先数 : 1、時間ペナルティ重み : -1とした場合に
	# "weight of time penalty (aka timePenaltyWeight) set to less than 0.0"のエラーメッセージを出力して終了することを確認
	('41_1_1', '41_1_1_request.json','2x2_cost.json', True),

	# 2. 車両数 : 1、配送先数 : 1、積載量ペナルティ重み : -1とした場合に
	# "weight of load penalty (aka loadPenaltyWeight) set to less than 0.0"のエラーメッセージを出力して終了することを確認
	('41_1_2', '41_1_2_request.json','2x2_cost.json', True),

	# 3. 車両数 : 1、配送先数 : 1、第2積載量ペナルティ重み : -1とした場合に
	# "weight of load2 penalty (aka load2PenaltyWeight) set to less than 0.0"のエラーメッセージを出力して終了することを確認
	('41_1_3', '41_1_3_request.json','2x2_cost.json', True),

	# 4. 車両数 : 1、配送先数 : 1、時間ばらつきペナルティ重み : -1とした場合に
	# "weight of time leveling penalty (aka timeLevelingPenaltyWeight) set to less than 0.0"のエラーメッセージを出力して終了することを確認
	('41_1_4', '41_1_4_request.json','2x2_cost.json', True),

	# 5. 車両数 : 1、配送先数 : 1、件数ばらつきペナルティ重み : -1とした場合に
	# "weight of visits leveling penalty (aka visitsLevelingPenaltyWeight) set to less than 0.0"のエラーメッセージを出力して終了することを確認
	('41_1_5', '41_1_5_request.json','2x2_cost.json', True),

	# 26. 車両数 : 1、配送先数 : 1、時間ペナルティ重み : 1e10とした場合に
	# "weight of time penalty (aka timePenaltyWeight) set to more than 1000000000"のエラーメッセージを出力して終了することを確認
	('41_1_26', '41_1_26_request.json','2x2_cost.json', True),

	# 27. 車両数 : 1、配送先数 : 1、積載量ペナルティ重み : 1e10とした場合に
	# "weight of load penalty (aka loadPenaltyWeight) set to more than 1000000000"のエラーメッセージを出力して終了することを確認
	('41_1_27', '41_1_27_request.json','2x2_cost.json', True),

	# 28. 車両数 : 1、配送先数 : 1、第2積載量ペナルティ重み : 1e10とした場合に
	# "weight of load2 penalty (aka load2PenaltyWeight) set to more than 1000000000"のエラーメッセージを出力して終了することを確認
	('41_1_28', '41_1_28_request.json','2x2_cost.json', True),

	# 29. 車両数 : 1、配送先数 : 1、時間ばらつきペナルティ重み : 1e10とした場合に
	# "weight of time leveling penalty (aka timeLevelingPenaltyWeight) set to more than 1000000000"のエラーメッセージを出力して終了することを確認
	('41_1_29', '41_1_29_request.json','2x2_cost.json', True),

	# 30. 車両数 : 1、配送先数 : 1、件数ばらつきペナルティ重み : 1e10とした場合に
	# "weight of visits leveling penalty (aka visitsLevelingPenaltyWeight) set to more than 1000000000"のエラーメッセージを出力して終了することを確認
	('41_1_30', '41_1_30_request.json','2x2_cost.json', True),

	# ■正常系
	# 6. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、距離 2→1は100)、時間ペナルティ重み : 0、初期解 0→1→2→0とした場合に
	# 0→2→1→0となることを確認(時間ペナルティは無視)
	('41_1_6', '41_1_6_request.json','3x3_cost_41_1_6.json', True),

	# 7. 車両数 : 2、配送先数 : 3(荷物量 200、100、200、距離 3→1は100)、積載量ペナルティ重み : 0、初期解 0→1→2→0および0→3→0とした場合に
	# 0→2→0および0→3→1→0となることを確認(積載量ペナルティは無視)
	('41_1_7', '41_1_7_request.json','4x4_cost_41_1_7.json', True),

	# 8. 車両数 : 2、配送先数 : 3(第2荷物量 200、100、200、距離 3→1は100)、第2積載量ペナルティ重み : 0、初期解 0→1→2→0および0→3→0とした場合に
	# 0→2→0および0→3→1→0となることを確認(第2積載量ペナルティは無視)
	('41_1_8', '41_1_8_request.json','4x4_cost_41_1_8.json', True),

	# 9. 車両数 : 2、配送先数 : 3(距離 3→1は100、移動時間 0→3は2)、avetime_ape=0.1、時間ばらつきペナルティ重み : 0、初期解 0→1→2→0および0→3→0とした場合に
	# 0→2→0および0→3→1→0となることを確認(時間ばらつきペナルティは無視)
	('41_1_9', '41_1_9_request.json','4x4_cost_41_1_9.json', True),

	# 10. 車両数 : 2、配送先数 : 4(距離 2→*および*→2(*は0以外)は10000)、avevisits_ape=0.1、件数ばらつきペナルティ重み : 0、初期解 0→1→2→0および0→3→4→0とした場合に
	# 0→2→0および0→1→3→4→0となることを確認(件数ばらつきペナルティは無視)
	('41_1_10', '41_1_10_request.json','5x5_cost_41_1_10.json', True),

	# 11. 車両数 : 2(積載量上限 100、300、第2積載量上限 100、400)、配送先数 : 2(荷物量 300、100、第2荷物量 100、400)、第2積載量ペナルティ重み : 500000000、初期解 0→1→0および0→2→0とした場合に
	# 0→2→0および0→1→0となることを確認(第2積載量ペナルティより第1積載量ペナルティを優先)
	('41_1_11', '41_1_11_request.json','3x3_cost.json', True),

	# 12. 車両数 : 2(積載量上限 100、300、第2積載量上限 100、400)、配送先数 : 2(荷物量 300、100、第2荷物量 100、400)、第2積載量ペナルティ重み : 800000000、初期解 0→1→0および0→2→0とした場合に
	# 初期解のままとなることを確認(第1積載量ペナルティより第2積載量ペナルティを優先)
	('41_1_12', '41_1_12_request.json','3x3_cost.json', True),

	# 13. 車両数 : 2、配送先数 : 2(2台目の車両営業時間 2000/1/1 6:00:00～2000/1/1 7:00:00、各配送先の荷物量 150、151、初期解 0→1→0および0→2→0)、積載量ペナルティ重み : 0、台数削減モードとした場合に
	# 車両が1台(0→2→1→0、1台目)となることを確認(積載量違反となる場合でも削減されることを確認)
	('41_1_13', '41_1_13_request.json','3x3_cost.json', True),

	# 14. 車両数 : 3、配送先数 : 6(opskill 1.0、0.8、0.1、drskill 1.0、1.0、1.0、初期解以外の車両は立寄不可、6つ目の配送先の受入時間 2000/1/1 16:05:00～2000/1/1 17:00:00、
	# 初期解 0→1→2→3→0および0→4→5→0および0→6→0)、時間ペナルティ重み : 0とした場合に
	# 0→6→0(opskill=1.0)、0→4→5→0(opskill=0.8)、0→1→2→3→0(opskill=0.1)となることを確認(opskillで最適化、配送時間枠違反は無視)
	('41_1_14', '41_1_14_request.json','7x7_cost.json', True),

	# 15. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 9:30:00、2000/1/1 13:00:00～2000/1/1 14:00:00、初期解 0→1→2→0)、出発遅延モード、時間ペナルティ重み : 0とした場合に
	# 初期解のまま(拠点の出発時刻は2000/1/1/10:59:00(出発遅延))となることを確認(遅延対象より前で遅刻していても遅延する)
	('41_1_15', '41_1_15_request.json','3x3_cost.json', True),

	# 16. 車両数 : 1(初期電力 5)、充電スポット数 : 1、配送先数 : 2(消費電力はすべて3、配送時間枠 2000/1/1 8:00:00～2000/1/1 9:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、初期解 0→1→2→0)、evplan=True、時間ペナルティ重み : 0とした場合に
	# 0→e0→1→2→0となることを確認(配送時間枠違反でも充電する)
	('41_1_16', '41_1_16_request.json','4x4_cost_41_1_16.json', True),

	# 17. 車両数 : 2(積載量上限 100、400、第2積載量上限 100、300)、配送先数 : 2(荷物量 100、400、第2荷物量 300、100)、積載量ペナルティ重み : 500000000、初期解 0→1→0および0→2→0とした場合に
	# 0→2→0および0→1→0となることを確認(第1積載量ペナルティより第2積載量ペナルティを優先)
	('41_1_17', '41_1_17_request.json','3x3_cost.json', True),

	# 18. 車両数 : 2(積載量上限 100、400、第2積載量上限 100、300)、配送先数 : 2(荷物量 100、400、第2荷物量 300、100)、積載量ペナルティ重み : 800000000、初期解 0→1→0および0→2→0とした場合に
	# 初期解のままとなることを確認(第2積載量ペナルティより第1積載量ペナルティを優先)
	('41_1_18', '41_1_18_request.json','3x3_cost.json', True),

	# 19. 車両数 : 2、配送先数 : 3(荷物量 150、150.5、150、配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、時間ペナルティ重み : 300000000、初期解 0→1→2→0および0→3→0とした場合に
	# 0→1→3→0および0→2→0となることを確認(時間ペナルティより積載量ペナルティを優先)
	('41_1_19', '41_1_19_request.json','4x4_cost.json', True),

	# 20. 車両数 : 2、配送先数 : 3(荷物量 150、150.5、150、配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、時間ペナルティ重み : 800000000、初期解 0→1→2→0および0→3→0とした場合に
	#初期解のままとなることを確認(積載量ペナルティより時間ペナルティを優先)
	('41_1_20', '41_1_20_request.json','4x4_cost.json', True),

	# 21. 車両数 : 2、配送先数 : 3(荷物量 150、150.5、150、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 11:00:00～2000/1/1 12:00:00)、avetime_ae=0、時間ばらつきペナルティ重み : 300000000、初期解 0→1→2→0および0→3→0とした場合に
	# 0→1→3→0および0→2→0となることを確認(時間ばらつきペナルティより積載量ペナルティを優先)
	('41_1_21', '41_1_21_request.json','4x4_cost.json', True),

	# 22. 車両数 : 2、配送先数 : 3(荷物量 150、150.5、150、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 11:00:00～2000/1/1 12:00:00)、avetime_ae=0、時間ばらつきペナルティ重み : 800000000、初期解 0→1→2→0および0→3→0とした場合に
	#初期解のままとなることを確認(積載量ペナルティより時間ばらつきペナルティを優先)
	('41_1_22', '41_1_22_request.json','4x4_cost.json', True),

	# 23. 車両数 : 2、配送先数 : 4(荷物量 100、100、100、201)、avevisits_ae=0、件数ばらつきペナルティ重み : 300000000、初期解 0→1→2→0および0→3→4→0とした場合に
	# 0→3→1→2→0および0→4→0となることを確認(件数ばらつきペナルティより積載量ペナルティを優先)
	('41_1_23', '41_1_23_request.json','5x5_cost.json', True),

	# 24. 車両数 : 2、配送先数 : 4(荷物量 100、100、100、201)、avevisits_ae=0、件数ばらつきペナルティ重み : 800000000、初期解 0→1→2→0および0→3→0とした場合に
	#初期解のままとなることを確認(積載量ペナルティより件数ばらつきペナルティを優先)
	('41_1_24', '41_1_24_request.json','5x5_cost.json', True),

	# 25. 車両数 : 1(車両営業時間 2000/1/1 9:00:00～2000/1/1 12:00:00)、配送先数 : 2(移動時間 2→1は5、距離 2→1は100)、時間ペナルティ重み : 0、初期解 0→1→2→0とした場合に
	# 0→2→1→0となることを確認(時間ペナルティは無視、車両営業時間)
	('41_1_25', '41_1_25_request.json','3x3_cost_41_1_25.json', True),
]
