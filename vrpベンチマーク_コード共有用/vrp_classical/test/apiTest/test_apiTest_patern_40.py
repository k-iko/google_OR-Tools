# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト1-1(配送時間枠指定)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1、電力は3で固定、電力容量は10、初期電力量は10、電力マージンは1、充電レートは1e12、荷作業時間は1(充電スポットは0)、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00
# *打ち切り時間 X秒の精度はX～1.1X以内とする(それ以上の場合、"Accuracy of Time-Out is low."のエラーメッセージを出力して終了)
test_args=[
	#■異常系
	# 1. 車両数 : 1、配送先数 : 1、スレッド数 : -1とした場合に
	# "number of threads (aka multithread_num) must be 0 or positive integer"のエラーメッセージを出力して終了することを確認	
	('40_1_1', '40_1_1_request.json','2x2_cost.json', True),

	# ■正常系
	# 2. スレッド数 : 0とした場合に、スレッド数 : 1とした場合より十分に短い時間で同じ解が得られることを確認
	('40_1_2', '40_1_2_request.json','cost_40_1_2.json', True),

	# 3. スレッド数 : 2とした場合に、スレッド数 : 1とした場合より短い時間で同じ解が得られることを確認
	('40_1_3', '40_1_3_request.json','cost_40_1_3.json', True),

	# 4. スレッド数 : 100とした場合に、スレッド数 : 1とした場合より十分に短い時間で同じ解が得られることを確認
	('40_1_4', '40_1_4_request.json','cost_40_1_4.json', True),

	# 5. スレッド数 : 2、打ち切り時間 20秒とした場合に配送計画出力要件およびハード制約を守る解(初期解より良く、打ち切り時間なしより悪い)が20秒で得られることを確認
	('40_1_5', '40_1_5_request.json','cost_40_1_5.json', True),
]
