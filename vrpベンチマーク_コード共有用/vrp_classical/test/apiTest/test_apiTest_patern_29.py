# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト29(集荷)
#-----------------------------------------------------------------
# 記載のないものは距離は1000、時間は1で固定、配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00で固定、荷作業時間は1で固定、(第1)荷物量は0で固定
# 車両の積載量に指定がない場合、第1積載量は300、第2積載量は300
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
    # ■正常系
    # 1. 車両数 : 2、配送先数 : 3(車両の積載量上限 100,200、各配送先の荷物量 100(集荷)、各配送先の第2荷物量 0)とした場合に
    # 積載量上限100の車両に1つの配送先、積載量上限200の車両に2つの配送先となることを確認
    ('29_1_1', '29_1_1_request.json','4x4_cost.json', True),

    # 2. 車両数 : 2、配送先数 : 3(車両の第2積載量上限 100,200、各配送先の荷物量 0、各配送先の第2荷物量 100(集荷))とした場合に
    # 第2積載量上限100の車両に1つの配送先、第2積載量上限200の車両に2つの配送先となることを確認
    ('29_1_2', '29_1_2_request.json','4x4_cost.json', True),

    # 3. 車両数 : 2、配送先数 : 3(車両の積載量上限 100,200、車両の第2積載量上限 100,200、各配送先の荷物量 100(集荷)、各配送先の第2荷物量 100(集荷))とした場合に
    # 第2積載量上限100の車両に1つの配送先、第2積載量上限200の車両に2つの配送先となることを確認
    ('29_1_3', '29_1_3_request.json','4x4_cost.json', True),

    # 4. 車両数 : 1、配送先数 : 3(荷物量(第1および第2) 200(集荷)、150、150)、初期解 0→1→2→3→0とした場合に
    # 1番目の配送先が最後になることを確認(その時点で積載されている荷物量+集荷量>積載量上限の場合は違反)
    ('29_1_4', '29_1_4_request.json','4x4_cost.json', True),

    # 5. 車両数 : 1、配送先数 : 3(荷物量(第1および第2) 200(集荷)、150、150、1→0は通行不可)、初期解 0→1→2→3→0とした場合に
    # 1番目の配送先が2番目になることを確認(違反解しか作成できない場合)
    ('29_1_5', '29_1_5_request.json','4x4_cost_29_1_5.json', True),

    # 6. 車両数 : 2、配送先数 : 2(2台目の車両営業時間 2000/1/1 6:00:00～2000/1/1 7:00:00、
    # 各配送先の荷物量 150(集荷)、151(集荷)、初期解 0→1→0および0→2→0)、車両削減モードとした場合に
    # 解が変わらないことを確認(積載量(集荷)違反となる場合は削減しないことを確認)
    ('29_1_6', '29_1_6_request.json','3x3_cost.json', True),

    # 7. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1)、初期解生成モードとした場合に
    # 80(集荷)、120(集荷)、100(集荷)の荷物で1台の車両(直送便)となることを確認
    ('29_1_7', '29_1_7_request.json','3x3_cost.json', True),

    # 8. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 70(集荷)、120(集荷)、50(集荷)、60(集荷)、1)、初期解生成モードとした場合に
    # 70(集荷)、120(集荷)、50(集荷)、60(集荷)の荷物で1台の車両(直送便)となることを確認
    ('29_1_8', '29_1_8_request.json','3x3_cost.json', True),

    # 9. 車両数 : 3、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 150(集荷)、150(集荷)、150(集荷)、150(集荷)、1)、初期解生成モードとした場合に
    # 150(集荷)、150(集荷)の荷物で1台×2の車両(直送便)となることを確認(単一スポット、複数車両)
    ('29_1_9', '29_1_9_request.json','3x3_cost.json', True),

    # 10. 車両数 : 3、配送先数 : 5(SPOTID 1、1、3、3、5、荷物量(第1および第2) 150(集荷)、150(集荷)、150(集荷)、150(集荷)、1)、初期解生成モードとした場合に
    # 150(集荷)、150(集荷)の荷物で1台×2の車両(同じSPOTIDの配送先は同じ車両、直送便)となることを確認(複数スポット、複数車両)
    ('29_1_10', '29_1_10_request.json','4x4_cost.json', True),

    # 11. 車両数 : 1、配送先数 : 3(SPOTID 1、1、5、荷物量(第1および第2) 150(集荷)、150(集荷)、1)、初期解生成モードとした場合に
    # 解が作成されることを確認(全車両が直送便かつ配送先が残っている場合、直送しない)
    ('29_1_11', '29_1_11_request.json','3x3_cost.json', True),

    # 12. 車両数 : 1、配送先数 : 2(SPOTID 1、1、荷物量(第1および第2) 150(集荷)、150(集荷))、初期解生成モードとした場合に
    # 150(集荷)、150(集荷)の荷物で1台×2の車両(直送便)となることを確認(全車両が直送便だが配送先が残っていない場合、直送する)
    ('29_1_12', '29_1_12_request.json','2x2_cost.json', True),

    # 13. 車両数 : 2、配送先数 : 3(SPOTID 1、1、1、荷物量(第1および第2) 150(集荷)、150(集荷)、50(集荷)、積載量上限(第1および第2) 300、200)、初期解生成モードとした場合に
    # 150(集荷)、150(集荷)の荷物で1台の車両(直送便)となることを確認(最大積載量の車両で満載)
    ('29_1_13', '29_1_13_request.json','2x2_cost.json', True),

    # 14. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 80(集荷)、80(集荷)、80(集荷)、80(集荷)、1)、初期解生成モードとした場合に
    # 直送便とならないことを確認(満載できない場合)
    ('29_1_14', '29_1_14_request.json','3x3_cost.json', True),

    # 15. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1、
    # 配送時間枠 2000/1/1 9:00:00～2000/1/1 11:00:00、2000/1/1 11:00:00～2000/1/1 13:00:00、2000/1/1 13:00:00～2000/1/1 15:00:00、2000/1/1 15:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00)、
    # 初期解生成モードとした場合に
    # 直送便とならないことを確認(配送時間枠が異なる場合)
    ('29_1_15', '29_1_15_request.json','3x3_cost.json', True),

    # 16. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1、荷作業時間はすべて240、車両営業時間枠2000/1/1 9:00:00～2000/1/1 22:00:00)、初期解生成モードとした場合に
    # 直送便となる(direct_flag=True)ことを確認(荷作業時間は最後に合算されるため配送時間枠違反しない)
    ('29_1_16', '29_1_16_request.json','3x3_cost.json', True),

    # 17. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1、荷作業時間はすべて180)、初期解生成モードとした場合に
    # 直送便とならないことを確認(荷作業時間は合算されるため車両営業時間枠違反)
    ('29_1_17', '29_1_17_request.json','3x3_cost.json', True),

    # 18. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1、1台目の車両は0→1は通行不可)、初期解生成モードとした場合に
    # 80(集荷)、120(集荷)、100(集荷)の荷物で1台の車両(直送便、2台目)となることを確認(通行不可)
    ('29_1_18', '29_1_18_request.json','3x3_cost_29_1_18.json', True),

    # 19. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1、最終訪問先 custnoおよびspotid="6"、custnoおよびspotid="7")、初期解生成モードとした場合に
    # 80(集荷)、120(集荷)、100(集荷)の荷物で1台の車両(直送便)となることを確認(最終訪問先)
    ('29_1_19', '29_1_19_request.json','5x5_cost.json', True),

    # 20. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1、2番目の配送先に1番目の車両は立寄不可)、初期解生成モードとした場合に
    # 80(集荷)、120(集荷)、100(集荷)の荷物で1台の車両(直送便、2台目)となることを確認(車両立寄制限)
    ('29_1_20', '29_1_20_request.json','3x3_cost.json', True),

    # 21. 車両数 : 3、配送先数 : 3(SPOTID 1、1、1、荷物量(第1および第2) 150(集荷)、150(集荷)、150(集荷))、初期解生成モードとした場合に
    # 配送先が1つずつとなることを確認(空車両ができる場合は直送しない)
    ('29_1_21', '29_1_21_request.json','2x2_cost.json', True),

    # 22. 車両数 : 3、配送先数 : 4(SPOTID 1、1、2、3、荷物量(第1および第2) 150(集荷)、150(集荷)、150(集荷)、150(集荷)、2番目と3番目の配送先に3台目の車両は立寄不可)、初期解生成モードとした場合に
    # 150、150の荷物で1台の車両(直送便、3台目)となることを確認(立寄不可)
    ('29_1_22', '29_1_22_request.json','4x4_cost.json', True),

    # 23. 車両数 : 3、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量(第1および第2) 150(集荷)、150(集荷)、150(集荷)、150(集荷)、1、移動時間 1→0で10)、初期解生成モード、巡回モードとした場合に
    # 直送便とならないことを確認(巡回モード)
    ('29_1_23', '29_1_23_request.json','3x3_cost_29_1_23.json', True),

    # 24. 車両数 : 2、配送先数 : 4(SPOTID 1、1、2、3、荷物量(第1および第2) 150(集荷)、150(集荷)、150(集荷)、150(集荷)、2→3および3→2は通行不可)、初期解生成モードとした場合に
    # SPOTID 1と2で1台の車両、SPOTID 1と3で1台の車両となることを確認(通行不可ルートとなるなら直送しない)
    ('29_1_24', '29_1_24_request.json','4x4_cost_29_1_24.json', True),

    # 25. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1、第2荷物量 120(集荷)、120(集荷)、120(集荷)、120(集荷)、1)、初期解生成モードとした場合に
    # 直送便とならないことを確認(第1積載量満載だが第2積載量違反の場合)
    ('29_1_25', '29_1_25_request.json','3x3_cost.json', True),

    # 26. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 120(集荷)、120(集荷)、120(集荷)、120(集荷)、1、第2荷物量 80(集荷)、120(集荷)、50(集荷)、100(集荷)、1)、初期解生成モードとした場合に
    # 直送便とならないことを確認(第2積載量満載だが第1積載量違反の場合)
    ('29_1_26', '29_1_26_request.json','3x3_cost.json', True),

    # 27. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 150(集荷)、150(集荷)、150(集荷)、150(集荷)、1、第2荷物量 180(集荷)、140(集荷)、130(集荷)、150(集荷)、1)、初期解生成モードとした場合に
    # 第2荷物量140(集荷)、150(集荷)の荷物で1台の車両(直送便)となることを確認(第1積載量満載の場合、第2積載量が満載に近くなるような解となる)
    ('29_1_27', '29_1_27_request.json','3x3_cost.json', True),

    # 28. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 180(集荷)、140(集荷)、130(集荷)、150(集荷)、1、第2荷物量 150(集荷)、150(集荷)、150(集荷)、150(集荷)、1)、初期解生成モードとした場合に
    # 荷物量140(集荷)、150(集荷)の荷物で1台の車両(直送便)となることを確認(第2積載量満載の場合、第1積載量が満載に近くなるような解となる)
    ('29_1_28', '29_1_28_request.json','3x3_cost.json', True),

    # 29. 車両数 : 3、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 180(集荷)、120(集荷)、130(集荷)、150(集荷)、1、第2荷物量 130(集荷)、150(集荷)、180(集荷)、120(集荷)、1)、初期解生成モードとした場合に
    # 1番目と2番目の配送先で1台の車両(直送便)、3番目と4番目の配送先で1台の車両(直送便)となることを確認(第1積載量で直送便作成→第2積載量で直送便作成)
    ('29_1_29', '29_1_29_request.json','3x3_cost.json', True),

    # 30. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 150(集荷)、150(集荷)、140(集荷)、110(集荷)、1、第2荷物量 130(集荷)、150(集荷)、150(集荷)、180(集荷)、1)、初期解生成モードとした場合に
    # 2番目と3番目の配送先で1台の車両(直送便)となることを確認(第1積載量、第2積載量ともに満載の場合、他方の積載率が高くなる解となる)
    ('29_1_30', '29_1_30_request.json','3x3_cost.json', True),

    # 31. 車両数 : 2、配送先数 : 3(移動距離 1→2で10000000000、荷物量(第1および第2) 149(集荷)、151(集荷)、150(集荷)、
    # 2→1および3→2および1→3および3→1は通行不可)、初期解を0→1→2→0および0→3→0とした場合に
    # merge処理が実行されてから初期解に戻ることを確認(初期解違反なし、第2積載量違反)
    ('29_1_31', '29_1_31_request.json','4x4_cost_29_1_31.json', True),

    # 32. 車両数 : 2、配送先数 : 6(SPOTID 1、1、1、1、1、5、荷物量(第1および第2) 150、150、150、50(集荷)、50(集荷)、1)、初期解生成モードとした場合に
    # 150、150、50(集荷)、50(集荷)の荷物で1台の車両(直送便)となることを確認(配送が満載の場合集荷も一緒に直送)
    ('29_1_32', '29_1_32_request.json','3x3_cost.json', True),

    # 33. 車両数 : 2、配送先数 : 6(SPOTID 1、1、1、1、1、5、荷物量(第1および第2) 50、50、150(集荷)、150(集荷)、150(集荷)、1)、初期解生成モードとした場合に
    # 50、50、150(集荷)、150(集荷)の荷物で1台の車両(直送便)となることを確認(集荷が満載の場合配送も一緒に直送)
    ('29_1_33', '29_1_33_request.json','3x3_cost.json', True),

    # 34. 車両数 : 2、配送先数 : 6(SPOTID 1、1、1、1、1、5、荷物量(第1および第2) 150、150、150、200(集荷)、200(集荷)、1)、初期解生成モードとした場合に
    # 150、150、200(集荷)の荷物で1台の車両(直送便)となることを確認(配送が満載の場合集荷も一緒に直送)
    ('29_1_34', '29_1_34_request.json','3x3_cost.json', True),

    # 35. 車両数 : 2、配送先数 : 6(SPOTID 1、1、1、1、1、5、荷物量(第1および第2) 200、200、150(集荷)、150(集荷)、150(集荷)、1)、初期解生成モードとした場合に
    # 200、150(集荷)、150(集荷)の荷物で1台の車両(直送便)となることを確認(集荷が満載の場合配送も一緒に直送)
    ('29_1_35', '29_1_35_request.json','3x3_cost.json', True),

    # 36. 車両数 : 3、配送先数 : 8(SPOTID 1、1、1、1、1、1、1、5、荷物量(第1および第2) 150、150、150、150、120(集荷)、120(集荷)、120(集荷)、1)、初期解生成モードとした場合に
    # 150、150、120(集荷)、120(集荷)の荷物で1台の車両(直送便)、150、150、120(集荷)の荷物で1台の車両(直送便)となることを確認(配送が2台満載の場合集荷も一緒に直送)
    ('29_1_36', '29_1_36_request.json','3x3_cost.json', True),

    # 37. 車両数 : 3、配送先数 : 8(SPOTID 1、1、1、1、1、1、1、5、荷物量(第1および第2) 120、120、120、150(集荷)、150(集荷)、150(集荷)、150(集荷)、1)、初期解生成モードとした場合に
    # 120、120、150(集荷)、150(集荷)の荷物で1台の車両(直送便)、120、150(集荷)、150(集荷)の荷物で1台の車両(直送便)となることを確認(集荷が2台満載の場合配送も一緒に直送)
    ('29_1_37', '29_1_37_request.json','3x3_cost.json', True),

]
