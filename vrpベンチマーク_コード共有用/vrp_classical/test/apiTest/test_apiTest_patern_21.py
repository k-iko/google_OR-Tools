# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト21(直送便)
#-----------------------------------------------------------------
# 記載のないものは距離は1000、時間は1で固定、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定、荷作業時間は1で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
	# ■正常系
	# 1. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、120、50、100、1)、初期解生成モードとした場合に
	# 80、120、100の荷物で1台の車両(直送便:direct_flag=True)となることを確認
	('21_1_1', '21_1_1_request.json','3x3_cost.json', True),

	# 2. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 70、120、50、60、1)、初期解生成モードとした場合に
	# 70、120、50、60の荷物で1台の車両(直送便:direct_flag=True)となることを確認
	('21_1_2', '21_1_2_request.json','3x3_cost.json', True),

	# 3. 車両数 : 3、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 150、150、150、150、1)、初期解生成モードとした場合に
	# 150、150の荷物で1台×2の車両(直送便:direct_flag=True)となることを確認(単一スポット、複数車両)
	('21_1_3', '21_1_3_request.json','3x3_cost.json', True),

	# 4. 車両数 : 3、配送先数 : 5(SPOTID 1、1、3、3、5、荷物量 150、150、150、150、1)、初期解生成モードとした場合に
	# 150、150の荷物で1台×2の車両(同じSPOTIDの配送先は同じ車両、直送便:direct_flag=True)となることを確認(複数スポット、複数車両)
	('21_1_4', '21_1_4_request.json','4x4_cost.json', True),

	# 5. 車両数 : 1、配送先数 : 3(SPOTID 1、1、5、荷物量 150、150、1)、初期解生成モードとした場合に
	# 解が作成されることを確認(全車両が直送便かつ配送先が残っている場合、直送しない:direct_flag=False)
	('21_1_5', '21_1_5_request.json','3x3_cost.json', True),

	# 6. 車両数 : 1、配送先数 : 2(SPOTID 1、1、荷物量 150、150)、初期解生成モードとした場合に
	# 150、150の荷物で1台×2の車両(直送便:direct_flag=True)となることを確認(全車両が直送便だが配送先が残っていない場合、直送する)
	('21_1_6', '21_1_6_request.json','2x2_cost.json', True),

	# 7. 車両数 : 2、配送先数 : 3(SPOTID 1、1、1、荷物量 150、150、50、積載量上限 300、200)、初期解生成モードとした場合に
	# 150、150の荷物で1台の車両(直送便:direct_flag=True)となることを確認(最大積載量の車両で満載)
	('21_1_7', '21_1_7_request.json','2x2_cost.json', True),

	# 8. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、80、80、80、1)、初期解生成モードとした場合に
	# 直送便とならない(direct_flag=False)ことを確認(満載できない場合)
	('21_1_8', '21_1_8_request.json','3x3_cost.json', True),

	# 9. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、120、50、100、1、
	# 配送時間枠 2000/1/1 9:00:00～2000/1/1 11:00:00、2000/1/1 11:00:00～2000/1/1 13:00:00、2000/1/1 13:00:00～2000/1/1 15:00:00、2000/1/1 15:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00)、
	# 初期解生成モードとした場合に
	# 直送便とならない(direct_flag=False)ことを確認(配送時間枠が異なる場合)
	('21_1_9', '21_1_9_request.json','3x3_cost.json', True),

	# 10. 車両数 : 3、配送先数 : 5(SPOTID 1、1、3、3、5、荷物量 150、150、150、150、1)、初期解生成モード、
	# management_dtable : 
	#  [{vtype : "0",start_time : 0,table : 0→1で10000、0→3および0→5で100},
	#   {vtype : "1",start_time : 0,table : 0→3で10000、0→1および0→5で100},
	#   {vtype : "2",start_time : 0,table : 0→5で10000、0→1および0→3で100}]とした場合に
	# 1台目にSPOTID1の配送先(直送便:direct_flag=True)、2台目にSPOTID3の配送先(直送便:direct_flag=True)、3台目にSPOTID5の配送先となることを確認(直送便は改善解対象外)
	('21_1_10', '21_1_10_request.json','4x4_cost_20_1_10.json', True),

	# 11. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、120、50、100、1、荷作業時間はすべて240、車両営業時間枠2000/1/1 9:00:00～2000/1/1 22:00:00)、初期解生成モードとした場合に
	# 直送便となる(direct_flag=True)ことを確認(荷作業時間は最後に合算されるため配送時間枠違反しない)
	('21_1_11', '21_1_11_request.json','3x3_cost.json', True),

	# 12. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、120、50、100、1、荷作業時間はすべて180)、初期解生成モードとした場合に
	# 直送便とならない(direct_flag=False)ことを確認(荷作業時間は合算されるため車両営業時間枠違反)
	('21_1_12', '21_1_12_request.json','3x3_cost.json', True),

	# 13. 車両数 : 3、配送先数 : 5(SPOTID 1、1、3、4、5、荷物量 150、150、150、150、1、移動時間 0→5および5→3で1.5、0→4で3、荷作業時間はすべて0)、初期解生成モード、avetime_ape=0とした場合に
	# 150、150の荷物で1台の車両(直送便)および0→5→3→0および0→4→0となることを確認(直送便は時間のAPE対象外)
	('21_1_13', '21_1_13_request.json','5x5_cost_20_1_13.json', True),

	# 14. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、120、50、100、1、1台目の車両は0→1は通行不可)、初期解生成モードとした場合に
	# 80、120、100の荷物で1台の車両(直送便、2台目)となることを確認(通行不可)
	('21_1_14', '21_1_14_request.json','3x3_cost_20_1_14.json', True),

	# 15. 車両数 : 2、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、120、50、100、1、最終訪問先 custnoおよびspotid="6"、custnoおよびspotid="7")、初期解生成モードとした場合に
	# 80、120、100の荷物で1台の車両(直送便:direct_flag=True)となることを確認(最終訪問先)
	('21_1_15', '21_1_15_request.json','5x5_cost.json', True),

	# 16. 車両数 : 3、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 80、120、50、100、1、1～4番目の配送先に1番目の車両は立寄不可)、初期解生成モードとした場合に
	# 80、120、100の荷物で1台の車両(直送便、2台目:direct_flag=True)となることを確認(車両立寄制限)
	('21_1_16', '21_1_16_request.json','3x3_cost.json', True),

	# 17. 車両数 : 3、配送先数 : 5(SPOTID 1、1、1、4、5、荷物量 100、100、100、150、1、opskill 1.0、0.5、1.0、drskill 1.0、1.0、1.0、4番目の荷作業時間は2)、初期解生成モードとした場合に
	# 100、100、100の荷物で1台の車両(直送便、opskill=1.0)および0→4→0(opskill=0.5)および0→5→0(opskill=1.0)となることを確認(直送便はスキルシャッフル対象外)
	('21_1_17', '21_1_17_request.json','4x4_cost.json', True),

	# 18. 車両数 : 3、配送先数 : 3(SPOTID 1、1、1、荷物量 150、150、150)、初期解生成モードとした場合に
	# 配送先が1つずつとなることを確認(空車両ができる場合は直送しない)
	('21_1_18', '21_1_18_request.json','2x2_cost.json', True),

	# 19. 車両数 : 3、配送先数 : 4(SPOTID 1、1、2、3、荷物量 150、150、150、150、2番目と3番目の配送先に3台目の車両は立寄不可)、初期解生成モードとした場合に
	# 150、150の荷物で1台の車両(直送便、3台目)となることを確認(立寄不可)
	('21_1_19', '21_1_19_request.json','4x4_cost.json', True),

	# 20. 車両数 : 3、配送先数 : 4(SPOTID 1、1、2、3、荷物量 150、150、150、150)、初期解生成モード、台数削減モードとした場合に
	# 150、150の荷物で1台の車両(直送便:direct_flag=True)、SPOTID 2と3の配送先で1台の車両となることを確認(台数削減モード)
	('21_1_20', '21_1_20_request.json','4x4_cost.json', True),

	# 21. 車両数 : 3、配送先数 : 5(SPOTID 1、1、1、1、5、荷物量 150、150、150、150、1、移動時間 1→0で10)、初期解生成モード、巡回モードとした場合に
	# 直送便とならないことを確認(巡回モード)
	('21_1_21', '21_1_21_request.json','3x3_cost_21_1_21.json', True),

	# 22. 車両数 : 2、配送先数 : 4(SPOTID 1、1、2、3、荷物量 150、150、150、150、2→3および3→2は通行不可)、初期解生成モードとした場合に
	# SPOTID 1と2で1台の車両、SPOTID 1と3で1台の車両となることを確認(通行不可ルートとなるなら直送しない)
	('21_1_22', '21_1_22_request.json','4x4_cost_21_1_22.json', True),

]

