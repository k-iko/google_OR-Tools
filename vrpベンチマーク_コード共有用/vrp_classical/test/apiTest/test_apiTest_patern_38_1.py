# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト1-1(配送時間枠指定)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00
test_args=[
	#■異常系
	# 1. 車両数 : 1、配送先数 : 1、回転モード、evplanとした場合に
	# "both multitrip (aka  multitrip_flag) and evplan (aka evplan) set"のエラーメッセージを出力して終了することを確認(evplanとの同時指定)
	('38_1_1', '38_1_1_request.json','2x2_cost.json', True),

	# 2. 車両数 : 1、配送先数 : 1(拠点作業時間 -1)、回転モードとした場合に
	# "customer depot service time (aka depotservt) set to less than 0"のエラーメッセージを出力して終了することを確認(配送先の拠点作業時間が負)
	('38_1_2', '38_1_2_request.json','2x2_cost.json', True),

	# 3. 車両数 : 1(回転数上限 -1)、配送先数 : 1、回転モードとした場合に
	# "vehicle max rotate (aka maxrotate) must be 0 or positive integer"のエラーメッセージを出力して終了することを確認(回転数上限が負)
	('38_1_3', '38_1_3_request.json','2x2_cost.json', True),

	# 4. 車両数 : 1(回転数上限 1)、配送先数 : 2、回転モード、初期解 0→1→0→2→0とした場合に
	# "failed to read inital routes due to maxrotate"のエラーメッセージを出力して終了することを確認(回転数上限を超える初期解入力)
	('38_1_4', '38_1_4_request.json','3x3_cost.json', True),

	# ■正常系
	# 5. 車両数 : 1(積載量 300)、配送先数 : 2(荷物量 300、300)、初期解 0→1→2→0→0、回転モードとした場合に
	# 0→1→0→2→0となることを確認
	('38_1_5', '38_1_5_request.json','3x3_cost.json', True),

	# 6. 車両数 : 1(積載量 300)、配送先数 : 2(荷物量 300、300、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00、拠点作業時間 60、60)、初期解 0→1→0→2→0、回転モードとした場合に
	# 0→2→0→1→0となることを確認(配送先の拠点作業時間)
	('38_1_6', '38_1_6_request.json','3x3_cost.json', True),

	# 7. 車両数 : 1(積載量 300)、配送先数 : 2(荷物量 300(集荷)、300(集荷)、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00、拠点作業時間 60、60)、初期解 0→1→0→2→0、回転モードとした場合に
	# 初期解のままとなることを確認(配送先の拠点作業時間、集荷)
	('38_1_7', '38_1_7_request.json','3x3_cost.json', True),

	# 8. 車両数 : 1(積載量 300)、配送先数 : 2(荷物量 300、300(集荷)、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00、拠点作業時間 60、60)、初期解 0→1→0→2→0、回転モードとした場合に
	# 0→1→2→0となることを確認(回転削減)
	('38_1_8', '38_1_8_request.json','3x3_cost.json', True),

	# 9. 車両数 : 1(積載量 300、最終訪問先 CUSTNO=3)、配送先数 : 2(荷物量 300、300(集荷)、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00、拠点作業時間 60、60)、初期解 0→1→0→2→0、回転モードとした場合に
	# 0→1→2→0→3となることを確認(回転削減、最終訪問先指定)
	('38_1_9', '38_1_9_request.json','4x4_cost.json', True),

	# 10. 車両数 : 1(積載量 300、opskill 0.2)、配送先数 : 2(荷物量 300、300、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00、拠点作業時間 60、60)、初期解 0→1→0→2→0、回転モードとした場合に
	# 初期解のままとなることを確認(配送先の拠点作業時間、スキル指定)
	('38_1_10', '38_1_10_request.json','3x3_cost.json', True),

	# 11. 車両数 : 1(積載量 300)、配送先数 : 3(荷物量 150、150、300、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00、拠点作業時間 30、30、60、SPOTID 1、1、3)、
	# 初期解 0→1→2→0→3→0、回転モード、大量輸送モードとした場合に
	# 0→3→0→1→2→0(1と2はtie-up)となることを確認(配送先の拠点作業時間、大量輸送モード)
	('38_1_11', '38_1_11_request.json','3x3_cost.json', True),

	# 12. 車両数 : 2(積載量 300、300、回転数上限2、1)、配送先数 : 2(荷物量 300、300)、初期解 0→1→0→0および0→2→0→0、回転モード、台数削減モードとした場合に
	# 0→1→0→2→0(1台目)となることを確認(台数削減)
	('38_1_12', '38_1_12_request.json','3x3_cost.json', True),

	# 13. 車両数 : 2(積載量 300、300、訪問数上限3、2)、配送先数 : 4(荷物量 300、300、300、300)、初期解 0→1→2→0→0→0および0→3→4→0、回転モードとした場合に
	# 0→3→0→2→0→1→0および0→4→0となることを確認(訪問数上限、デポはカウントしない)
	('38_1_13', '38_1_13_request.json','5x5_cost.json', True),

	# 14. 車両数 : 2(積載量 300、300)、配送先数 : 4(荷物量 300、300、300、300)、初期解 0→1→2→3→0→0および0→4→0→0→0→0→0、回転モード、ave_visits_ape=0とした場合に
	# 0→3→2→0および0→4→0→1→0となることを確認(件数平準化、デポはカウントしない)
	('38_1_14', '38_1_14_request.json','5x5_cost.json', True),

	# 15. 車両数 : 1(第2積載量 300)、配送先数 : 2(第2荷物量 300、300)、初期解 0→1→2→0→0、回転モードとした場合に
	# 0→1→0→2→0となることを確認(第2積載量)
	('38_1_15', '38_1_15_request.json','3x3_cost.json', True),

	# 16. 車両数 : 1(第1積載量 300、第2積載量 300)、配送先数 : 3(第1荷物量 100、200、150、第2荷物量 150、200、100)、初期解 0→1→2→3→0→0、回転モードとした場合に
	# 0→2→0→3→1→0となることを確認(第1積載量、第2積載量)
	('38_1_16', '38_1_16_request.json','4x4_cost.json', True),

	# 17. 車両数 : 1(積載量 300)、配送先数 : 2(荷物量 150、150、SPOTID 1、1)、初期解生成モード、回転モードとした場合に
	# 0→2→1→0となることを確認(直送便機能は使用しない)
	('38_1_17', '38_1_17_request.json','2x2_cost.json', True),

	# 18. 車両数 : 1(積載量 300)、配送先数 : 2(荷物量 300、300)、初期解生成モード、回転モードとした場合に
	# 0→1→0→2→0となることを確認(初期解生成モード)
	('38_1_18', '38_1_18_request.json','3x3_cost.json', True),

	# 19. 車両数 : 2(積載量 300、300、回転数上限1、2)、配送先数 : 3(荷物量 300、300、300)、初期解生成モード、回転モードとした場合に
	# 0→1→0および0→2→0→3→0となることを確認(初期解生成モード、回転数上限)
	('38_1_19', '38_1_19_request.json','4x4_cost.json', True),

	# 20. 車両数 : 1(積載量 300)、配送先数 : 2(荷物量 300、300、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 9:00:00～2000/1/1 12:00:00)、初期解生成モード、回転モードとした場合に
	# 0→1→0→2→0となることを確認(初期解生成モード、配送時間枠違反)
	('38_1_20', '38_1_20_request.json','3x3_cost.json', True),

	# 21. 車両数 : 1(積載量 300)、配送先数 : 2(荷物量 300、400、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 9:00:00～2000/1/1 12:00:00)、初期解生成モード、回転モードとした場合に
	# 0→1→0→2→0となることを確認(初期解生成モード、積載量違反)
	('38_1_21', '38_1_21_request.json','3x3_cost.json', True),

	# 22. 車両数 : 2(積載量 100、300)、配送先数 : 4(荷物量 300、300、300、300)、初期解生成モード、回転モードとした場合に
	# 0→4→0および0→1→0→2→0→3→0となることを確認(初期解生成モード、空車両は作成しない)
	('38_1_22', '38_1_22_request.json','5x5_cost.json', True),

	# 23. 車両数 : 2(積載量 300、300、回転数上限1、1)、配送先数 : 3(荷物量 300、300、300)、初期解生成モード、回転モードとした場合に
	# 0→1→3→0および0→2→0となることを確認(初期解生成モード、回転数上限を超える場合)
	('38_1_23', '38_1_23_request.json','4x4_cost.json', True),

	# 24. 車両数 : 2(積載量 300、300、最終訪問先 CUSTNO=4、CUSTNO=5)、配送先数 : 3(荷物量 300、300、300、1→0は通行不可)、初期解生成モード、回転モードとした場合に
	# 0→1→4および0→2→0→3→5となることを確認(初期解生成モード、通行不可)
	('38_1_24', '38_1_24_request.json','6x6_cost_38_1_24.json', True),

	# 25. 車両数 : 1(積載量 300)、配送先数 : 3(荷物量 150、150、300、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 14:00:00、拠点作業時間 30、30、60、SPOTID 1、1、3)、
	# 回転モード、大量輸送モード、初期解生成モードとした場合に
	# 0→3→0→1→2→0(1と2はtie-up)となることを確認(初期解生成モード、大量輸送モード)
	('38_1_25', '38_1_25_request.json','3x3_cost.json', True),

	# 26. 車両数 : 2(積載量 200、600、2台目の最終訪問先 CUSTNO=4)、配送先数 : 3(荷物量 300、300、600、2台目は1→4および0→2は通行不可)、初期解 0→1→0→2→0および0→3→0→0、回転モード、台数削減モードとした場合に
	# 0→3→0→1→2→4(2台目)となることを確認(台数削減、merge範囲にデポが含まれる場合)
	('38_1_26', '38_1_26_request.json','5x5_cost_38_1_26.json', True),

	# 27. 車両数 : 2(積載量 400、600)、配送先数 : 4(荷物量 400、400、600、600)、初期解 0→3→0→4→0および0→1→0→2→0、回転モード、
	# management_ttable : [{vtype : "0",start_time : 0,table : 0→3で2},{vtype : "0",start_time : 3,table : 1→0および0→2は通行不可}、
	# {vtype : "1",start_time : 0,table : 0→3で2},{vtype : "1",start_time : 3,table : 3→0および0→2は通行不可}]とした場合に
	# 0→1→0→2→0および0→3→0→4→0となることを確認(cross範囲にデポが含まれる場合)
	('38_1_27', '38_1_27_request.json','5x5_cost_38_1_27.json', True),
]
