# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト35(1台車両の配送途中で再計画)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1、経験コストは1000、電力は3で固定、電力容量は10、初期電力量は10、電力マージンは1、充電レートは1e12、荷作業時間は1(充電スポットは0)、配送時間枠および車両営業時間は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
    # ■正常系
    # 1. 車両数 : 2、配送先数 : 6(初期解 0→1→2→3→0および0→4→5→6→0)、
    # ソルバ実行後(0→1→2→3→0および0→4→5→6→0)の1台目の1をスタート地点として再実行とした場合に
    # 0(もとは1)→2→3→0となることを確認
    ('35_1_1', '35_1_1_request.json','7x7_cost.json', True),

    # 2. 車両数 : 2、配送先数 : 6(最終訪問先 custno="7"、spotid="7"およびcustno="8"、spotid="8"、初期解 0→1→2→3→0および0→4→5→6→0)、
    # ソルバ実行後(0→1→2→3→7および0→4→5→6→8)の1台目の1をスタート地点として再実行とした場合に
    # 0(もとは1)→2→3→7となることを確認(最終訪問先)
    ('35_1_2', '35_1_2_request.json','9x9_cost.json', True),

    # 3. 車両数 : 2、配送先数 : 6(移動距離 2→3は100、移動時間 2→3は0.5、2→1は通行不可、avetime_ape=0、初期解 0→1→2→3→0および0→4→5→6→0)、
    # ソルバ実行後(0→1→3→2→0および0→4→5→6→0)の1台目の1をスタート地点として再実行とした場合に
    # 0(もとは1)→2→3→0となることを確認(時間のAPE)
    ('35_1_3', '35_1_3_request.json','7x7_cost_35_1_3.json', True),

    # 4. 車両数 : 2、配送先数 : 6(移動距離 3→0は100、移動時間 3→0は0.5、2→1は通行不可、avetime_ape=0、初期解 0→1→2→3→0および0→4→5→6→0)、巡回モード、
    # ソルバ実行後(0→1→3→2→0および0→4→5→6→0)の1台目の1をスタート地点として再実行とした場合に
    # 0(もとは1)→2→3→0となることを確認(時間のAPE、巡回)
    ('35_1_4', '35_1_4_request.json','7x7_cost_35_1_4.json', True),

    # 5. 車両数 : 2、配送先数 : 6(SPOTID 1、1、3、4、5、6、3番目の配送先に2台目の車両は立寄不可、
    # 配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、2000/1/1 10:00:00～2000/1/1 13:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、
    # 初期解 0→1→2→3→0および0→4→5→6→0)、
    # ソルバ実行後(0→1→3→2→0および0→4→5→6→0)の1台目の1をスタート地点、出発時間 2000/1/1 15:00:00として再実行とした場合に
    # 0(もとは1)→2→3→0となることを確認(出発時間変更)
    ('35_1_5', '35_1_5_request.json','6x6_cost.json', True),

    # 6. 車両数 : 2、配送先数 : 6(距離 2→0は100、初期解 0→1→2→3→0および0→4→5→6→0)、非巡回、
    # ソルバ実行後(0→1→2→3→0および0→4→5→6→0)の1台目の1をスタート地点、巡回モードとして再実行とした場合に
    # 0(もとは1)→3→2→0となることを確認(巡回オプション変更)
    ('35_1_6', '35_1_6_request.json','7x7_cost_35_1_6.json', True),

    # 7. 車両数 : 2、配送先数 : 6(距離 3→2は10000、移動時間 3→2は0.5、初期解 0→1→2→3→0および0→4→5→6→0)、
    # ソルバ実行後(0→1→2→3→0および0→4→5→6→0)の1台目の1をスタート地点、時間で最適化として再実行とした場合に
    # 0(もとは1)→3→2→0となることを確認(最適化指標変更)
    ('35_1_7', '35_1_7_request.json','7x7_cost_35_1_7.json', True),

    # 8. 車両数 : 2(電力容量 10、100、初期電力 5、100)、配送先数 : 6(すべての配送先は初期解以外の車両は立寄不可、初期解 0→1→2→3→0および0→4→5→6→0)、充電スポット数 : 1、evplan=True、
    # ソルバ実行後(0→e0→1→2→3→0(充電量 8、電欠)および0→4→5→6→0)の1台目の1をスタート地点として再実行とした場合に
    # 0(もとは1)→2→e0→3→0(充電量 6)となることを確認(電力解)
    ('35_1_8', '35_1_8_request.json','8x8_cost_35_1_8.json', True),
]
