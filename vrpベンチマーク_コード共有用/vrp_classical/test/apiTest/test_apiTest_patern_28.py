# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト28(訪問数上限)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
    # ■異常系
    # 1. 車両数 : 1、配送先数 : 1(1台目の車両の訪問数上限 -1)とした場合に
    # "max visits (aka maxvisit) must be 0 or positive integer"のエラーメッセージを出力して終了することを確認
    ('28_1_1', '28_1_1_request.json','2x2_cost.json', True),

    # 2. 車両数 : 1、配送先数 : 2(1台目の車両の訪問数上限 1)とした場合に
    # "initial solution (aka iniroutes) includes plan with over max visits (aka maxvisit)"のエラーメッセージを出力して終了することを確認
    ('28_1_2', '28_1_2_request.json','3x3_cost.json', True),

    # 8. 車両数 : 2、配送先数 : 3(1台目の車両の訪問数上限 1、1番目と2番目の配送先に2台目の車両は立寄不可)、初期解生成モードとした場合に
    # "failed to create initial solution due to cost of -1 or unvisitable vehicles or max visits or fixed vehicles"のエラーメッセージを出力して終了することを確認
    ('28_1_8', '28_1_8_request.json','4x4_cost.json', True),

    # ■正常系
    # 3. 車両数 : 2、配送先数 : 4(移動距離 1→3で100、1番目と2番目の配送先に2台目の車両は立寄不可、訪問数上限 1台目は2、初期解 0→1→2→0および0→3→4→0)とした場合に
    # 初期解のままとなることを確認
    ('28_1_3', '28_1_3_request.json','5x5_cost_28_1_3.json', True),

    # 4. 車両数 : 2、配送先数 : 4(SPOTID 1、2、1、4、移動距離 1→4で10000、4→1で10000、2番目の配送先に2台目の車両は立寄不可、4番目の配送先に1台目の車両は立寄不可、訪問数上限 1台目は2、初期解 0→1→2→0および0→3→4→0)とした場合に
    # 0→1→3→2→0(1と3は順不同)および0→4→0となることを確認(同一SPOTIDが連続していた場合は1カウント)
    ('28_1_4', '28_1_4_request.json','4x4_cost_28_1_4.json', True),

    # 5. 車両数 : 2、配送先数 : 4(SPOTID 1、2、1、4、移動距離 1→4で10000、2→1で100、
    # 配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 10:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、
    # 2番目の配送先に2台目の車両は立寄不可、4番目の配送先に1台目の車両は立寄不可、訪問数上限 1台目は2、初期解 0→1→2→0および0→3→4→0)とした場合に
    # 0→1→2→0および0→4→3→0となることを確認(同一SPOTIDでも連続していない場合は別カウント)
    ('28_1_5', '28_1_5_request.json','4x4_cost_28_1_5.json', True),

    # 6. 車両数 : 2、配送先数 : 3(最終訪問先 1台目はcustno="2"およびspotid="2"、1番目の配送先に2台目の車両は立寄不可、訪問数上限 1台目は1、初期解 0→1→0および0→2→3→0)、巡回モードとした場合に
    # 0→1→2および0→2→3→0となることを確認(最終訪問先と同一SPOTIDでも1カウント)
    ('28_1_6', '28_1_6_request.json','4x4_cost.json', True),

    # 7. 車両数 : 1、配送先数 : 3(SPOTID 1、1、3、訪問数上限 1台目は2、初期解 0→1→2→3→0、
    # 配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、2000/1/1 10:00:00～2000/1/1 12:00:00)とした場合に
    # 初期解のままとなることを確認(1台の車両内での処理で同一SPOTIDの配送先が離れる場合)
    ('28_1_7', '28_1_7_request.json','3x3_cost.json', True),

    # 9. 車両数 : 2、配送先数 : 5(2台目の車両の訪問数上限 1)、初期解生成モードとした場合に
    # 0→5→4→3→2→0および0→1→0となることを確認
    ('28_1_9', '28_1_9_request.json','6x6_cost.json', True),

    # 10. 車両数 : 2、配送先数 : 5(1台目の車両の訪問数上限 1)、初期解生成モードとした場合に
    # 0→5→0および0→4→3→2→1→0となることを確認
    ('28_1_10', '28_1_10_request.json','6x6_cost.json', True),

    # 11. 車両数 : 2、配送先数 : 5(1台目および2台目の車両の訪問数上限 2、SPOTID 1、2、1、4、5)、初期解生成モードとした場合に
    # 0→2→3→1→0(1と3は順不同)および0→5→4→0となることを確認(同一SPOTIDが連続していた場合は1カウント)
    ('28_1_11', '28_1_11_request.json','5x5_cost.json', True),

]
