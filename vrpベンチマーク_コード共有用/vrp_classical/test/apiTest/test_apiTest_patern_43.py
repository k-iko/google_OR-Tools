# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト1-1(配送時間枠指定)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1、電力は3で固定、電力容量は10、初期電力量は10、電力マージンは1、充電レートは1e12、荷作業時間は1(充電スポットは0)、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00
test_args=[
	# ■異常系
	# 28. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(荷物量 100(集荷)、配送時間枠 最終訪問先は2000/1/1 9:00:00～2000/1/1 12:00:00)、初期解生成モード、巡回モード、時間ペナルティタイプ : hardとした場合に
	# "failed to create solution due to hard constraint"のエラーメッセージを出力して終了することを確認
	('43_1_28', '43_1_28_request.json','3x3_cost.json', True),

	# ■正常系
	# 1. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(荷物量 100(集荷))、初期解生成モードとした場合に
	# 0→1→0→2となることを確認
	('43_1_1', '43_1_1_request.json','3x3_cost.json', True),

	# 2. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(荷物量 100)、初期解生成モードとした場合に
	# 0→1→2となることを確認(集荷がない場合はデポを挿入しない)
	('43_1_2', '43_1_2_request.json','3x3_cost.json', True),

	# 3. 車両数 : 1、配送先数 : 1(荷物量 100(集荷))、初期解生成モードとした場合に
	# 0→1→0となることを確認(最終訪問先が指定されていない場合はデポを挿入しない)
	('43_1_3', '43_1_3_request.json','2x2_cost.json', True),

	# 4. 車両数 : 2(最終訪問先 custnoおよびspotid="3"、custnoおよびspotid="4")、配送先数 : 2(荷物量 100(集荷)、100(集荷))、初期解を0→1→3および0→2→4、巡回モードとした場合に
	# 初期解のままとなることを確認(デポを挿入後に解が改善しない場合)
	('43_1_4', '43_1_4_request.json','5x5_cost.json', True),

	# 5. 車両数 : 2(最終訪問先 custnoおよびspotid="3"、custnoおよびspotid="4")、配送先数 : 2(移動距離 0→*および*→0は100、荷物量 100(集荷)、100(集荷))、初期解を0→1→3および0→2→4、巡回モードとした場合に
	# 0→2→0→3および0→1→0→4となることを確認(デポを挿入後に解が改善する場合)
	('43_1_5', '43_1_5_request.json','5x5_cost_43_1_5.json', True),

	# 6. 車両数 : 2(最終訪問先 custnoおよびspotid="4"、custnoおよびspotid="5")、配送先数 : 3(移動距離 1→2は100、荷物量 100、100(集荷)、100(集荷))、初期解生成モード、巡回モードとした場合に
	# 0→3→2→0→4および0→1→5となることを確認(初期解で挿入されたデポを削除することで改善する場合)
	('43_1_6', '43_1_6_request.json','6x6_cost_43_1_6.json', True),

	# 7. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(荷物量 100(集荷)、1→0は通行不可)、初期解生成モードとした場合に
	# 0→1→2となることを確認(通行不可)
	('43_1_7', '43_1_7_request.json','3x3_cost_43_1_7.json', True),

	# 8. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(荷物量 100(集荷)、0→2は通行不可)、初期解生成モードとした場合に
	# 0→1→2となることを確認(通行不可)
	('43_1_8', '43_1_8_request.json','3x3_cost_43_1_8.json', True),

	# 9. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(荷物量 100(集荷)、配送時間枠 最終訪問先は2000/1/1 9:00:00～2000/1/1 12:00:00)、初期解生成モード、巡回モードとした場合に
	# 0→1→0→2となることを確認(配送時間枠違反でも挿入する)
	('43_1_9', '43_1_9_request.json','3x3_cost.json', True),

	# 10. 車両数 : 1(最終訪問先 custnoおよびspotid="2"、車両営業時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00)、配送先数 : 1(荷物量 100(集荷))、初期解生成モード、巡回モードとした場合に
	# 0→1→0→2となることを確認(車両営業時間枠違反でも挿入する)
	('43_1_10', '43_1_10_request.json','3x3_cost.json', True),

	# 11. 車両数 : 1(最終訪問先 custnoおよびspotid="3")、配送先数 : 2(荷物量 100(集荷)、100(集荷)、配送時間枠 デポは2000/1/1 9:00:00～2000/1/1 12:00:00、
	# 移動距離 1→2は100、移動時間 1→2は3)、初期解生成モードとした場合に
	# 0→1→2→0→3となることを確認(非巡回モードではデポのペナルティ計算はしない)
	('43_1_11', '43_1_11_request.json','4x4_cost_43_1_11.json', True),

	# 12. 車両数 : 1(最終訪問先 custnoおよびspotid="3")、配送先数 : 2(SPOTID 1、1、荷物量 150(集荷)、150(集荷))、初期解生成モード、巡回モードとした場合に
	# 0→1→2→0→3となることを確認(直送便)
	('43_1_12', '43_1_12_request.json','3x3_cost.json', True),

	# 13. 車両数 : 1(最終訪問先 custnoおよびspotid="3")、配送先数 : 2(SPOTID 1、1、荷物量 150(集荷)、150(集荷)、配送時間枠 最終訪問先は2000/1/1 9:00:00～2000/1/1 12:00:00)、初期解生成モード、巡回モードとした場合に
	# 0→1→2→3となることを確認(違反となる場合は直送便にはデポを挿入しない)
	('43_1_13', '43_1_13_request.json','3x3_cost.json', True),

	# 14. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(第2荷物量 100(集荷))、初期解生成モードとした場合に
	# 0→1→0→2となることを確認(第2積載量)
	('43_1_14', '43_1_14_request.json','3x3_cost.json', True),

	# 15. 車両数 : 1(最終訪問先 custnoおよびspotid="3"、初期電力 5、電力容量 100)、充電スポット数 : 1、配送先数 : 2(荷物量 100(集荷)、100(集荷)、消費電力はすべて3、初期解 0→1→2→3)、evplan=Trueとした場合に
	# 0→e0→1→2→0→3(e0で11充電)となることを確認(電力解)
	('43_1_15', '43_1_15_request.json','5x5_cost_43_1_15.json', True),

	# 16. 車両数 : 1(最終訪問先 custnoおよびspotid="3"、初期電力 5)、充電スポット数 : 1、配送先数 : 2(荷物量 100(集荷)、100(集荷)、消費電力はすべて3、初期解 0→1→2→3)、evplan=Trueとした場合に
	# 0→e0→1→2→0→3(e0で8充電)となることを確認(電欠)
	('43_1_16', '43_1_16_request.json','5x5_cost_43_1_16.json', True),

	# 17. 車両数 : 1(最終訪問先 custnoおよびspotid="3"、初期電力 13、電力容量 13)、充電スポット数 : 1、配送先数 : 2(荷物量 100(集荷)、100(集荷)、消費電力 0→3は4、*→e0は12、初期解 0→1→2→3)、evplan=Trueとした場合に
	# 0→1→2→0→e0→3(e0で12充電)となることを確認(荷降ろし後充電)
	('43_1_17', '43_1_17_request.json','5x5_cost_43_1_17.json', True),

	# 18. 車両数 : 2(最終訪問先 custnoおよびspotid="5"、custnoおよびspotid="6"、電力容量 7、100、初期電力 5、100)、充電スポット数 : 1、配送先数 : 4(荷物量 100、100(集荷)、100、100、消費電力はすべて3、
	# 移動距離 1→2および2→0および3→4および4→6は100)、evplan=True、巡回モードとした場合に
	# 0→e0→1→5および0→2→3→4→0→6(2、3、4は順不同、1台目はe0で5充電)となることを確認(電欠となる場合は他の車両に配送先を移動し、それに応じてデポを追加、削除)
	('43_1_18', '43_1_18_request.json','8x8_cost_43_1_18.json', True),

	# 19. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(荷物量 100(集荷))、初期解生成モード、回転モードとした場合に
	# 0→1→0→2となることを確認(回転モード、回転なし)
	('43_1_19', '43_1_19_request.json','3x3_cost.json', True),

	# 20. 車両数 : 1(最終訪問先 custnoおよびspotid="3")、配送先数 : 2(荷物量 300(集荷)、300(集荷))、初期解生成モード、回転モードとした場合に
	# 0→1→0→2→0→3となることを確認(回転モード、回転あり)
	('43_1_20', '43_1_20_request.json','4x4_cost.json', True),

	# 21. 車両数 : 1(最終訪問先 custnoおよびspotid="4")、配送先数 : 3(荷物量 300(集荷)、300、300)、初期解生成モード、回転モードとした場合に
	# 0→2→1→0→3→4となることを確認(最終回転に集荷が含まれない場合はデポを挿入しない)
	('43_1_21', '43_1_21_request.json','5x5_cost.json', True),

	# 22. 車両数 : 1(最終訪問先 custnoおよびspotid="3"、回転数上限 2)、配送先数 : 2(荷物量 300(集荷)、300(集荷))、初期解生成モード、回転モードとした場合に
	# 0→1→0→2→0→3となることを確認(回転数上限)
	('43_1_22', '43_1_22_request.json','4x4_cost.json', True),

	# 23. 車両数 : 1(最終訪問先 custnoおよびspotid="3")、配送先数 : 2(荷物量 300(集荷)、300(集荷))、初期解 0→1→2→0→3、回転モードとした場合に
	# 初期解のままとなることを確認(最終訪問先直前のデポは集荷最適化の場合は移動不可)
	('43_1_23', '43_1_23_request.json','4x4_cost.json', True),

	# 24. 車両数 : 1(最終訪問先 custnoおよびspotid="3")、配送先数 : 2(荷物量 300(集荷)、300(集荷))、初期解 0→1→2→0→0→0→3、回転モードとした場合に
	# 0→1→0→2→0→3となることを確認(1、2は順不同、最終訪問先直前以外のデポは集荷最適化の場合でも移動可能)
	('43_1_24', '43_1_24_request.json','4x4_cost.json', True),

	# 25. 車両数 : 2(最終訪問先 custnoおよびspotid="4"、custnoおよびspotid="5"、最終訪問先の配送時間枠は2000/1/1 9:00:00～2000/1/1 14:30:00、2000/1/1 9:00:00～2000/1/1 13:30:00)、
	# 配送先数 : 3(荷物量 100(集荷)、100(集荷)、100(集荷)、拠点作業時間 30、60、30)、初期解生成モード、巡回モードとした場合に
	# 0→1→3→0→4および0→2→0→5となることを確認(1、3は順不同、拠点作業時間は最終訪問先ではなくデポで加算)
	('43_1_25', '43_1_25_request.json','6x6_cost.json', True),

	# 26. 車両数 : 2(最終訪問先 custnoおよびspotid="4"、custnoおよびspotid="5"、最終訪問先の配送時間枠は2000/1/1 9:00:00～2000/1/1 13:30:00、2000/1/1 9:00:00～2000/1/1 12:30:00、車両の拠点作業時間 10、60)、
	# 配送先数 : 3(荷物量 100(集荷)、100、100(集荷))、初期解生成モード、巡回モードとした場合に
	# 0→1→3→0→4および0→2→5となることを確認(1、3は順不同、車両の拠点作業時間)
	('43_1_26', '43_1_26_request.json','6x6_cost.json', True),

	# 27. 車両数 : 2(最終訪問先 custnoおよびspotid="4"、custnoおよびspotid="5"、最終訪問先の配送時間枠は2000/1/1 9:00:00～2000/1/1 14:30:00、2000/1/1 9:00:00～2000/1/1 12:30:00、駐車時間 120、120)、
	# 配送先数 : 3(荷物量 100(集荷)、100、100(集荷)、駐車時間 デポは60)、初期解生成モード、巡回モードとした場合に
	# 0→1→3→0→4および0→2→5となることを確認(1、3は順不同、駐車時間)
	('43_1_27', '43_1_27_request.json','6x6_cost.json', True),

	# 29. 車両数 : 1(最終訪問先 custnoおよびspotid="2")、配送先数 : 1(荷物量 0(集荷))、初期解生成モードとした場合に
	# 0→1→0→2となることを確認
	('43_1_29', '43_1_29_request.json','3x3_cost.json', True),

	# 30. 車両数 : 2(最終訪問先 custnoおよびspotid="4"、custnoおよびspotid="5"、最終訪問先の配送時間枠は2000/1/1 9:00:00～2000/1/1 14:30:00、2000/1/1 9:00:00～2000/1/1 12:30:00、駐車時間 120、120)、
	# 配送先数 : 3(荷物量 0(集荷)、100、0(集荷)、駐車時間 デポは60)、初期解生成モード、巡回モードとした場合に
	# 0→1→3→0→4および0→2→5となることを確認(1、3は順不同、駐車時間)
	('43_1_30', '43_1_30_request.json','6x6_cost.json', True),
]
