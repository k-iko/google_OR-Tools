# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト18(打ち切り時間指定)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00
# *打ち切り時間 X秒の精度はX～1.1X(テスト5は1.5X)以内とする(それ以上の場合、"Accuracy of Time-Out is low."のエラーメッセージを出力して終了)

test_args=[
    # ■異常系
    # 1. 車両数 : 1、配送先数 : 1、打ち切り時間 -1秒とした場合に
    # "timeout value set to negative number"のエラーメッセージを出力して終了することを確認
    ('18_1_1', '18_1_1_request.json','2x2_cost.json', True),

    # 4. 初期解生成モード、打ち切り時間 1秒(初期解生成時間より短い)、SPOTID 1の配送先→すべての最終訪問先は通行不可とした場合に
    # "failed to create initial solution due to timeout"のエラーメッセージを出力して終了することを確認
    ('18_1_4', '18_1_4_request.json','101x101_cost_18_1_4.json', True),

    # ■正常系
    # 2. 初期解生成モード、打ち切り時間 30秒とした場合に
    # 配送計画出力要件およびハード制約を守る解(初期解より良く、打ち切り時間なしより悪い)が30秒で得られることを確認
    ('18_1_2', '18_1_2_request.json','101x101_cost_18_1_2.json', True),

    # 3. 初期解読み込みモード、打ち切り時間 30秒とした場合に
    # 配送計画出力要件およびハード制約を守る解(初期解より良く、打ち切り時間なしより悪い)が30秒で得られることを確認
    ('18_1_3', '18_1_3_request.json','101x101_cost_18_1_3.json', True),

    # 5. 初期解生成モード、打ち切り時間 1秒(初期解生成時間より短い)とした場合に
    # 配送計画出力要件およびハード制約を守る解(打ち切り時間なしより悪い)が1秒で得られることを確認
    ('18_1_5', '18_1_5_request.json','101x101_cost_18_1_5.json', True),

]
