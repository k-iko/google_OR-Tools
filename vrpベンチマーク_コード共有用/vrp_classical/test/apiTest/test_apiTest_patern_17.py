# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト17(出発遅延)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
    # ■正常系
    # 1. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、初期解 0→1→2→0)、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認
    ('17_1_1', '17_1_1_request.json','3x3_cost.json', True),

    # 2. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 13:00:00～2000/1/1 14:00:00、初期解 0→1→2→0)、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/10:59:00(遅延処理))となることを確認
    ('17_1_2', '17_1_2_request.json','3x3_cost.json', True),

    # 3. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 12:00:00～2000/1/1 13:00:00、2000/1/1 13:00:00～2000/1/1 14:00:00、最終訪問先の配送時間枠 2000/1/1 13:00:00～2000/1/1 14:00:00、初期解 0→1→2→0)、巡回モード、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/11:00:00(遅延処理))となることを確認(最終訪問先の配送時間枠違反)
    ('17_1_3', '17_1_3_request.json','3x3_cost.json', True),

    # 4. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 11:30:00～2000/1/1 12:00:00、初期解 0→1→2→0)、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認(遅延対象より後の配送先で配送時間枠違反)
    ('17_1_4', '17_1_4_request.json','3x3_cost.json', True),

    # 5. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 10:00:00～2000/1/1 11:00:00、2000/1/1 13:00:00～2000/1/1 14:00:00、初期解 0→1→2→0)、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認(他の配送先に遅刻しないよう遅延)
    ('17_1_5', '17_1_5_request.json','3x3_cost.json', True),

    # 6. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 9:30:00、2000/1/1 13:00:00～2000/1/1 14:00:00、初期解 0→1→2→0)、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/9:00:00(変更無し))となることを確認(遅延対象より前で遅刻している場合は遅延しない)
    ('17_1_6', '17_1_6_request.json','3x3_cost.json', True),

    # 7. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 10:00:00～2000/1/1 12:00:00、2000/1/1 11:00:00～2000/1/1 12:00:00、最終訪問先の配送時間枠 2000/1/1 13:00:00～2000/1/1 14:00:00、初期解 0→1→2→0)、出発遅延モード、巡回モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/9:58:00(遅延処理))となることを確認(巡回モード)
    ('17_1_7', '17_1_7_request.json','3x3_cost.json', True),

    # 8. 車両数 : 1、配送先数 : 2(SPOTID 1、1、配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 11:00:00～2000/1/1 12:00:00、初期解 0→1→2→0、荷物量 150、150)、出発遅延モードとした場合に
    # 初期解のまま(直送便、拠点の出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認(直送便)
    ('17_1_8', '17_1_8_request.json','2x2_cost.json', True),

    # 9. 車両数 : 2、配送先数 : 3(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、
    # 移動時間 0→3は3、荷作業時間 3番目の配送先は2、初期解 0→1→2→0、0→3→0)、avetime_ape=0、出発遅延モードとした場合に
    # 初期解のまま(1台目の車両の拠点の出発時刻は2000/1/1/10:00:00(遅延処理)、2台目の車両の拠点の出発時刻は2000/1/1/9:00:00(変更無し))となることを確認(出発遅延により時間のAPEが悪化する場合)
    ('17_1_9', '17_1_9_request.json','4x4_cost_17_1_9.json', True),

    # 10. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、opskill=2、drskill=0.5、初期解 0→1→2→0)、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/10:58:00(遅延処理))となることを確認(skill設定)
    ('17_1_10', '17_1_10_request.json','3x3_cost.json', True),

    # 11. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、初期解 0→1→2→0)、
    # management_ttable : [{vtype : "0",start_time : 0,table : デフォルト},{vtype : "0",start_time : 1,table : 全て0.5}]、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/10:59:00(遅延処理))となることを確認(時間別時間テーブル)
    ('17_1_11', '17_1_11_request.json','3x3_cost_17_1_11.json', True),

    # 12. 車両数 : 1、配送先数 : 1(配送時間枠 2000/1/1 15:00:00～2000/1/1 16:00:00、初期解 0→1→0)、
    # management_ttable : [{vtype : "0",start_time : 0,table : 0→1は5},{vtype : "0",start_time : 3,table : 0→1は2},{vtype : "0",start_time : 4,table : 0→1は3}]、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認
    ('17_1_12', '17_1_12_request.json','2x2_cost_17_1_12.json', True),

    # 13. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、初期解 0→1→2→0)、
    # management_ttable : [{vtype : "0",start_time : 0,table : デフォルト},{vtype : "0",start_time : 1,table : 0→1は通行不可、その他はデフォルト}]、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/9:00:00(変更無し))となることを確認(通行不可)
    ('17_1_13', '17_1_13_request.json','3x3_cost_17_1_13.json', True),

    # 14. 車両数 : 2、配送先数 : 2(配送時間枠 2000/1/1 12:00:00～2000/1/1 13:00:00、2000/1/1 13:00:00～2000/1/1 14:00:00、
    # 車両営業時間枠 2000/1/1 10:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、初期解 0→1→0、0→2→0)、出発遅延モードとした場合に
    # 初期解のまま(拠点の出発時刻は2000/1/1/11:00:00(遅延処理)、2000/1/1/12:00:00(遅延処理))となることを確認(車両別営業時間)
    ('17_1_14', '17_1_14_request.json','3x3_cost.json', True),

    # 15. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、初期解 0→1→2→0、拠点の駐車時間 30、荷物量 1、1)、出発遅延モードとした場合に
    # 初期解のまま(拠点の到着時刻は2000/1/1/9:30:00、出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認
    ('17_1_15', '17_1_15_request.json','3x3_cost.json', True),

    # 16. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、初期解 0→1→2→0、拠点の駐車時間 30、荷物量 1(集荷)、1(集荷))、出発遅延モードとした場合に
    # 初期解のまま(拠点の到着時刻は2000/1/1/10:00:00、出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認
    ('17_1_16', '17_1_16_request.json','3x3_cost.json', True),

    # 17. 車両数 : 2、配送先数 : 2(配送時間枠 2000/1/1 11:00:00～2000/1/1 12:00:00、2000/1/1 12:00:00～2000/1/1 13:00:00、初期解 0→1→0、0→2→0)、出発遅延モード、台数削減モードとした場合に
    # 0→1→2→0(拠点の出発時刻は2000/1/1/10:00:00(遅延処理))となることを確認(台数削減)
    ('17_1_17', '17_1_17_request.json','3x3_cost.json', True),

]
