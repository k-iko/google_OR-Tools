# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト16(車両数固定・削減モード)
#-----------------------------------------------------------------
#指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
	# ■正常系
	# 1. 車両数 : 2、配送先数 : 2(距離 1→2で100、初期解 0→1→0および0→2→0)とした場合に
	# 車両が1台(0→1→2→0)となることを確認(mergeによる台数削減)
	('16_1_1', '16_1_1_request.json','3x3_cost_modify4.json', True),

	# 2. 車両数 : 2、配送先数 : 2(2台目の車両営業時間 2000/1/1 6:00:00～2000/1/1 7:00:00、
	# 各配送先の荷物量 150、151、初期解 0→1→0および0→2→0)とした場合に
	# 解が変わらないことを確認(積載量違反となる場合は削減しないことを確認)
	('16_1_2', '16_1_2_request.json','3x3_cost.json', True),

	# 3. 車両数 : 2、配送先数 : 2(1台目の車両営業時間 2000/1/1 9:00:00～2000/1/1 11:00:00、
	# 2台目の積載量上限 100、各配送先の荷物量 150、150、初期解 0→1→0および0→2→0)とした場合に
	# 解が変わらないことを確認(配送時間枠違反となる場合は削減しないことを確認)
	('16_1_3', '16_1_3_request.json','3x3_cost.json', True),

	# 4. 車両数 : 2、配送先数 : 2(2台目の車両営業時間 2000/1/1 6:00:00～2000/1/1 7:00:00、
	# 2台目の積載量上限 100、各配送先の荷物量 150、151、初期解 0→1→0および0→2→0)とした場合に
	# 解が0→2→0および0→1→0となることを確認(積載量違反(違反量は減る)となる場合は削減しないことを確認)
	('16_1_4', '16_1_4_request.json','3x3_cost.json', True),

	# 5. 車両数 : 2、配送先数 : 2(車両営業時間 2000/1/1 9:00:00～2000/1/1 10:00:00および2000/1/1 6:00:00～2000/1/1 7:00:00、
	# 2台目の積載量上限 100、各配送先の荷物量 150、150、初期解 0→1→0および0→2→0)とした場合に
	# 解が変わらないことを確認(配送時間枠違反(違反量は減る)となる場合は削減しないことを確認)
	('16_1_5', '16_1_5_request.json','3x3_cost.json', True),

	# 6. 車両数 : 2、配送先数 : 2(距離 1→2で100、最終訪問先 custno="3"およびspotid="3"、custno="4"およびspotid="4"、初期解 0→1→0および0→2→0)とした場合に
	# 車両が1台(0→1→2→3または0→1→2→4)となることを確認(最終訪問先指定)
	('16_1_6', '16_1_6_request.json','5x5_cost_modify4.json', True),

	# 7. 車両数 : 2、配送先数 : 2(距離 1→2で100、2番目の配送先に1台目は立寄不可、車両営業時間 2台目は2000/1/1 10:00:00～2000/1/1 14:00:00、初期解 0→1→0および0→2→0)とした場合に
	# 2台目の車両が0→1→2→0となることを確認(車両営業時間の基準となる車両がなくなる場合)
	('16_1_7', '16_1_7_request.json','3x3_cost_modify4.json', True),

	# 8. 車両数 : 3、配送先数 : 3(距離 1→2で100、3番目の配送先に3台目以外立寄不可、各配送先の荷物量 150、150、400、初期解 0→1→0および0→2→0および0→3→0)とした場合に
	# 車両が2台(0→1→2→0および0→3→0)となることを確認(merge対象以外に違反があっても台数削減)
	('16_1_8', '16_1_8_request.json','4x4_cost_modify4.json', True),

	# 9. 車両数 : 2、配送先数 : 2(距離 1→2で10000、2→1で100000、初期解 0→1→0および0→2→0)とした場合に
	# 車両が1台(0→1→2→0)となることを確認(解が悪化する場合)
	('16_1_9', '16_1_9_request.json','3x3_cost_modify5.json', True),

	# 10. 車両数 : 2、配送先数 : 2(移動時間 1→2で4、2→1で5、初期解 0→1→0および0→2→0)、opt_d_weight=0.0、opt_t_weight=1.0とした場合に
	# 車両が1台(0→1→2→0)となることを確認(解が悪化する場合、時間最適化)
	('16_1_10', '16_1_10_request.json','3x3_cost_16_1_10.json', True),

	# 11. 車両数 : 3、配送先数 : 6(5→*および*→5および6→*および*→6は0→5および5→6および6→0以外は通行不可、積載量 400、400、200、荷物量 100、100、100、100、200、200、初期解 0→1→2→0および0→3→4→0および0→5→6→0)とした場合に
	# 車両が2台(0→5→6→0および0→1→2→3→4→0)となることを確認(違反をなくしてから台数削減)
	('16_1_11', '16_1_11_request.json','7x7_cost_16_1_11.json', True),

]

