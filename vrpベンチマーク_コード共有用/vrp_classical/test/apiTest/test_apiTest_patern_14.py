# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト14(車両立寄制限)
#-----------------------------------------------------------------
#指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
	# ■異常系
	# 1. 車両数 : 1、配送先数 : 1(1番目の配送先に1台目の車両は立寄不可)とした場合に
	# "failed to read initial solution due to unvisitable vehicle"のエラーメッセージを出力して終了することを確認
	('14_1_1', '14_1_1_request.json','2x2_cost.json', True),

	# 2. 車両数 : 1、配送先数 : 1(拠点に1台目の車両は立寄不可)とした場合に
	# "depot, spot whose customer id (aka custno) = "0", has unvisitable vehicles (aka reje_ve)"のエラーメッセージを出力して終了することを確認
	('14_1_2', '14_1_2_request.json','2x2_cost.json', True),

	# ■正常系
	# 3. 車両数 : 2、配送先数 : 4(1番目および2番目の配送先に2台目の車両は立寄不可、距離 1→4および3→2で100、4→2で10000、初期解 0→1→2→0および0→3→4→0)とした場合に
	# 0→1→3→2→0および0→4→0となることを確認
	('14_1_3', '14_1_3_request.json','5x5_cost_modify3.json', True),

	# 4. 車両数 : 1、配送先数 : 2(車両のvehno=2、1番目配送先にvehno=0および1の車両は立寄不可、距離 2→1で100、初期解 0→1→2→0)とした場合に
	# 0→2→1→0となることを確認
	('14_1_4', '14_1_4_request.json','3x3_cost_modify3.json', True),

	# 5. 車両数 : 4、配送先数 : 5
	# (1番目の配送先に2台目および3台目の車両は立寄不可、
	#  2番目の配送先に2台目および3台目および4台目の車両は立寄不可、
	#  3番目の配送先に1台目および3台目および4台目の車両は立寄不可、
	#  4番目の配送先に1台目および2台目および4台目の車両は立寄不可、
	#  5番目の配送先に1台目および2台目および3台目の車両は立寄不可、
	#  距離 1→3および1→4および1→5で100、
	# 初期解 0→1→2→0および0→3→0および0→4→0および0→5→0)とした場合に
	# 0→2→0および0→3→0および0→4→0および0→1→5→0となることを確認
	('14_1_5', '14_1_5_request.json','6x6_cost_modify1.json', True),


]

