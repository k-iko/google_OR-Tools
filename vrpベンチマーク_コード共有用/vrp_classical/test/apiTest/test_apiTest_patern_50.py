# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト50-1(休憩機能)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠および車両営業時間は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00


test_args=[
    # ■異常系
    # 1. 車両数 : 1、配送先数 : 1、
    # 休憩スポット数 : 0、br_int=-1、br_time=30とした場合に
    # "interval of break (aka break_interval) set to less than 0"のエラーメッセージを出力して終了することを確認(パターン3)
    ('50_1_1', '50_1_1_request.json','2x2_cost.json', True),

    # 2. 車両数 : 1、配送先数 : 1、
    # 休憩スポット数 : 0、br_int=240、br_time=-1とした場合に
    # "time(duration) of break (aka break_time) set to less than 0"のエラーメッセージを出力して終了することを確認(パターン3)
    ('50_1_2', '50_1_2_request.json','2x2_cost.json', True),

    # 3. 車両数 : 1、配送先数 : 1、
    # 休憩スポット数 : 1(CUSTNO br1)とした場合に
    # "customer id (aka CUSTNO) set to other than 0 or positive integer or "e" + positive integer or "b" + positive integer"のエラーメッセージを出力して終了することを確認(パターン1)
    ('50_1_3', '50_1_3_request.json','2x2_cost.json', True),

    # 4. 車両数 : 1、配送先数 : 1、
    # 休憩スポット数 : 1(CUSTNO e1)とした場合にとした場合に
    # "setting break (aka takebreak) must be set to break customer object"のエラーメッセージを出力して終了することを確認(パターン1)
    ('50_1_4', '50_1_4_request.json','2x2_cost.json', True),

    # 5. 車両数 : 1、配送先数 : 1、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:00:00～2000/1/1 11:00:00、休憩スポットの飛び地 CUSTNO b10001、休憩期間 2000/1/1 10:30:00～2000/1/1 11:00:00)とした場合に
    # "same additional ready time (aka ready) must be set to the take break  (aka takebreak)"のエラーメッセージを出力して終了することを確認(パターン1)
    ('50_1_5', '50_1_5_request.json','2x2_cost.json', True),

    # 6. 車両数 : 1、配送先数 : 1、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:00:00～2000/1/1 11:00:00、休憩スポットの飛び地 CUSTNO b10001、休憩期間 2000/1/1 10:00:00～2000/1/1 11:30:00)とした場合に
    # "same additional due time (aka due) must be set to the take break  (aka takebreak)"のエラーメッセージを出力して終了することを確認(パターン1)
    ('50_1_6', '50_1_6_request.json','2x2_cost.json', True),

    # 7. 車両数 : 1、配送先数 : 1、
    # 休憩スポット数 : 1、evplanとした場合に
    # "both break_function and evplan (aka evplan) set"のエラーメッセージを出力して終了することを確認(パターン1)
    ('50_1_7', '50_1_7_request.json','2x2_cost.json', True),

    # 8. 車両数 : 1、配送先数 : 1(配送時間枠 2000/1/1 9:30:00～2000/1/1 10:30:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 9:15:00～2000/1/1 9:45:00)、初期解生成モードとした場合に
    # "failed to create initial solution due to break-time"のエラーメッセージを出力して終了することを確認(パターン1)
    ('50_1_8', '50_1_8_request.json','3x3_cost.json', True),

    # 9. 車両数 : 1、配送先数 : 1(配送時間枠 2000/1/1 9:30:00～2000/1/1 10:30:00)
    # br_int=240、br_time=30、初期解 0→b1→1→0 とした場合に
    # "failed to read initial solution due to break customer object"のエラーメッセージを出力して終了することを確認(パターン3)
    ('50_1_9', '50_1_9_request.json','2x2_cost.json', True),

    # 10. 車両数 : 1、配送先数 : 1(配送時間枠 2000/1/1 10:00:00～2000/1/1 12:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:00:00～2000/1/1 10:30:00)、初期解生成モード、br_int=30とした場合に
    # "failed to create initial solution due to break-time"のエラーメッセージを出力して終了することを確認(パターン2)
    ('50_1_10', '50_1_10_request.json','3x3_cost.json', True),

    # 11. 車両数 : 1、配送先数 : 1、
    # 休憩スポット数 : 0、初期解 0→1→b1→0、br_int=30、br_time=30とした場合に
    # "failed to read initial solution due to break customer object"のエラーメッセージを出力して終了することを確認(パターン3)
    ('50_1_11', '50_1_11_request.json','2x2_cost.json', True),

    # 12. 車両数 : 1、配送先数 : 1 、
    # 休憩スポット数 : 1(1番目の車両立寄不可)とした場合に
    # "break spot (aka takebreak) has unvisitable vehicles (aka reje_ve)"のエラーメッセージを出力して終了することを確認(パターン1)
    ('50_1_12', '50_1_12_request.json','3x3_cost.json', True),

    # 13. 車両数 : 1、配送先数 : 1 
    # 休憩スポット数 : 1(CUSTNO b1)、初期解 0→1→b2→0とした場合にとした場合に
    # "failed to read initial solution due to break-spot"のエラーメッセージを出力して終了することを確認(パターン1)
    ('50_1_13', '50_1_13_request.json','3x3_cost.json', True),

    # 14. 車両数 : 1、配送先数 : 1(配送時間枠 2000/1/1 9:30:00～2000/1/1 10:30:00)
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:00:00～2000/1/1 10:30:00)、初期解 0→1→0 とした場合に
    # "failed to create solution due to take break hard constraint"のエラーメッセージを出力して終了することを確認(パターン1) 
    ('50_1_14', '50_1_14_request.json','3x3_cost.json', True),


    # ■正常系
    # 15. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(パターン1)
    ('50_1_15', '50_1_15_request.json','4x4_cost.json', True),

    # 16. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0とした場合に
    # 0→2→1→b1→0となることを確認(パターン1、拠点に帰る前に休憩)
    ('50_1_16', '50_1_16_request.json','4x4_cost.json', True),

    # 17. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 14:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(早着)
    ('50_1_17', '50_1_17_request.json','4x4_cost.json', True),

    # 18. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 2(休憩期間 2000/1/1 10:30:00～2000/1/1 14:00:00、2000/1/1 11:30:00～2000/1/1 14:00:00、休憩時間 60、30、SPOTID 3、4)、
    # 初期解 0→b1→b2→1→2→0とした場合に
    # 0→2→b1→b2→1→0となることを確認(パターン1、連続して休憩、b1とb2は順不同)
    ('50_1_18', '50_1_18_request.json','5x5_cost.json', True),

    # 19. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 2(休憩期間 2000/1/1 10:30:00～2000/1/1 13:00:00、2000/1/1 10:30:00～2000/1/1 13:00:00、休憩時間 60、30、SPOTID 3、4)、
    # 初期解 0→b1→b2→1→2→0とした場合に
    # 初期解のままとなることを確認(パターン1、休憩スポットを挿入できない場合は採用しない)
    ('50_1_19', '50_1_19_request.json','5x5_cost.json', True),

    # 20. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 11:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0とした場合に
    # 0→b1→2→1→0となることを確認(パターン1、挿入不可の場合は前に戻る)
    ('50_1_20', '50_1_20_request.json','4x4_cost.json', True),

    # 21. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 2(休憩期間 2000/1/1 10:30:00～2000/1/1 14:00:00、2000/1/1 16:00:00～2000/1/1 17:00:00、休憩時間 60、30、SPOTID 3、4)、
    # 初期解 0→b1→b2→1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(パターン1、休憩削除)
    ('50_1_21', '50_1_21_request.json','5x5_cost.json', True),

    # 22. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 2(休憩期間 2000/1/1 10:30:00～2000/1/1 14:00:00、2000/1/1 16:00:00～2000/1/1 17:00:00、休憩時間 60、30、SPOTID 3、4)、
    # 初期解 0→b1→b2→1→2→0、br_time=180とした場合に
    # 0→2→b1→1→0となることを確認(パターン1、br_timeは無視)
    ('50_1_22', '50_1_22_request.json','5x5_cost.json', True),

    # 23. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:30:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0、br_int=200とした場合に
    # 0→2→1→b1→0となることを確認(パターン2)
    ('50_1_23', '50_1_23_request.json','4x4_cost.json', True),

    # 24. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:30:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0、br_int=150とした場合に
    # 0→2→b1→1→0となることを確認(パターン2、休憩間隔)
    ('50_1_24', '50_1_24_request.json','4x4_cost.json', True),

    # 25. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 2(休憩期間 2000/1/1 11:30:00～2000/1/1 14:00:00、2000/1/1 16:00:00～2000/1/1 17:00:00、休憩時間 60、30、SPOTID 3、4)、
    # 初期解 0→b1→1→2→0、br_int=150、br_time=180とした場合に
    # 0→2→b1→1→0となることを確認(パターン2、休憩間隔、br_timeは無視)
    ('50_1_25', '50_1_25_request.json','5x5_cost.json', True),

    # 26. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 初期解 0→1→2→0、br_int=120、br_time=60とした場合に
    # 0→2→b0→1→0となることを確認(パターン3)
    ('50_1_26', '50_1_26_request.json','3x3_cost.json', True),

    # 27. 車両数 : 1、配送先数 : 2(距離 2→1は100、移動時間 2→1は3)、
    # 初期解 0→1→2→0、br_int=120、br_time=60とした場合に
    # 0→2→b0→b1→1→0となることを確認(パターン3、連続して休憩)
    ('50_1_27', '50_1_27_request.json','3x3_cost_50_1_27.json', True),

    # 28. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 初期解 0→1→2→0、br_int=150とした場合に
    # 0→2→1→0となることを確認(休憩なし)
    ('50_1_28', '50_1_28_request.json','3x3_cost.json', True),

    # 29. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 初期解 0→1→2→0、br_time=60とした場合に
    # 0→2→1→0となることを確認(休憩なし)
    ('50_1_29', '50_1_29_request.json','3x3_cost.json', True),

    # 30. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 2(休憩期間 2000/1/1 11:30:00～2000/1/1 14:00:00、2000/1/1 14:00:00～2000/1/1 17:00:00、休憩時間 60、30、SPOTID 3、4)、
    # 初期解 0→1→2→0、br_int=150とした場合に
    # 0→2→b1→1→b2→0となることを確認(休憩なし初期解)
    ('50_1_30', '50_1_30_request.json','5x5_cost.json', True),

    # 31. 車両数 : 2、配送先数 : 2(荷物量 200、100)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、荷物量 200)、0、
    # 初期解 0→1→b1→0、0→2→0とした場合に
    # 初期解のままとなることを確認(休憩スポットの荷物量は無視)
    ('50_1_31', '50_1_31_request.json','4x4_cost.json', True),

    # 32. 車両数 : 2(第2積載上限 300、300)、配送先数 : 2(第2荷物量 200、100)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、第2荷物量 200)、0、
    # 初期解 0→1→b1→0、0→2→0とした場合に
    # 初期解のままとなることを確認(休憩スポットの第2荷物量は無視)
    ('50_1_32', '50_1_32_request.json','4x4_cost.json', True),

    # 33. 車両数 : 2、配送先数 : 6、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 13:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 7)、0、
    # 初期解 0→1→2→b1→0、0→3→4→5→6→0、avetime_ape=0.1とした場合に
    # 0→3→1→2→b1→0、0→4→5→6→0となることを確認(時間平準化)
    ('50_1_33', '50_1_33_request.json','8x8_cost.json', True),

    # 34. 車両数 : 2、配送先数 : 6、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 7)、0、
    # 初期解 0→1→2→b1→0、0→3→4→5→6→0、avetime_ape=0.1、巡回モードとした場合に
    # 初期解のままとなることを確認(時間平準化、巡回モード)
    ('50_1_34', '50_1_34_request.json','8x8_cost.json', True),

    # 35. 車両数 : 1、配送先数 : 2(移動時間2→3は2)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→1→2→b1→0、時間最適化とした場合に
    # 初期解のままとなることを確認(時間最適化、非巡回モード)
    ('50_1_35', '50_1_35_request.json','4x4_cost_50_1_35.json', True),

    # 36. 車両数 : 1、配送先数 : 2(移動時間2→3は2)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→1→2→b1→0、時間最適化、巡回モードとした場合に
    # 0→2→1→b1→0となることを確認(時間最適化、巡回モード)
    ('50_1_36', '50_1_36_request.json','4x4_cost_50_1_35.json', True),

    # 37. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、2→3は通行不可)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0とした場合に
    # 0→b1→2→1→0となることを確認(通行不可)
    ('50_1_37', '50_1_37_request.json','4x4_cost_50_1_37.json', True),

    # 38. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 7:00:00～2000/1/1 12:00:00、休憩時間 30、SPOTID 2)、初期解 0→1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(車両営業時間枠(オーバーラップあり))
    ('50_1_38', '50_1_38_request.json','3x3_cost.json', True),

    # 39. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 7:00:00～2000/1/1 8:00:00、休憩時間 60、SPOTID 3)、初期解 0→1→2→0とした場合に
    # 0→2→1→0となることを確認(車両営業時間枠(オーバーラップなし))
    ('50_1_39', '50_1_39_request.json','4x4_cost.json', True),

    # 40. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 13:00:00～2000/1/1 15:00:00、休憩時間 60、SPOTID 3)、初期解 0→1→2→0とした場合に
    # 0→2→1→0となることを確認(車両営業時間枠(オーバーラップなし))
    ('50_1_40', '50_1_40_request.json','4x4_cost.json', True),

    # 41. 車両数 : 1、配送先数 : 2、
    # management_dtable : [{vtype : "common",start_time : 0,table : すべて1000},{vtype : "time_common",start_time : 1,table : 2→1で100},{vtype : "time_common",start_time : 2,table : 2→1で10000}]
    # 初期解 0→1→2→0、br_int=120、br_time=60とした場合に
    # 0→2→b1→1→0となることを確認(時間別距離)
    ('50_1_41', '50_1_41_request.json','3x3_cost_50_1_41.json', True),

    # 42. 車両数 : 1、配送先数 : 2、
    # management_ttable : [{vtype : "common",start_time : 0,table : すべて1},{vtype : "time_common",start_time : 1,table : 2→1で1.5、それ以外4.0},{vtype : "time_common",start_time : 2,table : 2→1で3}]
    # 初期解 0→1→2→0、br_int=120、br_time=60、時間最適化とした場合に
    # 0→2→b0→1→0となることを確認(時間別時間)
    ('50_1_42', '50_1_42_request.json','3x3_cost_50_1_42.json', True),

    # 43. 車両数 : 1、配送先数 : 3、
    # management_dtable : [{vtype : "common",start_time : 0,table : すべて1000},{vtype : "time_common",start_time : 1,table : 2→1および3→2で100},{vtype : "time_common",start_time : 2,table : 3→2で通行不可}]
    # 初期解 0→1→2→3→0、br_int=120、br_time=60とした場合に
    # 0→2→b0→1→3→b1→0となることを確認(休憩後通行不可)
    ('50_1_43', '50_1_43_request.json','4x4_cost_50_1_43.json', True),

    # 44. 車両数 : 1、配送先数 : 2、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 2)、初期解 0→b1→1→2→0とした場合に
    # 0→2→b0→1→0となることを確認(SPOTID)
    ('50_1_44', '50_1_44_request.json','3x3_cost.json', True),

    # 45. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID "")、初期解 0→b1→1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(SPOTID="")
    ('50_1_45', '50_1_45_request.json','3x3_cost.json', True),

    # 46. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # management_dtable : [{vtype : "common",start_time : 0,table : すべて1000},{vtype : "time_common",start_time : 4,table : 1→0を通行不可}]
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 12:00:00、休憩時間 60、SPOTID "")、初期解 0→b1→1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(SPOTID=""、移動時間<待機時間)
    ('50_1_46', '50_1_46_request.json','3x3_cost_50_1_46.json', True),

    # 47. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 初期解 0→1→2→0、br_int=60、br_time=60、drskill=0.5とした場合に
    # 0→2→b0→1→0となることを確認(drskill)
    ('50_1_47', '50_1_47_request.json','3x3_cost.json', True),

    # 48. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # management_dtable : [{vtype : "common",start_time : 0,table : すべて1000},{vtype : "time_common",start_time : 4,table : 1→0は通行不可}]
    # 初期解 0→1→2→0、br_int=120、br_time=60、opskill=2とした場合に
    # 0→2→b1→1→0となることを確認(opskill)
    ('50_1_48', '50_1_48_request.json','3x3_cost_50_1_48.json', True),

    # 49. 車両数 : 2、配送先数 : 2、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、0、
    # 初期解 0→1→b1→0、0→2→0、巡回モード、drskill=1.0、0.8とした場合に
    # 0→1→b1→0(drskill=0.8)、0→2→0(drskill=1.0)となることを確認(スキルシャッフル)
    ('50_1_49', '50_1_49_request.json','4x4_cost.json', True),

    # 50. 車両数 : 2、配送先数 : 2、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、0、
    # management_dtable : [{vtype : "common",start_time : 0,table : 1→3は通行不可},{vtype : "time_common",start_time : 1,table : すべて1000}]
    # 初期解 0→1→b1→0、0→2→0、drskill=1.0、0.8とした場合に
    # 0→b1→1→0(drskill=0.8)、0→2→0(drskill=1.0)となることを確認(スキルシャッフル、休憩タイミング変更)
    ('50_1_50', '50_1_50_request.json','4x4_cost_50_1_50.json', True),

    # 51. 車両数 : 2、配送先数 : 2、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、0、
    # management_dtable : [{vtype : "common",start_time : 0,table : 1→3は通行不可},{vtype : "time_common",start_time : 1,table : 3→1は通行不可}]
    # 初期解 0→1→b1→0、0→2→0、drskill=1.0、0.8とした場合に
    # 0→1→b1→0(drskill=1.0)、0→2→0(drskill=0.8)となることを確認(スキルシャッフルしない)
    ('50_1_51', '50_1_51_request.json','4x4_cost_50_1_51.json', True),

    # 52. 車両数 : 2、配送先数 : 2(2番目の配送先は1台目に立寄不可)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、0、
    # 初期解 0→1→b1→0、0→2→0、台数削減モードとした場合に
    # 0→1→2→0(2台目)となることを確認(台数削減)
    ('50_1_52', '50_1_52_request.json','4x4_cost.json', True),

    # 53. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解生成モードとした場合に
    # 0→2→b1→1→0となることを確認(初期解生成)
    ('50_1_53', '50_1_53_request.json','4x4_cost.json', True),

    # 54. 車両数 : 1、配送先数 : 2(SPOTID 1、1、荷物量 150、150、荷作業時間 60、60)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 2)、初期解生成モードとした場合に
    # 0→1→b1→2→0(直送便)となることを確認(直送便)
    ('50_1_54', '50_1_54_request.json','3x3_cost.json', True),

    # 55. 車両数 : 2(車両営業時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、積載上限 300、200)、
    # 配送先数 : 3(SPOTID 1、1、2、荷物量 150、150、1、荷作業時間 60、60、1)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解生成モードとした場合に
    # 0→1→b1→0、0→3→2→0(1と2は順不同)となることを確認(休憩スポットを挿入できない場合は直送便をやめる)
    ('50_1_55', '50_1_55_request.json','4x4_cost.json', True),

    # 56. 車両数 : 2(積載上限 300、200)、
    # 配送先数 : 3(SPOTID 1、1、2、荷物量 150、150、1、荷作業時間 60、60、1)、
    # management_dtable : [{vtype : "common",start_time : 0,table : 3→1は通行不可}
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解生成モードとした場合に
    # 0→1→b1→0、0→3→2→0(1と2は順不同)となることを確認(休憩スポットを挿入できない場合は直送便をやめる)
    ('50_1_56', '50_1_56_request.json','4x4_cost_50_1_56.json', True),

    # 57. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、移動距離 1→2は10000000000)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID "")、初期解 0→1→b1→2→0とした場合に
    # inswap処理が実行されてから初期解に戻ることを確認(BackUp)
    ('50_1_57', '50_1_57_request.json','3x3_cost_50_1_57.json', True),

    # 58. 車両数 : 2(訪問数上限 2、0)、配送先数 : 3(距離 3→0および0→3は100)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 4)、初期解 0→1→b1→0、0→2→3→0、巡回モードとした場合に
    # 0→1→b1→2→0、0→3→0となることを確認(休憩スポットは訪問数に含まない)
    ('50_1_58', '50_1_58_request.json','5x5_cost_50_1_58.json', True),

    # 59. 車両数 : 2(訪問数上限 1、0)、配送先数 : 3(SPOTID 1、1、2、立寄り不可 []、[]、[0])、
    # 初期解 0→1→0、0→2→3→0、br_int=90、br_time=60とした場合に
    # 0→2→b0→1→→0、0→3→b1→0となることを確認(訪問数上限、1→""→1は1カウント)
    ('50_1_59', '50_1_59_request.json','3x3_cost.json', True),

    # 60. 車両数 : 2(訪問数上限 1、0)、配送先数 : 3(SPOTID 1、1、2、距離 3→0および0→3は100、荷作業時間 30、30、1)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解 0→1→b1→0、0→2→3→0とした場合に
    # 初期解のままとなることを確認(訪問数上限、1→b(≠1)→1は2カウント)
    ('50_1_60', '50_1_60_request.json','4x4_cost_50_1_60.json', True),

    # 61. 車両数 : 2(訪問数上限 1、0)、配送先数 : 3(SPOTID 1、1、2、荷作業時間 30、60、1、立寄り不可 [1]、[]、[])、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 1)、初期解 0→1→b1→0、0→2→3→0とした場合に
    # 0→1→b1→2→0、0→3→0となることを確認(訪問数上限、1→b(=1)→1は1カウント)
    ('50_1_61', '50_1_61_request.json','3x3_cost_50_1_61.json', True),

    # 62. 車両数 : 1、配送先数 : 3(SPOTID 1、1、2)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→3→0、大量輸送モードとした場合に
    # 0→1→2→b1→3→0(1と2はtie-up)となることを確認(大量輸送モード)
    ('50_1_62', '50_1_62_request.json','4x4_cost.json', True),

    # 63. 車両数 : 1、配送先数 : 3(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 11:00:00～2000/1/1 14:00:00、SPOTID 1、1、2)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 2)、初期解 0→1→2→b1→3→0、大量輸送モードとした場合に
    # 0→1→2→b1→3→0(1と2はtie-up)となることを確認(休憩スポットと配送先はtie-upしない)
    ('50_1_63', '50_1_63_request.json','3x3_cost.json', True),

    # 64. 車両数 : 1、配送先数 : 3(SPOTID 1、1、2)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解生成モード、大量輸送モードとした場合に
    # 0→3→b1→1→2→0(1と2はtie-up)となることを確認(大量輸送モード、初期解生成モード)
    ('50_1_64', '50_1_64_request.json','4x4_cost.json', True),

    # 65. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、電力 すべて3)、
    # 初期解 0→1→2→0、br_int=120、br_time=60とした場合に
    # 0→2→b1→1→0となることを確認(電力テーブル)
    ('50_1_65', '50_1_65_request.json','3x3_cost_50_1_65.json', True),

    # 66. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、経験コスト すべて1000)、
    # 初期解 0→1→2→0、br_int=120、br_time=60とした場合に
    # 0→2→b1→1→0となることを確認(経験コストテーブル)
    ('50_1_66', '50_1_66_request.json','3x3_cost_50_1_66.json', True),

    # 67. 車両数 : 2、配送先数 : 6、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 7)、0、
    # 初期解 0→1→2→b1→0、0→3→4→5→6→0、avevisits_ae=1とした場合に
    # 0→3→1→b1→2→0、0→4→5→6→0となることを確認(件数平準化)
    ('50_1_67', '50_1_67_request.json','8x8_cost.json', True),

    # 68. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、荷物量 300、300)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→0→2→0、回転モードとした場合に
    # 0→2→0→b1→1→0となることを確認(回転機能)
    ('50_1_68', '50_1_68_request.json','4x4_cost.json', True),

    # 69. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、荷物量 300、300、3→1は通行不可)、
	# management_dtable": [{"vtype": "common","start_time": 0.0 : すべて1000}、{"vtype": "time_common","start_time": 2.0 : 0→3通行禁止}、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→0→2→0、回転モードとした場合に
    # 0→2→b1→0→1→0となることを確認(挿入不可の場合は拠点(≠回転のデポ)まで戻る)
    ('50_1_69', '50_1_69_request.json','4x4_cost_50_1_69.json', True),

    # 70. 車両数 : 1(最終訪問先 SPOTID 3、拠点作業時間 60)、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、荷物量 300、300)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→0→2→0→0、回転モードとした場合に
    # 0→2→b1→0→1→3となることを確認(回転機能、車両の拠点作業時間)
    ('50_1_70', '50_1_70_request.json','4x4_cost.json', True),

    # 71. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 15:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、荷物量 300、300)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3、拠点作業時間 180)、初期解 0→1→0→b1→2→0、回転モードとした場合に
    # 0→2→0→b1→1→0となることを確認(休憩スポットの拠点作業時間は無視)
    ('50_1_71', '50_1_71_request.json','4x4_cost.json', True),

    # 72. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 14:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、駐車時間 180)、初期解 0→1→b1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(休憩スポットの駐車時間は無視)
    ('50_1_72', '50_1_72_request.json','4x4_cost.json', True),

    # 73. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 14:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、到着後駐車時間 180)、初期解 0→1→b1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(休憩スポットの到着後駐車時間は無視)
    ('50_1_73', '50_1_73_request.json','4x4_cost.json', True),

    # 74. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 14:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、駐車時間 60、0)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→1→b1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(駐車時間)
    ('50_1_74', '50_1_74_request.json','4x4_cost.json', True),

    # 75. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 12:00:00～2000/1/1 14:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、到着後駐車時間 30、0)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:15:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 3)、初期解 0→1→b1→2→0とした場合に
    # 0→2→1→b1→0となることを確認(到着後駐車時間)
    ('50_1_75', '50_1_75_request.json','4x4_cost.json', True),

    # 76. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 14:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、駐車時間 60、0)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 1)、初期解 0→1→b1→2→0とした場合に
    # 0→2→b1→1→0となることを確認(駐車時間、同一SPOTID)
    ('50_1_76', '50_1_76_request.json','3x3_cost.json', True),

    # 77. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 14:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、SPOTID 1、1、駐車時間 60、60)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 12:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 2)、初期解 0→1→b1→2→0とした場合に
    # 0→2→1→b1→0となることを確認(駐車時間、同一SPOTID)
    ('50_1_77', '50_1_77_request.json','3x3_cost.json', True),

    # 78. 車両数 : 1(最終訪問先 SPOTID 4)、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、荷物量 1(集荷)、1)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 13:00:00～2000/1/1 15:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0とした場合に
    # 0→2→1→0→b1→3となることを確認(集荷最適化)
    ('50_1_78', '50_1_78_request.json','5x5_cost.json', True),

    # 79. 車両数 : 1(最終訪問先 SPOTID 3)、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、荷物量 1(集荷)、1、移動時間 0→3は8)、
    # 初期解 0→1→2→0、br_int=240、br_time=60とした場合に
    # 0→2→1→0→b0→b1→3となることを確認(集荷最適化、休憩スポットが連続)
    ('50_1_79', '50_1_79_request.json','4x4_cost_50_1_79.json', True),

    # 80. 車両数 : 2(最終訪問先 SPOTID 4、5、積載上限 100、300)、
    # 配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、荷物量 300(集荷)、100)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:00:00～2000/1/1 15:00:00、休憩時間 60、SPOTID 3)、0、初期解 0→b1→1→0→0、0→2→0とした場合に
    # 0→2→b1→4、0→1→0→5となることを確認(集荷最適化)
    ('50_1_80', '50_1_80_request.json','6x6_cost.json', True),

    # 81. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 10:30:00～2000/1/1 11:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:00:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0、出発遅延モードとした場合に
    # 0→2→b1→1→0(遅延なし)となることを確認(出発遅延)
    ('50_1_81', '50_1_81_request.json','4x4_cost.json', True),

    # 82. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 10:30:00～2000/1/1 11:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 11:00:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0、遅延最適化とした場合に
    # 0→2→b1→1→0(遅延なし)となることを確認(遅延最適化)
    ('50_1_82', '50_1_82_request.json','4x4_cost.json', True),

    # 83. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3)、初期解 0→b1→1→2→0とした場合に
    # 0→2→b1→10001→0となることを確認(飛び地)
    ('50_1_83', '50_1_83_request.json','4x4_cost.json', True),

    # 84. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00
    # 1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、距離 2→3は100)、
    # 初期解 0→1→2→0、br_int=120、br_time=60とした場合に
    # 0→2→b0→10001→0となることを確認(飛び地、パターン3)
    ('50_1_84', '50_1_84_request.json','4x4_cost_50_1_84.json', True),

    # 85. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、飛び地 CUSTNO b101、休憩時間 30)、初期解 0→b1→1→2→0、時間最適とした場合に
    # 0→2→b101→1→0となることを確認(休憩スポットの飛び地)
    ('50_1_85', '50_1_85_request.json','4x4_cost.json', True),

    # 86. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、飛び地 CUSTNO b101、SPOTID 1)、初期解 0→b1→1→2→0、時間最適とした場合に
    # 0→2→b101→1→0となることを確認(休憩スポットの飛び地)
    ('50_1_86', '50_1_86_request.json','4x4_cost.json', True),

    # 87. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID ""、飛び地 CUSTNO b101、休憩時間 30)、初期解 0→b1→1→2→0、時間最適とした場合に
    # 0→2→b101→1→0となることを確認(休憩スポットの飛び地)
    ('50_1_87', '50_1_87_request.json','3x3_cost.json', True),

    # 88. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、飛び地 CUSTNO b101、SPOTID "")、初期解 0→b1→1→2→0、時間最適とした場合に
    # 0→2→b101→1→0となることを確認(休憩スポットの飛び地)
    ('50_1_88', '50_1_88_request.json','4x4_cost.json', True),

    # 89. 車両数 : 1、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID ""、飛び地 CUSTNO b101、SPOTID 3)、初期解 0→b1→1→2→0、時間最適とした場合に
    # 0→2→b1→1→0となることを確認(休憩スポットの飛び地)
    ('50_1_89', '50_1_89_request.json','4x4_cost.json', True),

    # 90. 車両数 : 2、配送先数 : 2(荷物量 400、100、分割単位 0、0)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、荷物量 600、分割単位 0)、0、
    # 初期解 0→1→b1→0、0→2→0とした場合に
    # 0→2→b1→1(荷物量 100)→0、0→1(荷物量 300)→0となることを確認(休憩スポットは分割しない)
    ('50_1_90', '50_1_90_request.json','4x4_cost.json', True),

    # 91. 車両数 : 1、配送先数 : 2(荷物量 100、400、分割単位 0、0、2→3は通行不可)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、荷物量 600、分割単位 0)、
    # 初期解 0→1→b1→0→2→0、回転モードとした場合に
    # 0→1→b1→2(荷物量 100)→0→2(荷物量 300)→0となることを確認(休憩＋回転＋荷物分割)
    ('50_1_91', '50_1_91_request.json','4x4_cost_50_1_91.json', True),

    # 92. 車両数 : 1、配送先数 : 2(荷物量 100、400、分割単位 0、0、2→3および3→2および0→3は通行不可)、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、休憩時間 60、SPOTID 3、荷物量 600、分割単位 0)、
    # 初期解 0→1→b1→0→2→0、回転モードとした場合に
    # 初期解のままとなることを確認(休憩を挿入できない場合は分割しない)
    ('50_1_92', '50_1_92_request.json','4x4_cost_50_1_92.json', True),

    # 93. 車両数 : 2、配送先数 : 6、
    # 休憩スポット数 : 1(休憩期間 2000/1/1 13:00:00～2000/1/1 14:00:00、休憩時間 60、SPOTID 7)、0、
    # 初期解 0→1→2→b1→0、0→3→4→5→6→0、avedist_ape=0.1とした場合に
    # 0→3→1→2→b1→0、0→4→5→6→0となることを確認(距離平準化)
    ('50_1_93', '50_1_93_request.json','8x8_cost.json', True),

    # 94. 車両数 : 1、配送先数 : 2(割当済荷物の変更条件 additive、配送時間枠 2000/1/1 9:00:00～2000/1/1 17:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00)、
    # 休憩スポット数 : 2(休憩期間 2000/1/1 10:30:00～2000/1/1 12:00:00、2000/1/1 13:30:00～2000/1/1 15:00:00、休憩時間 60、60、SPOTID 3、4)、初期解 0→1→b1→0とした場合に
    # 0→2→b1→1→b2→0となることを確認(未割当荷物)
    ('50_1_94', '50_1_94_request.json','5x5_cost.json', True),

    # 95. 車両数 : 2、配送先数 : 4(SPOTID 1、1、1、1、荷物量(第1および第2) 400、50、50、50、立寄り不可 [1]、[]、[]、[])、初期解生成モード、bulk-shippingモードとした場合に
    # 休憩スポット数 : 1(休憩期間 2000/1/1 10:00:00～2000/1/1 12:00:00、休憩時間 30、SPOTID 2)、0、
    # 初期解生成とした時に 0→1→b1→0および0→2→3→4→0(2、3、4は順不同)となることを確認(積載量違反、分割できない場合)
    ('50_1_95', '50_1_95_request.json','3x3_cost.json', True),

]