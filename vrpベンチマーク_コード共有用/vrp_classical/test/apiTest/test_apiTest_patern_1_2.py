# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト1-2(荷作業時間設定)
#-----------------------------------------------------------------
# 記載のないものは距離は1000、時間は1で固定、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00
test_args=[
	# 車両数 : 1、配送先数 : 1(荷作業時間 0)とした場合に
	# 10:00に配送先に到着し、10:00に作業開始し、10:00に出発することを確認
	('1_2_1', '1_2_1_request.json','2x2_cost.json', True),

	# 車両数 : 1、配送先数 : 1(荷作業時間 60)とした場合に
	# 10:00に配送先に到着し、10:00に作業開始し、11:00に出発することを確認
	('1_2_2', '1_2_2_request.json','2x2_cost.json', True),

	# 車両数 : 1、配送先数 : 2(荷作業時間 120、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00および荷作業時間 60、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00)とした場合に
	# 2番目の配送先→1番目の配送先となることを確認(1→2では2のdueを超えるため)
	('1_2_3', '1_2_3_request.json','3x3_cost.json', True),

	# 車両数 : 1、配送先数 : 1(荷作業時間 60)、拠点および最終配送先の荷作業時間を1000とした場合に
	# 拠点および最終配送先の荷作業時間が反映されていないこと(拠点および最終配送先のst=lv)を確認
	('1_2_4', '1_2_4_request.json','2x2_cost.json', True),

	# 車両数 : 2、配送先数 : 4(荷作業時間 120、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00が2箇所および荷作業時間 60、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00が2箇所)とした場合に
	# 荷作業時間 120、配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00の配送先が別々の車両になることを確認(1台だと片方のdueを超えるため)
	('1_2_5', '1_2_5_request.json','5x5_cost.json', True),

	# 6. 車両数 : 2、配送先数 : 61(荷作業時間 11、配送時間枠 拠点も含めすべて2000/1/1 9:00:00～2000/1/1 20:00:00、各配送先の移動距離および時間は0、初期解は1台目が60、2台目が1)とした場合に
	# 解が改善されないことを確認(11/60×60>11となってしまうケース)
	# ('1_2_6', '1_2_6_request.json','5x5_cost.json', True),
	# →テスト2週目に実施予定

]

