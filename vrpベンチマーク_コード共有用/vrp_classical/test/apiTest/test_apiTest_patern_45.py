# -*- coding: utf-8 -*-
# !/usr/bin/env python3

# ---------------------------------------------------------------------
# ---------------------------------------------------------------------
#
# APIテスト環境
#

import sys
import os
import pprint

import json
import traceback
import random
import time
import datetime
import logging
from io import StringIO
import re
import numpy as np
import copy
import pytest
import test_apiTest_driver as driver

#-----------------------------------------------------------------
# テスト45(飛び地機能)
#-----------------------------------------------------------------
# 指定のないものは距離は1000、時間は1で固定、荷作業時間は1、配送時間枠は2000/1/1 9:00:00～2000/1/1 17:00:00で固定
# *但し拠点と最終訪問先の配送時間枠は1000/1/1 0:00:00～3000/1/1 0:00:00

test_args=[
    # ■異常系
    # 1. 車両数 : 1、配送先数 : 1(飛び地 CUSTNO 10001、SPOTID 2、距離テーブルのサイズ 2×2)とした場合に
    # "distance table (aka dtable) does not match spotid"のエラーメッセージを出力して終了することを確認
    ('45_1_1', '45_1_1_request.json','2x2_cost.json', True),

    # 2. 車両数 : 1、配送先数 : 2(1番目の配送先の飛び地 CUSTNO 10001、SPOTID 2、駐車時間 10)とした場合に
    # "same parking time (aka parkt_open) must be set to the same spot (aka spotid)"のエラーメッセージを出力して終了することを確認
    ('45_1_2', '45_1_2_request.json','3x3_cost.json', True),

    # 3. 車両数 : 1、配送先数 : 1(飛び地 CUSTNO 10001、駐車時間 -1)とした場合に
    # "parking time (aka parkt_open) set to less than 0"のエラーメッセージを出力して終了することを確認
    ('45_1_3', '45_1_3_request.json','2x2_cost.json', True),

    # 4. 車両数 : 1、配送先数 : 1(飛び地 CUSTNO 10001、SPOTID 0)とした場合に
    # "spotid = "0" must be set to depot or last spot"のエラーメッセージを出力して終了することを確認
    ('45_1_4', '45_1_4_request.json','2x2_cost.json', True),

    # 5. 車両数 : 1、配送先数 : 1(飛び地 CUSTNO -1)とした場合に
    # "customer id (aka custno) set to other than 0 or positive integer or "e" + positive integer"のエラーメッセージを出力して終了することを確認
    ('45_1_5', '45_1_5_request.json','2x2_cost.json', True),

    # ■正常系
    # 6. 車両数 : 1、配送先数 : 2(1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、距離 0→3は100、初期解 0→1→2→0)とした場合に
    # 0→10001→2→0となることを確認
    ('45_1_6', '45_1_6_request.json','4x4_cost_45_1_6.json', True),

    # 7. 車両数 : 1、配送先数 : 2(1番目の配送先の配送時間枠 2000/1/1 8:00:00～2000/1/1 9:00:00、1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/1 10:00:00～2000/1/1 11:00:00、初期解 0→1→2→0)とした場合に
    # 0→10001→2→0となることを確認
    ('45_1_7', '45_1_7_request.json','3x3_cost.json', True),

    # 8. 車両数 : 1、配送先数 : 2(駐車時間 60、0、2番目の配送先の配送時間枠 2000/1/1 9:00:00～2000/1/1 12:00:00、1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、駐車時間 30、初期解 0→1→2→0)とした場合に
    # 0→10001→2→0となることを確認
    ('45_1_8', '45_1_8_request.json','4x4_cost.json', True),

    # 9. 車両数 : 1、配送先数 : 2(1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、2番目の配送先の飛び地 CUSTNO 10002、SPOTID 4、距離 4→3は100、0→2は2000、初期解 0→1→2→0)とした場合に
    # 0→10002→10001→0となることを確認
    ('45_1_9', '45_1_9_request.json','5x5_cost_45_1_9.json', True),

    # 10. 車両数 : 1(車両営業時間枠 2000/1/1 10:00:00～2000/1/1 20:00:00)、配送先数 : 2(配送時間枠 2000/1/1 16:00:00～2000/1/1 17:00:00、2000/1/1 17:00:00～2000/1/1 18:00:00、1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/1 10:00:00～2000/1/1 11:00:00、2番目の配送先の飛び地 CUSTNO 10002、配送時間枠は2000/1/1 14:00:00～2000/1/1 15:00:00、初期解 0→1→2→0)、時間最適とした場合に
    # 0→10001→10002→0となることを確認
    ('45_1_10', '45_1_10_request.json','3x3_cost.json', True),

    # 11. 車両数 : 1、配送先数 : 2(拠点の飛び地 CUSTNO 10000、SPOTID 1、初期解 0→1→0)とした場合に
    # 初期解のままとなることを確認(拠点に設定された飛び地設定は無視)
    ('45_1_11', '45_1_11_request.json','2x2_cost.json', True),

    # 12. 車両数 : 1(初期電力 4)、充電スポット数 : 1(配送時間枠 2000/1/1 12:00:00～2000/1/1 17:00:00、飛び地 CUSTNO e10000、2000/1/1 9:00:00～2000/1/1 17:00:00)、配送先数 : 1(消費電力はすべて3、初期解 0→1→2→0)、evplan=True、時間最適とした場合に
    # 0→e0→1→0(e0で6充電)となることを確認(充電スポットに設定された飛び地設定は無視)
    ('45_1_12', '45_1_12_request.json','3x3_cost_45_1_12.json', True),

    # 13. 車両数 : 1、配送先数 : 2(2番目の配送先の飛び地 CUSTNO 10002、SPOTID 3、1→2および2→1は通行不可)、初期解生成モードとした場合に
    # 0→10002→1→0となることを確認(初期解生成+通行不可)
    ('45_1_13', '45_1_13_request.json','4x4_cost_45_1_13.json', True),

    # 14. 車両数 : 1、配送先数 : 2(1番目の配送先の飛び地 CUSTNO 10001、SPOTID 2、初期解 0→1→2→0)とした場合に
    # 0→10001→2→0となることを確認(同一SPOTID)
    ('45_1_14', '45_1_14_request.json','3x3_cost.json', True),

    # 15. 車両数 : 1、配送先数 : 1(最終訪問先 custno="2"およびspotid="2"、最終訪問先の飛び地 CUSTNO 10002、SPOTID 1、初期解 0→1→0)、巡回モードとした場合に
    # 0→1→2となることを確認(最終訪問先に設定された飛び地設定は無視)
    ('45_1_15', '45_1_15_request.json','3x3_cost.json', True),

    # 16. 車両数 : 2、配送先数 : 2(配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、配送時間枠 2000/1/1 13:00:00～2000/1/1 17:00:00、2番目の配送先の飛び地 CUSTNO 10002、SPOTID 4、配送時間枠 2000/1/1 13:00:00～2000/1/1 17:00:00、
    # 距離 1→4および4→1および3→2および2→3は2000、初期解 0→1→0および0→2→0)、台数削減モードとした場合に
    # 0→10002→10001→0となることを確認(台数削減)
    ('45_1_16', '45_1_16_request.json','5x5_cost_45_1_16.json', True),

    # 17. 車両数 : 2(訪問数上限 2、2)、配送先数 : 4(配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 9:00:00～2000/1/1 10:00:00、2000/1/1 9:00:00～2000/1/1 17:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、配送時間枠 2000/1/1 9:00:00～2000/1/1 10:00:00、
    # 荷作業時間は全て0、初期解 0→1→2→0および0→3→4→0)とした場合に
    # 0→2→0および0→3→10001→4→0)となることを確認(訪問数上限)
    ('45_1_17', '45_1_17_request.json','5x5_cost.json', True),

    # 18. 車両数 : 1、配送先数 : 4(SPOTID 1、1、1、4、1番目の配送先の飛び地 CUSTNO 10001、SPOTID 4およびCUSTNO 10002、SPOTID 2、距離 1→4および4→1は10000、初期解 0→1→2→3→4→0)、bulk-shippingモードとした場合に
    # 0→2→3→10002→4→0(2と3はtie-up)となることを確認(飛び地設定がある場合はtie-upされない)
    ('45_1_18', '45_1_18_request.json','4x4_cost_45_1_18.json', True),

    # 19. 車両数 : 1、配送先数 : 4(SPOTID 1、1、1、4、1番目の配送先の飛び地 CUSTNO 10001、SPOTID 4およびCUSTNO 10002、SPOTID 2、距離 1→4および4→1は10000)、bulk-shippingモード、初期解生成モードとした場合に
    # 0→4→10002→2→3→0(2と3はtie-up)となることを確認(飛び地設定がある場合はtie-upされない)
    ('45_1_19', '45_1_19_request.json','4x4_cost_45_1_19.json', True),

    # 20. 車両数 : 1、配送先数 : 2(荷物量 300、300、1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、2番目の配送先の飛び地 CUSTNO 10002、SPOTID 4、距離 4→0および0→3は100、初期解 0→1→0→2→0)、回転モードとした場合に
    # 0→10002→0→10001→0となることを確認(回転機能)
    ('45_1_20', '45_1_20_request.json','5x5_cost_45_1_20.json', True),

    # 21. 車両数 : 1、配送先数 : 2(荷物量 300、300、1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、2番目の配送先の飛び地 CUSTNO 10002、SPOTID 4、距離 4→0および0→3は100)、回転モード、初期解生成モードとした場合に
    # 0→10002→0→10001→0となることを確認(回転機能、初期解生成)
    ('45_1_21', '45_1_21_request.json','5x5_cost_45_1_21.json', True),

    # 22. 車両数 : 1(車両営業時間 2000/1/1 10:00:00～2000/1/1 20:00:00)、配送先数 : 2(配送時間枠 2000/1/1 10:00:00～2000/1/1 11:00:00、2000/1/1 14:00:00～2000/1/1 15:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、SPOTID 1、配送時間枠 2000/1/1 16:00:00～2000/1/1 17:00:00、2番目の配送先の飛び地 CUSTNO 10002、SPOTID 2、配送時間枠 2000/1/1 17:00:00～2000/1/1 18:00:00、初期解 0→1→2→0)、
    # 時間最適、遅延最適とした場合に
    # 0→10001→10002→0となることを確認(遅延最適)
    ('45_1_22', '45_1_22_request.json','3x3_cost.json', True),

    # 23. 車両数 : 2(車両営業時間枠 2000/1/1 10:00:00～2000/1/1 18:00:00、2000/1/2 10:00:00～2000/1/2 18:00:00)、配送先数 : 2(荷作業時間は全て0、配送時間枠 2000/1/1 10:00:00～2000/1/1 12:00:00、2000/1/2 10:00:00～2000/1/2 12:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/2 10:00:00～2000/1/1 12:00:00、2番目の配送先の飛び地 CUSTNO 10002、配送時間枠 2000/1/3 10:00:00～2000/1/1 12:00:00)、初期解生成モードとした場合に
    # 0→1→0および0→2→0となることを確認(日付が異なる場合)
    ('45_1_23', '45_1_23_request.json','3x3_cost.json', True),

    # 24. 車両数 : 2(車両営業時間枠 2000/1/1 10:00:00～2000/1/1 18:00:00、2000/1/2 10:00:00～2000/1/2 18:00:00)、配送先数 : 2(荷作業時間は全て0、配送時間枠 2000/1/1 10:00:00～2000/1/1 12:00:00、2000/1/2 10:00:00～2000/1/2 12:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/2 10:00:00～2000/1/1 12:00:00、2番目の配送先の飛び地 CUSTNO 10002、配送時間枠 2000/1/3 10:00:00～2000/1/1 12:00:00)、初期解生成モード、台数削減モードとした場合に
    # 0→10001→2→0(2台目)となることを確認(日付が異なる場合、台数削減)
    ('45_1_24', '45_1_24_request.json','3x3_cost.json', True),

    # 25. 車両数 : 2(車両営業時間枠 2000/1/1 10:00:00～2000/1/1 18:00:00、2000/1/3 10:00:00～2000/1/3 18:00:00)、配送先数 : 2(荷作業時間は全て0、配送時間枠 2000/1/1 10:00:00～2000/1/1 12:00:00、2000/1/2 10:00:00～2000/1/2 12:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/2 10:00:00～2000/1/1 12:00:00、2番目の配送先の飛び地 CUSTNO 10002、配送時間枠 2000/1/3 10:00:00～2000/1/1 12:00:00)、初期解生成モード、台数削減モードとした場合に
    # 0→1→0および0→10002→0となることを確認(日付が異なる場合、台数削減すると違反)
    ('45_1_25', '45_1_25_request.json','3x3_cost.json', True),

    # 26. 車両数 : 1(車両営業時間枠 2000/1/1 10:00:00～2000/1/1 18:00:00)、配送先数 : 2(荷作業時間は全て0、配送時間枠 2000/1/1 10:00:00～2000/1/1 12:00:00、2000/1/2 10:00:00～2000/1/2 12:00:00、
    # 1番目の配送先の飛び地 CUSTNO 10001、配送時間枠 2000/1/2 10:00:00～2000/1/1 12:00:00、2番目の配送先の飛び地 CUSTNO 10002、配送時間枠 2000/1/3 10:00:00～2000/1/1 12:00:00)、初期解生成モードとした場合に
    # 0→1→2→0となることを確認(日付が異なる場合、違反解しか作成できない場合)
    ('45_1_26', '45_1_26_request.json','3x3_cost.json', True),

    # 27. 車両数 : 1、配送先数 : 2(1番目の配送先の飛び地 CUSTNO 10001、SPOTID 3、距離 0→1は100、初期解 0→10001→2→0)とした場合に
    # 0→1→2→0となることを確認
    ('45_1_27', '45_1_27_request.json','4x4_cost_45_1_27.json', True),
]
