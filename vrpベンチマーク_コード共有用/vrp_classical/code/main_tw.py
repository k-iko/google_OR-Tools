#-*- coding: utf-8 -*-
#!/usr/bin/env python3

#
# main_tw.py
#


cpp_flag=True

import csv
import math
import sys
import subprocess
import datetime
import locale
from functools import reduce
import time
from texttable import Texttable
#from myplotg import plotroute       # daic
# import networkx as nx
import copy ##20180904
import os ##20190917
import signal ##20190917
from multiprocessing import Pool, Value  ##20190917
from multiprocessing import freeze_support  ##20190917 cx_Freeze(and Pool.pyc->pool.pyc)
from itertools import combinations, combinations_with_replacement #20200330
from itertools import product #20200330
from itertools import permutations #20200330
from itertools import groupby
import random #20200401
import logging ##20200626
import pprint
import traceback
import inspect
# import numpy as np
from collections import deque

# from mpi4py import MPI
# comm=MPI.COMM_WORLD
# rank=comm.Get_rank()
# size=comm.Get_size()
rank=0
size=1

#print(os.getpid(), flush=True)

if cpp_flag==True:
	from cross_dtable import Vehicle as CppVehicle
	from cross_dtable import Customer as CppCustomer
	from cross_dtable import Cppargs
	from cross_dtable import cross_dtable as cross_dtable_cpp

class Customer:
	def __init__(self,_custno,_spotid,_y,_x,_dem,_dem2,_ready,_due,_servt,_starttime,_reje_ve,_parkt_arrive,_parkt_open,_depotservt,_additionalcust,_demdivideunit,_requestType,_deny_unass,e_rate=0):

		self.custno=_custno
		self.spotid=_spotid
		self.spotno=0
		self.y=float(_y)
		self.x=float(_x)
		self.dem=float(_dem)
		self.dem2=float(_dem2)
		self.ready=_ready
		self.due=_due
		self.servt=_servt
		self.node=""
		self.e_rate = e_rate
		self.reje_ve=_reje_ve
		self.parkt_arrive=_parkt_arrive
		self.parkt_open=_parkt_open
		self.depotservt=_depotservt
		self.additionalcust=_additionalcust
		self.demdivideunit=_demdivideunit
		self.requestType=_requestType
		self.changecust="free"

		if len(_starttime) < 6: ##20200626
			sttime=_starttime.split(":")
			readytime=self.ready.split(":")
			duetime=self.due.split(":")
			
			self.ready_fs= (datetime.datetime(2000,1,1,int(readytime[0]),int(readytime[1]),00) \
					- datetime.datetime(2000,1,1,int(sttime[0]),int(sttime[1]),00)).total_seconds()/3600

			##
			self.due_fs= (datetime.datetime(2000,1,1,int(duetime[0]),int(duetime[1]),00) \
				- datetime.datetime(2000,1,1,int(sttime[0]),int(sttime[1]),00)).total_seconds()/3600
		else: ##20200626
			readytime=self.ready.split(":")
			duetime=self.due.split(":")

			self.ready_fs= (datetime.datetime.strptime(self.ready, '%Y/%m/%d %H:%M:%S') \
					- datetime.datetime.strptime(_starttime, '%Y/%m/%d %H:%M:%S')).total_seconds()/3600

			##
			self.due_fs= (datetime.datetime.strptime(self.due, '%Y/%m/%d %H:%M:%S') \
				- datetime.datetime.strptime(_starttime, '%Y/%m/%d %H:%M:%S')).total_seconds()/3600

		self.servt=float(_servt)/60.0
		self.parkt_arrive=float(_parkt_arrive)/60.0
		self.parkt_open=float(_parkt_open)/60.0
		self.depotservt=float(_depotservt)/60.0

		self.deny_unass=_deny_unass #未割り当て荷物 未割当て禁止フラグ

		self.error_check()

	def error_check(self):
		try:
			#custnoに0、あるいは、正の整数値以外の文字列、あるいは、 0以上の整数値の文字列の先頭に"e"を付与した文字列、以外が指定された場合
			if not ((self.custno.isdecimal() and int(self.custno)>=0)\
				or (self.custno.startswith("e") and self.custno[1:].isdecimal() and int(self.custno[1:])>=0)
#				or (self.custno.startswith("b") and (self.custno[1:].replace('_', '').isdecimal() and int(self.custno[1:].replace('_', ''))>=0))):
				or (self.custno.startswith("b") and (self.custno[1:].isdecimal() and int(self.custno[1:])>=0))):
				sErrMes = "customer id (aka custno) set to other than 0 or positive integer or \"e\" + positive integer  or \"b\" + positive integer(custno = "+self.custno+")"
				raise ValueError(sErrMes)
			for ac in self.additionalcust:
				if not ((ac.custno.isdecimal() and int(ac.custno)>=0)\
				or (ac.custno.startswith("e") and ac.custno[1:].isdecimal() and int(ac.custno[1:])>=0)
#				or (ac.custno.startswith("b") and ac.custno[1:].replace('_', '').isdecimal() and int(ac.custno[1:].replace('_', ''))>=0)):
				or (ac.custno.startswith("b") and ac.custno[1:].isdecimal() and int(ac.custno[1:])>=0)):
					sErrMes = "customer id (aka custno) set to other than 0 or positive integer or \"e\" + positive integer or \"b\" + positive integer (custno = "+ac.custno+")"
					raise ValueError(sErrMes)

			#e_rate<0の場合
			if self.e_rate<0:
				sErrMes = "charging rate of charging stations (aka e_rate) set to less than 0 (e_rate = "+str(self.e_rate)+")"
				raise ValueError(sErrMes)

			#拠点のreje_veに[]以外が設定されている場合
			if self.custno=="0" and self.reje_ve!=[]:
				sErrMes = "depot, spot whose customer id (aka custno) = \"0\", has unvisitable vehicles (aka reje_ve) (reje_ve = "+str(self.reje_ve)+")"
				raise ValueError(sErrMes)

			#parkt_open<0の場合
			if self.parkt_open<0:
				sErrMes = "parking time (aka parkt_open) set to less than 0 (parkt_open = "+str(self.parkt_open)+")"
				raise ValueError(sErrMes)
			for ac in self.additionalcust:
				if ac.parkt_open<0:
					sErrMes = "parking time (aka parkt_open) set to less than 0 (parkt_open = "+str(ac.parkt_open)+")"
					raise ValueError(sErrMes)

			#parkt_arrive<0の場合
			if self.parkt_arrive<0:
				sErrMes = "parking time (aka parkt_arrive) set to less than 0 (parkt_arrive = "+str(self.parkt_arrive)+")"
				raise ValueError(sErrMes)
			for ac in self.additionalcust:
				if ac.parkt_arrive<0:
					sErrMes = "parking time (aka parkt_arrive) set to less than 0 (parkt_arrive = "+str(ac.parkt_arrive)+")"
					raise ValueError(sErrMes)

			#depotservt<0の場合
			if self.depotservt<0:
				sErrMes = "customer depot service time (aka depotservt) set to less than 0 (depotservt = "+str(self.depotservt)+")"
				raise ValueError(sErrMes)

			#demdivideunitに0、あるいは、正の整数値以外の文字列以外が指定された場合
			if not (isinstance(self.demdivideunit,int) and int(self.demdivideunit)>=0):
				sErrMes = "load dividing number (aka demdivideunit) must be 0 or positive integer (demdivideunit = "+str(self.demdivideunit)+")"
				raise ValueError(sErrMes)

			#dem<0の場合
			if self.dem<0:
				sErrMes = "loading weight of package (aka dem) set to less than 0 (dem = "+str(self.dem)+")"
				raise ValueError(sErrMes)

			#dem2<0の場合
			if self.dem2<0:
				sErrMes = "loading size of package (aka dem2) set to less than 0 (dem2 = "+str(self.dem2)+")"
				raise ValueError(sErrMes)

			#requestTypeが"DELIVERY"、"PICKUP"以外の場合
			if self.requestType!="DELIVERY" and self.requestType!="PICKUP":
				sErrMes = "request type of load (aka requestType) set to other than \"DELIVERY\" or \"PICKUP\" (requestType = "+str(self.requestType)+")"
				raise ValueError(sErrMes)

		except Exception:
			sErr = traceback.format_exc()
			sErr = ["<Error message log>",sErr]
			sLogBuf = " ".join(list(map(str,sErr)))
			if rank==0:
				logging.log(logging.ERROR,sLogBuf)
			raise

	def output(self, sLogBuf):
		sLog = [self.custno,self.spotid,self.spotno,self.x,self.y,self.dem,self.dem2,self.ready,self.due,self.ready_fs,self.due_fs,self.servt,self.node,self.reje_ve,self.parkt_arrive,self.parkt_open,self.depotservt,self.additionalcust,self.demdivideunit,self.requestType,self.changecust,self.e_rate]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		return sLogBuf

class Vehicle:
	# daic
	def __init__(self,_vehno,_cap,_cap2,_evehicle_dict,_vtype,_etype,_enddepot,_maxvisit,_startoptime,_endoptime,_maxrotate,_depotservt,_rmpriority,_takebreak,_reserved_v_flag,argvs):		
		self.vehno=_vehno
		self.cap=_cap
		self.cap2=_cap2
		self.route=[]
		self.totalcost=0.0
		self.totalcost_wolast=0.0
		self.arr=[]
		#self.dtable=_dtable
		#self.ttable=_ttable
		# argvs.management_dtable = management_dtable
		# argvs.management_ttable = management_ttable
		# argvs.management_etable = management_etable
		# argvs.management_cotable = management_cotable
		# self.endhour=_L
		self.load_onbrd=0.0
		self.load_onbrd2=0.0
		self.load_pickup=0.0
		self.load_pickup2=0.0
		self.opskill=1.0 ##20180904
		self.drskill=1.0 ##20180904
		self.rtid=None ##20180904
		self.e_capacity=_evehicle_dict["E-CAPACITY"]##20200315
		self.e_initial=_evehicle_dict["E-INITIAL"]##20200315
		self.e_cost=_evehicle_dict["E-COST"]##20200315
		self.e_margin=_evehicle_dict["E-MARGIN"]##20200315
		self.rem_batt=[] ##20200315
		self.chg_batt=[] ##2020040
		self.chg_batt_dict={} ##20200406
		self.slack_t=[] ##20200527
		self.time_pen=0.0
		self.load_pen=0.0
		self.load_pen2=0.0
		self.vtype=_vtype
		self.etype=_etype
		self.enddepot=_enddepot
		self.startoptime=_startoptime
		self.endoptime=_endoptime
		self.direct_flag=False
		self.starthour=0.0
		self.endhour=0.0
		self.delay_arr=[]
		self.delay_totalcost=0.0
		self.delay_totalcost_wolast=0.0
		self.delay_rem_batt=[] 
		self.delay_chg_batt=[] 
		self.delay_chg_batt_dict={}
		self.delay_slack_t=[]
		self.maxvisit=int(_maxvisit)
		self.maxrotate=int(_maxrotate)
		self.depotservt=_depotservt/60
		self.rmpriority=int(_rmpriority)
		self.takebreak=_takebreak
		self.reserved_v_flag=_reserved_v_flag #未割り当て荷物 予備車両フラグ

		self.error_check(argvs)


	def error_check(self,argvs):
		try:
			#cap<0の場合
			if self.cap<0:
				sErrMes = "max loading weight of vehicles (aka cap) set to less than 0 (cap = "+str(self.cap)+")"
				raise ValueError(sErrMes)

			#cap2<0の場合
			if self.cap2<0:
				sErrMes = "max loading size of vehicles (aka cap2) set to less than 0 (cap2 = "+str(self.cap2)+")"
				raise ValueError(sErrMes)

			if argvs.evplan:
				#e_capacity < e_initialの場合
				if self.e_capacity < self.e_initial:
					sErrMes = "max epower (aka e_capacity) < init epower (aka e_initial) (e_capacity = "+str(self.e_capacity)+", e_initital = "+str(self.e_initial)+")"
					raise ValueError(sErrMes)

				#e_capacity <= e_marginの場合
				if self.e_capacity <= self.e_margin:
					sErrMes = "max epower (aka e_capacity) <= marginal epower (aka e_margin) (e_capacity = "+str(self.e_capacity)+", e_margin = "+str(self.e_margin)+")"
					raise ValueError(sErrMes)

				#e_initial <= e_marginの場合
				if self.e_initial <= self.e_margin:
					sErrMes = "init epower (aka e_initial) <= marginal epower (aka e_margin) (e_initial = "+str(self.e_initial)+", e_margin = "+str(self.e_margin)+")"
					raise ValueError(sErrMes)

			#reje_veにenddepotが含まれる場合
			if self.vehno in self.enddepot.reje_ve:
				sErrMes = "end spot (aka enddepot) has unvisitable vehicles (aka reje_ve) (vehno = "+str(self.vehno)+", reje_ve = "+str(self.enddepot.reje_ve)+", enddepot = "+str(self.enddepot.custno)+")"
				raise ValueError(sErrMes)

			#maxvisit<0の場合
			if not (isinstance(self.maxvisit,int) and self.maxvisit>=0):
				sErrMes = "max visits (aka maxvisit) must be 0 or positive integer (maxvisit = "+str(self.maxvisit)+")"
				raise ValueError(sErrMes)

			#maxvrotate<0の場合
			if not (isinstance(self.maxrotate,int) and self.maxrotate>=0):
				sErrMes = "vehicle max rotate (aka maxrotate) must be 0 or positive integer (maxrotate = "+str(self.maxrotate)+")"
				raise ValueError(sErrMes)

			#depotservt<0の場合
			if self.depotservt<0:
				sErrMes = "vehicle depot service time (aka depotservt) set to less than 0 (depotservt = "+str(self.depotservt)+")"
				raise ValueError(sErrMes)

			#rmpriorityが0,1,2以外の場合
			if not self.rmpriority in [0,1,2]:
				sErrMes = "vehicle remove priority (aka rmpriority) must be 0 or 1 or 2 (rmpriority = "+str(self.rmpriority)+")"
				raise ValueError(sErrMes)
			
			#takebreakに休憩以外のCustomerオブジェクトが指定された場合
			if not self.takebreak==[]:
				for cus in self.takebreak:
					if cus.custno[0]!='b':
						sErrMes = "setting break (aka takebreak) must be set to break customer object (custno = "+cus.custno+")"
						raise ValueError(sErrMes)


		except Exception:
			sErr = traceback.format_exc()
			sErr = ["<Error message log>",sErr]
			sLogBuf = " ".join(list(map(str,sErr)))
			if rank==0:
				logging.log(logging.ERROR,sLogBuf)
			raise

	def output(self,argvs,sLogBuf,used_customers,divided,delay=False):
		depo_idx=[j for j,c in enumerate(self.route[:-1]) if c.custno=="0"]+[len(self.route)-1]
		servt_dict={}
		#配送時間
		for i in range(len(depo_idx)-1):
			servt_dict[self.route[depo_idx[i]]]=0
			servt=0
			for j in range(depo_idx[i]+1,depo_idx[i+1]):
				if self.route[j].requestType=="DELIVERY" and self.route[j].custno[0]!="b":
					servt+=self.route[j].depotservt
			if self.route[depo_idx[i]+1].custno!="0":
				servt_dict[self.route[depo_idx[i]]]+=servt+self.depotservt
			else:
				servt_dict[self.route[depo_idx[i]]]+=servt
		#集荷時間
		servt_dict[self.route[len(self.route)-1]]=0
		for i in range(1,len(depo_idx)):
			servt=0
			for j in range(depo_idx[i-1]+1,depo_idx[i]):
				if self.route[j].requestType=="PICKUP":
					servt+=self.route[j].depotservt
	
			servt_dict[self.route[depo_idx[i]]]+=servt


		load=[0 for c in self.route]
		load2=[0 for c in self.route]
		for i in range(len(self.route)-1):
			if i in depo_idx:
				for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
					if self.route[j].requestType=="DELIVERY":
						if self.route[j].custno[0]!="b":
							load[i]+=self.route[j].dem
							load2[i]+=self.route[j].dem2
			else:
				if self.route[i].custno[0]!="b":
					if self.route[i].requestType=="DELIVERY":
						load[i]=load[i-1]-self.route[i].dem
						load2[i]=load2[i-1]-self.route[i].dem2
					else:
						load[i]=load[i-1]+self.route[i].dem
						load2[i]=load2[i-1]+self.route[i].dem2
				else:
					load[i]=load[i-1]
					load2[i]=load2[i-1]

		for i in reversed(range(len(load))):
			if i in depo_idx and i+1 in depo_idx:
				load[i]=load[i+1]
				load2[i]=load2[i+1]

		load=[i if i>1e-9 else 0 for i in load] #誤差対策
		load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

		no_park_idx=[]
		for c in self.route[depo_idx[0]+1:depo_idx[1]]:
			if c.requestType=="DELIVERY":
				break
		else:
			if load[0]==0 and load2[0]==0:
				no_park_idx.append(0)
		
		for i in range(1,len(depo_idx)-1):
			if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
				for c in self.route[depo_idx[i]+1:depo_idx[i+1]]:
					if c.requestType=="DELIVERY":
						break
				else:
					if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
						no_park_idx.append(depo_idx[i])
		if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
			no_park_idx.append(depo_idx[-1])

		divnum=0
		for c in self.route[1:-1]:
			if c.custno=="0":
				continue
			if c.custno in used_customers:
				divnum+=1
			else:
				used_customers.append(c.custno)

		last_idx = get_last_idx(self, argvs)

		table=Texttable()
		if argvs.bulkShipping_flag:
			table.set_cols_width([12]+[12 for tc in self.route for c in tc.customers])
			if delay==False:
				if argvs.demand2==0:
					table.add_rows([["cust_no"]+[c.custno for tc in self.route for c in tc.customers],
									["arrival_time"]+[str(round(self.arr[i],4))+" !" 
									if ((self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.arr[i],4))+" *" if compare_time(self.st[i],self.route[i].due_fs)>0 
									else str(round(self.arr[i],4)) for i in range(len(self.route)) for c in self.route[i].customers], 
									["park_time_ar\npark_time_op"]+[str(c.parkt_arrive)+"\n"+str(c.parkt_open) if self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx else str(0)+"\n"+str(0) for i in range(len(self.route)) for c in self.route[i].customers],
									["loading_time"]+[servt_dict[tc]*self.opskill if tc in servt_dict else c.servt*self.opskill if tc.custno[0]!='b' else c.servt for tc in self.route for c in tc.customers],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for tc in self.route for c in tc.customers],
									["load"]+[str(load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))+" *" 
									if load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]])>self.cap
									else str(load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))]])
				else:
					table.add_rows([["cust_no"]+[c.custno for tc in self.route for c in tc.customers],
									["arrival_time"]+[str(round(self.arr[i],4))+" !" 
									if ((self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.arr[i],4))+" *" if compare_time(self.st[i],self.route[i].due_fs)>0 
									else str(round(self.arr[i],4)) for i in range(len(self.route)) for c in self.route[i].customers], 
									["park_time_ar\npark_time_op"]+[str(c.parkt_arrive)+"\n"+str(c.parkt_open) if self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx else str(0)+"\n"+str(0) for i in range(len(self.route)) for c in self.route[i].customers],
									["loading_time"]+[servt_dict[tc]*self.opskill if tc in servt_dict else c.servt*self.opskill if tc.custno[0]!='b' else c.servt for tc in self.route for c in tc.customers],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for tc in self.route for c in tc.customers],
									["load"]+[str(load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))+" *" 
									if load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]])>self.cap
									else str(load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))],
									["load2"]+[str(load2[i]+sum([c.dem2 if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))+" *" 
									if load2[i]+sum([c.dem2 if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]])>self.cap2
									else str(load2[i]+sum([c.dem2 if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))]])
			else:
				if argvs.demand2==0:
					table.add_rows([["cust_no"]+[c.custno for tc in self.route for c in tc.customers],
									["arrival_time"]+[str(round(self.delay_arr[i],4))+" !" 
									if ((self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.delay_arr[i],4))+" *" if compare_time(self.delay_st[i],self.route[i].due_fs)>0 
									else str(round(self.delay_arr[i],4)) for i in range(len(self.route)) for c in self.route[i].customers], 
									["park_time_ar\npark_time_op"]+[str(c.parkt_arrive)+"\n"+str(c.parkt_open) if self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx else str(0)+"\n"+str(0) for i in range(len(self.route)) for c in self.route[i].customers],
									["loading_time"]+[servt_dict[tc]*self.opskill if tc in servt_dict else c.servt*self.opskill if tc.custno[0]!='b' else c.servt for tc in self.route for c in tc.customers],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for tc in self.route for c in tc.customers],
									["load"]+[str(load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))+" *" 
									if load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]])>self.cap
									else str(load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))]])
				else:
					table.add_rows([["cust_no"]+[c.custno for tc in self.route for c in tc.customers],
									["arrival_time"]+[str(round(self.delay_arr[i],4))+" !" 
									if ((self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.delay_arr[i],4))+" *" if compare_time(self.delay_st[i],self.route[i].due_fs)>0 
									else str(round(self.delay_arr[i],4)) for i in range(len(self.route)) for c in self.route[i].customers], 
									["park_time_ar\npark_time_op"]+[str(c.parkt_arrive)+"\n"+str(c.parkt_open) if self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not i in no_park_idx else str(0)+"\n"+str(0) for i in range(len(self.route)) for c in self.route[i].customers],
									["loading_time"]+[servt_dict[tc]*self.opskill if tc in servt_dict else c.servt*self.opskill if tc.custno[0]!='b' else c.servt for tc in self.route for c in tc.customers],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for tc in self.route for c in tc.customers],
									["load"]+[str(load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))+" *" 
									if load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]])>self.cap
									else str(load[i]+sum([c.dem if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))],
									["load2"]+[str(load2[i]+sum([c.dem2 if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))+" *" 
									if load2[i]+sum([c.dem2 if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]])>self.cap2
									else str(load2[i]+sum([c.dem2 if not i in depo_idx and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if not i in depo_idx and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[j+1:]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))]])
		else:
			table.set_cols_width([12]+[12 for c in self.route])
			if delay==False:
				if argvs.demand2==0:
					table.add_rows([["cust_no"]+[c.custno for c in self.route],
									["arrival_time"]+[str(round(self.arr[i],4))+" !" 
									if ((i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.arr[i],4))+" *" if compare_time(self.st[i],self.route[i].due_fs)>0
									else str(round(self.arr[i],4)) for i in range(len(self.route))], 
									["park_time_ar\npark_time_op"]+[str(self.route[i].parkt_arrive)+"\n"+str(self.route[i].parkt_open) if i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx else str(0)+"\n"+str(0) for i in range(len(self.route))],
									["loading_time"]+[servt_dict[c]*self.opskill if c in servt_dict else c.servt*self.opskill if c.custno[0]!='b' else c.servt for c in self.route],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],
									["load"]+[str(load[i])+" *"
									if load[i]>self.cap
									else str(load[i])
									for i in range(len(self.route))]])
				else:
					table.add_rows([["cust_no"]+[c.custno for c in self.route],
									["arrival_time"]+[str(round(self.arr[i],4))+" !" 
									if ((i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.arr[i],4))+" *" if compare_time(self.st[i],self.route[i].due_fs)>0
									else str(round(self.arr[i],4)) for i in range(len(self.route))], 
									["park_time_ar\npark_time_op"]+[str(self.route[i].parkt_arrive)+"\n"+str(self.route[i].parkt_open) if i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx else str(0)+"\n"+str(0) for i in range(len(self.route))],
									["loading_time"]+[servt_dict[c]*self.opskill if c in servt_dict else c.servt*self.opskill if c.custno[0]!='b' else c.servt for c in self.route],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],
									["load"]+[str(load[i])+" *"
									if load[i]>self.cap
									else str(load[i])
									for i in range(len(self.route))],
									["load2"]+[str(load2[i])+" *"
									if load2[i]>self.cap2
									else str(load2[i])
									for i in range(len(self.route))]])
			else:
				if argvs.demand2==0:
					table.add_rows([["cust_no"]+[c.custno for c in self.route],
									["arrival_time"]+[str(round(self.delay_arr[i],4))+" !" 
									if ((i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.delay_arr[i],4))+" *" if compare_time(self.delay_st[i],self.route[i].due_fs)>0 
									else str(round(self.delay_arr[i],4)) for i in range(len(self.route))], 
									["park_time_ar\npark_time_op"]+[str(self.route[i].parkt_arrive)+"\n"+str(self.route[i].parkt_open) if i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx else str(0)+"\n"+str(0) for i in range(len(self.route))],
									["loading_time"]+[servt_dict[c]*self.opskill if c in servt_dict else c.servt*self.opskill if c.custno[0]!='b' else c.servt for c in self.route],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],
									["load"]+[str(load[i])+" *"
									if load[i]>self.cap
									else str(load[i])
									for i in range(len(self.route))]])
				else:
					table.add_rows([["cust_no"]+[c.custno for c in self.route],
									["arrival_time"]+[str(round(self.delay_arr[i],4))+" !" 
									if ((i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.delay_arr[i],4))+" *" if compare_time(self.delay_st[i],self.route[i].due_fs)>0 
									else str(round(self.delay_arr[i],4)) for i in range(len(self.route))], 
									["park_time_ar\npark_time_op"]+[str(self.route[i].parkt_arrive)+"\n"+str(self.route[i].parkt_open) if i==0 or self.route[i].spotid!=self.route[i-1].spotid and not i in no_park_idx else str(0)+"\n"+str(0) for i in range(len(self.route))],
									["loading_time"]+[servt_dict[c]*self.opskill if c in servt_dict else c.servt*self.opskill if c.custno[0]!='b' else c.servt for c in self.route],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],
									["load"]+[str(load[i])+" *"
									if load[i]>self.cap
									else str(load[i])
									for i in range(len(self.route))],
									["load2"]+[str(load2[i])+" *"
									if load2[i]>self.cap2
									else str(load2[i])
									for i in range(len(self.route))]])
		sLog = ["===== VEHICLE ",self.vehno," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if delay==False:
			sLog = ["TOTAL_DISTANCE:",round(self.totalcost,2)]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["TOTAL_DISTANCE_TO_LASTCUST:",round(self.totalcost_wolast,2)]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		else:
			sLog = ["TOTAL_DISTANCE:",round(self.delay_totalcost,2)]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["TOTAL_DISTANCE_TO_LASTCUST:",round(self.delay_totalcost_wolast,2)]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if argvs.bulkShipping_flag:
			sLog = ["NUMBER_OF_CUSTOMERS:",len([c for tc in self.route[1:-1] for c in tc.customers if c.custno!="0" and c.custno[0]!="b"]),"(spot="+str(calc_visitnum(self.route))+")"]
		else:
			sLog = ["NUMBER_OF_CUSTOMERS:",len([c for c in self.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]),"(spot="+str(calc_visitnum(self.route))+")"]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if argvs.multitrip_flag==True:
			load_per_lotate="("
			load_per_lotate+=str(load[depo_idx[0]])
			for idx in depo_idx[1:-1]:
				load_per_lotate+="+"
				load_per_lotate+=str(load[idx])
			load_per_lotate+=")"

			sLog = ["ALL_DEMAND(DELIVERY):",self.load_onbrd,load_per_lotate]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		else:
			sLog = ["ALL_DEMAND(DELIVERY):",self.load_onbrd]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if argvs.multitrip_flag==True:
			load_per_lotate="("
			load_per_lotate+=str(load[depo_idx[1]-1])
			for idx in depo_idx[2:]:
				load_per_lotate+="+"
				load_per_lotate+=str(load[idx-1])
			load_per_lotate+=")"

			sLog = ["ALL_DEMAND(PICKUP):",self.load_pickup,load_per_lotate]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		else:
			sLog = ["ALL_DEMAND(PICKUP):",self.load_pickup]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["LOAD_CAPACITY:",self.cap]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if argvs.demand2!=0:
			if argvs.multitrip_flag==True:
				load_per_lotate="("
				load_per_lotate+=str(load2[depo_idx[0]])
				for idx in depo_idx[1:-1]:
					load_per_lotate+="+"
					load_per_lotate+=str(load2[idx])
				load_per_lotate+=")"

				sLog = ["ALL_DEMAND2(DELIVERY):",self.load_onbrd2,load_per_lotate]
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			else:
				sLog = ["ALL_DEMAND2(DELIVERY):",self.load_onbrd2]
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			if argvs.multitrip_flag==True:
				load_per_lotate="("
				load_per_lotate+=str(load2[depo_idx[1]-1])
				for idx in depo_idx[2:]:
					load_per_lotate+="+"
					load_per_lotate+=str(load2[idx-1])
				load_per_lotate+=")"

				sLog = ["ALL_DEMAND2(PICKUP):",self.load_pickup2,load_per_lotate]
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			else:
				sLog = ["ALL_DEMAND2(PICKUP):",self.load_pickup2]
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["LOAD_CAPACITY2:",self.cap2]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["OPERATIONSKILL/DRIVINGSKILL:",self.opskill,self.drskill]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["WORKING_TIME:",str(round(self.starthour,2))+"-"+str(round(self.endhour,2))+"("+str(self.startoptime)+"-"+str(self.endoptime)+")x" 
				if (argvs.lastc_flag==True and compare_time(self.lv[last_idx],self.endhour)>0) or (argvs.lastc_flag==False and compare_time(self.lv[-1],self.endhour)>0)
				else str(round(self.starthour,2))+"-"+str(round(self.endhour,2))+"("+str(self.startoptime)+"-"+str(self.endoptime)+")" ]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if divided:
			sLog = ["LOAD_DIVIDING_NUMBER:",divnum]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if self.reserved_v_flag==True: #未割り当て荷物 予約車両
			sLog = ["RESERVED: True"]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = [table.draw()]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		return sLogBuf
	def output_ev(self,argvs,sLogBuf,used_customers,divided,delay=False): ##20200626
		depo_idx=[j for j,c in enumerate(self.route[:-1]) if c.custno=="0"]+[len(self.route)-1]
		servt_dict={}
		#配送時間
		for i in range(len(depo_idx)-1):
			servt_dict[self.route[depo_idx[i]]]=0
			servt=0
			for j in range(depo_idx[i]+1,depo_idx[i+1]):
				if not self.route[j].custno.startswith("e") and self.route[j].requestType=="DELIVERY" and not self.route[j].custno.startswith("b"):
					servt+=self.route[j].depotservt
			if self.route[depo_idx[i]+1].custno!="0":
				servt_dict[self.route[depo_idx[i]]]+=servt+self.depotservt
			else:
				servt_dict[self.route[depo_idx[i]]]+=servt
		#集荷時間
		servt_dict[self.route[len(self.route)-1]]=0
		for i in range(1,len(depo_idx)):
			servt=0
			for j in range(depo_idx[i-1]+1,depo_idx[i]):
				if not self.route[j].custno.startswith("e") and self.route[j].requestType=="PICKUP":
					servt+=self.route[j].depotservt
	
			servt_dict[self.route[depo_idx[i]]]+=servt

		no_park=True
		for c in self.route[1:-1]:
			if c.custno!="0" and c.requestType=="DELIVERY":
				no_park=False
				break

		divnum=0
		for c in self.route[1:-1]:
			if c.custno=="0":
				continue
			if c.custno in used_customers:
				divnum+=1
			else:
				used_customers.append(c.custno)

		last_idx = get_last_idx(self, argvs)

		if len([c for c in self.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
			sLog = ["VEHICLE ",self.vehno]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["routes only with depot"]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			if rank==0:
				logging.log(logging.INFO,sLogBuf)
			return
		table=Texttable()
		#table.set_cols_width([12 for c in self.route])
		#table.add_rows([[c.custno for c in self.route],self.arr, [(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route]])
		#table.add_rows([[c.custno for c in self.route],self.arr, [(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],self.rem_batt])
		self.chg_batt=[0 for r in self.route]
		for i in range(0,len(self.route)):
			if self.route[i].custno.startswith("e"):
				self.chg_batt[i]=self.chg_batt_dict[self.route[i]]
		#table.add_rows([[c.custno for c in self.route],self.arr, [(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],self.rem_batt,self.chg_batt])
		#table.add_rows([[c.custno for c in self.route],self.arr, [(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],self.rem_batt,self.chg_batt,self.slack_t])
		if argvs.bulkShipping_flag:
			table.set_cols_width([12]+[12 for tc in self.route for c in tc.customers])
			if delay==False:
				if argvs.demand2==0:
					table.add_rows([["cust_no"]+[c.custno for tc in self.route for c in tc.customers],
									["arrival_time"]+[str(round(self.arr[i],4))+" !" 
									if ((self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.arr[i],4))+" *" if compare_time(self.st[i], self.route[i].due_fs)>0
									else str(round(self.arr[i],4)) for i in range(len(self.route)) for c in self.route[i].customers], 
									["park_time_ar\npark_time_op"]+[str(c.parkt_arrive)+"\n"+str(c.parkt_open) if self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0")) else str(0)+"\n"+str(0) for i in range(len(self.route)) for c in self.route[i].customers],
									["loading_time"]+[servt_dict[tc]*self.opskill if tc in servt_dict else c.servt*self.opskill for tc in self.route for c in tc.customers],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for tc in self.route for c in tc.customers],
									["load"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd-sum([c.dem if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))+" *" if self.load_onbrd-sum([c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 else 0 for c in self.route[i].customers[:j+1]])>self.cap
									else str(self.load_onbrd-sum([c.dem if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))],
									["e_remain"]+[self.rem_batt[i]-self.chg_batt[i] for i in range(len(self.route)) for c in self.route[i].customers],
									["e_charge"]+[self.chg_batt[i] for i in range(len(self.route)) for c in self.route[i].customers],
									["remain_dist"]+[self.remdist[i] for i in range(len(self.route)) for c in self.route[i].customers]])
				else:
					table.add_rows([["cust_no"]+[c.custno for tc in self.route for c in tc.customers],
									["arrival_time"]+[str(round(self.arr[i],4))+" !" 
									if ((self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.arr[i],4))+" *" if compare_time(self.st[i], self.route[i].due_fs)>0
									else str(round(self.arr[i],4)) for i in range(len(self.route)) for c in self.route[i].customers], 
									["park_time_ar\npark_time_op"]+[str(c.parkt_arrive)+"\n"+str(c.parkt_open) if self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0")) else str(0)+"\n"+str(0) for i in range(len(self.route)) for c in self.route[i].customers],
									["loading_time"]+[servt_dict[tc]*self.opskill if tc in servt_dict else c.servt*self.opskill for tc in self.route for c in tc.customers],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for tc in self.route for c in tc.customers],
									["load"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd-sum([c.dem if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))+" *" if self.load_onbrd-sum([c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 else 0 for c in self.route[i].customers[:j+1]])>self.cap
									else str(self.load_onbrd-sum([c.dem if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))],
									["load2"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd2-sum([c.dem2 if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 for tc in self.route[1:i] for c in tc.customers])-sum([c.dem2 if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))+" *" if self.load_onbrd2-sum([c.dem2 for tc in self.route[1:i] for c in tc.customers])-sum([c.dem2 if i!=len(self.route)-1 else 0 for c in self.route[i].customers[:j+1]])>self.cap2
									else str(self.load_onbrd2-sum([c.dem2 if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 for tc in self.route[1:i] for c in tc.customers])-sum([c.dem2 if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))],
									["e_remain"]+[self.rem_batt[i]-self.chg_batt[i] for i in range(len(self.route)) for c in self.route[i].customers],
									["e_charge"]+[self.chg_batt[i] for i in range(len(self.route)) for c in self.route[i].customers],
									["remain_dist"]+[self.remdist[i] for i in range(len(self.route)) for c in self.route[i].customers]])
			else:
				if argvs.demand2==0:
					table.add_rows([["cust_no"]+[c.custno for tc in self.route for c in tc.customers],
									["arrival_time"]+[str(round(self.delay_arr[i],4))+" !" 
									if ((self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.delay_arr[i],4))+" *" if compare_time(self.delay_st[i], self.route[i].due_fs)>0
									else str(round(self.delay_arr[i],4)) for i in range(len(self.route)) for c in self.route[i].customers], 
									["park_time_ar\npark_time_op"]+[str(c.parkt_arrive)+"\n"+str(c.parkt_open) if self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0")) else str(0)+"\n"+str(0) for i in range(len(self.route)) for c in self.route[i].customers],
									["loading_time"]+[servt_dict[tc]*self.opskill if tc in servt_dict else c.servt*self.opskill for tc in self.route for c in tc.customers],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for tc in self.route for c in tc.customers],
									["load"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd-sum([c.dem if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))+" *" if self.load_onbrd-sum([c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 else 0 for c in self.route[i].customers[:j+1]])>self.cap
									else str(self.load_onbrd-sum([c.dem if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))],
									["e_remain"]+[self.delay_rem_batt[i]-self.delay_chg_batt[i] for i in range(len(self.route)) for c in self.route[i].customers],
									["e_charge"]+[self.delay_chg_batt[i] for i in range(len(self.route)) for c in self.route[i].customers],
									["remain_dist"]+[self.delay_remdist[i] for i in range(len(self.route)) for c in self.route[i].customers]])
				else:
					table.add_rows([["cust_no"]+[c.custno for tc in self.route for c in tc.customers],
									["arrival_time"]+[str(round(self.delay_arr[i],4))+" !" 
									if ((self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.delay_arr[i],4))+" *" if compare_time(self.delay_st[i], self.route[i].due_fs)>0
									else str(round(self.delay_arr[i],4)) for i in range(len(self.route)) for c in self.route[i].customers], 
									["park_time_ar\npark_time_op"]+[str(c.parkt_arrive)+"\n"+str(c.parkt_open) if self.route[i].customers.index(c)==0 and (i==0 or self.route[i].spotid!=self.route[i-1].spotid) and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0")) else str(0)+"\n"+str(0) for i in range(len(self.route)) for c in self.route[i].customers],
									["loading_time"]+[servt_dict[tc]*self.opskill if tc in servt_dict else c.servt*self.opskill for tc in self.route for c in tc.customers],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for tc in self.route for c in tc.customers],
									["load"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd-sum([c.dem if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))+" *" if self.load_onbrd-sum([c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 else 0 for c in self.route[i].customers[:j+1]])>self.cap
									else str(self.load_onbrd-sum([c.dem if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem for tc in self.route[1:i] for c in tc.customers])-sum([c.dem if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))],
									["load2"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd2-sum([c.dem2 if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 for tc in self.route[1:i] for c in tc.customers])-sum([c.dem2 if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))+" *" if self.load_onbrd2-sum([c.dem2 for tc in self.route[1:i] for c in tc.customers])-sum([c.dem2 if i!=len(self.route)-1 else 0 for c in self.route[i].customers[:j+1]])>self.cap2
									else str(self.load_onbrd2-sum([c.dem2 if c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 for tc in self.route[1:i] for c in tc.customers])-sum([c.dem2 if i!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if i!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[i].customers[:j+1]]))
									for i in range(len(self.route)) for j in range(len(self.route[i].customers))],
									["e_remain"]+[self.delay_rem_batt[i]-self.delay_chg_batt[i] for i in range(len(self.route)) for c in self.route[i].customers],
									["e_charge"]+[self.delay_chg_batt[i] for i in range(len(self.route)) for c in self.route[i].customers],
									["remain_dist"]+[self.delay_remdist[i] for i in range(len(self.route)) for c in self.route[i].customers]])
		else:
			table.set_cols_width([12]+[12 for c in self.route])
			if delay==False:
				if argvs.demand2==0:
					table.add_rows([["cust_no"]+[c.custno for c in self.route],
									["arrival_time"]+[str(round(self.arr[i],4))+" !" 
									if ((i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.arr[i],4))+" *" if compare_time(self.st[i], self.route[i].due_fs)>0
									else str(round(self.arr[i],4)) for i in range(len(self.route))], 
									["park_time_ar\npark_time_op"]+[str(self.route[i].parkt_arrive)+"\n"+str(self.route[i].parkt_open) if i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0")) else str(0)+"\n"+str(0) for i in range(len(self.route))],
									["loading_time"]+[servt_dict[c]*self.opskill if c in servt_dict else c.servt*self.opskill for c in self.route],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],
									["load"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))+" *" if self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 else 0 for c in self.route[1:i+1]])>self.cap
									else str(self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))
									for i in range(len(self.route))],
									["e_remain"]+[self.rem_batt[i]-self.chg_batt[i] for i in range(len(self.rem_batt))],
									["e_charge"]+self.chg_batt,
									["remain_dist"]+self.remdist])
				else:
					table.add_rows([["cust_no"]+[c.custno for c in self.route],
									["arrival_time"]+[str(round(self.arr[i],4))+" !" 
									if ((i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.arr[i],4))+" *" if compare_time(self.st[i], self.route[i].due_fs)>0
									else str(round(self.arr[i],4)) for i in range(len(self.route))], 
									["park_time_ar\npark_time_op"]+[str(self.route[i].parkt_arrive)+"\n"+str(self.route[i].parkt_open) if i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0")) else str(0)+"\n"+str(0) for i in range(len(self.route))],
									["loading_time"]+[servt_dict[c]*self.opskill if c in servt_dict else c.servt*self.opskill for c in self.route],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],
									["load"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))+" *" if self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 else 0 for c in self.route[1:i+1]])>self.cap
									else str(self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))
									for i in range(len(self.route))],
									["load2"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd2-sum([c.dem2 if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))+" *" if self.load_onbrd2-sum([c.dem2 if self.route.index(c)!=len(self.route)-1 else 0 for c in self.route[1:i+1]])>self.cap2
									else str(self.load_onbrd2-sum([c.dem2 if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))
									for i in range(len(self.route))],
									["e_remain"]+[self.rem_batt[i]-self.chg_batt[i] for i in range(len(self.rem_batt))],
									["e_charge"]+self.chg_batt,
									["remain_dist"]+self.remdist])
			else:
				if argvs.demand2==0:
					table.add_rows([["cust_no"]+[c.custno for c in self.route],
									["delay_arrival_time"]+[str(round(self.delay_arr[i],4))+" !" 
									if ((i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.delay_arr[i],4))+" *" if compare_time(self.delay_st[i], self.route[i].due_fs)>0
									else str(round(self.delay_arr[i],4)) for i in range(len(self.route))], 
									["park_time_ar\npark_time_op"]+[str(self.route[i].parkt_arrive)+"\n"+str(self.route[i].parkt_open) if i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-1].spotid!="0")) else str(0)+"\n"+str(0) for i in range(len(self.route))],
									["loading_time"]+[servt_dict[c]*self.opskill if c in servt_dict else c.servt*self.opskill for c in self.route],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],
									["load"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))+" *" if self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 else 0 for c in self.route[1:i+1]])>self.cap
									else str(self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))
									for i in range(len(self.route))],
									["e_remain"]+[self.delay_rem_batt[i]-self.delay_chg_batt[i] for i in range(len(self.delay_rem_batt))],
									["e_charge"]+self.delay_chg_batt,
									["remain_dist"]+self.delay_remdist])
				else:
					table.add_rows([["cust_no"]+[c.custno for c in self.route],
									["delay_arrival_time"]+[str(round(self.delay_arr[i],4))+" !" 
									if ((i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0) or \
									(not (i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0"))) and compare_time(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs )<0)
									else str(round(self.delay_arr[i],4))+" *" if compare_time(self.delay_st[i], self.route[i].due_fs)>0
									else str(round(self.delay_arr[i],4)) for i in range(len(self.route))], 
									["park_time_ar\npark_time_op"]+[str(self.route[i].parkt_arrive)+"\n"+str(self.route[i].parkt_open) if i==0 or self.route[i].spotid!=self.route[i-1].spotid and not self.route[i].spotid.startswith("e") and (i!=0 or no_park!=True) and (i!=len(self.route)-1 or (self.load_pickup!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0") or (self.load_pickup2!=0 and self.route[i-1].spotid!="0" and self.route[i-2].spotid!="0")) else str(0)+"\n"+str(0) for i in range(len(self.route))],
									["loading_time"]+[servt_dict[c]*self.opskill if c in servt_dict else c.servt*self.opskill for c in self.route],
									["cust_time"]+[(round(c.ready_fs,2),round(c.due_fs,2)) for c in self.route],
									["load"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))+" *" if self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 else 0 for c in self.route[1:i+1]])>self.cap
									else str(self.load_onbrd-sum([c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))
									for i in range(len(self.route))],
									["load2"]+[0
									if i==len(self.route)-1 and self.route[i-1].spotid=="0"
									else str(self.load_onbrd2-sum([c.dem2 if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))+" *" if self.load_onbrd2-sum([c.dem2 if self.route.index(c)!=len(self.route)-1 else 0 for c in self.route[1:i+1]])>self.cap2
									else str(self.load_onbrd2-sum([c.dem2 if self.route.index(c)!=len(self.route)-1 and c.requestType=="DELIVERY" and c.custno[0]!="b" else -c.dem2 if self.route.index(c)!=len(self.route)-1 and c.requestType=="PICKUP" and c.custno[0]!="b" else 0 for c in self.route[1:i+1]]))
									for i in range(len(self.route))],
									["e_remain"]+[self.delay_rem_batt[i]-self.delay_chg_batt[i] for i in range(len(self.delay_rem_batt))],
									["e_charge"]+self.delay_chg_batt,
									["remain_dist"]+self.delay_remdist])
		sLog = ["===== VEHICLE ",self.vehno," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if delay==False:
			sLog = ["TOTAL_DISTANCE:",round(self.totalcost,2)]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["TOTAL_DISTANCE_TO_LASTCUST:",round(self.totalcost_wolast,2)]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		else:
			sLog = ["TOTAL_DISTANCE:",round(self.delay_totalcost,2)]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["TOTAL_DISTANCE_TO_LASTCUST:",round(self.delay_totalcost_wolast,2)]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if argvs.bulkShipping_flag:
			sLog = ["NUMBER_OF_CUSTOMERS:",len([c for tc in self.route[1:-1] for c in tc.customers if c.custno!="0" and c.custno[0]!="b"]),"(spot="+str(calc_visitnum(self.route))+")"]
		else:
			sLog = ["NUMBER_OF_CUSTOMERS:",len([c for c in self.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]),"(spot="+str(calc_visitnum(self.route))+")"]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["ALL_DEMAND(DELIVERY):",self.load_onbrd]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["ALL_DEMAND(PICKUP):",self.load_pickup]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["LOAD_CAPACITY:",self.cap]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if argvs.demand2!=0:
			sLog = ["ALL_DEMAND2(DELIVERY):",self.load_onbrd2]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["ALL_DEMAND2(PICKUP):",self.load_pickup2]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["LOAD_CAPACITY2:",self.cap2]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["OPERATIONSKILL/DRIVINGSKILL:",self.opskill,self.drskill]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["WORKING_TIME:",str(round(self.starthour,2))+"-"+str(round(self.endhour,2))+"("+str(self.startoptime)+"-"+str(self.endoptime)+")x" 
				if (argvs.lastc_flag==True and compare_time(self.lv[last_idx],self.endhour)>0) or (argvs.lastc_flag==False and compare_time(self.lv[-1],self.endhour)>0)
				else str(round(self.starthour,2))+"-"+str(round(self.endhour,2))+"("+str(self.startoptime)+"-"+str(self.endoptime)+")" ]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if divided:
			sLog = ["LOAD_DIVIDING_NUMBER:",divnum]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = [table.draw()]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		return sLogBuf

	def find_power_to_charge(self,from_idx,argvs):##20200319
		#route[from_idx]以降のデボまでの充電量を決定する。
		#rem_batt[from_idx]+pow_to_chargeが，route[from_idx]からdepotまでの消費量になっているとよい。
		pow_to_charge,dist_to_depot=0,0
		q_to_depot = 0
		
		cur_rem_batt=self.rem_batt[from_idx]

		if not argvs.management_etable: #電力テーブルが無い場合
			dist_to_depot += max_dist_from_table(self.vtype, self.lv[from_idx], self.route[from_idx], self.route[from_idx+1], argvs.management_dtable)
			for i in range(from_idx+1,len(self.route)-1):
				dtable1 = get_dtable(self.vtype, self.lv[i], argvs.management_dtable)
				dist_to_depot+=dtable1[self.route[i].spotno][self.route[i+1].spotno] # daic dtable->self.dtable
			q_to_depot=(dist_to_depot/1000)/self.e_cost
		else: #電力テーブルが有る場合
			q_to_depot += max_e_from_table(self.vtype, self.etype, self.lv[from_idx], self.route[from_idx], self.route[from_idx+1], argvs.management_etable)
			for i in range(from_idx+1,len(self.route)-1):
				etable1 = get_etable(self.vtype, self.etype, self.lv[i], argvs.management_etable)
				q_to_depot += etable1[self.route[i].spotno][self.route[i+1].spotno]

		q_to_depot+=self.e_margin
		if self.delay_rem_batt!=[]:
			cur_rem_batt=self.delay_rem_batt[from_idx]

			if not argvs.management_etable: #電力テーブルが無い場合
				dist_to_depot += max_dist_from_table(self.vtype, self.delay_lv[from_idx], self.route[from_idx], self.route[from_idx+1], argvs.management_dtable)
				for i in range(from_idx,len(self.route)-1):
					dtable1 = get_dtable(self.vtype, self.delay_lv[i], argvs.management_dtable)
					dist_to_depot+=dtable1[self.route[i].spotno][self.route[i+1].spotno] # daic dtable->self.dtable
				q_to_depot=(dist_to_depot/1000)/self.e_cost
			else: #電力テーブルが有る場合
				q_to_depot += max_e_from_table(self.vtype, self.etype, self.delay_lv[from_idx], self.route[from_idx], self.route[from_idx+1], argvs.management_etable)
				for i in range(from_idx,len(self.route)-1):
					etable1 = get_etable(self.vtype, self.etype, self.delay_lv[i], argvs.management_etable)
					q_to_depot += etable1[self.route[i].spotno][self.route[i+1].spotno]

			q_to_depot+=self.e_margin
		return q_to_depot-cur_rem_batt,q_to_depot

	def insert_espot_at(self,i,espot,argvs):##2020/03/15
		if i<=0:
			sErrMes = "invalid index in insert_espot_at(),i: "+str(i)
			raise ValueError(sErrMes) # sys.exit(1) # daic
		self.route.insert(i,espot)	
		self.update_rem_battery(argvs)
		self.update_totalcost_dtable(argvs,i)

	def insert_customer_at(self,i,cust,argvs):
		self.route.insert(i,cust)
		self.update_totalcost_dtable(argvs)
		self.update_load_onbrd()
	def push_customer(self,cust,argvs):
		self.route+=[cust]
		#self.chg_batt+=[0]
		self.update_totalcost_dtable(argvs)
		self.update_load_onbrd()
		self.update_chg_battery()

	def update_totalcost_dtable(self,argvs,start_idx=0,delayst2_flag=False): ##20200317 start_idxを追加．start_idx以降の値のみを更新する
		self.update_arrtime_tw(argvs,delayst2_flag)

		if len([c for c in self.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])!=0:
			self.totalcost=0
			for i in range(0,len(self.route)-1):
				dtable1 = get_dtable(self.vtype, self.lv[i], argvs.management_dtable)
				self.totalcost+=dtable1[self.route[i].spotno][self.route[i+1].spotno]
			self.totalcost_wolast=0
			for i in reversed(range(1,len(self.route))):
				if self.route[i].custno=="0" or self.route[i].custno[0]=='b' or self.route[i].custno[0]=='e' or i==len(self.route)-1:
					last_idx=i-1
				else:
					break
			for i in range(0,last_idx):
				dtable2 = get_dtable(self.vtype, self.lv[i], argvs.management_dtable)
				self.totalcost_wolast+=dtable2[self.route[i].spotno][self.route[i+1].spotno]

		if len([c for c in self.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])!=0 and self.delay_arr!=[] and self.reserved_v_flag==False:
			self.delay_totalcost=0
			for i in range(0,len(self.route)-1):
				dtable3 = get_dtable(self.vtype, self.delay_lv[i], argvs.management_dtable)
				self.delay_totalcost+=dtable3[self.route[i].spotno][self.route[i+1].spotno]
			self.delay_totalcost_wolast=0
			for i in reversed(range(1,len(self.route))):
				if self.route[i].custno=="0" or self.route[i].custno[0]=='b' or self.route[i].custno[0]=='e' or i==len(self.route)-1:
					last_idx=i-1
				else:
					break
			for i in range(0,last_idx):
				dtable4 = get_dtable(self.vtype, self.delay_lv[i], argvs.management_dtable)
				self.delay_totalcost_wolast+=dtable4[self.route[i].spotno][self.route[i+1].spotno]
			
		#self.update_chg_quant(dtable) #20200520
		#self.update_arrtime_tw()
		self.update_load_onbrd()
		self.update_rem_battery(argvs,start_idx) ##20200317
		self.update_arrtime_tw(argvs,delayst2_flag) #充電時間を反映させて再計算
		self.update_remdist(argvs)

	def update_remdist(self,argvs):
		self.remdist=[0 for r in self.route]
		totaldist=0
		for i in range(0,len(self.route)-1):
			dtable1 = get_dtable(self.vtype, self.lv[i], argvs.management_dtable)
			totaldist+=dtable1[self.route[i].spotno][self.route[i+1].spotno]
		self.remdist[0]=totaldist
		for i in range(1,len(self.route)):
			dtable2 = get_dtable(self.vtype, self.lv[i-1], argvs.management_dtable)
			self.remdist[i]=self.remdist[i-1]-dtable2[self.route[i-1].spotno][self.route[i].spotno]

		if self.delay_arr!=[] and self.reserved_v_flag==False:
			self.delay_remdist=[0 for r in self.route]
			totaldist=0
			for i in range(0,len(self.route)-1):
				dtable1 = get_dtable(self.vtype, self.delay_lv[i], argvs.management_dtable)
				totaldist+=dtable1[self.route[i].spotno][self.route[i+1].spotno]
			self.delay_remdist[0]=totaldist
			for i in range(1,len(self.route)):
				dtable2 = get_dtable(self.vtype, self.delay_lv[i-1], argvs.management_dtable)
				self.delay_remdist[i]=self.delay_remdist[i-1]-dtable2[self.route[i-1].spotno][self.route[i].spotno]

		if self.reserved_v_flag==True:
			self.delay_remdist=self.remdist[:]


	def update_arrtime_tw(self,argvs,delayst2_flag=False):	
		if len(self.route)>=2:
			depo_idx=[j for j,c in enumerate(self.route[:-1]) if c.custno=="0"]+[len(self.route)-1]
			servt_dict={}
			depo_idx_size=len(depo_idx)
			#配送時間
			for i in range(depo_idx_size-1):
				servt_dict[self.route[depo_idx[i]]]=0
				servt=0
				for j in range(depo_idx[i]+1,depo_idx[i+1]):
					if not self.route[j].custno.startswith("e") and not self.route[j].custno.startswith("b") and self.route[j].requestType=="DELIVERY" and self.route[j].custno!=self.route[j-1].custno:
						servt+=self.route[j].depotservt
				if self.route[depo_idx[i]+1].custno!="0":
					servt_dict[self.route[depo_idx[i]]]+=servt+self.depotservt
				else:
					servt_dict[self.route[depo_idx[i]]]+=servt
			#集荷時間
			servt_dict[self.route[len(self.route)-1]]=0
			for i in range(1,depo_idx_size):
				servt=0
				for j in range(depo_idx[i-1]+1,depo_idx[i]):
					if not self.route[j].custno.startswith("e") and not self.route[j].custno.startswith("b") and self.route[j].requestType=="PICKUP" and self.route[j].custno!=self.route[j-1].custno:
						servt+=self.route[j].depotservt
		
				servt_dict[self.route[depo_idx[i]]]+=servt
			
			load=[0 for c in self.route]
			load2=[0 for c in self.route]
			route_size=len(self.route)
			for i in range(route_size-1):
				if i in depo_idx:
					for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
						if self.route[j].requestType=="DELIVERY":
							if self.route[j].custno[0]!="b":
								load[i]+=self.route[j].dem
								load2[i]+=self.route[j].dem2
				else:
					if self.route[i].custno[0]!="b":
						if self.route[i].requestType=="DELIVERY":
							load[i]=load[i-1]-self.route[i].dem
							load2[i]=load2[i-1]-self.route[i].dem2
						else:
							load[i]=load[i-1]+self.route[i].dem
							load2[i]=load2[i-1]+self.route[i].dem2

			load_size=len(load)
			for i in reversed(range(load_size)):
				if i in depo_idx and i+1 in depo_idx:
					load[i]=load[i+1]
					load2[i]=load2[i+1]

			load=[i if i>1e-9 else 0 for i in load] #誤差対策
			load2=[i if i>1e-9 else 0 for i in load2] #誤差対策
			
			no_park_idx=[]
			for c in self.route[depo_idx[0]+1:depo_idx[1]]:
				if c.requestType=="DELIVERY":
					break
			else:
				if load[0]==0 and load2[0]==0:
					no_park_idx.append(0)
			
			for i in range(1,len(depo_idx)-1):
				if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
					for c in self.route[depo_idx[i]+1:depo_idx[i+1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
							no_park_idx.append(depo_idx[i])
			if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
				no_park_idx.append(depo_idx[-1])

		if len(self.route)>=2:
			parkt_time_flag = get_parkt_time_flag(self.route)

			if self.arr==[] or (delayst2_flag==True and argvs.break_flag==False):
				self.arr=[0 for r in self.route]
				self.arr[0]=self.starthour
			else: #delay後の解を採用する場合
				arr_temp=self.arr[0]
				self.arr=[0 for r in self.route]
				self.arr[0]=arr_temp
			self.st=[0 for r in self.route]
			self.lv=[0 for r in self.route]
			self.slack_t=[0 for r in self.route]

			from_c,to_c=self.route[0],self.route[1]
			if not 0 in no_park_idx:
				self.st[0]=max(self.arr[0]+self.route[0].parkt_arrive,self.route[0].ready_fs)+self.route[0].parkt_open
			else:
				self.st[0]=max(self.arr[0],self.route[0].ready_fs)	
			
			self.lv[0]=self.st[0]+servt_dict[self.route[0]]*self.opskill

			arr_size=len(self.arr)
			for i in range(1,arr_size):
				from_c,to_c=self.route[i-1],self.route[i]
				ttable1 = get_ttable(self.vtype, self.lv[i-1], argvs.management_ttable)
				if from_c.spotid != '' and to_c.spotid != '':
					self.arr[i]=self.lv[i-1]+ttable1[from_c.spotno][to_c.spotno]*self.drskill ##20180904 休憩スポット以外
				else:
					self.arr[i]=self.lv[i-1]+ttable1[from_c.spotno][to_c.spotno] #休憩スポットはスキルは関係ない
				# self.arr[i]=round(self.arr[i],4)
				if not i in no_park_idx and parkt_time_flag[i]:
					self.st[i]=max(self.arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs)+self.route[i].parkt_open
				else:
					self.st[i]=max(self.arr[i],self.route[i].ready_fs)
				
				self.lv[i]=self.st[i] ##20180904
				if self.route[i] in servt_dict:
					self.lv[i]+=servt_dict[self.route[i]]*self.opskill	#デポ
				else:
					if self.route[i].custno[0] != 'b':
						self.lv[i]+=to_c.servt*self.opskill	#デポ以外、休憩スポット以外
					else:
						self.lv[i]+=to_c.servt	#休憩スポットはスキルは関係ない

				if self.route[i] in self.chg_batt_dict:
					self.lv[i]+=self.chg_batt_dict[self.route[i]]/self.route[i].e_rate

				if self.route[i].custno==self.route[i-1].custno and self.route[i].custno!="0" and self.route[i].custno[0]!="b" and i!=len(self.arr)-1:
					self.arr[i]=self.arr[i-1]
					self.st[i]=self.st[i-1]
					self.lv[i]=self.lv[i-1]
			self.slack_t[-1]=self.route[-1].due_fs-self.arr[-1]
			for i in reversed(range(0,arr_size-1)):
				self.slack_t[i]=min(self.route[i].due_fs-self.st[i],self.slack_t[i+1])
		if len(self.route)>=2 and self.delay_arr!=[] and argvs.break_flag==False and self.reserved_v_flag==False:
			self.delay_st=[0 for r in self.route]
			self.delay_lv=[0 for r in self.route]
			self.delay_slack_t=[0 for r in self.route]

			from_c,to_c=self.route[0],self.route[1]
			if not 0 in no_park_idx:
				self.delay_st[0]=max(self.delay_arr[0]+self.route[0].parkt_arrive,self.route[0].ready_fs)+self.route[0].parkt_open
			else:
				self.delay_st[0]=max(self.delay_arr[0],self.route[0].ready_fs)
			self.delay_arr=[r for r in self.delay_arr[:len(self.route)]]
			self.delay_lv[0]=self.delay_st[0]+servt_dict[self.route[0]]*self.opskill
			delay_arr_size=len(self.delay_arr)
			for i in range(1,delay_arr_size):
				from_c,to_c=self.route[i-1],self.route[i]
				ttable1 = get_ttable(self.vtype, self.delay_lv[i-1], argvs.management_ttable)
				if from_c.spotid != '' and to_c.spotid != '':
					self.delay_arr[i]=self.delay_lv[i-1]+ttable1[from_c.spotno][to_c.spotno]*self.drskill #休憩スポット以外
				else:
					self.delay_arr[i]=self.delay_lv[i-1]+ttable1[from_c.spotno][to_c.spotno] #休憩スポットはスキルは関係ない
				# self.arr[i]=round(self.arr[i],4)
				if not i in no_park_idx and parkt_time_flag[i]:
					self.delay_st[i]=max(self.delay_arr[i]+self.route[i].parkt_arrive,self.route[i].ready_fs)+self.route[i].parkt_open
				else:
					self.delay_st[i]=max(self.delay_arr[i],self.route[i].ready_fs)
				
				self.delay_lv[i]=self.delay_st[i] ##20180904
				if self.route[i] in servt_dict:
					self.delay_lv[i]+=servt_dict[self.route[i]]*self.opskill #デポ
				else:
					if self.route[i].custno[0] != 'b':
						self.delay_lv[i]+=to_c.servt*self.opskill #デポ以外、休憩スポット以外
					else:
						self.delay_lv[i]+=to_c.servt #休憩スポット

				if self.route[i] in self.delay_chg_batt_dict:
					self.delay_lv[i]+=self.delay_chg_batt_dict[self.route[i]]/self.route[i].e_rate

				if self.route[i].custno==self.route[i-1].custno and self.route[i].custno!="0" and i!=len(self.delay_arr)-1:
					self.delay_arr[i]=self.delay_arr[i-1]
					self.delay_st[i]=self.delay_st[i-1]
					self.delay_lv[i]=self.delay_lv[i-1]
			self.delay_slack_t[-1]=self.route[-1].due_fs-self.delay_st[-1]
			for i in reversed(range(0,delay_arr_size-1)):
				self.delay_slack_t[i]=min(self.route[i].due_fs-self.delay_st[i],self.delay_slack_t[i+1])
		
	# def update_arrtime(self):
	# 	if len(self.route)>=2:
	# 		self.arr=[0 for r in self.route]
	# 		self.arr[0]=0
	# 		from_c,to_c=self.route[0],self.route[1]
	# 		ttable1 = get_ttable(self.vehno, self.lv[0], argvs.management_ttable)
	# 		self.arr[1]=self.arr[0]+ttable1[from_c.spotno][to_c.spotno]
	# 		for i in range(1,len(self.arr)):
	# 			from_c,to_c=self.route[i-1],self.route[i]
	# 			ttable2 = get_ttable(self.vehno, self.lv[i-1], argvs.management_ttable)
	# 			self.arr[i]=from_c.servt+self.arr[i-1]+ttable2[from_c.spotno][to_c.spotno]
	# 			self.arr[i]=round(self.arr[i],4)

	# def update_arrtime_lastc(self):
	# 	if len(self.route)>=1:
	# 		self.arr=[0 for r in self.route[:-1]]
	# 		self.arr[0]=0
	# 		if len(self.route)>=2:
	# 			from_c,to_c=self.route[0],self.route[1]
	# 			ttable1 = get_ttable(self.vehno, self.lv[0], argvs.management_ttable)
	# 			self.arr[1]=self.arr[0]+ttable1[from_c.spotno][to_c.spotno]
	# 			for i in range(1,len(self.arr)):
	# 				from_c,to_c=self.route[i-1],self.route[i]
	# 				ttable2 = get_ttable(self.vehno, self.lv[i-1], argvs.management_ttable)
	# 				self.arr[i]=from_c.servt+self.arr[i-1]+ttable2[from_c.spotno][to_c.spotno]
	# 				self.arr[i]=round(self.arr[i],4)
	def update_load_onbrd(self):
		self.load_onbrd=0
		self.load_pickup=0
		self.load_onbrd2=0
		self.load_pickup2=0
		route_size=len(self.route)
		for i in range(1,route_size-1):
			if self.route[i].custno=="0" or self.route[i].custno[0]=="b":
				continue
			if self.route[i].requestType=="DELIVERY":
				self.load_onbrd+=self.route[i].dem 
			else:
				self.load_pickup+=self.route[i].dem
			if self.route[i].requestType=="DELIVERY":
				self.load_onbrd2+=self.route[i].dem2 
			else:
				self.load_pickup2+=self.route[i].dem2	

	def update_chg_battery(self):##2020/04/06 
		if len(self.route)>=2:
			self.chg_batt=[0 for r in self.route]

	def update_rem_battery(self,argvs,after_idx=0): ##2020/03/17 関数定義を追加
		if len(self.route)>=2:
			if after_idx==0:
				self.rem_batt=[0 for r in self.route]
				self.chg_batt=[0 for r in self.route]
				self.rem_batt[0]=self.e_initial
				for i in range(1,len(self.rem_batt)):
					from_c,to_c=self.route[i-1],self.route[i]
					if not argvs.management_etable: #電力テーブルが無い場合
						dtable1 = get_dtable(self.vtype, self.lv[i-1], argvs.management_dtable)
						tdist=dtable1[from_c.spotno][to_c.spotno]/1000
						self.rem_batt[i]=self.rem_batt[i-1]-tdist/self.e_cost
					else: #電力テーブルが有る場合
						etable1 = get_etable(self.vtype, self.etype, self.lv[i-1], argvs.management_etable)
						self.rem_batt[i] = self.rem_batt[i-1] - etable1[self.route[i-1].spotno][self.route[i].spotno]

					is_espot=False
					if to_c.custno.startswith("e"):
						is_espot=True

					if is_espot==True:
						q_to_charge,q_to_depot=self.find_power_to_charge(i,argvs)
						if q_to_depot<=self.rem_batt[i]:
							self.chg_batt_dict[self.route[i]]=0
						if q_to_depot>self.rem_batt[i]:
							if self.e_capacity>=q_to_depot:
								self.rem_batt[i]=q_to_depot
								self.chg_batt_dict[self.route[i]]=q_to_charge
							else:
								self.chg_batt_dict[self.route[i]]=self.e_capacity-self.rem_batt[i]
								self.rem_batt[i]=self.e_capacity
						self.chg_batt[i]=self.chg_batt_dict[self.route[i]]
					
			else:
				for i in range(after_idx,len(self.rem_batt)-1):
					from_c,to_c=self.route[i],self.route[i+1]
					if not argvs.management_etable: #電力テーブルが無い場合
						dtable2 = get_dtable(self.vtype, self.lv[i], argvs.management_dtable)
						tdist=dtable2[from_c.spotno][to_c.spotno]/1000
						self.rem_batt[i+1]=self.rem_batt[i]-tdist/self.e_cost
					else: #電力テーブルが有る場合
						etable2 = get_etable(self.vtype, self.etype, self.lv[i], argvs.management_etable)
						self.rem_batt[i+1] = self.rem_batt[i] - etable2[self.route[i].spotno][self.route[i+1].spotno]

					if self.route[i+1] in self.chg_batt_dict.keys():
						self.rem_batt[i]+=self.chg_batt_dict[self.route[i+1]]
		if len(self.route)>=2 and self.delay_arr!=[] and self.reserved_v_flag==False:
			if after_idx==0:
				self.delay_rem_batt=[0 for r in self.route]
				self.delay_chg_batt=[0 for r in self.route]
				self.delay_rem_batt[0]=self.e_initial
				for i in range(1,len(self.delay_rem_batt)):
					from_c,to_c=self.route[i-1],self.route[i]
					if not argvs.management_etable: #電力テーブルが無い場合
						dtable1 = get_dtable(self.vtype, self.delay_lv[i-1], argvs.management_dtable)
						tdist=dtable1[from_c.spotno][to_c.spotno]/1000
						self.delay_rem_batt[i]=self.delay_rem_batt[i-1]-tdist/self.e_cost
					else: #電力テーブルが有る場合
						etable1 = get_etable(self.vtype, self.etype, self.delay_lv[i-1], argvs.management_etable)
						self.delay_rem_batt[i] = self.delay_rem_batt[i-1] - etable1[self.route[i-1].spotno][self.route[i].spotno]

					is_espot=False
					if to_c.custno.startswith("e"):
						is_espot=True

					if is_espot==True:
						q_to_charge,q_to_depot=self.find_power_to_charge(i,argvs)
						if q_to_depot<=self.delay_rem_batt[i]:
							self.delay_chg_batt_dict[self.route[i]]=0
						if q_to_depot>self.delay_rem_batt[i]:
							if self.e_capacity>=q_to_depot:
								self.delay_rem_batt[i]=q_to_depot
								self.delay_chg_batt_dict[self.route[i]]=q_to_charge
							else:
								self.delay_chg_batt_dict[self.route[i]]=self.e_capacity-self.delay_rem_batt[i]
								self.delay_rem_batt[i]=self.e_capacity
						self.delay_chg_batt[i]=self.delay_chg_batt_dict[self.route[i]]
					
			else:
				for i in range(after_idx,len(self.delay_rem_batt)-1):
					from_c,to_c=self.route[i],self.route[i+1]
					if not argvs.management_etable: #電力テーブルが無い場合
						dtable2 = get_dtable(self.vtype, self.delay_lv[i], argvs.management_dtable)
						tdist=dtable2[from_c.spotno][to_c.spotno]/1000
						self.delay_rem_batt[i+1]=self.delay_rem_batt[i]-tdist/self.e_cost
					else: #電力テーブルが有る場合
						etable2 = get_etable(self.vtype, self.etype, self.delay_lv[i], argvs.management_etable)
						self.delay_rem_batt[i+1] = self.delay_rem_batt[i] - etable2[self.route[i].spotno][self.route[i+1].spotno]

					if self.route[i+1] in self.delay_chg_batt_dict.keys():
						self.delay_rem_batt[i]+=self.delay_chg_batt_dict[self.route[i+1]]
		if len(self.route)<2 and self.delay_arr==[]:
			self.rem_batt=[0 for i in range(2)]
			self.chg_batt=[0 for i in range(2)]
		elif len(self.route)<2:
			self.rem_batt=[0 for i in range(2)]
			self.chg_batt=[0 for i in range(2)]
			self.delay_rem_batt=[0 for i in range(2)]
			self.delay_chg_batt=[0 for i in range(2)]


class NbFlag:
	def __init__(self,_re,_ins,_ex,_cross,_merge):
		self.relflag=_re
		self.inswapflag=_ins
		self.exflag=_ex
		self.crossflag=_cross
		self.mergeflag=_merge

	def output(self, sLogBuf):
		sLogBuf += " ".join(list(map(str,["REL:",self.relflag]))) + "\n"
		sLogBuf += " ".join(list(map(str,["INSWAP:",self.inswapflag]))) + "\n"
		sLogBuf += " ".join(list(map(str,["EX:",self.exflag]))) + "\n"
		sLogBuf += " ".join(list(map(str,["CROSS:",self.crossflag]))) + "\n"
		sLogBuf += " ".join(list(map(str,["MERGE:",self.mergeflag]))) + "\n"
		return sLogBuf

class Argvs:
	def __init__(self,_argv=None):
		argc=len(_argv)
		#command line args check


		self.ivnum=0
		self.initfile=None
		self.loaddivide_initfile=None #荷物分割初期解ファイル
		self.lastc_flag=False
		self.lowertime=0.0
		self.uppertime=0.0
		self.timeout=0.0 ##20171012
		self.num_addv=-1 ##20171115
		self.decr_vnum=False ## 20171115
		self.avetime_ape_flag=False
		self.avetime_ape=0.0
		self.avetime_ae_flag=False
		self.avetime_ae=0.0
		self.avevisits_ape_flag=False
		self.avevisits_ape=0
		self.avevisits_ae_flag=False
		self.avevisits_ae=0
		self.avedist_ape_flag=False
		self.avedist_ape=0.0
		self.avedist_ae_flag=False
		self.avedist_ae=0.0
		self.demand=300 ##20180509               # 各車両の最大積載量
		self.demand2=300						 # 各車両の最大第2積載量
		self.skillfile=None ##20180904
		self.skillflag=0 ##20181210
		self.outputstime=0.0 ##20190903
		self.outputs_count=1.0 ##20190903 途中結果出力用 for middle outputs
		self.multi_p=0 ##20190917 マルチコア指定用 for multiprocessing
		self.evplan=False ##20200626
		self.e_vehicle_file=None ##20200305 車両電力情報読み込み
		self.e_spot_file=None ##20200305 充電スポット情報読み込み
		self.e_cost_file=None #電費ファイル読み込み
		self.ls_d_starttime = time.time() ###
		self.opt_d_weight = 1.0 ###
		self.opt_t_weight = 0.0 ###
		self.opt_e_weight = 0.0 ###
		self.opt_x_weight = 0.0 ###
		self.hetero_file = None #5.12	ヘテロ車両情報情報読み込み
		self.non_violation_vehicles_route = {}	#違反なし解保存用Vehicle(route)
		self.non_violation_management_dtable=[]	#違反なし解保存用dtable
		self.non_violation_management_ttable=[]	#違反なし解保存用ttable
		self.non_violation_management_etable=[]	#違反なし解保存用etable
		self.non_violation_management_xtable=[]	#違反なし解保存用xtable
		self.atpen = 0.0
		self.aload = 0.0
		self.distfile = None
		self.timefile = None
		self.e_cost_file = None
		self.x_cost_file = None
		self.ds_file = None		# 時間別距離ファイル読み込み
		self.ts_file = None		# 時間別時間ファイル読み込み
		self.es_file = None		# 時間別電費ファイル読み込み
		self.xs_file = None		# 時間別経験コストファイル読み込み
		self.dsv_file = None	# 時間別車両別距離ファイル読み込み
		self.tsv_file = None	# 時間別車両別時間ファイル読み込み
		self.esv_file = None	# 時間別車両別電費ファイル読み込み
		self.xsv_file = None 	# 時間別車両別経験コストファイル読み込み
		self.time_error=0.0
		self.visits_error=0.0
		self.dist_error=0.0
		self.pickup_flag=False # 顧客ファイル(input.csv)読み込み時にDEMANDにマイナスが一つでもあるかどうか
		self.skillshuffle_flag=False 
		self.spot_input_file=None # スポットID定義ファイル読み込み
		self.bulkShipping_flag=False # 荷物マージフラグ
		self.management_dtable=[]
		self.management_ttable=[]
		self.management_etable=[]
		self.management_xtable=[]
		self.vendfile=None # 最終訪問先定義ファイル読み込み
		self.vtimefile=None # 車両別営業時間ファイル読み込み
		self.rejectve_file=None # 立寄不可ファイル読み込み
		self.st_top=None
		self.spotid_list=[]
		self.delaystart_flag=False # 出発遅延フラグ
		self.delaystart2_flag=False # 出発遅延フラグ(最適化考慮)
		self.maxvisit_file=None # 車両別訪問上限ファイル読み込み
		self.multitrip_flag=False # 回転機能フラグ
		self.multitripv_file=None # 車両別回転上限ファイル
		self.multitripc_file=None # 配送先拠点作業時間ファイル
		self.outputfile=""
		self.multithread_num=1 #スレッド数
		self.timePenaltyWeight=1e9 #時間ペナルティ重み
		self.loadPenaltyWeight=1e9 #積載量ペナルティ重み
		self.load2PenaltyWeight=1e9 #第2積載量ペナルティ重み
		self.timeLevelingPenaltyWeight=1e9 #時間ばらつきペナルティ重み
		self.visitsLevelingPenaltyWeight=1e9 #件数ばらつきペナルティ重み
		self.distLevelingPenaltyWeight=1e9 #距離ばらつきペナルティ重み
		self.timePenaltyType="soft" #時間ペナルティタイプ
		self.loadPenaltyType="soft" #積載量ペナルティタイプ
		self.load2PenaltyType="soft" #第2積載量ペナルティタイプ
		self.timeLevelingPenaltyType="soft" #時間ばらつきペナルティタイプ
		self.visitsLevelingPenaltyType="soft" #件数ばらつきペナルティタイプ
		self.distLevelingPenaltyType="soft" #距離ばらつきペナルティタイプ
		self.addtwspot_file=None #追加時間枠場所ファイル
		self.demdivideunit_file=None #荷物分割数定義ファイル
		self.rmpriority_file=None #台数削減優先度ファイル
		self.init_changecust="free" #割当済荷物(＝初期解入力荷物)全体の変更条件
		self.br_file=None # 休憩定義ファイル
		self.addbrspot_file=None #追加休憩枠場所ファイル
		self.break_interval=0.0 # 休憩を取る間隔
		self.break_time=0.0 #休憩を取る際の時間
		self.break_flag=False #休憩機能の使用
		self.opt_unassigned_flag=False #未割り当て荷物最適化
		self.sparePenaltyWeight=1e12 #未割り当て荷物最適化ペナルティ重み
		self.unass_file=None #未割り当て荷物 未割当て禁止ファイル
		self.reservedv_file=None #未割り当て荷物 予約車両ファイル
		self.initroute={} #初期解入力

		if _argv==None:
			return

		##
		for i in range(argc):
			if _argv[i]=="-i" and len(_argv)>=i:
				# c:\input\input.csv
				self.inputfile=_argv[i+1]
			if _argv[i]=="-d" and len(_argv)>=i:
			# c:\table\dist.csv
				self.distfile=_argv[i+1]
			if _argv[i]=="-t" and len(_argv)>=i:
			# c:\table\time.csv
				self.timefile=_argv[i+1]
			if _argv[i]=="-o" and len(_argv)>=i:
			# c:\output\output.csv
				self.outputfile=_argv[i+1]
			if _argv[i]=="-v" and len(_argv)>=i:
			# 2
				self.ivnum=_argv[i+1]
			if _argv[i]=="-s" and len(_argv)>=i:
			# 10:00
				self.starttime=_argv[i+1]
			if _argv[i]=="-e" and len(_argv)>=i:
			# 12:00
				self.endtime=_argv[i+1]
			##
			if _argv[i]=="-ltime" and len(_argv)>=i:
				self.lowertime=_argv[i+1]
				self.lowertime=float(self.lowertime)
			if _argv[i]=="-utime" and len(_argv)>=i:
				self.uppertime=_argv[i+1]
				self.uppertime=float(self.uppertime)			
			##
			if _argv[i]=="-a" and len(_argv)>=i:
				self.initfile=_argv[i+1]
			if _argv[i]=="-a2" and len(_argv)>=i:
				self.loaddivide_initfile=_argv[i+1]
			if _argv[i]=="-l":
				self.lastc_flag=True
			##20171012
			if _argv[i]=="-to" and len(_argv)>=i:
				self.timeout=_argv[i+1]
				self.timeout=float(self.timeout)
				
			##20171012
			if _argv[i]=="-iv" and len(_argv)>=i:
				self.num_addv=_argv[i+1]
				self.num_addv=int(self.num_addv)
			##20171115
			##20171115
			if _argv[i]=="-rv":
				self.decr_vnum=True ## 20171115
				if len(_argv)>=i and _argv[i+1].endswith(".csv"):
					self.rmpriority_file=_argv[i+1]

			##20171115
			##20171115 20200731
			if _argv[i]=="-ave":
				self.avetime_ape_flag=True
				if len(_argv)>=i:
					self.avetime_ape=float(_argv[i+1])/100.0
			if _argv[i]=="-avetime":
				self.avetime_ae_flag=True
				if len(_argv)>=i:
					self.avetime_ae=float(_argv[i+1])
			if _argv[i]=="-avenper":
				self.avevisits_ape_flag=True
				if len(_argv)>=i:
					self.avevisits_ape=float(_argv[i+1])/100.0
			if _argv[i]=="-avennum":
				self.avevisits_ae_flag=True
				if len(_argv)>=i:
					self.avevisits_ae=int(_argv[i+1])
			if _argv[i]=="-avedistper":
				self.avedist_ape_flag=True
				if len(_argv)>=i:
					self.avedist_ape=float(_argv[i+1])/100.0
			if _argv[i]=="-avedistnum":
				self.avedist_ae_flag=True
				if len(_argv)>=i:
					self.avedist_ae=float(_argv[i+1])
			##20171115 20200731
			##20180509
			if _argv[i]=="-dem" and len(_argv)>=i:
				self.demand=_argv[i+1]
				self.demand=float(self.demand)
			if _argv[i]=="-dem2" and len(_argv)>=i:
				self.demand2=_argv[i+1]
				self.demand2=float(self.demand2)
			##20180509
			##20180904
			if _argv[i]=="-sk" and len(_argv)>=i:
				self.skillfile=_argv[i+1]
				self.skillflag = 0
			
			if _argv[i]=="-ostime" and len(_argv)>=i:
				self.outputstime=_argv[i+1]
				self.outputstime=float(self.outputstime)
			##20190903
			##20190917
			# if _argv[i]=="-mp":
			# 	self.multi_p=6
			# if _argv[i]=="-mpnum":
			# 	self.multi_p=_argv[i+1]
			# 	self.multi_p=int(self.multi_p)
			##20190917
			##20200626
			if _argv[i]=="-evplan":
				self.evplan=True
			##20200626
			##20200305
			if _argv[i]=="-ev" and len(_argv)>=i:
				self.e_vehicle_file=_argv[i+1]
			##20200305
			##20200305
			if _argv[i]=="-es" and len(_argv)>=i:
				self.e_spot_file=_argv[i+1]

			if _argv[i]=="-ec" and len(_argv)>=i:
				self.e_cost_file=_argv[i+1]

			##20200305
			##20200626
			if _argv[i]=="-idate" and len(_argv)>=i:
				self.inputfile=_argv[i+1]
			if _argv[i]=="-sdate" and len(_argv)>=i:
			# "2020-6-26 0:00:00"
				self.starttime=_argv[i+1]
			if _argv[i]=="-edate" and len(_argv)>=i:
			# "2020-6-26 12:00:00"
				self.endtime=_argv[i+1]
			##20200626
			###
			if _argv[i]=="-opt_t": ###
				self.opt_d_weight = 0.0 ###
				self.opt_t_weight = 1.0 ###
				self.opt_e_weight = 0.0
				self.opt_x_weight = 0.0
			if _argv[i]=="-opt_e": ###
				self.opt_d_weight = 0.0 ###
				self.opt_t_weight = 0.0 ###
				self.opt_e_weight = 1.0
				self.opt_x_weight = 0.0
			if _argv[i]=="-opt_x": ###
				self.opt_d_weight = 0.0 ###
				self.opt_t_weight = 0.0 ###
				self.opt_e_weight = 0.0
				self.opt_x_weight = 1.0

			if _argv[i]=="-x" and len(_argv)>=i:
				self.x_cost_file=_argv[i+1]

			if _argv[i]=="-vs" and len(_argv)>=i:
				self.hetero_file=_argv[i+1]

			if _argv[i]=="-ds" and len(_argv)>=i:
				self.ds_file=_argv[i+1]
			if _argv[i]=="-dsv" and len(_argv)>=i:
				self.dsv_file=_argv[i+1]
			if _argv[i]=="-ts" and len(_argv)>=i:
				self.ts_file=_argv[i+1]
			if _argv[i]=="-tsv" and len(_argv)>=i:
				self.tsv_file=_argv[i+1]
			if _argv[i]=="-ecs" and len(_argv)>=i:
				self.es_file=_argv[i+1]
			if _argv[i]=="-ecsv" and len(_argv)>=i:
				self.esv_file=_argv[i+1]
			if _argv[i]=="-xs" and len(_argv)>=i:
				self.xs_file=_argv[i+1]
			if _argv[i]=="-xsv" and len(_argv)>=i:
				self.xsv_file=_argv[i+1]

			if _argv[i]=="-rej" and len(_argv)>=i:
				self.rejectve_file=_argv[i+1]

			if _argv[i]=="-si" and len(_argv)>=i:
				self.spot_input_file=_argv[i+1]

			if _argv[i]=="-bs":
				self.bulkShipping_flag=True

			if _argv[i]=="-vend" and len(_argv)>=i:
				self.vendfile=_argv[i+1]

			if _argv[i]=="-vt" and len(_argv)>=i:
				self.vtimefile=_argv[i+1]

			if _argv[i]=="-delayst":
				self.delaystart_flag=True

			if _argv[i]=="-delayst2":
				self.delaystart2_flag=True

			if _argv[i]=="-maxvisit" and len(_argv)>=i:
				self.maxvisit_file=_argv[i+1]

			if _argv[i]=="-mt":
				self.multitrip_flag=True

			if _argv[i]=="-mtv" and len(_argv)>=i:
				self.multitripv_file=_argv[i+1]

			if _argv[i]=="-mtc" and len(_argv)>=i:
				self.multitripc_file=_argv[i+1]

			if _argv[i]=="-multithread" and len(_argv)>=i:
				self.multithread_num=int(_argv[i+1])

			if _argv[i]=="-tpw" and len(_argv)>=i:
				self.timePenaltyWeight=float(_argv[i+1])

			if _argv[i]=="-lpw" and len(_argv)>=i:
				self.loadPenaltyWeight=float(_argv[i+1])

			if _argv[i]=="-l2pw" and len(_argv)>=i:
				self.load2PenaltyWeight=float(_argv[i+1])

			if _argv[i]=="-tlpw" and len(_argv)>=i:
				self.timeLevelingPenaltyWeight=float(_argv[i+1])

			if _argv[i]=="-vlpw" and len(_argv)>=i:
				self.visitsLevelingPenaltyWeight=float(_argv[i+1])

			if _argv[i]=="-dlpw" and len(_argv)>=i:
				self.distLevelingPenaltyWeight=float(_argv[i+1])

			if _argv[i]=="-tpt" and len(_argv)>=i:
				self.timePenaltyType=_argv[i+1]

			if _argv[i]=="-lpt" and len(_argv)>=i:
				self.loadPenaltyType=_argv[i+1]

			if _argv[i]=="-l2pt" and len(_argv)>=i:
				self.load2PenaltyType=_argv[i+1]

			if _argv[i]=="-tlpt" and len(_argv)>=i:
				self.timeLevelingPenaltyType=_argv[i+1]

			if _argv[i]=="-vlpt" and len(_argv)>=i:
				self.visitsLevelingPenaltyType=_argv[i+1]

			if _argv[i]=="-dlpt" and len(_argv)>=i:
				self.distLevelingPenaltyType=_argv[i+1]

			if _argv[i]=="-addtwspot" and len(_argv)>=i:
				self.addtwspot_file=_argv[i+1]

			if _argv[i]=="-demdiv" and len(_argv)>=i:
				self.demdivideunit_file=_argv[i+1]

			if _argv[i]=="-afix":
				self.init_changecust="additive"

			if _argv[i]=="-br" and len(_argv)>=i:
				self.br_file=_argv[i+1]

			if _argv[i]=="-addbrspot" and len(_argv)>=i:
				self.addbrspot_file=_argv[i+1]

			if _argv[i]=="-br_int" and len(_argv)>=i:
				self.break_interval=float(_argv[i+1])

			if _argv[i]=="-unass" and len(_argv)>=i: #未割り当て荷物 未割当て禁止ファイル
				self.unass_file=_argv[i+1]

			if _argv[i]=="-reservedv" and len(_argv)>=i: #未割り当て荷物 予約車両ファイル
				self.reservedv_file=_argv[i+1]
				self.opt_unassigned_flag=True


		# self.error_check(_argv,customers,e_spots)

	def error_check(self,customers):
		try:
			#-dsと-dsvが両方指定された場合はエラーとする
			if self.ds_file != None and  self.dsv_file != None:
				sErrMes = "Usage:only one of -ds and -dsv can be used"
				raise ValueError(sErrMes)
			#-tsと-tsvが両方指定された場合はエラーとする
			if self.ts_file != None and  self.tsv_file != None:
				sErrMes = "Usage:only one of -ts and -tsv can be used"
				raise ValueError(sErrMes)
			#-ecsと-ecsvが両方指定された場合はエラーとする
			if self.es_file != None and  self.esv_file != None:
				sErrMes = "Usage:only one of -ecs and -ecsv can be used"
				raise ValueError(sErrMes)
			#-xsと-xsvが両方指定された場合はエラーとする
			if self.xs_file != None and  self.xsv_file != None:
				sErrMes = "Usage:only one of -xs and -xsv can be used"
				raise ValueError(sErrMes)
			#-aと-a2が両方指定された場合はエラーとする
			if self.initfile != None and  self.loaddivide_initfile != None:
				sErrMes = "Usage:only one of -a and -a2 can be used"
				raise ValueError(sErrMes)


			##
			if self.lowertime > 0 and self.uppertime > 0 and self.lowertime > self.uppertime:
				sErrMes = "Usage:ltime must be smaller than utime (lowertime = "+str(self.lowertime)+", uppertime = "+str(self.uppertime)+")"
				raise ValueError(sErrMes) # sys.exit() # daic
			##
			##20180904
			# if self.decr_vnum == True and self.skillfile != None:
			# 	sErrMes = "both reducing vehicles (aka decr_vnum) and using skill (aka skillfile) set"
			# 	raise ValueError(sErrMes) # sys.exit() # daic
			##20180904
			##20200626

			#-mtと-evplanが両方指定された場合はエラーとする
			if self.multitrip_flag== True and self.evplan==True:
				sErrMes = "both multitrip (aka multitrip_flag) and evplan (aka evplan) set" 
				raise ValueError(sErrMes)

			if self.opt_d_weight<0.0:
				sErrMes ="distance for optimization metirc (aka opt_d_weight) set to less than 0.0 (opt_d_weight = "+str(self.opt_d_weight)+")"
				raise ValueError(sErrMes)
			if self.opt_d_weight>1.0:
				sErrMes ="distance for optimization metric (aka opt_d_weight) set to more than 1.0 (opt_d_weight = "+str(self.opt_d_weight)+")"
				raise ValueError(sErrMes)
			if self.opt_t_weight<0.0:
				sErrMes ="time for optimization metric (aka opt_t_weight) set to less than 0.0 (opt_t_weight = "+str(self.opt_t_weight)+")"
				raise ValueError(sErrMes)
			if self.opt_t_weight>1.0:
				sErrMes ="time for optimization metric (aka opt_t_weight) set to more than 1.0 (opt_t_weight = "+str(self.opt_t_weight)+")"
				raise ValueError(sErrMes)
			if self.opt_e_weight<0.0:
				sErrMes ="epower for optimization metric (aka opt_e_weight) set to less than 0.0 (opt_e_weight = "+str(self.opt_e_weight)+")"
				raise ValueError(sErrMes)
			if self.opt_e_weight>1.0:
				sErrMes ="epower for optimization metric (aka opt_e_weight) set to more than 1.0 (opt_e_weight = "+str(self.opt_e_weight)+")"
				raise ValueError(sErrMes)
			if self.opt_x_weight<0.0:
				sErrMes ="empirical cost for optimization metric (aka opt_x_weight) set to less than 0.0 (opt_x_weight = "+str(self.opt_x_weight)+")"
				raise ValueError(sErrMes)
			if self.opt_x_weight>1.0:
				sErrMes ="empirical cost for optimization metric (aka opt_x_weight) set to more than 1.0 (opt_x_weight = "+str(self.opt_x_weight)+")"
				raise ValueError(sErrMes)

			#dtableの縦軸、横軸の数がspotidの数と同じでない場合
			for table in self.management_dtable:
				if len(table["table"])!=len(self.spotid_list):
					sErrMes = "distance table (aka dtable) does not match spotid (len(dtable) = "+str(len(table["table"]))+", number of spotid = "+str(len(self.spotid_list))+")"
					raise ValueError(sErrMes)
				
				for row in table["table"]:
					if len(row)!=len(self.spotid_list):
						sErrMes = "distance table (aka dtable) does not match spotid"
						raise ValueError(sErrMes)

			#dtableに何も参照するアイテムがない場合
			if self.management_dtable==[]:
				sErrMes = "distance table (aka dtable) does not exist"
				raise ValueError(sErrMes)

			#ttableの縦軸、横軸の数がspotidの数と同じでない場合
			for table in self.management_ttable:
				if len(table["table"])!=len(self.spotid_list):
					sErrMes = "eta table (aka ttable) does not match spotid (len(ttable) = "+str(len(table["table"]))+", number of spotid = "+str(len(self.spotid_list))+")"
					raise ValueError(sErrMes)
				
				for row in table["table"]:
					if len(row)!=len(self.spotid_list):
						sErrMes = "eta table (aka ttable) does not match spotid"
						raise ValueError(sErrMes)
			
			#ttableに何も参照するアイテムがない場合
			if self.management_ttable==[]:
				sErrMes = "eta table (aka ttable) does not exist"
				raise ValueError(sErrMes)

			#etableの縦軸、横軸の数がspotidの数と同じでない場合
			for table in self.management_etable:
				if len(table["table"])!=len(self.spotid_list):
					sErrMes = "epower table (aka etable) does not match spotid (len(etable) = "+str(len(table["table"]))+", number of spotid = "+str(len(self.spotid_list))+")"
					raise ValueError(sErrMes)
				
				for row in table["table"]:
					if len(row)!=len(self.spotid_list):
						sErrMes = "epower table (aka etable) does not match spotid"
						raise ValueError(sErrMes)

			if self.e_cost_file!=None:
				#etableに何も参照するアイテムがない場合
				if self.management_etable==[]:
					sErrMes = "epower table (aka etable) does not exist"
					raise ValueError(sErrMes)

			#xtableの縦軸、横軸の数がspotidの数と同じでない場合
			for table in self.management_xtable:
				if len(table["table"])!=len(self.spotid_list):
					sErrMes = "empCost table (aka xtable) does not match spotid (len(xtable) = "+str(len(table["table"]))+", number of spotid = "+str(len(self.spotid_list))+")"
					raise ValueError(sErrMes)
				
				for row in table["table"]:
					if len(row)!=len(self.spotid_list):
						sErrMes = "empCost table (aka xtable) does not match spotid"
						raise ValueError(sErrMes)
				
			if self.x_cost_file!=None:
				#xtableに何も参照するアイテムがない場合
				if self.management_xtable==[]:
					sErrMes = "empCost table (aka xtable) does not exist"
					raise ValueError(sErrMes)

			#avetime_ape<0の場合
			if self.avetime_ape_flag and self.avetime_ape<0.0:
				sErrMes = "APE margin of time-leveling (aka avetime_ape) set to less than 0.0 (avetime_ape = "+str(self.avetime_ape)+")"
				raise ValueError(sErrMes)
				
			#avetime_ae<0の場合
			if self.avetime_ae_flag and self.avetime_ae<0.0:
				sErrMes = "AE margin of time-leveling (aka avetime_ae) set to less than 0.0 (avetime_ae = "+str(self.avetime_ae)+")"
				raise ValueError(sErrMes)
				
			if self.avetime_ape_flag and self.avetime_ae_flag:
				sErrMes = "both APE margin of time-leveling (aka avetime_ape_flag) and AE margin of time-leveling (aka avetime_ae_flag) set"
				raise ValueError(sErrMes)

			#avevisits_ape<0の場合
			if self.avevisits_ape_flag and self.avevisits_ape<0.0:
				sErrMes = "APE margin of visits-leveling (aka avevisits_ape) set to less than 0.0 (avevisits_ape = "+str(self.avevisits_ape)+")"
				raise ValueError(sErrMes)
				
			#avevisits_ae<0の場合
			if self.avevisits_ae_flag and self.avevisits_ae<0.0:
				sErrMes = "AE margin of visits-leveling (aka avevisits_ae) set to less than 0 (avevisits_ae = "+str(self.avevisits_ae)+")"
				raise ValueError(sErrMes)
				
			if self.avevisits_ape_flag and self.avevisits_ae_flag:
				sErrMes = "both APE margin of visits-leveling (aka avevisits_ape_flag) and AE margin of visits-leveling (aka avevisits_ae_flag) set"
				raise ValueError(sErrMes)

			#avedist_ape<0の場合
			if self.avedist_ape_flag and self.avedist_ape<0.0:
				sErrMes = "APE margin of distance-leveling (aka avedist_ape) set to less than 0.0 (avedist_ape = "+str(self.avedist_ape)+")"
				raise ValueError(sErrMes)
				
			#avedist_ae<0の場合
			if self.avedist_ae_flag and self.avedist_ae<0.0:
				sErrMes = "AE margin of distance-leveling (aka avedist_ae) set to less than 0.0 (avedist_ae = "+str(self.avedist_ae)+")"
				raise ValueError(sErrMes)
				
			if self.avedist_ape_flag and self.avedist_ae_flag:
				sErrMes = "both APE margin of distance-leveling (aka avedist_ape_flag) and AE margin of distance-leveling (aka avedist_ae_flag) set"
				raise ValueError(sErrMes)

			#multithread_num<0の場合
			if not (isinstance(self.multithread_num,int) and self.multithread_num>=0):
				sErrMes ="number of threads (aka multithread_num) must be 0 or positive integer (multithread_num = "+str(self.multithread_num)+")"
				raise ValueError(sErrMes)

			#timePenaltyWeight<0の場合
			if self.timePenaltyWeight<0:
				sErrMes ="weight of time penalty (aka timePenaltyWeight) set to less than 0.0 (timePenaltyWeight = "+str(self.timePenaltyWeight)+")"
				raise ValueError(sErrMes)
			#timePenaltyWeight>1e9の場合
			if self.timePenaltyWeight>1e9:
				sErrMes ="weight of time penalty (aka timePenaltyWeight) set to more than 1000000000 (timePenaltyWeight = "+str(self.timePenaltyWeight)+")"
				raise ValueError(sErrMes)

			#loadPenaltyWeight<0の場合
			if self.loadPenaltyWeight<0:
				sErrMes ="weight of load penalty (aka loadPenaltyWeight) set to less than 0.0 (loadPenaltyWeight = "+str(self.loadPenaltyWeight)+")"
				raise ValueError(sErrMes)
			#loadPenaltyWeight>1e9の場合
			if self.loadPenaltyWeight>1e9:
				sErrMes ="weight of load penalty (aka loadPenaltyWeight) set to more than 1000000000 (loadPenaltyWeight = "+str(self.loadPenaltyWeight)+")"
				raise ValueError(sErrMes)

			#load2PenaltyWeight<0の場合
			if self.load2PenaltyWeight<0:
				sErrMes ="weight of load2 penalty (aka load2PenaltyWeight) set to less than 0.0 (load2PenaltyWeight = "+str(self.load2PenaltyWeight)+")"
				raise ValueError(sErrMes)
			#load2PenaltyWeight>1e9の場合
			if self.load2PenaltyWeight>1e9:
				sErrMes ="weight of load2 penalty (aka load2PenaltyWeight) set to more than 1000000000 (load2PenaltyWeight = "+str(self.load2PenaltyWeight)+")"
				raise ValueError(sErrMes)

			#timeLevelingPenaltyWeight<0の場合
			if self.timeLevelingPenaltyWeight<0:
				sErrMes ="weight of time leveling penalty (aka timeLevelingPenaltyWeight) set to less than 0.0 (timeLevelingPenaltyWeight = "+str(self.timeLevelingPenaltyWeight)+")"
				raise ValueError(sErrMes)
			#timeLevelingPenaltyWeight>1e9の場合
			if self.timeLevelingPenaltyWeight>1e9:
				sErrMes ="weight of time leveling penalty (aka timeLevelingPenaltyWeight) set to more than 1000000000 (timeLevelingPenaltyWeight = "+str(self.timeLevelingPenaltyWeight)+")"
				raise ValueError(sErrMes)

			#visitsLevelingPenaltyWeight<0の場合
			if self.visitsLevelingPenaltyWeight<0:
				sErrMes ="weight of visits leveling penalty (aka visitsLevelingPenaltyWeight) set to less than 0.0 (visitsLevelingPenaltyWeight = "+str(self.visitsLevelingPenaltyWeight)+")"
				raise ValueError(sErrMes)
			#visitsLevelingPenaltyWeight>1e9の場合
			if self.visitsLevelingPenaltyWeight>1e9:
				sErrMes ="weight of visits leveling penalty (aka visitsLevelingPenaltyWeight) set to more than 1000000000 (visitsLevelingPenaltyWeight = "+str(self.visitsLevelingPenaltyWeight)+")"
				raise ValueError(sErrMes)
			
			#distLevelingPenaltyWeight<0の場合
			if self.distLevelingPenaltyWeight<0:
				sErrMes ="weight of distance leveling penalty (aka distLevelingPenaltyWeight) set to less than 0.0 (distLevelingPenaltyWeight = "+str(self.distLevelingPenaltyWeight)+")"
				raise ValueError(sErrMes)
			#distLevelingPenaltyWeight>1e9の場合
			if self.distLevelingPenaltyWeight>1e9:
				sErrMes ="weight of distance leveling penalty (aka distLevelingPenaltyWeight) set to more than 1000000000 (distLevelingPenaltyWeight = "+str(self.distLevelingPenaltyWeight)+")"
				raise ValueError(sErrMes)

			#timePenaltyTypeが"soft"および"hard"以外の場合
			if self.timePenaltyType!="soft" and self.timePenaltyType!="hard":
				sErrMes ="type of time penalty (aka timePenaltyType) set to other than \"soft\" or \"hard\" (timePenaltyType = "+str(self.timePenaltyType)+")"
				raise ValueError(sErrMes)

			#loadPenaltyTypeが"soft"および"hard"以外の場合
			if self.loadPenaltyType!="soft" and self.loadPenaltyType!="hard":
				sErrMes ="type of load penalty (aka loadPenaltyType) set to other than \"soft\" or \"hard\" (loadPenaltyType = "+str(self.loadPenaltyType)+")"
				raise ValueError(sErrMes)

			#load2PenaltyTypeが"soft"および"hard"以外の場合
			if self.load2PenaltyType!="soft" and self.load2PenaltyType!="hard":
				sErrMes ="type of load2 penalty (aka load2PenaltyType) set to other than \"soft\" or \"hard\" (load2PenaltyType = "+str(self.load2PenaltyType)+")"
				raise ValueError(sErrMes)

			#timeLevelingPenaltyTypeが"soft"および"hard"以外の場合
			if self.timeLevelingPenaltyType!="soft" and self.timeLevelingPenaltyType!="hard":
				sErrMes ="type of time leveling penalty (aka timeLevelingPenaltyType) set to other than \"soft\" or \"hard\" (timeLevelingPenaltyType = "+str(self.timeLevelingPenaltyType)+")"
				raise ValueError(sErrMes)

			#visitsLevelingPenaltyTypeが"soft"および"hard"以外の場合
			if self.visitsLevelingPenaltyType!="soft" and self.visitsLevelingPenaltyType!="hard":
				sErrMes ="type of visits leveling penalty (aka visitsLevelingPenaltyType) set to other than \"soft\" or \"hard\" (visitsLevelingPenaltyType = "+str(self.visitsLevelingPenaltyType)+")"
				raise ValueError(sErrMes)

			#distLevelingPenaltyTypeが"soft"および"hard"以外の場合
			if self.distLevelingPenaltyType!="soft" and self.distLevelingPenaltyType!="hard":
				sErrMes ="type of distance leveling penalty (aka distLevelingPenaltyType) set to other than \"soft\" or \"hard\" (distLevelingPenaltyType = "+str(self.distLevelingPenaltyType)+")"
				raise ValueError(sErrMes)

			#bulkShipping_flagがTrueで、荷物のdemdivideunitに「1」以外が指定された場合
			if self.bulkShipping_flag==True:
				for c in customers:
					if c.demdivideunit!=1:
						sErrMes = "all load dividing numbers (aka demdivideunit) must be 1 when bulkShipping (aka bulkShipping_flag) is true (demdivideunit = "+str(c.demdivideunit)+")"
						raise ValueError(sErrMes)

			#充電解と未割当荷物が指定された場合
			if self.evplan==True and self.init_changecust=="additive":
				sErrMes ="both divided package and evplan (aka evplan) set"
				raise ValueError(sErrMes)

			if not self.init_changecust in ["free","additive"]:
				sErrMes ="change mode of customers (aka init_changecust) set to other than \"free\" or \"additive\" (init_changecust = "+str(self.init_changecust)+")"
				raise ValueError(sErrMes)

			# #休憩定義ファイルとevplanが併用された
			# if self.br_file!=None and self.evplan:
			# 	sErrMes = "both breaking-file and evplan set"
			# 	raise ValueError(sErrMes)

			# #追加休憩場所ファイルとevplanが併用された
			# if self.addbrspot_file!=None and self.evplan:
			# 	sErrMes = "both add-breaking-spot and evplan set"
			# 	raise ValueError(sErrMes)

			#休憩間隔に0.0より小さい値が設定された
			if self.break_interval<0.0:
				sErrMes = "interval of break (aka break_interval) set to less than 0 (break_interval = "+str(self.break_interval*60)+")"
				raise ValueError(sErrMes)

			#休憩間隔とevplanが併用された
			if self.break_interval!=0.0 and self.evplan:
				sErrMes = "both break_interval and evplan (aka evplan) set"
				raise ValueError(sErrMes)

			#休憩時間に0.0より小さい値が設定された
			if self.break_time<0.0:
				sErrMes = "time(duration) of break (aka break_time) set to less than 0 (break_time = "+str(self.break_time)+")"
				raise ValueError(sErrMes)

			# #休憩時間とevplanが併用された
			# if self.break_time!=0.0 and self.evplan:
			# 	sErrMes = "both break_time and evplan (aka evplan) set"
			# 	raise ValueError(sErrMes)

			#未割り当て荷物最適化
			if self.opt_unassigned_flag==True:
				if self.sparePenaltyWeight < 0.0:
					sErrMes = "weight of spare vehicle penalty (aka sparePenaltyWeight) set to less than 0.0"
					raise ValueError(sErrMes)
				if self.sparePenaltyWeight > 1e12:
					sErrMes = "weight of spare vehicle penalty (aka sparePenaltyWeight) set to more than 1000000000000"
					raise ValueError(sErrMes)

		except Exception:
			sErr = traceback.format_exc()
			sErr = ["<Error message log>",sErr]
			sLogBuf = " ".join(list(map(str,sErr)))
			if rank==0:
				logging.log(logging.ERROR,sLogBuf)

			raise

	def output(self, sLogBuf):
		sLog = ["inputfile:",self.inputfile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["distfile:",self.distfile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["distsfile:",self.ds_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["distsvfile:",self.dsv_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["timefile:",self.timefile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["timesfile:",self.ts_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["timesvfile:",self.tsv_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["outputfile:",self.outputfile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["vnum:",self.ivnum]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["starttime:",self.starttime]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["endtime:",self.endtime]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		##20190903
		sLog = ["initfile:",self.initfile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["loaddivide_initfile:",self.loaddivide_initfile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["lowertime:",self.lowertime]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["uppertime:",self.uppertime]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["lastdistance flag:", self.lastc_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["timeout:", self.timeout]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["iv numbers:", self.num_addv]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["rv flag:", self.decr_vnum]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["demands:", self.demand]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["demands2:", self.demand2]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["skillfile:", self.skillfile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["program_starttime:", datetime.datetime.today()]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["opt_d_weight,opt_t_weight,opt_e_weight,opt_x_weight:", self.opt_d_weight,self.opt_t_weight,self.opt_e_weight,self.opt_x_weight]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avetime_ape_flag:",self.avetime_ape_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avetime_ape:",self.avetime_ape]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avetime_ae_flag:",self.avetime_ae_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avetime_ae:",self.avetime_ae]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avevisits_ape_flag:",self.avevisits_ape_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avevisits_ape:",self.avevisits_ape]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avevisits_ae_flag:",self.avevisits_ae_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avevisits_ae:",self.avevisits_ae]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avedist_ape_flag:",self.avedist_ape_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avedist_ape:",self.avedist_ape]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avedist_ae_flag:",self.avedist_ae_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["avedist_ae:",self.avedist_ae]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["pickup_flag:",self.pickup_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["skillshuffle_flag:",self.skillshuffle_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["spot_input_file:",self.spot_input_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["bulkShipping_flag:",self.bulkShipping_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["vendfile:",self.vendfile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["vtimefile:",self.vtimefile]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["rejectve_file:",self.rejectve_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["delaystart_flag:",self.delaystart_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["delaystart2_flag:",self.delaystart2_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["maxvisit_file:",self.maxvisit_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["multitrip_flag:",self.multitrip_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["multitripv_file:",self.multitripv_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["multitripc_file:",self.multitripc_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["multithread_num:",self.multithread_num]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["opt_unassigned_flag:",self.opt_unassigned_flag]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["unass_file:",self.unass_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["reservedv_file:",self.reservedv_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["timePenaltyWeight:",self.timePenaltyWeight]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["loadPenaltyWeight:",self.loadPenaltyWeight]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["load2PenaltyWeight:",self.load2PenaltyWeight]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["timeLevelingPenaltyWeight:",self.timeLevelingPenaltyWeight]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["visitsLevelingPenaltyWeight:",self.visitsLevelingPenaltyWeight]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["distLevelingPenaltyWeight:",self.distLevelingPenaltyWeight]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["sparePenaltyWeight:",self.sparePenaltyWeight]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["timePenaltyType:",self.timePenaltyType]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["loadPenaltyType:",self.loadPenaltyType]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["load2PenaltyType:",self.load2PenaltyType]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["timeLevelingPenaltyType:",self.timeLevelingPenaltyType]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["visitsLevelingPenaltyType:",self.visitsLevelingPenaltyType]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["distLevelingPenaltyType:",self.distLevelingPenaltyType]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["addtwspot_file:",self.addtwspot_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["demdivideunit_file:",self.demdivideunit_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["rmpriority_file:",self.rmpriority_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["init_changecust:",self.init_changecust]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		

		if self.outputstime != 0.0:
			sLog = ["outputstime:", self.outputstime]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		##20190903
		##20190917
		if self.multi_p != 0:
			sLog = ["multiprocessing:+", self.multi_p]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		##20190917
		##20200305
		if self.evplan == True: ##20200626
			sLog = ["e-vehiclefile:",self.e_vehicle_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["e-spotfile:",self.e_spot_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["e-costfile:",self.e_cost_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["e-costsfile:",self.es_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["e-costsvfile:",self.esv_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		##20200305
		if self.hetero_file != None:
			sLog = ["hetero file:",self.hetero_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"

		if self.x_cost_file != None: 
			sLog = ["x-costfile:",self.x_cost_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["x-costsfile:",self.xs_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["x-costsvfile:",self.xsv_file]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"

		#if self.break_flag == True: 
		sLog = ["breakspot_file:",self.br_file]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["break_interval:",self.break_interval]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["break_time:",self.break_time]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"

		return sLogBuf

class TiedCustomer:
	def __init__(self,_custno,_spotid,_ready_fs,_due_fs,_x,_y,_e_rate=0.0):
		self.custno=_custno
		self.customers=[]
		self.spotid=_spotid
		self.spotno=0
		self.servt=0.0
		self.ready_fs=_ready_fs
		self.due_fs=_due_fs
		self.dem=0.0
		self.dem2=0.0
		self.e_rate=_e_rate
		self.reje_ve=[]
		self.x=_x
		self.y=_y
		self.deny_unass=False #未割り当て荷物 未割り当て禁止フラグ デフォルトは未割り当て許可
		self.additionalcust=[]
		self.changecust="free"
	
	def output(self, sLogBuf):
		for c in self.customers:
			sLogBuf = c.output(sLogBuf)
		return sLogBuf


def error_check(argvs):
	try:
		argc=len(sys.argv)

		# daic 空のコンストラクタは許すことに変更
		# 以下のエラーチェックにargc>0を追加
		if argc>0 and (not("-i" in sys.argv) or  \
			not("-d" in sys.argv) or \
			not("-t" in sys.argv) or \
			not("-o" in sys.argv) or \
			not("-v" in sys.argv) or \
			not("-s" in sys.argv) or \
			not("-e" in sys.argv)):
			sErrMes = "Usage main_tw.py -i input.csv -d dist.csv -t time.csv -o output.csv -v daisuu -s kaishi_jikoku -e shuryo_jikoku"
			raise ValueError(sErrMes) # sys.exit() # daic

		if "-ltime" in sys.argv and compare_time(argvs.lowertime)==0:
			sErrMes = "Usage:ltime must not be zero (lowertime = "+str(argvs.lowertime)+")"
			raise ValueError(sErrMes)

		if "-utime" in sys.argv and compare_time(argvs.uppertime)==0:
			sErrMes = "Usage:utime must not be zero (uppertime = "+str(argvs.uppertime)+")"
			raise ValueError(sErrMes)

		if "-ostime" in sys.argv and argvs.outputstime==0:
			sErrMes = "Usage:outputstime must not be zero (outputstime = "+str(argvs.outputstime)+")"
			raise ValueError(sErrMes)
		
		# if "-mpnum" in sys.argv and argvs.multi_p==0:
		# 	sErrMes = "Usage:multiprocessing must not be zero (multi_p = "+str(argvs.multi_p)+")"
		# 	raise ValueError(sErrMes)

		#-opt_tと-opt_eが両方指定された場合はエラーとする
		if "-opt_t" in sys.argv and "-opt_e" in sys.argv:
			sErrMes = "Usage:only one of -opt_t and -opt_e can be used"
			raise ValueError(sErrMes)

		#-opt_tと-opt_xが両方指定された場合はエラーとする
		if "-opt_t" in sys.argv and "-opt_x" in sys.argv:
			sErrMes = "Usage:only one of -opt_t and -opt_x can be used"
			raise ValueError(sErrMes)

		#-opt_xと-opt_eが両方指定された場合はエラーとする
		if "-opt_x" in sys.argv and "-opt_e" in sys.argv:
			sErrMes = "Usage:only one of -opt_x and -opt_e can be used"
			raise ValueError(sErrMes)

		#-opt_eが指定されたのに-ecが指定されていない場合はエラーとする
		if "-opt_e" in sys.argv and not "-ec" in sys.argv:
			sErrMes = "opt_e is not 0 but etable is none"
			raise ValueError(sErrMes)
		
		#-opt_xが指定されたのに-xが指定されていない場合はエラーとする
		if "-opt_x" in sys.argv and not "-x" in sys.argv:
			sErrMes = "opt_x is not 0 but xtable is none"
			raise ValueError(sErrMes)

		##20180904
		##20200626
		if argvs.evplan == True:
			if not("-ev" in sys.argv) or \
				not("-es" in sys.argv):
				sErrMes = "evplan Usage main_tw.py -i input.csv -d dist.csv -t time.csv -o output.csv -v daisuu -s kaishi_jikoku -e shuryo_jikoku -ev e-vehicle.csv -es e-spot.csv"
				raise ValueError(sErrMes) # sys.exit() # daic

		#-afixが指定されたのに-a、-a2のどちらも指定されていない場合はエラーとする
		if "-afix" in sys.argv and not "-a" in sys.argv and not "-a2" in sys.argv:
			sErrMes = "\"-afix\" must be set with \"-a\" or \"-a2\""
			raise ValueError(sErrMes)

		#-br_intに0.0より小さい値が指定された
		if "-br_int" in sys.argv and argvs.break_interval < 0.0:
			sErrMes = "Usage: br_int must be greater than or equal to 0.0 (break_interval = "+str(argvs.break_interval)+")"
			raise ValueError(sErrMes)

		#-br_intと-evplanが併用された
		# if "-br_int" in sys.argv and "-evplan" in sys.argv:
		# 	sErrMes = "Usage:only one of -br_int and -evplan can be used"
		# 	raise ValueError(sErrMes)

		#-br_timeに0.0より小さい値が指定された
		if "-br_time" in sys.argv and argvs.break_time < 0.0:
			sErrMes = "Usage: br_time must be greater than or equal to 0.0 (break_time = "+str(argvs.break_time)+")"
			raise ValueError(sErrMes)

		#-br_timeと-evplanが併用された
		# if "-br_time" in sys.argv and "-evplan" in sys.argv:
		# 	sErrMes = "Usage:only one of -br_time and -evplan can be used"
		# 	raise ValueError(sErrMes)

			
	except Exception:
		sErr = traceback.format_exc()
		sErr = ["<Error message log>",sErr]
		sLogBuf = " ".join(list(map(str,sErr)))
		if rank==0:
			logging.log(logging.ERROR,sLogBuf)

		raise

def preprocess(customers,e_spots,vehicles,argvs):
	try:
		#timeoutに負の値が設定された場合
		if argvs.timeout<0:
			sErrMes = "timeout value set to negative number (timeout = "+str(argvs.timeout)+")"
			raise ValueError(sErrMes)

		#配送先のspotidに"0"が設定されていた場合
		for c in customers:
			if c.custno!="0" and c.spotid=="0":
					sErrMes = "spotid = \"0\" must be set to depot or last spot"
					raise ValueError(sErrMes)

			for ac in c.additionalcust:
				if ac.custno!="0" and ac.spotid=="0":
					sErrMes = "spotid = \"0\" must be set to depot or last spot"
					raise ValueError(sErrMes)

		#充電スポットにcustnoと同じ値が設定されていない場合
		for c in e_spots:
			if c.custno!=c.spotid:
				sErrMes = "spotid of CS_spot must be the same as customer id (aka custno) of CS_spot"
				raise ValueError(sErrMes)

		#同一spotidに異なるparkt_openが指定されている場合
		parkt_dict={}
		for c in customers:
			if not c.spotid in parkt_dict:
				parkt_dict[c.spotid]=c.parkt_open
			else:
				if parkt_dict[c.spotid]!=c.parkt_open:
					sErrMes = "same parking time (aka parkt_open) must be set to the same spot (aka spotid) (spotid = "+str(c.spotid)+")"
					raise ValueError(sErrMes)

			for ac in c.additionalcust:
				if not ac.spotid in parkt_dict:
					parkt_dict[ac.spotid]=ac.parkt_open
				else:
					if parkt_dict[ac.spotid]!=ac.parkt_open:
						sErrMes = "same parking time (aka parkt_open) must be set to the same spot (aka spotid) (spotid = "+str(ac.spotid)+")"
						raise ValueError(sErrMes)

		#同一spotidに異なるparkt_arriveが指定されている場合
		parkt_dict={}
		for c in customers:
			if not c.spotid in parkt_dict:
				parkt_dict[c.spotid]=c.parkt_arrive
			else:
				if parkt_dict[c.spotid]!=c.parkt_arrive:
					sErrMes = "same parking time (aka parkt_arrive) must be set to the same spot (aka spotid) (spotid = "+str(c.spotid)+")"
					raise ValueError(sErrMes)

			for ac in c.additionalcust:
				if not ac.spotid in parkt_dict:
					parkt_dict[ac.spotid]=ac.parkt_arrive
				else:
					if parkt_dict[ac.spotid]!=ac.parkt_arrive:
						sErrMes = "same parking time (aka parkt_arrive) must be set to the same spot (aka spotid) (spotid = "+str(ac.spotid)+")"
						raise ValueError(sErrMes)

		#分割荷物にdeny_unass指定されている場合
		deny_unass_dict={}
		for c in customers:
			if not c.custno in deny_unass_dict:
				deny_unass_dict[c.custno]=c.deny_unass
			else:
				if deny_unass_dict[c.custno]!=c.deny_unass:
					sErrMes = "denying unassigned (aka deny_unassigned_flag) of same customer id (aka custno) must be set to same flag (custno = "+str(c.custno)+")"
					raise ValueError(sErrMes)

			for ac in c.additionalcust:
				if not ac.custno in deny_unass_dict:
					deny_unass_dict[ac.custno]=ac.deny_unass
				else:
					if deny_unass_dict[ac.custno]!=ac.deny_unass:
						sErrMes = "denying unassigned (aka deny_unassigned_flag) of same customer id (aka custno) must be set to same flag (custno = "+str(ac.custno)+")"
						raise ValueError(sErrMes)

		#休憩機能の使用の有無
		argvs.break_flag = False #一旦未使用にセット
		if argvs.break_interval!=0 and argvs.break_time!=0:
			argvs.break_flag = True	#パターン3を使用
		for v in vehicles:
			if v.takebreak!=[]:
				argvs.break_flag = True #パターン1・2を使用
				break

		#Evplanと休憩機能が併用された場合はエラー
		if argvs.evplan and argvs.break_flag:
			sErrMes = "both break_function and evplan (aka evplan) set"
			raise ValueError(sErrMes)

		#未割り当て荷物最適化の時に通常車両が一台も無い場合はエラー
		if argvs.opt_unassigned_flag:
			if len([v for v in vehicles if v.reserved_v_flag==False]) < 1:
				sErrMes = "there is no normal vehicle"
				raise ValueError(sErrMes)

	except Exception:
		sErr = traceback.format_exc()
		sErr = ["<Error message log>",sErr]
		sLogBuf = " ".join(list(map(str,sErr)))
		if rank==0:
			logging.log(logging.ERROR,sLogBuf)

		raise

	#飛び地機能
	for c in customers[:]:
		if c.custno!="0" and len(c.additionalcust)>0:
			for i in range(len(c.additionalcust)):
				c.additionalcust[i].additionalcust.append(c)
				for j in range(len(c.additionalcust)):
					c.additionalcust[i].additionalcust.append(c.additionalcust[j])
				for j in range(len(c.additionalcust[i].additionalcust)):
					#自身を先頭に移動
					if c.additionalcust[i].additionalcust[j]==c.additionalcust[i]:
						c.additionalcust[i].additionalcust[0],c.additionalcust[i].additionalcust[j]=c.additionalcust[i].additionalcust[j],c.additionalcust[i].additionalcust[0]
						break

				customers.append(c.additionalcust[i])

			c.additionalcust.insert(0,c)
		else:
			c.additionalcust=[]
			c.additionalcust.append(c)

	for c in e_spots[:]:
		c.additionalcust=[]
		c.additionalcust.append(c)

	for v in vehicles:
		v.enddepot.additionalcust=[]
		v.enddepot.additionalcust.append(v.enddepot)

	try:
		if argvs.opt_unassigned_flag==True:
			for c in customers[:]:
				deny_unass=c.deny_unass
				if c.custno!="0" and len(c.additionalcust)>0:
					for i in range(len(c.additionalcust)):
						if c.additionalcust[i].deny_unass!=deny_unass:
							sErrMes = "denying unassigned (aka deny_unassigned_flag) of additionalcust must be set to the same of original customer"
							raise ValueError(sErrMes)

	except Exception:
		sErr = traceback.format_exc()
		sErr = ["<Error message log>",sErr]
		sLogBuf = " ".join(list(map(str,sErr)))
		if rank==0:
			logging.log(logging.ERROR,sLogBuf)

		raise


	#休憩機能
	if argvs.break_flag:
		#単位合わせ
		argvs.break_interval = argvs.break_interval / 60.0

		#飛び地機能
		for v in vehicles:
			for t in v.takebreak:
				if len(t.additionalcust)>0:
					for i in range(len(t.additionalcust)):
						t.additionalcust[i].additionalcust.append(t)
						for j in range(len(t.additionalcust)):
							t.additionalcust[i].additionalcust.append(t.additionalcust[j])
						for j in range(len(t.additionalcust[i].additionalcust)):
							#自身を先頭に移動
							if t.additionalcust[i].additionalcust[j]==t.additionalcust[i]:
								t.additionalcust[i].additionalcust[0],t.additionalcust[i].additionalcust[j]=t.additionalcust[i].additionalcust[j],t.additionalcust[i].additionalcust[0]
								break

					t.additionalcust.insert(0,t)
				else:
					t.additionalcust=[]
					t.additionalcust.append(t)

		#ready, dueが一致することのチェック
		for v in vehicles:
			for t in v.takebreak:
				for i in range(len(t.additionalcust)):
					if t.ready_fs != t.additionalcust[i].ready_fs:
						sErrMes = "time (aka ready and due) of break additionalcust must be set to the same of original customer (custno = "+str(t.additionalcust[i].custno)+")"
						raise ValueError(sErrMes)
					if t.due_fs != t.additionalcust[i].due_fs:
						sErrMes = "time (aka ready and due) of break additionalcust must be set to the same of original customer (custno = "+str(t.additionalcust[i].custno)+")"
						raise ValueError(sErrMes)

		#立寄り不可車両が自身の車両の場合のエラー
		for v in vehicles:
			for t in v.takebreak:
				if v.vehno in t.reje_ve:
					sErrMes = "break spot (aka takebreak) has unvisitable vehicles (aka reje_ve) (vehno = "+str(v.vehno)+", custno = "+t.custno+")"  #メッセージ暫定
					raise ValueError(sErrMes)
					

	#荷物に矛盾がないかチェック
	cust_dict={}
	for c in customers:
		if not c.custno in cust_dict:
			cust_dict[c.custno]=c
		else:
			if c.spotid!=cust_dict[c.custno].spotid or \
			c.y!=cust_dict[c.custno].y or \
			c.x!=cust_dict[c.custno].x or \
			c.ready_fs!=cust_dict[c.custno].ready_fs or \
			c.due_fs!=cust_dict[c.custno].due_fs or \
			c.servt!=cust_dict[c.custno].servt or \
			c.reje_ve!=cust_dict[c.custno].reje_ve or \
			c.parkt_arrive!=cust_dict[c.custno].parkt_arrive or \
			c.parkt_open!=cust_dict[c.custno].parkt_open or \
			c.depotservt!=cust_dict[c.custno].depotservt or \
			[cust.custno for cust in c.additionalcust]!=[cust.custno for cust in cust_dict[c.custno].additionalcust] or \
			(c.demdivideunit==0 and cust_dict[c.custno].demdivideunit!=0) or \
			(c.demdivideunit!=0 and cust_dict[c.custno].demdivideunit==0) or \
			abs(c.demdivideunit*cust_dict[c.custno].dem-cust_dict[c.custno].demdivideunit*c.dem)>1e-3 or \
			abs(c.demdivideunit*cust_dict[c.custno].dem2-cust_dict[c.custno].demdivideunit*c.dem2)>1e-3:
				sErrMes = "load divided customers include wrong parameters (custno = "+str(c.custno)+")"
				raise ValueError(sErrMes)

			if c.requestType!=cust_dict[c.custno].requestType:
				sErrMes = "load divided customers include wrong request type of load (aka requestType) (custno = "+str(c.custno)+")"
				raise ValueError(sErrMes)


	if argvs.bulkShipping_flag:
		for i,c in enumerate(e_spots):
			e_spots[i]=TiedCustomer(c.custno,c.spotid,c.ready_fs,c.due_fs,c.x,c.y,c.e_rate)
			e_spots[i].customers.append(c)
			e_spots[i].servt=c.servt
			e_spots[i].dem=c.dem
			e_spots[i].dem2=c.dem2
			e_spots[i].reje_ve=c.reje_ve
			e_spots[i].parkt_open=c.parkt_open
			e_spots[i].parkt_arrive=c.parkt_arrive
			e_spots[i].depotservt=c.depotservt
			e_spots[i].additionalcust=[e_spots[i]]
			e_spots[i].demdivideunit=c.demdivideunit
			e_spots[i].requestType=c.requestType
			e_spots[i].deny_unass=c.deny_unass
			
	#集荷があればpickup_flag=Trueにする
	for c in customers[1:]:
		if c.requestType=="PICKUP":
			argvs.pickup_flag=True

	argvs.spotid_list+=[c.spotid for c in customers] 
	argvs.spotid_list+=[c.spotid for c in e_spots]
	argvs.spotid_list+=[v.enddepot.spotid for v in vehicles]
	argvs.spotid_list+=[c.spotid for v in vehicles for tb in v.takebreak for c in tb.additionalcust if c.spotid!=""]
	argvs.spotid_list=sorted(list(set(argvs.spotid_list))) #重複を削除して並び替え

	#1台目の開始時刻からの相対時刻を計算
	argvs.st_top=vehicles[0].startoptime
	
	for v in vehicles:
		v.starthour = calc_elapsed_time(argvs.st_top,v.startoptime)
		v.endhour = calc_elapsed_time(argvs.st_top,v.endoptime)

	#ready_fsとdue_fsの基準を1台目の営業開始時間に変更
	for c in list(set(customers+[v.enddepot for v in vehicles])):
		c.ready_fs += calc_elapsed_time(argvs.st_top,argvs.starttime)
		c.due_fs += calc_elapsed_time(argvs.st_top,argvs.starttime)


	#距離テーブルを読み込む read dist table
	if argvs.management_dtable==[]:
		argvs.management_dtable = create_management_disttable(argvs)
	#時間テーブルを読み込む read time table
	if argvs.management_ttable==[]:
		argvs.management_ttable = create_management_timetable(argvs)
	#電費テーブルを読み込む read power table
	if argvs.management_etable==[]:
		argvs.management_etable = create_management_powertable(argvs)
	#経験コストテーブルを読み込む read exp table
	if argvs.management_xtable==[]:
		argvs.management_xtable = create_management_exptable(argvs)

	#同じ設定のテーブルがあればエラーとする
	dtable_list=[]
	for table in argvs.management_dtable:
		if table["vtype"]=="common":
			dtable_list.append(["common",0.0])
		else:
			dtable_list.append([table["vtype"],table["start_time"]])

	if len(dtable_list)!=len(list(map(list,set(map(tuple,dtable_list))))):
		sErrMes = "same distance tables (aka dtable) exist"
		raise ValueError(sErrMes)

	ttable_list=[]
	for table in argvs.management_ttable:
		if table["vtype"]=="common":
			ttable_list.append(["common",0.0])
		else:
			ttable_list.append([table["vtype"],table["start_time"]])

	if len(ttable_list)!=len(list(map(list,set(map(tuple,ttable_list))))):
		sErrMes = "same eta tables (aka ttable) exist"
		raise ValueError(sErrMes)

	if argvs.management_etable:
		etable_list=[]
		for table in argvs.management_etable:
			if table["vtype"]=="common" and table["etype"]=="common":
				etable_list.append(["common","common",0.0])
			else:
				etable_list.append([table["vtype"],table["etype"],table["start_time"]])

		if len(etable_list)!=len(list(map(list,set(map(tuple,etable_list))))):
			sErrMes = "same epower tables (aka etable) exist"
			raise ValueError(sErrMes)

	if argvs.management_xtable:
		xtable_list=[]
		for table in argvs.management_xtable:
			if table["vtype"]=="common":
				xtable_list.append(["common",0.0])
			else:
				xtable_list.append([table["vtype"],table["start_time"]])

		if len(xtable_list)!=len(list(map(list,set(map(tuple,xtable_list))))):
			sErrMes = "same empCost tables (aka xtable) exist"
			raise ValueError(sErrMes)

	#各種テーブルをソート
	argvs.management_dtable=sort_table(argvs.management_dtable)
	argvs.management_ttable=sort_table(argvs.management_ttable)
	if argvs.management_etable:
		argvs.management_etable=sort_table(argvs.management_etable)
	if argvs.management_xtable:
		argvs.management_xtable=sort_table(argvs.management_xtable)

	for c in customers:
		c.spotno=argvs.spotid_list.index(c.spotid)
	for c in e_spots:
		c.spotno=argvs.spotid_list.index(c.spotid)
	for v in vehicles:
		if v.enddepot.spotid!="0":
			v.enddepot.spotno=argvs.spotid_list.index(v.enddepot.spotid) 
	for v in vehicles:
		for tb in v.takebreak:
			if tb.spotid!="":
				tb.spotno=argvs.spotid_list.index(tb.spotid) 
				for c in tb.additionalcust:
					if c.spotid!="":
						c.spotno=argvs.spotid_list.index(c.spotid) 
					else:
						c.spotno=-1
			else:
				tb.spotno=-1
				for c in tb.additionalcust:
					if c.spotid!="":
						c.spotno=argvs.spotid_list.index(c.spotid) 
					else:
						c.spotno=-1


# def plot_routes(customers,vehicles):
# 	G=nx.Graph()
# 	for c in customers:
# 		G.add_node(c.custno)
# 	for v in vehicles:
# 		for i in range(len(v.route)-1):
# 			G.add_edge(v.route[i].custno,v.route[i+1].custno)
# 	pos={}
# 	for c in customers:
# 		pos[c.custno]=(c.x,c.y)
# 	nx.draw(G,pos,node_size=10)

def travel_time(a,b,ttable):
	return ttable[a.spotno][b.spotno]

def dist_dtable(a,b,dtable):
	return dtable[a.spotno][b.spotno]

#カスタマーa-b間の電費取得
def power_etable(a,b,etable):
	return etable[a.spotno][b.spotno]

def exp_xtable(a,b,xtable):
	return xtable[a.spotno][b.spotno]

def read_timetable(filename,argvs):
	with open(filename,"r") as f:
		csv_reader=csv.reader(f,delimiter=",",quotechar='"')
		ttable=[[0 for i in range(len(argvs.spotid_list))] for i in range(len(argvs.spotid_list))]
		for row in csv_reader:
			if row[0] in argvs.spotid_list and row[1] in argvs.spotid_list:
				ttable[argvs.spotid_list.index(row[0])][argvs.spotid_list.index(row[1])]=float(row[2])
	
	return ttable

def read_disttable(filename,argvs):
	with open(filename,"r") as f:
		csv_reader=csv.reader(f,delimiter=",",quotechar='"')
		dtable=[[0 for i in range(len(argvs.spotid_list))] for i in range(len(argvs.spotid_list))]
		for row in csv_reader:
			if row[0] in argvs.spotid_list and row[1] in argvs.spotid_list:
				dtable[argvs.spotid_list.index(row[0])][argvs.spotid_list.index(row[1])]=float(row[2])

	return dtable

def read_etable(filename,argvs):
	with open(filename,"r") as f:
		csv_reader=csv.reader(f,delimiter=",",quotechar='"')
		etable=[[0 for i in range(len(argvs.spotid_list))] for i in range(len(argvs.spotid_list))]
		for row in csv_reader:
			if row[0] in argvs.spotid_list and row[1] in argvs.spotid_list:
				etable[argvs.spotid_list.index(row[0])][argvs.spotid_list.index(row[1])]=float(row[2])

	return etable

def read_exptable(filename,argvs):
	with open(filename,"r") as f:
		csv_reader=csv.reader(f,delimiter=",",quotechar='"')
		xtable=[[0 for i in range(len(argvs.spotid_list))] for i in range(len(argvs.spotid_list))]
		for row in csv_reader:
			if row[0] in argvs.spotid_list and row[1] in argvs.spotid_list:
				xtable[argvs.spotid_list.index(row[0])][argvs.spotid_list.index(row[1])]=float(row[2])
	
	return xtable

def create_management_timetable(argvs):
	# management_ttable (リスト型) ############
	# vtype |       start_time       | ttable |
	# ------+---------------------+---------+
	#   0   | 2000-01-01 10:00:00 | ttable1 |
	#   1   | 2000-01-01 10:00:00 | ttable1 |
	#   1   | 2000-01-01 12:00:00 | ttable2 |
	# ------+---------------------+---------+
	# vtype:車両種別
	# 　　　 vtypeが与えられた場合その番号を指定
	# 　　　 時刻毎の車両共通テーブルの場合time_commonを設定
	# 　　　 全車両共通テーブルの場合commonを設定
	# start_time:配送開始時刻.指定がない場合はargvs.starttimeを設定
	# ttable:時間テーブル
	#########################################
	sLogBuf = "\n"
	management_ttable = []

	if argvs.timefile:
		#時間テーブル読み出し
		filename = argvs.timefile
		ttable = read_timetable(filename,argvs)
		#配送開始時刻からの経過時間を算出
		elapsed_time = 0.0
		#時刻別管理テーブル作成
		management_ttable.append({"vtype":"common", "start_time":elapsed_time, "table":ttable})

	if argvs.ts_file:
		#時間別時間ファイル読み出し
		with open(argvs.ts_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if row[0].count("START_TIME")==0: #ヘッダ以外を読み出す
					starttime = row[0]
					filename = row[1]
					sLog = ["timefile from",starttime,":",filename]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
					#時間テーブル読み出し
					ttable = read_timetable(filename,argvs)
					#配送開始時刻からの経過時間を算出
					elapsed_time = calc_elapsed_time(argvs.st_top,starttime)
					#時刻別管理テーブル作成
					management_ttable.append({"vtype":"time_common", "start_time":elapsed_time, "table":ttable})

	elif argvs.tsv_file:
		#時間別時間ファイル読み出し
		with open(argvs.tsv_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if row[0].count("VEHICLE_TYPE")==0: #ヘッダ以外を読み出す
					vtype = row[0]
					starttime = row[1]
					filename = row[2]
					sLog = ["timefile from",starttime,"of vtype",vtype,":",filename]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
					#時間テーブル読み出し
					ttable = read_timetable(filename,argvs)
					#配送開始時刻からの経過時間を算出
					elapsed_time = calc_elapsed_time(argvs.st_top,starttime)
					#時刻別管理テーブル作成
					management_ttable.append({"vtype":vtype, "start_time":elapsed_time, "table":ttable})

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return management_ttable

def create_management_disttable(argvs):
	# management_dtable (リスト型) ############
	# vtype |       start_time       | dtable |
	# ------+---------------------+---------+
	#   0   | 2000-01-01 10:00:00 | dtable1 |
	#   1   | 2000-01-01 10:00:00 | dtable1 |
	#   1   | 2000-01-01 12:00:00 | dtable2 |
	# ------+---------------------+---------+
	# vtype:車両種別
	# 　　　 vtypeが与えられた場合その番号を指定
	# 　　　 時刻毎の車両共通テーブルの場合time_commonを設定
	# 　　　 全車両共通テーブルの場合commonを設定
	# start_time:配送開始時刻.指定がない場合はargvs.starttimeを設定
	# dtable:距離テーブル
	#########################################
	sLogBuf = "\n"
	management_dtable = []


	if argvs.distfile:
		#距離テーブル読み出し
		filename = argvs.distfile
		dtable = read_disttable(filename,argvs)
		#配送開始時刻からの経過時間を算出
		elapsed_time = 0.0
		#時刻別管理テーブル作成
		management_dtable.append({"vtype":"common", "start_time":elapsed_time, "table":dtable})

	if argvs.ds_file:
		#時間別距離ファイル読み出し
		with open(argvs.ds_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if row[0].count("START_TIME")==0: #ヘッダ以外を読み出す
					starttime = row[0]
					filename = row[1]
					sLog = ["distfile from",starttime,":",filename]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
					#距離テーブル読み出し
					dtable = read_disttable(filename,argvs)
					#配送開始時刻からの経過時間を算出
					elapsed_time = calc_elapsed_time(argvs.st_top,starttime)
					#時刻別管理テーブル作成
					management_dtable.append({"vtype":"time_common", "start_time":elapsed_time, "table":dtable})

	elif argvs.dsv_file:
		#時間別距離ファイル読み出し
		with open(argvs.dsv_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if row[0].count("VEHICLE_TYPE")==0: #ヘッダ以外を読み出す
					vtype = row[0]
					starttime = row[1]
					filename = row[2]
					sLog = ["distfile from",starttime,"of vtype",vtype,":",filename]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
					#距離テーブル読み出し
					dtable = read_disttable(filename,argvs)
					#配送開始時刻からの経過時間を算出
					elapsed_time = calc_elapsed_time(argvs.st_top,starttime)
					#時刻別管理テーブル作成
					management_dtable.append({"vtype":vtype, "start_time":elapsed_time, "table":dtable})

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return management_dtable

def create_management_powertable(argvs):
	# management_etable (リスト型) ############
	# vtype |       start_time       | etable |
	# ------+---------------------+---------+
	#common | argvs.starttime     | etable  |
	# ------+---------------------+---------+
	# vtype:車両種別
	# 　　　 vtypeが与えられた場合その番号を指定
	# 　　　 時刻毎の車両共通テーブルの場合time_commonを設定
	# 　　　 全車両共通テーブルの場合commonを設定
	# start_time:配送開始時刻.指定がない場合はargvs.starttimeを設定
	# etable:電費テーブル
	#########################################
	sLogBuf = "\n"
	management_etable = []


	if argvs.e_cost_file:
		#時間テーブル読み出し
		filename = argvs.e_cost_file
		etable = read_etable(filename,argvs)
		#配送開始時刻からの経過時間を算出
		elapsed_time = 0.0
		#時刻別管理テーブル作成
		management_etable.append({"vtype":"common", "etype":"common", "start_time":elapsed_time, "table":etable})

	if argvs.es_file:
		#時間別電費ファイル読み出し
		with open(argvs.es_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if row[0].count("START_TIME")==0: #ヘッダ以外を読み出す
					starttime = row[0]
					filename = row[1]
					sLog = ["e-cost file from",starttime,":",filename]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
					#電費テーブル読み出し
					etable = read_etable(filename,argvs)
					#配送開始時刻からの経過時間を算出
					elapsed_time = calc_elapsed_time(argvs.st_top,starttime)
					#時刻別管理テーブル作成
					management_etable.append({"vtype":"time_common", "etype":"time_common", "start_time":elapsed_time, "table":etable})

	elif argvs.esv_file:
		#時間別電費ファイル読み出し
		with open(argvs.esv_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if row[0].count("VEHICLE_TYPE")==0: #ヘッダ以外を読み出す
					vtype = row[0]
					etype = row[1]
					starttime = row[2]
					filename = row[3]
					sLog = ["e-cost file from",starttime,"of vehicle",vtype,":",filename]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
					#電費テーブル読み出し
					etable = read_etable(filename,argvs)
					#配送開始時刻からの経過時間を算出
					elapsed_time = calc_elapsed_time(argvs.st_top,starttime)
					#時刻別管理テーブル作成
					management_etable.append({"vtype":vtype, "etype":etype, "start_time":elapsed_time, "table":etable})

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return management_etable

def create_management_exptable(argvs):
	# management_xtable (リスト型) ############
	# vtype |       start_time       | xtable |
	# ------+---------------------+---------+
	#   0   | 2000-01-01 10:00:00 | xtable1 |
	#   1   | 2000-01-01 10:00:00 | xtable1 |
	#   1   | 2000-01-01 12:00:00 | xtable2 |
	# ------+---------------------+---------+
	# vtype:車両種別
	# 　　　 vtypeが与えられた場合その番号を指定
	# 　　　 時刻毎の車両共通テーブルの場合time_commonを設定
	# 　　　 全車両共通テーブルの場合commonを設定
	# start_time:配送開始時刻.指定がない場合はargvs.starttimeを設定
	# xtable:経験コストテーブル
	#########################################
	sLogBuf = "\n"
	management_xtable = []

	if argvs.x_cost_file:
		#時間テーブル読み出し
		filename = argvs.x_cost_file
		xtable = read_exptable(filename,argvs)
		#配送開始時刻からの経過時間を算出
		elapsed_time = 0.0
		#時刻別管理テーブル作成
		management_xtable.append({"vtype":"common", "start_time":elapsed_time, "table":xtable})

	if argvs.xs_file:
		#時間別時間ファイル読み出し
		with open(argvs.xs_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if row[0].count("START_TIME")==0: #ヘッダ以外を読み出す
					starttime = row[0]
					filename = row[1]
					sLog = ["x_cost_file from",starttime,":",filename]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
					#時間テーブル読み出し
					xtable = read_exptable(filename,argvs)
					#配送開始時刻からの経過時間を算出
					elapsed_time = calc_elapsed_time(argvs.st_top,starttime)
					#時刻別管理テーブル作成
					management_xtable.append({"vtype":"time_common", "start_time":elapsed_time, "table":xtable})

	elif argvs.xsv_file:
		#時間別時間ファイル読み出し
		with open(argvs.xsv_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if row[0].count("VEHICLE_TYPE")==0: #ヘッダ以外を読み出す
					vtype = row[0]
					starttime = row[1]
					filename = row[2]
					sLog = ["x_cost_file from",starttime,"of vtype",vtype,":",filename]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
					#時間テーブル読み出し
					xtable = read_exptable(filename,argvs)
					#配送開始時刻からの経過時間を算出
					elapsed_time = calc_elapsed_time(argvs.st_top,starttime)
					#時刻別管理テーブル作成
					management_xtable.append({"vtype":vtype, "start_time":elapsed_time, "table":xtable})

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return management_xtable

def get_dtable(vtype, start_time, management_dtable):
	#table検索(配送時刻がある場合)
	for table in reversed(management_dtable):
		if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time)<=0:
			return table['table']
		if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time)<=0:
			return table['table']		


	#table検索(配送時刻が無い場合)
	for table in management_dtable:
		if table['vtype'] == 'common':
			return table['table']

	sErrMes = "distance table (aka dtable) does not exist (vtype = "+str(vtype)+", start_time = "+str(start_time)+")"
	raise ValueError(sErrMes)

def get_ttable(vtype, start_time, management_ttable):
	#table検索(配送時刻がある場合)
	for table in reversed(management_ttable):
		if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time)<=0:
			return table['table']
		if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time)<=0:
			return table['table']		


	#table検索(配送時刻が無い場合)
	for table in management_ttable:
		if table['vtype'] == 'common':
			return table['table']

	sErrMes = "eta table (aka ttable) does not exist (vtype = "+str(vtype)+", start_time = "+str(start_time)+")"
	raise ValueError(sErrMes)

def get_etable(vtype, etype, start_time, management_etable):
	#table検索(配送時刻がある場合)
	for table in reversed(management_etable):
		if (table['vtype'] == vtype) and (table['etype'] == etype) and compare_time(table['start_time'] , start_time)<=0:
			return table['table']
		if (table['vtype'] == 'time_common') and (table['etype'] == 'time_common') and compare_time(table['start_time'] , start_time)<=0:
			return table['table']


	#table検索(配送時刻が無い場合)
	for table in management_etable:
		if table['vtype'] == 'common' and table['etype'] == 'common':
			return table['table']

	sErrMes = "epower table (aka etable) does not exist (vtype = "+str(vtype)+", etype = "+str(etype)+", start_time = "+str(start_time)+")"
	raise ValueError(sErrMes)

def get_xtable(vtype, start_time, management_xtable):
	#table検索(配送時刻がある場合)
	for table in reversed(management_xtable):
		if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time)<=0:
			return table['table']
		if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time)<=0:
			return table['table']		


	#table検索(配送時刻が無い場合)
	for table in management_xtable:
		if table['vtype'] == 'common':
			return table['table']

	sErrMes = "empCost table (aka xtable) does not exist (vtype = "+str(vtype)+", start_time = "+str(start_time)+")"
	raise ValueError(sErrMes)


#ttable乗算
def multiply_ttable(management_ttable,mindrskill):
	for t in management_ttable:
		ttable = t['table']
		for key in ttable:
			ttable[key] = ttable[key]*mindrskill

	return


# 経過時間算出
# 開始時刻文字列(start)から終了時刻文字列(end)までの経過時間浮動小数点(elapsed_time)を返す
# 時刻は、時分(hh:mm)、もしくは、年月日時分秒(Y/m/d H:M:S)とする
def calc_elapsed_time(start, end):
	#開始時刻文字列をdatetime型に変換
	if len(start) < 6:
		st=start.split(":")
		st=datetime.datetime(2000,1,1,int(st[0]),int(st[1]),00)

	else:
		st=datetime.datetime.strptime(start, '%Y/%m/%d %H:%M:%S')
	#終了時刻文字列をdatetime型に変換
	if len(end) < 6:
		ed=end.split(":")
		ed=datetime.datetime(2000,1,1,int(ed[0]),int(ed[1]),00)
	else:
		ed=datetime.datetime.strptime(end, '%Y/%m/%d %H:%M:%S')


	#経過時間算出
	elapsed_time = ed - st
	elapsed_time = (elapsed_time.total_seconds())/3600.0

	return elapsed_time


#カスタマーcに対する配送開始時刻を検索
def find_lv_time(customer, route, lv):
	ret_lv = None
	for i, r in enumerate(route):
		if r.custno == customer.custno:
			ret_lv = lv[i]
			break
	if ret_lv == None:
		sErrMes = "find_lv_time Error No lv time found"
		raise ValueError(sErrMes)			
	return ret_lv

def read_customers(filename,starttime,argvs):
	rejectve_dict={}
	if argvs.rejectve_file != None:
		with open(argvs.rejectve_file, "r") as f:
			rejectve_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in rejectve_file:
				if row[0]!="CUST NO.":
					rejectve_dict[row[0]]=[int(row[i]) for i in range(1,len(row))]

	depotservt_dict={}
	if argvs.multitripc_file != None:
		with open(argvs.multitripc_file, "r") as f:
			multitripc_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in multitripc_file:
				if row[0]!="CUST NO.":
					depotservt_dict[row[0]]=float(row[1])

	addtwspot_dict={}
	if argvs.addtwspot_file != None:
		with open(argvs.addtwspot_file, "r") as f:
			addtwspot_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in addtwspot_file:
				if row[0]!="CUST NO.(ORIGINAL)":
					if argvs.spot_input_file == None and row[0]!= row[4]:
						sErrMes = "spotid must be the same as custno in addtwspot (custno = "+row[0]+", spotid = "+row[4]+")"
						raise ValueError(sErrMes)

					if row[0] in addtwspot_dict:
						addtwspot_dict[row[0]].append([row[1],row[2],row[3],row[4],float(row[5]),float(row[6])])
					else:
						addtwspot_dict[row[0]]=[[row[1],row[2],row[3],row[4],float(row[5]),float(row[6])]]

	spotid_dict={}
	parkt_arrive_dict={}
	parkt_open_dict={}
	addtwspot_dict_keys = [addtw[0] for v in addtwspot_dict.values() for addtw in v]

	if argvs.spot_input_file != None:
		with open(argvs.spot_input_file, "r") as f:
			spotid_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in spotid_file:
				if row[0]!="CUST NO.":
					if row[0][0] == 'b':	#spot idファイルに休憩スポットが有ったらエラー終了
						sErrMes = "spotid of break must be set by only break definition file (custno = "+row[0] + ")"
						raise ValueError(sErrMes)
					if row[0] in addtwspot_dict_keys: #追加時間指定枠ファイルとspot idファイルに重複してspot idが定義されたらエラー
						sErrMes = "spotid of additionalcust must be set by only additionalcust definition file (custno = "+row[0] + ")"
						raise ValueError(sErrMes)

					spotid_dict[row[0]]=row[1]
					parkt_arrive_dict[row[0]]=float(row[2])
					parkt_open_dict[row[0]]=float(row[3])

	demdivideunit_dict={}
	if argvs.demdivideunit_file != None:
		with open(argvs.demdivideunit_file, "r") as f:
			demdivideunit_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in demdivideunit_file:
				if row[0]!="CUST NO.":
					demdivideunit_dict[row[0]]=int(row[1])

	#未割り当て荷物 未割当て禁止情報読み出し
	unass_dict={}
	if argvs.unass_file != None:
		with open(argvs.unass_file, "r") as f:
			unass_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in unass_file:
				if row[0]!="CUST NO.":
					unass_dict[row[0]]=int(row[1])

	with open(filename, "r") as f:
		csv_reader = csv.reader(f, delimiter=",", quotechar='"', )
		custs=[]
		for row in csv_reader:
			if row[0].count("CUST")==0:
				if row[0] in rejectve_dict:
					rejeve=rejectve_dict[row[0]]
				else:
					rejeve=[]

				if row[0] in depotservt_dict:
					depotservt=depotservt_dict[row[0]]
				else:
					depotservt=0

				if row[0] in parkt_arrive_dict:
					parkt_arrive=parkt_arrive_dict[row[0]]
				else:
					parkt_arrive=0

				if row[0] in parkt_open_dict:
					parkt_open=parkt_open_dict[row[0]]
				else:
					parkt_open=0

				if row[0] in demdivideunit_dict:
					demdivideunit=demdivideunit_dict[row[0]]
				else:
					demdivideunit=1

				if row[0] in unass_dict: #未割り当て荷物 未割り当て禁止フラグの設定
					if unass_dict[row[0]]==1:
						deny_unass=True
					else:
						deny_unass=False
				else:
					deny_unass=False

				if len(row)>7 and (float(row[3])<0 or float(row[7])<0):
					row[3]=str(abs(float(row[3])))
					row[7]=str(abs(float(row[7])))
					requestType="PICKUP"
				elif len(row)<=7 and float(row[3])<0:
					row[3]=str(abs(float(row[3])))
					requestType="PICKUP"
				else:
					requestType="DELIVERY"

				if row[0] in addtwspot_dict:
					addtwspot=[]
					for i in range(len(addtwspot_dict[row[0]])):
						if len(row)>7:
							addtwspot.append(Customer(addtwspot_dict[row[0]][i][0],addtwspot_dict[row[0]][i][3],row[1],row[2],row[3],row[7],addtwspot_dict[row[0]][i][1],addtwspot_dict[row[0]][i][2],row[6],starttime,rejeve,addtwspot_dict[row[0]][i][4],addtwspot_dict[row[0]][i][5],depotservt,[],demdivideunit,requestType,deny_unass))
						else:
							addtwspot.append(Customer(addtwspot_dict[row[0]][i][0],addtwspot_dict[row[0]][i][3],row[1],row[2],row[3],0,addtwspot_dict[row[0]][i][1],addtwspot_dict[row[0]][i][2],row[6],starttime,rejeve,addtwspot_dict[row[0]][i][4],addtwspot_dict[row[0]][i][5],depotservt,[],demdivideunit,requestType,deny_unass))
				else:
					addtwspot=[]


				if argvs.spot_input_file != None:
					if len(row)>7:
						custs+=[Customer(row[0],spotid_dict[row[0]],row[1],row[2],row[3],row[7],row[4],row[5],row[6],starttime,rejeve,parkt_arrive,parkt_open,depotservt,addtwspot,demdivideunit,requestType,deny_unass)]
					else:
						custs+=[Customer(row[0],spotid_dict[row[0]],row[1],row[2],row[3],0,row[4],row[5],row[6],starttime,rejeve,parkt_arrive,parkt_open,depotservt,addtwspot,demdivideunit,requestType,deny_unass)]
				else: # spot_input_fileがない場合はspotidにcustnoと同じ値を入れる
					if len(row)>7:
						custs+=[Customer(row[0],row[0],row[1],row[2],row[3],row[7],row[4],row[5],row[6],starttime,rejeve,parkt_arrive,parkt_open,depotservt,addtwspot,demdivideunit,requestType,deny_unass)]
					else:
						custs+=[Customer(row[0],row[0],row[1],row[2],row[3],0,row[4],row[5],row[6],starttime,rejeve,parkt_arrive,parkt_open,depotservt,addtwspot,demdivideunit,requestType,deny_unass)]
				if row[0]!="0" and (float(row[3])<0 or (len(row)>7 and float(row[7])<0)):
					argvs.pickup_flag=True

				if len(row)<=7 and not "-dem2" in sys.argv:
					argvs.demand2=0

	return custs

##2020/03/05 -evで指定されたファイルの値を読み込む
def read_e_vehicle_info(filename):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		e_vehicle_info={}
		for row in csv_reader:
			if row[0].count("E-CAPACITY")==0:
				e_vehicle_info["E-CAPACITY"]=float(row[0])
				e_vehicle_info["E-INITIAL"]=float(row[1])
				e_vehicle_info["E-COST"]=float(row[2])/1000 #メートル入力をキロメートルにする
				e_vehicle_info["E-MARGIN"]=float(row[3])
	return e_vehicle_info

#-brで指定されたファイルの値を読み込む
def read_br_file(filename, starttime, argvs):
	rejectve_dict={}
	if argvs.rejectve_file != None:
		with open(argvs.rejectve_file, "r") as f:
			rejectve_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in rejectve_file:
				if row[0]!="CUST NO.":
					rejectve_dict[row[0]]=[int(row[i]) for i in range(1,len(row))]

	depotservt_dict={}
	if argvs.multitripc_file != None:
		with open(argvs.multitripc_file, "r") as f:
			multitripc_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in multitripc_file:
				if row[0]!="CUST NO.":
					depotservt_dict[row[0]]=float(row[1])

	demdivideunit_dict={}
	if argvs.demdivideunit_file != None:
		with open(argvs.demdivideunit_file, "r") as f:
			demdivideunit_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in demdivideunit_file:
				if row[0]!="CUST NO.":
					demdivideunit_dict[row[0]]=int(row[1])

	addbrspot_dict={}
	if argvs.addbrspot_file != None:
		with open(argvs.addbrspot_file, "r") as f:
			addbrspot_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in addbrspot_file:
				if row[0]!="BREAK NO.(ORIGINAL)":
					if row[0] in addbrspot_dict:
						addbrspot_dict[row[0]].append([row[1],row[2],row[3],row[4],float(row[5])])
					else:
						addbrspot_dict[row[0]]=[[row[1],row[2],row[3],row[4],float(row[5])]]

	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		br_info={}
		for row in csv_reader:
			if row[0].count("VEHICLE NO.")==0:	#ヘッダ行以外
				breakno = row[1]
				if breakno in rejectve_dict:
					rejeve=rejectve_dict[breakno]
				else:
					rejeve=[]

				if breakno in depotservt_dict:
					depotservt=depotservt_dict[breakno]
				else:
					depotservt=0

				parkt_arrive=0
				parkt_open=0

				if breakno in demdivideunit_dict:
					demdivideunit=demdivideunit_dict[breakno]
				else:
					demdivideunit=1

				addbrspot=[]
				if breakno in addbrspot_dict:
					for i in range(len(addbrspot_dict[breakno])):
						__custno = addbrspot_dict[breakno][i][0]
						__spotid = addbrspot_dict[breakno][i][3] 
						__y = 0
						__x = 0
						__dem = 0
						__dem2 = 0
						__ready = addbrspot_dict[breakno][i][1]
						__due = addbrspot_dict[breakno][i][2]
						__servt = addbrspot_dict[breakno][i][4]
						__starttime = starttime
						__reje_ve = rejeve
						__parkt_arrive = parkt_arrive
						__parkt_open = parkt_open
						__depotservt = depotservt
						__additionalcust = []
						__demdivideunit = demdivideunit
						__requestType = "DELIVERY"
						__deny_unass = False
						__cus = Customer(__custno,__spotid,__y,__x,__dem,__dem2,__ready,__due,__servt,__starttime,__reje_ve,__parkt_arrive,__parkt_open,__depotservt,__additionalcust,__demdivideunit,__requestType,__deny_unass)
						__cus._additionalcust = __cus
						addbrspot.append(__cus)

				_custno = row[1]
				_spotid = row[5]
				_y = 0
				_x = 0
				_dem = 0
				_dem2 = 0
				_ready = row[2]
				_due = row[3]
				_servt = row[4]
				_starttime = starttime
				_reje_ve = rejeve
				_parkt_arrive = parkt_arrive
				_parkt_open = parkt_open
				_depotservt = depotservt
				_additionalcust = addbrspot
				_demdivideunit = demdivideunit
				_requestType = "DELIVERY"
				_deny_unass = False

				cus = Customer(_custno,_spotid,_y,_x,_dem,_dem2,_ready,_due,_servt,_starttime,_reje_ve,_parkt_arrive,_parkt_open,_depotservt,_additionalcust,_demdivideunit,_requestType,_deny_unass)

				vehicleno = int(row[0])
				if vehicleno in br_info:
					br_info[vehicleno] += [cus]
				else:
					br_info[vehicleno] = [cus]

	return br_info


def read_e_spot_info(filename,starttime,argvs): ##2020/03/05 -esで指定されたファイルの値を読み込む 20200726 starttime追加
	spotid_dict={}
	parkt_arrive_dict={}
	parkt_open_dict={}
	if argvs.spot_input_file != None:
		with open(argvs.spot_input_file, "r") as f:
			spotid_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in spotid_file:
				if row[0]!="CUST NO.":
					spotid_dict[row[0]]=row[1]
					parkt_arrive_dict[row[0]]=float(row[2])
					parkt_open_dict[row[0]]=float(row[3])

	rejectve_dict={}
	if argvs.rejectve_file != None:
		with open(argvs.rejectve_file, "r") as f:
			rejectve_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in rejectve_file:
				if row[0]!="CUST NO.":
					rejectve_dict[row[0]]=[int(row[i]) for i in range(1,len(row))]

	depotservt_dict={}
	if argvs.multitripc_file != None:
		with open(argvs.multitripc_file, "r") as f:
			multitripc_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in multitripc_file:
				if row[0]!="CUST NO.":
					depotservt_dict[row[0]]=float(row[1])

	addtwspot_dict={}
	if argvs.addtwspot_file != None:
		with open(argvs.addtwspot_file, "r") as f:
			addtwspot_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in addtwspot_file:
				if row[0]!="CUST NO.(ORIGINAL)":
					if row[0] in addtwspot_dict:
						addtwspot_dict[row[0]].append([row[1],row[2],row[3],row[4],float(row[5]),float(row[6])])
					else:
						addtwspot_dict[row[0]]=[[row[1],row[2],row[3],row[4],float(row[5]),float(row[6])]]

	demdivideunit_dict={}
	if argvs.demdivideunit_file != None:
		with open(argvs.demdivideunit_file, "r") as f:
			demdivideunit_file = csv.reader(f, delimiter=",", quotechar='"', )
			for row in demdivideunit_file:
				if row[0]!="CUST NO.":
					demdivideunit_dict[row[0]]=int(row[1])

	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		e_spots=[]
		for row in csv_reader:
			if row[0].count("E-SPOT NO.")==0:
				if row[0] in rejectve_dict:
					rejeve=rejectve_dict[row[0]]
				else:
					rejeve=[]

				if row[0] in depotservt_dict:
					depotservt=depotservt_dict[row[0]]
				else:
					depotservt=0

				if row[0] in parkt_arrive_dict:
					parkt_arrive=parkt_arrive_dict[row[0]]
				else:
					parkt_arrive=0

				if row[0] in parkt_open_dict:
					parkt_open=parkt_open_dict[row[0]]
				else:
					parkt_open=0

				if row[0] in demdivideunit_dict:
					demdivideunit=demdivideunit_dict[row[0]]
				else:
					demdivideunit=1

				deny_unass=True

				if row[0] in addtwspot_dict:
					addtwspot=[]
					for i in range(len(addtwspot_dict[row[0]])):
						addtwspot.append(Customer(addtwspot_dict[row[0]][i][0],addtwspot_dict[row[0]][i][3],row[1],row[2],0,0,addtwspot_dict[row[0]][i][1],addtwspot_dict[row[0]][i][2],row[6],starttime,rejeve,addtwspot_dict[row[0]][i][4],addtwspot_dict[row[0]][i][5],depotservt,[],demdivideunit,"DELIVERY",deny_unass,float(row[3])))
				else:
					addtwspot=[]

				if argvs.spot_input_file != None:
					e_spots+=[Customer(row[0],spotid_dict[row[0]],row[1],row[2],0,0,row[4],row[5],row[6],starttime,rejeve,parkt_arrive,parkt_open,depotservt,addtwspot,demdivideunit,"DELIVERY",deny_unass,float(row[3]))]
				else: # spot_input_fileがない場合はspotidにcustnoと同じ値を入れる
					e_spots+=[Customer(row[0],row[0],row[1],row[2],0,0,row[4],row[5],row[6],starttime,rejeve,parkt_arrive,parkt_open,depotservt,addtwspot,demdivideunit,"DELIVERY",deny_unass,float(row[3]))]

	return e_spots
##2020/03/05

## -vsで指定されたヘテロ定義ファイル読み込み
def read_hetero_info(filename,argvs):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		hetero_vehicle_info_list = []
		for row in csv_reader:
			if row[0].count("VEHICLE NO.")==0:
				hetero_vehicle_info={}
				hetero_vehicle_info["VEHICLE NO."]=int(row[0])
				hetero_vehicle_info["LOAD_LIMIT"]=float(row[1])
				hetero_vehicle_info["E-CAPACITY"]=float(row[2])
				hetero_vehicle_info["E-INITIAL"]=float(row[3])
				hetero_vehicle_info["E-COST"]=float(row[4])/1000 #メートル入力をキロメートルにする
				hetero_vehicle_info["E-MARGIN"]=float(row[5])
				hetero_vehicle_info["VTYPE"]=row[6]
				hetero_vehicle_info["ETYPE"]=row[7]
				if len(row)>8:
					argvs.demand2=300
					hetero_vehicle_info["LOAD_LIMIT2"]=float(row[8])
				else:
					hetero_vehicle_info["LOAD_LIMIT2"]=300

				hetero_vehicle_info_list.append(hetero_vehicle_info)

	return hetero_vehicle_info_list

## -vendで指定された最終訪問先定義ファイル読み込み
def read_enddepot_info(filename,argvs):
	if argvs.spot_input_file != None:
		with open(argvs.spot_input_file, "r") as f:
			spotid_file = csv.reader(f, delimiter=",", quotechar='"', )
			spotid_dict={}
			parkt_arrive_dict={}
			parkt_open_dict={}
			for row in spotid_file:
				if row[0]!="CUST NO.":
					spotid_dict[row[0]]=row[1]
					parkt_arrive_dict[row[0]]=row[2]
					parkt_open_dict[row[0]]=row[3]

	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		enddepot_info_list = []
		for row in csv_reader:
			if row[0].count("VEHICLE NO.")==0:
				enddepot_info={}
				enddepot_info["VEHICLE NO."]=int(row[0])
				enddepot_info["CUST NO."]=row[1]
				if argvs.spot_input_file != None:
					if row[1] in spotid_dict:
						enddepot_info["SPOT ID"]=spotid_dict[row[1]]
						enddepot_info["PARKING TIME ARRIVE"]=int(parkt_arrive_dict[row[1]])
						enddepot_info["PARKING TIME OPEN"]=int(parkt_open_dict[row[1]])
					else:
						sErrMes = "spotid does not match CUST NO. (spotid = "+row[1]+")"
						raise ValueError(sErrMes)
				else:
					enddepot_info["SPOT ID"]=row[1]
					enddepot_info["PARKING TIME ARRIVE"]=0
					enddepot_info["PARKING TIME OPEN"]=0
				enddepot_info["LATITUDE"]=float(row[2])
				enddepot_info["LONGITUDE"]=float(row[3])
				enddepot_info["DEMAND"]=float(row[4])
				enddepot_info["FROM TIME"]=row[5]
				enddepot_info["TO TIME"]=row[6]
				enddepot_info["SERVICE TIME"]=float(row[7])
				if len(row)>8:
					enddepot_info["DEMAND2"]=float(row[8])
				else:
					enddepot_info["DEMAND2"]=0

				enddepot_info_list.append(enddepot_info)

	return enddepot_info_list

## -vtで指定された車両別営業時間ファイル読み込み
def read_vtime_info(filename):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		vtime_info_list = []
		for row in csv_reader:
			if row[0].count("VEHICLE NO.")==0:
				vtime_info={}
				vtime_info["VEHICLE NO."]=int(row[0])
				vtime_info["FROM TIME"]=row[1]
				vtime_info["TO TIME"]=row[2]

				vtime_info_list.append(vtime_info)

	return vtime_info_list

## -maxvisitで指定された車両別訪問上限数ファイル読み込み
def read_maxvisit(filename,maxvisit):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		
		for row in csv_reader:
			if row[0].count("VEHICLE NO.")==0:
				maxvisit[int(row[0])]=int(row[1])

## -mtvで指定された車両別回転数上限ファイル読み込み
def read_rotate_info(filename):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		rotate_info_list = []
		for row in csv_reader:
			if row[0].count("VEHICLE NO.")==0:
				rotate_info={}
				rotate_info["VEHICLE NO."]=int(row[0])
				rotate_info["MAXROTATE"]=int(row[1])
				rotate_info["DEPOSERVICETIME"]=float(row[2])

				rotate_info_list.append(rotate_info)

	return rotate_info_list

## -rmで指定された台数削減優先度ファイル読み込み
def read_rmpriority_info(filename):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		rmpriority_info_list = []
		for row in csv_reader:
			if row[0].count("VEHICLE NO.")==0:
				rmpriority_info={}
				rmpriority_info["VEHICLE NO."]=int(row[0])
				rmpriority_info["REMOVEPRIORITY"]=int(row[1])

				rmpriority_info_list.append(rmpriority_info)

	return rmpriority_info_list

#-reservedvで指定されたファイルの値を読み込む 未割り当て荷物
def read_reservedv_file(filename, argvs):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		reservedv_info_list = []
		for row in csv_reader:
			if row[0].count("VEHICLE NO.")==0:
				reservedv_info={}
				reservedv_info["VEHICLE NO."]=int(row[0])

				reservedv_info_list.append(reservedv_info)

	return reservedv_info_list

##2020/04/30
def time_feasible(customers,vehicle,idx,customer,argvs):
	#customerを，vehicleのルートのidx番目に入れることで，それ以降の時間枠が守れるか否かを確認
	tvehicle = copy.deepcopy(vehicle) 
	if tvehicle.route[idx-1].custno=="0" and idx==len(tvehicle.route)-1:
		return False,1e+7,False
	tvehicle.insert_customer_at(idx,customer,argvs)

	if vehicle.vehno in customer.reje_ve:
		return False,1e+7,False

	#customerの荷物を加えて積載量オーバーならFalseとする
	if ((argvs.loadPenaltyType=="hard" or argvs.loadPenaltyWeight>0) and customer.requestType=="DELIVERY" and customer.custno[0]!="b" and vehicle.load_onbrd+customer.dem>vehicle.cap) or ((argvs.load2PenaltyType=="hard" or argvs.load2PenaltyWeight>0) and customer.requestType=="DELIVERY" and customer.custno[0]!="b" and vehicle.load_onbrd2+customer.dem2>vehicle.cap2) or ((argvs.loadPenaltyType=="hard" or argvs.loadPenaltyWeight>0) and calc_vehicle_loadpickup_penalty(tvehicle.route,tvehicle)[0]>0) or ((argvs.load2PenaltyType=="hard" or argvs.load2PenaltyWeight>0) and calc_vehicle_loadpickup_penalty(tvehicle.route,tvehicle)[1]>0):
		return False,1e+7,False



	ins_feasible,enough_q=True,True
	site_before,site_after=vehicle.route[idx-1],vehicle.route[idx]

	pick_opt_flag=False
	if argvs.pickup_flag==True:
		for c in tvehicle.route[1:-1]:
			if not c.custno.startswith("e") and c.requestType=="PICKUP":
				pick_opt_flag=True
				break

	if argvs.bulkShipping_flag==False and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno!="0":
		tvehicle.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
	elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno!="0":
		depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
		depo.customers.append(copy.deepcopy(customers[0].customers[0]))
		depo.servt=customers[0].servt
		depo.dem=customers[0].dem
		depo.dem2=customers[0].dem2
		depo.reje_ve=customers[0].reje_ve
		depo.parkt_open=customers[0].parkt_open
		depo.parkt_arrive=customers[0].parkt_arrive
		depo.depotservt=customers[0].depotservt
		depo.additionalcust=[depo]
		depo.demdivideunit=customers[0].demdivideunit
		depo.requestType=customers[0].requestType
		depo.deny_unass=customers[0].deny_unass #未割り当て荷物
		tvehicle.insert_customer_at(-1,depo,argvs)
	elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno=="0" and len(tvehicle.route)-2!=0:
		remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
	elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno=="0" and len(tvehicle.route)-2!=0:
		remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
	elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno=="0" and len(tvehicle.route)-3!=0:
		remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)
	elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno=="0" and len(tvehicle.route)-3!=0:
		remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)

	no_park_idx=[]
	for c in tvehicle.route[1:-1]:
		if c.custno!="0" and c.requestType=="DELIVERY":
			break
	else:
		no_park_idx.append(0)

	if tvehicle.load_pickup==0 and tvehicle.load_pickup2==0:
		if tvehicle.route[-2].custno=="0":
			no_park_idx.append(len(tvehicle.route)-2)
		no_park_idx.append(len(tvehicle.route)-1)

	depo_idx=[j for j,c in enumerate(tvehicle.route[:-1]) if c.custno=="0"]+[len(tvehicle.route)-1]
	servt_dict={}
	for k in range(len(depo_idx)-1):
		servt_dict[tvehicle.route[depo_idx[k]]]=0
		servt=0
		for j in range(depo_idx[k]+1,depo_idx[k+1]):
			if not tvehicle.route[j].custno.startswith("e") and tvehicle.route[j].requestType=="DELIVERY" and not tvehicle.route[j].custno.startswith("b"):
				servt+=tvehicle.route[j].depotservt
		if tvehicle.route[depo_idx[k]+1].custno!="0":
			servt_dict[tvehicle.route[depo_idx[k]]]+=servt+tvehicle.depotservt
		else:
			servt_dict[tvehicle.route[depo_idx[k]]]+=servt
	#集荷時間
	servt_dict[tvehicle.route[len(tvehicle.route)-1]]=0
	for k in range(1,len(depo_idx)):
		servt=0
		for j in range(depo_idx[k-1]+1,depo_idx[k]):
			if not tvehicle.route[j].custno.startswith("e") and tvehicle.route[j].requestType=="PICKUP":
				servt+=tvehicle.route[j].depotservt
		servt_dict[tvehicle.route[depo_idx[k]]]+=servt

	impassable,dist,power,_,_=check_impassability(customers,tvehicle,tvehicle.lv[0],1,servt_dict,len(tvehicle.route)-1,no_park_idx,pick_opt_flag,argvs)
	dist_diff=dist

	no_park_idx=[]
	for c in vehicle.route[1:-1]:
		if c.custno!="0" and c.requestType=="DELIVERY":
			break
	else:
		no_park_idx.append(0)

	if vehicle.load_pickup==0 and vehicle.load_pickup2==0:
		if vehicle.route[-2].custno=="0":
			no_park_idx.append(len(vehicle.route)-2)
		no_park_idx.append(len(vehicle.route)-1)

	pick_opt_flag=False
	if argvs.pickup_flag==True:
		for c in vehicle.route[1:-1]:
			if not c.custno.startswith("e") and c.requestType=="PICKUP":
				pick_opt_flag=True
				break

	depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]
	tservt_dict={}
	for k in range(len(depo_idx)-1):
		tservt_dict[vehicle.route[depo_idx[k]]]=0
		servt=0
		for j in range(depo_idx[k]+1,depo_idx[k+1]):
			if not vehicle.route[j].custno.startswith("e") and vehicle.route[j].requestType=="DELIVERY":
				servt+=vehicle.route[j].depotservt
		if vehicle.route[depo_idx[k]+1].custno!="0":
			tservt_dict[vehicle.route[depo_idx[k]]]+=servt+vehicle.depotservt
		else:
			tservt_dict[vehicle.route[depo_idx[k]]]+=servt
	#集荷時間
	tservt_dict[vehicle.route[len(vehicle.route)-1]]=0
	for k in range(1,len(depo_idx)):
		servt=0
		for j in range(depo_idx[k-1]+1,depo_idx[k]):
			if not vehicle.route[j].custno.startswith("e") and vehicle.route[j].requestType=="PICKUP":
				servt+=vehicle.route[j].depotservt
		tservt_dict[vehicle.route[depo_idx[k]]]+=servt

	_,dist,bpower,_,_=check_impassability(customers,vehicle,vehicle.lv[0],1,tservt_dict,len(vehicle.route)-1,no_park_idx,pick_opt_flag,argvs)
	dist_diff-=dist



	if impassable==False:
		return False,1e+7,False


	espot_idx=[vehicle.route.index(r) for r in vehicle.route if r.custno.startswith("e")]

	if len(espot_idx)==0: #no e_spot in the route
		for i in range(0,len(tvehicle.route)-1):
			if argvs.lastc_flag==True and i==len(tvehicle.route)-2:
				break
			from_c,to_c=tvehicle.route[i],tvehicle.route[i+1]
			if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(tvehicle.st[i+1], to_c.due_fs)>0:
				return False,1e+7,False

		if ((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and argvs.lastc_flag==True and tvehicle.route[-2].custno!="0" and compare_time(tvehicle.lv[-2],tvehicle.endhour)>0) or \
			((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and argvs.lastc_flag==True and tvehicle.route[-2].custno=="0" and compare_time(tvehicle.lv[-3],tvehicle.endhour)>0) or \
			((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and argvs.lastc_flag==False and compare_time(tvehicle.lv[-1],tvehicle.endhour)>0):
			return False,1e+7,False

		return True,dist_diff,True

	if idx<=espot_idx[0]: # e_spot is located after the insertion position.
		if tvehicle.rem_batt[espot_idx[0]+1]-tvehicle.chg_batt[espot_idx[0]+1]<tvehicle.e_margin: #impossible to reach at the espot after insertion
			return False,1e+7,enough_q
		for i in range(0,len(tvehicle.route)-1):
			from_c,to_c=tvehicle.route[i],tvehicle.route[i+1]
			if from_c.custno.startswith("e"):
				if not argvs.management_etable: #電力テーブルが無い場合
					q_to_charge=max((tvehicle.remdist[i]/1000)/tvehicle.e_cost-tvehicle.rem_batt[i] + tvehicle.e_margin,0)
					#現在の残り電力量rem_batt[i]にq_to_chargeを追加した量が運搬車の容量を超えるならば実行不能
					if tvehicle.rem_batt[i]+q_to_charge > tvehicle.e_capacity:
						return False,1e+7,False
				else: #電力テーブルが有る場合
					e_sum = 0
					ar_time_tmp = tvehicle.arr[i]
					for r1, r2 in zip(tvehicle.route[i:-1], tvehicle.route[i+1:]):
						if r1.custno.startswith("e"):
							lv_time_tmp = tvehicle.arr[i] #仮のlv_time(=arr_time)
							e_sum += max_e_from_table(tvehicle.vtype,tvehicle.etype,lv_time_tmp,r1,r2,argvs.management_etable)
							ar_time_tmp=lv_time_tmp+max_time_from_table(vehicle.vtype,lv_time_tmp,r1,r2,argvs.management_ttable)*tvehicle.drskill
						else:
							if r1 in servt_dict:
								if (tvehicle.route.index(r1)==0 or r1.spotid!=tvehicle.route[tvehicle.route.index(r1)-1].spotid) and not r1.spotid.startswith("e") and (tvehicle.route.index(r1)!=0 or tvehicle.load_onbrd!=0 or tvehicle.load_onbrd2!=0):
									lv_time_tmp=max(ar_time_tmp+r1.parkt_arrive,r1.ready_fs)+servt_dict[r1]*tvehicle.opskill
								else:
									lv_time_tmp=max(ar_time_tmp,r1.ready_fs)+servt_dict[r1]*tvehicle.opskill
							else:
								if (tvehicle.route.index(r1)==0 or r1.spotid!=tvehicle.route[tvehicle.route.index(r1)-1].spotid) and not r1.spotid.startswith("e") and (tvehicle.route.index(r1)!=0 or tvehicle.load_onbrd!=0 or tvehicle.load_onbrd2!=0):
									lv_time_tmp=max(ar_time_tmp+r1.parkt_arrive,r1.ready_fs)+r1.servt*tvehicle.opskill 
								else:
									lv_time_tmp=max(ar_time_tmp,r1.ready_fs)+r1.servt*tvehicle.opskill 
							if (tvehicle.route.index(r1)==0 or r1.spotid!=tvehicle.route[tvehicle.route.index(r1)-1].spotid) and not r1.spotid.startswith("e") and (tvehicle.route.index(r1)!=0 or tvehicle.load_onbrd!=0 or tvehicle.load_onbrd2!=0):
								lv_time_tmp+=r1.parkt_open
							etable2 = get_etable(tvehicle.vtype, tvehicle.etype, lv_time_tmp, argvs.management_etable)
							ttable9 = get_ttable(tvehicle.vtype, lv_time_tmp, argvs.management_ttable)
							e_sum += etable2[r1.spotno][r2.spotno]
							ar_time_tmp=lv_time_tmp+ttable9[r1.spotno][r2.spotno]*tvehicle.drskill
					q_to_charge=max(e_sum-tvehicle.rem_batt[i] + tvehicle.e_margin,0)
					#現在の残り電力量rem_batt[i]にq_to_chargeを追加した量が運搬車の容量を超えるならば実行不能
					if vehicle.rem_batt[i]+q_to_charge > vehicle.e_capacity:
						return False,1e+7,False
		
			if argvs.lastc_flag==True and ((tvehicle.route[-2].custno=="0" and i+1>=len(tvehicle.route)-2) or (tvehicle.route[-2].custno!="0" and i+1>=len(tvehicle.route)-1)):
				continue
			if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0 or tvehicle.route[i+1].custno.startswith("e")) and compare_time(tvehicle.st[i+1], to_c.due_fs)>0:
				return False,1e+7,False

		if ((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and ((argvs.lastc_flag==True and tvehicle.route[-2].custno=="0" and compare_time(tvehicle.lv[-3],tvehicle.endhour)>0) or (argvs.lastc_flag==True and tvehicle.route[-2].custno!="0" and compare_time(tvehicle.lv[-2],tvehicle.endhour)>0))) or \
			((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and argvs.lastc_flag==False and compare_time(tvehicle.lv[-1],tvehicle.endhour)>0):
			return False,1e+7,False

		return True,dist_diff,True
	else: # e_spot is located before the insertion position
		lv_time=tvehicle.arr[espot_idx[0]]			#充電スポットvehicle.route[espot_idx[0]]でサービスを開始する時

		if not argvs.management_etable: #電力テーブルが無い場合
			dtable1 = get_dtable(vehicle.vtype, tvehicle.lv[idx-1], argvs.management_dtable)
			dtable2 = get_dtable(vehicle.vtype, tvehicle.lv[idx], argvs.management_dtable)
			dist_from_e_to_depot=vehicle.remdist[espot_idx[0]]																			#ルート内の（唯一の）充電スポットから，拠点までの距離
			dist_from_e_to_depot+=dtable1[site_before.spotno][customer.spotno]+dtable2[customer.spotno][site_after.spotno]					#customerを追加することによって増える距離を加算
			dist_from_e_to_depot-=dtable1[site_before.spotno][site_after.spotno]
			lv_time+=((dist_from_e_to_depot/1000.0)/vehicle.e_cost + vehicle.e_margin -vehicle.rem_batt[espot_idx[0]])/vehicle.route[espot_idx[0]].e_rate+vehicle.route[espot_idx[0]].servt*vehicle.opskill	#充電スポットでの充電時間をlv_timeに加算する
			# if vehicle.route[espot_idx[0]].spotid!=vehicle.route[espot_idx[0]-1].spotid:
			# 	lv_time+=vehicle.route[espot_idx[0]].parkt_open

			#dist_from_e_to_depot/1000.0)/vehicle.e_cost+vehicle.rem_batt[espot_idx[0]が運搬車の容量を超える場合実行不能とする
			if (dist_from_e_to_depot/1000.0)/vehicle.e_cost+vehicle.rem_batt[espot_idx[0]] > vehicle.e_capacity:
				return False,1e+7,False

		else: #電力テーブルが有る場合
			lv_time_tmp = lv_time #仮のlv_time(=arr_time)
			e_sum = max_e_from_table(vehicle.vtype,vehicle.etype,lv_time_tmp,vehicle.route[espot_idx[0]],site_before,argvs.management_etable) #espot_idx[0]からsite_beforeの電力
			ar_time_tmp=lv_time_tmp+max_time_from_table(vehicle.vtype,lv_time_tmp,vehicle.route[espot_idx[0]],site_before,argvs.management_ttable)*vehicle.drskill

			if tvehicle.route[idx-1] in servt_dict:
				if site_before.spotid!=customer.spotid and not site_before.spotid.startswith("e") and (idx!=1 or vehicle.load_onbrd!=0 or vehicle.load_onbrd2!=0):
					lv_time_tmp=max(ar_time_tmp+site_before.parkt_arrive,site_before.ready_fs)+servt_dict[tvehicle.route[idx-1]]*vehicle.opskill
				else:
					lv_time_tmp=max(ar_time_tmp,site_before.ready_fs)+servt_dict[tvehicle.route[idx-1]]*vehicle.opskill
			else:
				if site_before.spotid!=customer.spotid and not site_before.spotid.startswith("e") and (idx!=1 or vehicle.load_onbrd!=0 or vehicle.load_onbrd2!=0):
					lv_time_tmp=max(ar_time_tmp+site_before.parkt_arrive,site_before.ready_fs)+site_before.servt*vehicle.opskill
				else:
					lv_time_tmp=max(ar_time_tmp,site_before.ready_fs)+site_before.servt*vehicle.opskill
			if site_before.spotid!=customer.spotid and not site_before.spotid.startswith("e") and (idx!=1 or vehicle.load_onbrd!=0 or vehicle.load_onbrd2!=0):
				lv_time_tmp+=site_before.parkt_open
			etable3 = get_etable(vehicle.vtype,vehicle.etype,lv_time_tmp,argvs.management_etable)
			ttable10 = get_ttable(vehicle.vtype,lv_time_tmp,argvs.management_ttable)
			e_sum += etable3[site_before.spotno][customer.spotno]	#site_beforeからcustomerの電力
			ar_time_tmp = lv_time_tmp+ttable10[site_before.spotno][customer.spotno]*vehicle.drskill

			if customer.spotid!=site_before.spotid:
				lv_time_tmp=max(ar_time_tmp+customer.parkt_arrive,customer.ready_fs)+customer.servt*vehicle.opskill 
			else:
				lv_time_tmp=max(ar_time_tmp,customer.ready_fs)+customer.servt*vehicle.opskill 
			if customer.spotid!=site_before.spotid:
				lv_time_tmp+=customer.parkt_open
			etable4 = get_etable(vehicle.vtype,vehicle.etype,lv_time_tmp,argvs.management_etable)
			ttable11 = get_ttable(vehicle.vtype,lv_time_tmp,argvs.management_ttable)
			e_sum += etable4[customer.spotno][site_after.spotno]	#customerからsite_afterの電力
			ar_time_tmp = lv_time_tmp+ttable11[customer.spotno][site_after.spotno]*vehicle.drskill

			if tvehicle.route[idx] in servt_dict:
				if site_after.spotid!=customer.spotid and not site_after.spotid.startswith("e") and (idx!=len(vehicle.route)-1 or (vehicle.load_pickup!=0 and tvehicle.route[-2].custno!="0") or (vehicle.load_pickup2!=0 and tvehicle.route[-2].custno!="0")):
					lv_time_tmp=max(ar_time_tmp+site_after.parkt_arrive,site_after.ready_fs)+servt_dict[tvehicle.route[idx]]*vehicle.opskill 
				else:
					lv_time_tmp=max(ar_time_tmp,site_after.ready_fs)+servt_dict[tvehicle.route[idx]]*vehicle.opskill 
			else:
				if site_after.spotid!=customer.spotid and not site_after.spotid.startswith("e") and (idx!=len(vehicle.route)-1 or (vehicle.load_pickup!=0 and tvehicle.route[-2].custno!="0") or (vehicle.load_pickup2!=0 and tvehicle.route[-2].custno!="0")):
					lv_time_tmp=max(ar_time_tmp+site_after.parkt_arrive,site_after.ready_fs)+site_after.servt*vehicle.opskill 
				else:
					lv_time_tmp=max(ar_time_tmp,site_after.ready_fs)+site_after.servt*vehicle.opskill 
			if site_after.spotid!=customer.spotid and not site_after.spotid.startswith("e") and (idx!=len(vehicle.route)-1 or (vehicle.load_pickup!=0 and tvehicle.route[-2].custno!="0") or (vehicle.load_pickup2!=0 and tvehicle.route[-2].custno!="0")):
				lv_time_tmp+=site_after.parkt_open
			etable5 = get_etable(vehicle.vtype,vehicle.etype,lv_time_tmp,argvs.management_etable)
			ttable12 = get_ttable(vehicle.vtype,lv_time_tmp,argvs.management_ttable)
			e_sum += etable5[site_after.spotno][vehicle.route[-1].spotno]	#site_afterからroute[-1]の電力

			#dist_from_e_to_depot/1000.0)/vehicle.e_cost+vehicle.rem_batt[espot_idx[0]が運搬車の容量を超える場合実行不能とする
			if e_sum + vehicle.e_margin > vehicle.e_capacity:
				return False,1e+7,False

			lv_time+=e_sum/vehicle.route[espot_idx[0]].e_rate+vehicle.route[espot_idx[0]].servt*vehicle.opskill																		#充電スポットでの充電時間をlv_timeに加算する
			# if vehicle.route[espot_idx[0]].spotid!=vehicle.route[espot_idx[0]-1].spotid:
			# 	lv_time+=vehicle.route[espot_idx[0]].parkt_open

		ttable6 = get_ttable(vehicle.vtype, lv_time, argvs.management_ttable)
		ar_time=lv_time+ttable6[vehicle.route[espot_idx[0]].spotno][vehicle.route[espot_idx[0]+1].spotno]*vehicle.drskill


		for i in range(0,len(tvehicle.route)-1):
			from_c,to_c=tvehicle.route[i],tvehicle.route[i+1]
			if argvs.lastc_flag==True and ((tvehicle.route[-2].custno=="0" and i+1>=len(tvehicle.route)-2) or (tvehicle.route[-2].custno!="0" and i+1>=len(tvehicle.route)-1)):
				continue
			if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0 or tvehicle.route[i+1].custno.startswith("e")) and compare_time(tvehicle.st[i+1], to_c.due_fs)>0:
				return False,1e+7,False

		if ((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and ((argvs.lastc_flag==True and tvehicle.route[-2].custno=="0" and compare_time(tvehicle.lv[-3],tvehicle.endhour)>0) or (argvs.lastc_flag==True and tvehicle.route[-2].custno!="0" and compare_time(tvehicle.lv[-2],tvehicle.endhour)>0))) or \
			((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and argvs.lastc_flag==False and compare_time(tvehicle.lv[-1],tvehicle.endhour)>0):
			return False,1e+7,False

		return True,dist_diff,True		
##2020/04/30

##2020/04/23
def insert_a_customer_withspot(custs,customers,customer,vehicle,ins_idx,espots,argvs):
	tvehicle = copy.deepcopy(vehicle) #チェックしてから挿入する
	if tvehicle.route[ins_idx-1].custno=="0" and ins_idx==len(tvehicle.route)-1:
		return False
	tvehicle.insert_customer_at(ins_idx,customer,argvs)
	
	neg_bat=[i-j for i,j in zip(tvehicle.rem_batt,tvehicle.chg_batt) if i-j<tvehicle.e_margin]

	#v_spotid=[c.spotid for c in vehicle.route]
	#v_spotid.insert(ins_idx,customer.spotid)
	#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([c.custno for c in vehicle.route[1:-1] if c.custno.startswith("e") or c.custno=="0" or c.custno.startswith("b")]) #充電スポットはカウントしない
	visitnum=calc_visitnum(tvehicle.route)

	pick_opt_flag=False
	if argvs.pickup_flag==True:
		for c in tvehicle.route[1:-1]:
			if not c.custno.startswith("e") and c.requestType=="PICKUP":
				pick_opt_flag=True
				break

	if argvs.bulkShipping_flag==False and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno!="0":
		tvehicle.insert_customer_at(-1,copy.deepcopy(custs[0]),argvs)
	elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno!="0":
		depo=TiedCustomer(custs[0].custno,custs[0].spotid,custs[0].ready_fs,custs[0].due_fs,custs[0].x,custs[0].y,custs[0].e_rate)
		depo.customers.append(copy.deepcopy(custs[0].customers[0]))
		depo.servt=custs[0].servt
		depo.dem=custs[0].dem
		depo.dem2=custs[0].dem2
		depo.reje_ve=custs[0].reje_ve
		depo.parkt_open=custs[0].parkt_open
		depo.parkt_arrive=custs[0].parkt_arrive
		depo.depotservt=custs[0].depotservt
		depo.additionalcust=[depo]
		depo.demdivideunit=custs[0].demdivideunit
		depo.requestType=custs[0].requestType
		depo.deny_unass=custs[0].deny_unass #未割り当て荷物
		tvehicle.insert_customer_at(-1,depo,argvs)
	elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno=="0" and len(tvehicle.route)-2!=0:
		remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
	elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno=="0" and len(tvehicle.route)-2!=0:
		remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
	elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno=="0" and len(tvehicle.route)-3!=0:
		remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)
	elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno=="0" and len(tvehicle.route)-3!=0:
		remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)

	no_park_idx=[]
	for c in tvehicle.route[1:-1]:
		if c.custno!="0" and c.requestType=="DELIVERY":
			break
	else:
		no_park_idx.append(0)

	if tvehicle.load_pickup==0 and tvehicle.load_pickup2==0:
		if tvehicle.route[-2].custno=="0":
			no_park_idx.append(len(tvehicle.route)-2)
		no_park_idx.append(len(tvehicle.route)-1)

	if len(neg_bat)==0 and not vehicle in customer.reje_ve and (vehicle.maxvisit==0 or visitnum<=vehicle.maxvisit):
		depo_idx=[j for j,c in enumerate(tvehicle.route[:-1]) if c.custno=="0"]+[len(tvehicle.route)-1]
		servt_dict={}
		for k in range(len(depo_idx)-1):
			servt_dict[tvehicle.route[depo_idx[k]]]=0
			servt=0
			for j in range(depo_idx[k]+1,depo_idx[k+1]):
				if not tvehicle.route[j].custno.startswith("e") and tvehicle.route[j].requestType=="DELIVERY" and not tvehicle.route[j].custno.startswith("b"):
					servt+=tvehicle.route[j].depotservt
			if tvehicle.route[depo_idx[k]+1].custno!="0":
				servt_dict[tvehicle.route[depo_idx[k]]]+=servt+tvehicle.depotservt
			else:
				servt_dict[tvehicle.route[depo_idx[k]]]+=servt
		#集荷時間
		servt_dict[tvehicle.route[len(tvehicle.route)-1]]=0
		for k in range(1,len(depo_idx)):
			servt=0
			for j in range(depo_idx[k-1]+1,depo_idx[k]):
				if not tvehicle.route[j].custno.startswith("e") and tvehicle.route[j].requestType=="PICKUP":
					servt+=tvehicle.route[j].depotservt
			servt_dict[tvehicle.route[depo_idx[k]]]+=servt

		if check_impassability(customers,tvehicle,tvehicle.lv[0],1,servt_dict,len(tvehicle.route)-1,no_park_idx,pick_opt_flag,argvs)[0]==True:
			vehicle.insert_customer_at(ins_idx,customer,argvs)

			if argvs.bulkShipping_flag==False and pick_opt_flag==True and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-2].custno!="0" and vehicle.route[len(vehicle.route)-3].custno!="0":
				vehicle.insert_customer_at(-1,copy.deepcopy(custs[0]),argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==True and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-2].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-3].customers[0].custno!="0":
				depo=TiedCustomer(custs[0].custno,custs[0].spotid,custs[0].ready_fs,custs[0].due_fs,custs[0].x,custs[0].y,custs[0].e_rate)
				depo.customers.append(copy.deepcopy(custs[0].customers[0]))
				depo.servt=custs[0].servt
				depo.dem=custs[0].dem
				depo.dem2=custs[0].dem2
				depo.reje_ve=custs[0].reje_ve
				depo.parkt_open=custs[0].parkt_open
				depo.parkt_arrive=custs[0].parkt_arrive
				depo.depotservt=custs[0].depotservt
				depo.demdivideunit=custs[0].demdivideunit
				depo.additionalcust=[depo]
				depo.requestType=custs[0].requestType
				depo.deny_unass=custs[0].deny_unass #未割り当て荷物
				vehicle.insert_customer_at(-1,depo,argvs)
			elif argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-2].custno=="0" and len(vehicle.route)-2!=0:
				remove_customers_specified([vehicle.route[-2]],vehicle,argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-2].customers[0].custno=="0" and len(vehicle.route)-2!=0:
				remove_customers_specified([vehicle.route[-2]],vehicle,argvs)
			elif argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-3].custno=="0" and len(vehicle.route)-3!=0:
				remove_customers_specified([vehicle.route[-3]],vehicle,argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-3].customers[0].custno=="0" and len(vehicle.route)-3!=0:
				remove_customers_specified([vehicle.route[-3]],vehicle,argvs)

			return True

	min_dist,nearest_espot=1e+7,None 
	

	for e in espots: # daic e_spots -> espots 
		ttable2 = get_ttable(vehicle.vtype, tvehicle.lv[ins_idx], argvs.management_ttable)
		dtable2 = get_dtable(vehicle.vtype, tvehicle.lv[ins_idx], argvs.management_dtable)
		if argvs.management_etable:
			etable2 = get_etable(vehicle.vtype, vehicle.etype, tvehicle.lv[ins_idx], argvs.management_etable)
		if argvs.management_xtable:
			xtable2 = get_xtable(vehicle.vtype, tvehicle.lv[ins_idx], argvs.management_xtable)
		if ttable2[customer.spotno][e.spotno]!=-1 and \
		dtable2[customer.spotno][e.spotno]!=-1 and \
		(not argvs.management_etable or etable2[customer.spotno][e.spotno]!=-1) and \
		(not argvs.management_xtable or xtable2[customer.spotno][e.spotno]!=-1) and \
		dtable2[customer.spotno][e.spotno]<min_dist:
			min_dist=dtable2[customer.spotno][e.spotno] 
			nearest_espot=e 
	espots_in_v=[c for c in vehicle.route if c.custno.startswith("e")] #2つ以上の充電スポットを拒否するため
	if len(espots_in_v)==0 and nearest_espot != None: #ルートに充電スポットがなく挿入スポットがある場合
		tvehicle.insert_espot_at(ins_idx+1,nearest_espot,argvs)

		ttable3 = get_ttable(tvehicle.vtype, tvehicle.lv[ins_idx+1], argvs.management_ttable)
		dtable3 = get_dtable(tvehicle.vtype, tvehicle.lv[ins_idx+1], argvs.management_dtable)
		if argvs.management_etable:
			etable3 = get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[ins_idx+1], argvs.management_etable)
		if argvs.management_xtable:
			xtable3 = get_xtable(tvehicle.vtype, tvehicle.lv[ins_idx+1], argvs.management_xtable)
			
		if ttable3[tvehicle.route[ins_idx+1].spotno][tvehicle.route[ins_idx+2].spotno]==-1 or \
			dtable3[tvehicle.route[ins_idx+1].spotno][tvehicle.route[ins_idx+2].spotno]==-1 or \
			(argvs.management_etable and etable3[tvehicle.route[ins_idx+1].spotno][tvehicle.route[ins_idx+2].spotno]==-1) or \
			(argvs.management_xtable and xtable3[tvehicle.route[ins_idx+1].spotno][tvehicle.route[ins_idx+2].spotno]==-1):
			return False
		else:
			depo_idx=[j for j,c in enumerate(tvehicle.route[:-1]) if c.custno=="0"]+[len(tvehicle.route)-1]
			servt_dict={}
			for k in range(len(depo_idx)-1):
				servt_dict[tvehicle.route[depo_idx[k]]]=0
				servt=0
				for j in range(depo_idx[k]+1,depo_idx[k+1]):
					if not tvehicle.route[j].custno.startswith("e") and tvehicle.route[j].requestType=="DELIVERY" and not tvehicle.route[j].custno.startswith("b"):
						servt+=tvehicle.route[j].depotservt
				if tvehicle.route[depo_idx[k]+1].custno!="0":
					servt_dict[tvehicle.route[depo_idx[k]]]+=servt+tvehicle.depotservt
				else:
					servt_dict[tvehicle.route[depo_idx[k]]]+=servt
			#集荷時間
			servt_dict[tvehicle.route[len(tvehicle.route)-1]]=0
			for k in range(1,len(depo_idx)):
				servt=0
				for j in range(depo_idx[k-1]+1,depo_idx[k]):
					if not tvehicle.route[j].custno.startswith("e") and tvehicle.route[j].requestType=="PICKUP":
						servt+=tvehicle.route[j].depotservt
				servt_dict[tvehicle.route[depo_idx[k]]]+=servt

			if check_impassability(customers,tvehicle,tvehicle.lv[ins_idx+2],ins_idx+3,servt_dict,len(tvehicle.route)-1,no_park_idx,pick_opt_flag,argvs)[0]==False:
				return False

		neg_bat=[i-j for i,j in zip(tvehicle.rem_batt,tvehicle.chg_batt) if i-j<tvehicle.e_margin]

		tw_feas=True
		for i in range(0,len(tvehicle.route)):
			if argvs.lastc_flag==True and ((tvehicle.route[-2].custno=="0" and i>=len(tvehicle.route)-2) or (tvehicle.route[-2].custno!="0" and i>=len(tvehicle.route)-1)):
				continue
			if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0 or tvehicle.route[i].custno.startswith("e")) and compare_time(tvehicle.st[i], tvehicle.route[i].due_fs)>0:
				#impossible to insert the customer at ins_idx with espot
				tw_feas=False
				return False
	
		if ((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and ((argvs.lastc_flag==True and tvehicle.route[-2].custno=="0" and compare_time(tvehicle.lv[-3],tvehicle.endhour)>0) or (argvs.lastc_flag==True and tvehicle.route[-2].custno!="0" and compare_time(tvehicle.lv[-2],tvehicle.endhour)>0))) or \
			((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and argvs.lastc_flag==False and compare_time(tvehicle.lv[-1],tvehicle.endhour)>0):
			return False

		#v_spotid=[c.spotid for c in vehicle.route]
		#v_spotid.insert(ins_idx,customer.spotid)
		#v_spotid.insert(ins_idx+1,nearest_espot.spotid)
		#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-1-len([c for c in v_spotid[1:-1] if c=="0" or c.startswith("b")]) #充電スポットはカウントしない
		visitnum=calc_visitnum(tvehicle.route)

		if len(neg_bat)==0 and tw_feas==True and not vehicle.vehno in customer.reje_ve and not vehicle in nearest_espot.reje_ve and (vehicle.maxvisit==0 or visitnum<=vehicle.maxvisit):
			vehicle.insert_customer_at(ins_idx,customer,argvs)
			vehicle.insert_espot_at(ins_idx+1,nearest_espot,argvs)

			if argvs.bulkShipping_flag==False and pick_opt_flag==True and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-2].custno!="0" and vehicle.route[len(vehicle.route)-3].custno!="0":
				vehicle.insert_customer_at(-1,copy.deepcopy(custs[0]),argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==True and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-2].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-3].customers[0].custno!="0":
				depo=TiedCustomer(custs[0].custno,custs[0].spotid,custs[0].ready_fs,custs[0].due_fs,custs[0].x,custs[0].y,custs[0].e_rate)
				depo.customers.append(copy.deepcopy(custs[0].customers[0]))
				depo.servt=custs[0].servt
				depo.dem=custs[0].dem
				depo.dem2=custs[0].dem2
				depo.reje_ve=custs[0].reje_ve
				depo.parkt_open=custs[0].parkt_open
				depo.parkt_arrive=custs[0].parkt_arrive
				depo.depotservt=custs[0].depotservt
				depo.additionalcust=[depo]
				depo.demdivideunit=custs[0].demdivideunit
				depo.requestType=custs[0].requestType
				depo.deny_unass=custs[0].deny_unass #未割り当て荷物
				vehicle.insert_customer_at(-1,depo,argvs)
			elif argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-2].custno=="0" and len(vehicle.route)-2!=0:
				remove_customers_specified([vehicle.route[-2]],vehicle,argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-2].customers[0].custno=="0" and len(vehicle.route)-2!=0:
				remove_customers_specified([vehicle.route[-2]],vehicle,argvs)
			elif argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-3].custno=="0" and len(vehicle.route)-3!=0:
				remove_customers_specified([vehicle.route[-3]],vehicle,argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-3].customers[0].custno=="0" and len(vehicle.route)-3!=0:
				remove_customers_specified([vehicle.route[-3]],vehicle,argvs)

			return True
		else:
			return False
	else:
		return False
##2020/04/23

##2020/04/23
def find_a_customer_to_insert_with_mincost(customers,vehicle,e_spots,vehicles,argvs): # daic ttable追加
	min_c,min_idx,min_penalty=None,-1,1e+12
	btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp=1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12
	atpen,adist,aload,aload2,atime_error,avisits_error,adist_error,atime,apower,aexp=0,0,0,0,0,0,0,0,0,0
	tw_feas_exists=False
	for c in customers:
		if argvs.lastc_flag==True and vehicle.route[-2].custno!="0":
			bvfinal_t=vehicle.lv[-2]
		elif argvs.lastc_flag==True and vehicle.route[-2].custno=="0":
			bvfinal_t=vehicle.lv[-3]
		else:
			bvfinal_t=vehicle.lv[-1]
		if vehicle.route[-2].custno=="0":
			end_idx=len(vehicle.route)-1
		else:
			end_idx=len(vehicle.route)
		for i in range(1,end_idx):
			tw_feas,diff_dist,enough_q=time_feasible(customers,vehicle,i,c,argvs) # daic ttable追加
			if tw_feas==True:
				tvehicle=copy.deepcopy(vehicle)
				tvehicles=copy.deepcopy(vehicles)

				if max([j for j in range(len(tvehicle.route)) if tvehicle.route[j].custno=="0"])!=0 and i>max([j for j in range(len(tvehicle.route)) if tvehicle.route[j].custno=="0"]):
					continue
				tvehicle.insert_customer_at(i,c,argvs)
				for v in tvehicles:
					if v.vehno==tvehicle.vehno:
						v=tvehicle
						break

				pick_opt_flag=False
				if argvs.pickup_flag==True:
					for cust in tvehicle.route[1:-1]:
						if not cust.custno.startswith("e") and cust.requestType=="PICKUP":
							pick_opt_flag=True
							break

				if argvs.bulkShipping_flag==False and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno!="0":
					tvehicle.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
				elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno!="0":
					depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
					depo.customers.append(copy.deepcopy(customers[0].customers[0]))
					depo.servt=customers[0].servt
					depo.dem=customers[0].dem
					depo.dem2=customers[0].dem2
					depo.reje_ve=customers[0].reje_ve
					depo.parkt_open=customers[0].parkt_open
					depo.parkt_arrive=customers[0].parkt_arrive
					depo.depotservt=customers[0].depotservt
					depo.additionalcust=[depo]
					depo.demdivideunit=customers[0].demdivideunit
					depo.requestType=customers[0].requestType
					depo.deny_unass=customers[0].deny_unass #未割り当て荷物
					tvehicle.insert_customer_at(-1,depo,argvs)
				elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno=="0" and len(tvehicle.route)-2!=0:
					remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
				elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno=="0" and len(tvehicle.route)-2!=0:
					remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
				elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno=="0" and len(tvehicle.route)-3!=0:
					remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)
				elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno=="0" and len(tvehicle.route)-3!=0:
					remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)

				for j in range(1,len(tvehicle.route)-2):
					atpen+=max(tvehicle.st[j]-tvehicle.route[j].due_fs,0)
				if argvs.lastc_flag==True and tvehicle.route[-2].custno!="0":
					atpen+=max(tvehicle.st[-2]-tvehicle.route[-2].due_fs,0)+max(tvehicle.lv[-2]-tvehicle.endhour,0)
				elif argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
					atpen+=max(tvehicle.lv[-3]-tvehicle.endhour,0)+max(tvehicle.lv[-2]-tvehicle.endhour,0)
				else:
					atpen+=max(tvehicle.st[-2]-tvehicle.route[-2].due_fs,0)+max(tvehicle.st[-1]-tvehicle.route[-1].due_fs,0)+max(tvehicle.lv[-1]-tvehicle.endhour,0)
				if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(tvehicle,argvs)==False:
					if argvs.lastc_flag==True and tvehicle.route[-2].custno!="0":
						atpen,btpen=return_lutime_penalty(tvehicle.lv[-2]-tvehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],atpen,btpen)
					elif argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
						atpen,btpen=return_lutime_penalty(tvehicle.lv[-3]-tvehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],atpen,btpen)
					else:
						atpen,btpen=return_lutime_penalty(tvehicle.lv[-1]-tvehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],atpen,btpen)

				if argvs.lastc_flag==True:
					adist=tvehicle.totalcost_wolast
				else:
					adist=tvehicle.totalcost

				aload = max(tvehicle.load_onbrd - tvehicle.cap,0.0)
				aload2 = max(tvehicle.load_onbrd2 - tvehicle.cap2,0.0)
				if argvs.pickup_flag==True:
					max_load_pen1,max_load_pen2=calc_vehicle_loadpickup_penalty(tvehicle.route,tvehicle)
					aload += max_load_pen1
					aload2 += max_load_pen2

				if argvs.avetime_ape_flag==True:
					atime_error=calc_avetime_APE(tvehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
				elif argvs.avetime_ae_flag==True:
					atime_error=calc_avetime_AE(tvehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
				else:
					atime_error=0.0

				if argvs.avevisits_ape_flag==True:
					avisits_error=calc_avevisits_APE(tvehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
				elif argvs.avevisits_ae_flag==True:
					avisits_error=calc_avevisits_AE(tvehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
				else:
					avisits_error=0.0

				if argvs.avedist_ape_flag==True:
					adist_error=calc_avedist_APE(tvehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
				elif argvs.avedist_ae_flag==True:
					adist_error=calc_avedist_AE(tvehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
				else:
					adist_error=0.0

				if argvs.lastc_flag==True and tvehicle.route[-2].custno!="0":
					atime=tvehicle.lv[-2]
				elif argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
					atime=tvehicle.lv[-3]	
				else:
					atime=tvehicle.lv[-1]

				if argvs.management_etable:
					if argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
						for j in range(len(tvehicle.route)-3):
							etable3=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[j], argvs.management_etable)
							apower=power_etable(tvehicle.route[j],tvehicle.route[j+1],etable3)
					else:
						for j in range(len(tvehicle.route)-2):
							etable3=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[j], argvs.management_etable)
							apower=power_etable(tvehicle.route[j],tvehicle.route[j+1],etable3)
					if argvs.lastc_flag==False:
						etable4=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[-2], argvs.management_etable)
						apower=power_etable(tvehicle.route[-2],tvehicle.route[-1],etable4)
					
				if argvs.management_xtable:
					if argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
						for j in range(len(tvehicle.route)-3):
							xtable3=get_xtable(tvehicle.vtype, tvehicle.lv[j], argvs.management_xtable)
							apower=exp_xtable(tvehicle.route[j],tvehicle.route[j+1],xtable3)
					else:
						for j in range(len(tvehicle.route)-2):
							xtable3=get_xtable(tvehicle.vtype, tvehicle.lv[j], argvs.management_xtable)
							apower=exp_xtable(tvehicle.route[j],tvehicle.route[j+1],xtable3)
					if argvs.lastc_flag==False:
						xtable4=get_xtable(tvehicle.vtype, tvehicle.lv[-2], argvs.management_xtable)
						apower=exp_xtable(tvehicle.route[-2],tvehicle.route[-1],xtable4)


				#未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
				bunass,aunass=0,0
				if argvs.opt_unassigned_flag==True:
					if vehicle.reserved_v_flag==True:
						aunass = len([c for v in tvehicle.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
						bunass = len([c for v in vehicle.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

				ires,cdiff=improved_or_not(atpen,btpen,adist,bdist,aload,bload,aload2,bload2,atime_error,btime_error,avisits_error,bvisits_error,adist_error,bdist_error,argvs,atime,btime,apower,bpower,aexp,bexp,aunass,bunass)

				if ires==True:
					btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp=atpen,adist,aload,aload2,atime_error,avisits_error,adist_error,atime,apower,aexp
					min_penalty,min_c,min_idx,tw_feas_exists=cdiff,c,i,True
					bvfinal_t=atime
	return min_c,min_idx,min_penalty,tw_feas_exists
##2020/04/23


#車両が予約車両 or 通常車両
# in  : veh, argvs
# out : True 予約車両、False 通常車両
#
def is_reserved(veh, argvs):
	return argvs.opt_unassigned_flag and veh.reserved_v_flag


#vehiclesを予約車両と通常車両に分割
# in  : vehicles, argvs
#out  : (1)予約車両、(2)通常車両
#
def get_vehicles_reserved_nonreserved(vehicles,argvs):
	if argvs.opt_unassigned_flag==True:
		reserved_vehicles=[v for v in vehicles if v.reserved_v_flag==True]
		nonreserved_vehicles=[v for v in vehicles if v.reserved_v_flag==False]
		return reserved_vehicles,nonreserved_vehicles
	else:
		return [],vehicles


#平均値からどれぐらいずれているかの割合(APE:絶対パーセント誤差)を算出(時間)
#vehicles:車両全体
#mvehicles:改善対象車両の走行時間
def calc_avetime_APE(vehicles,mvehicles,avetime_ape,lastc_flag,break_flag,argvs,decr_veh=None):
	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化予約車両を取り除く
		reserved_vehicles,vehicles=get_vehicles_reserved_nonreserved(vehicles,argvs)

	if len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])==0:
		return 0.0

	APE_P=0
	APE_M=0
	if lastc_flag==True:
		#作業時間は、lastc_flag=Trueの場合は拠点に帰る前の充電・休憩時間および充電・休憩スポットへの移動時間等は含まない
		last_idx={}
		for v in vehicles:
			if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
				for i in reversed(range(0,len(v.route))):
					if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
						last_idx[v]=i
					else:
						break

		mu=sum([v.lv[last_idx[v]-1]-v.arr[0] for v in vehicles if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])
	else:
		mu=sum([v.lv[-1]-v.arr[0] for v in vehicles if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])							#vehiclesからmvehiclesを除いた到着時刻の合計を算出
	if argvs.opt_unassigned_flag==True:
		mu+=sum([mvehicles[v] for v in mvehicles if is_reserved(v,argvs)==False])											#atimeを加算
	else:
		mu+=sum([mvehicles[v] for v in mvehicles])											#atimeを加算
	if decr_veh and break_flag==False:
		mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])-1)															#車両台数で割る(muとする)
	else:
		mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"and c.custno[0]!="e"]) >= 1 and v.direct_flag==False]))															#車両台数で割る(muとする)
	for v in vehicles:
		if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
			if lastc_flag==True:
				if compare_time(mu)==0:
					sErrMes = "failed to calculate APE margin of time-leveling (aka avetime_ape) due to delivery time = 0"
					raise ValueError(sErrMes)

				diff = math.fabs(mu-(v.lv[last_idx[v]-1]-v.arr[0]))/mu
				if mu <= v.lv[last_idx[v]-1]-v.arr[0]:
					APE_P = max(max(diff-avetime_ape,0),APE_P)                                                    #avetime_apeに収まっている場合は0とする
				else:
					APE_M = max(max(diff-avetime_ape,0),APE_M)                                                    #avetime_apeに収まっている場合は0とする
			else:
				if compare_time(mu)==0:
					sErrMes = "failed to calculate APE margin of time-leveling (aka avetime_ape) due to delivery time = 0"
					raise ValueError(sErrMes)

				diff = math.fabs(mu-(v.lv[-1]-v.arr[0]))/mu                                     #diff=math.fabs(mu-v.到着時刻)/mu)を計算する
				if mu <= v.lv[-1]-v.arr[0]:
					APE_P = max(max(diff-avetime_ape,0),APE_P)                                                    #avetime_apeに収まっている場合は0とする
				else:
					APE_M = max(max(diff-avetime_ape,0),APE_M)                                                    #avetime_apeに収まっている場合は0とする
	for v in mvehicles:
		if argvs.opt_unassigned_flag==True:
			if is_reserved(v,argvs)==True:
				continue
		if compare_time(mu)==0:
			sErrMes = "failed to calculate APE margin of time-leveling (aka avetime_ape) due to delivery time = 0"
			raise ValueError(sErrMes,mvehicles)

		if v!=decr_veh:
			diff = math.fabs(mu-mvehicles[v])/mu 					                        #(ただし、mvehiclesの車両はatimeの値を使う)
			if mu <= mvehicles[v]:
				APE_P = max(max(diff-avetime_ape,0),APE_P)                                                    #avetime_apeに収まっている場合は0とする
			else:
				APE_M = max(max(diff-avetime_ape,0),APE_M)                                                    #avetime_apeに収まっている場合は0とする

	if decr_veh and break_flag==False:
		APE=(APE_P+APE_M)*float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0"]) >= 1 and v.direct_flag==False])-1)/2															#車両台数で割る(muとする)
	else:
		APE=(APE_P+APE_M)*float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0"]) >= 1 and v.direct_flag==False]))/2															#車両台数で割る(muとする)

	if argvs.opt_unassigned_flag==True:
		#取り除いた未割り当て荷物最適化予約車両を元に戻す
		vehicles += reserved_vehicles

	return APE
	#オリジナルコード
	#mu=sum([v.totalcost for v in vehicles if v not in mvehicles])
	#mu+=sum([mvehicles[v] for v in mvehicles])
	#mu/=float(len(vehicles))
	#diffsum = sum([math.fabs(mu-v.totalcost) for v in vehicles if v not in mvehicles])
	#diffsum += sum([math.fabs(mu-mvehicles[v]) for v in mvehicles])
	#APE=(diffsum/mu)/float(len(vehicles))
	#return APE


#各車両の走行時間からどれぐらいずれているかの値(AE:絶対誤差)を算出(時間)
#vehicles:車両全体
#mvehicles:改善対象車両の走行時間
def calc_avetime_AE(vehicles,mvehicles,avetime_ae,lastc_flag,argvs,decr_veh=None):
	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化予約車両を取り除く
		reserved_vehicles,vehicles=get_vehicles_reserved_nonreserved(vehicles,argvs)

	AE=0
	time_veh = []
	if lastc_flag:
		# 対象車両以外の走行時間
		last_idx={}
		for v in vehicles:
			if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
				for i in reversed(range(0,len(v.route))):
					if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
						last_idx[v]=i
					else:
						time_veh.append(v.lv[last_idx[v]-1]-v.arr[0])
						break
	else:
		# 対象車両以外の走行時間
		for v in vehicles:
			if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
				time_veh.append(v.lv[-1]-v.arr[0])

	# 対象車両の走行時間
	time_mveh = []
	for v in mvehicles:
		if argvs.opt_unassigned_flag==True:
			if is_reserved(v,argvs)==True:
				continue
		if v != decr_veh:
			time_mveh.append(mvehicles[v])
	
	# 全ての組み合わせで走行時間のペナルティを計算
	for custs in combinations(time_veh + time_mveh, 2):
		diff = math.fabs(custs[0] - custs[1])
		AE = max(max(diff-avetime_ae, 0),AE)	#avetime_aeに収まっている場合は0とする

	if argvs.opt_unassigned_flag==True:
		#取り除いた未割り当て荷物最適化予約車両を元に戻す
		vehicles += reserved_vehicles

	return AE


#平均値からどれぐらいずれているかの割合(APE:絶対パーセント誤差)を算出(訪問数)
#vehicles:車両全体
#mvehicles:改善対象車両の訪問数
def calc_avevisits_APE(vehicles,mvehicles,avevisits_ape,bulkShipping,break_flag,argvs,decr_veh=None):
	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化予約車両を取り除く
		reserved_vehicles,vehicles=get_vehicles_reserved_nonreserved(vehicles,argvs)

	if len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])==0:
		return 0.0
	
	APE_P=0
	APE_M=0
	if bulkShipping:
		mu=sum([len(r.customers) for v in vehicles for r in v.route[1:-1] if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False and not r.spotid.startswith("e") and not r.spotid.startswith("b") and r.custno!="0"])	#vehiclesからmvehiclesを除いた訪問数の合計を算出
		mu+=sum([mvehicles[v] for v in mvehicles])	#avisitを加算
	else:
		mu=sum([len([i for i in range(1,len(v.route)-1) if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e" and v.route[i].custno!=v.route[i-1].custno]) for v in vehicles if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])	#vehiclesからmvehiclesを除いた訪問数の合計を算出
#		mu=sum([len([i for i in range(1,len(v.route)-1) if v.route[i].custno!="0" and v.route[i].custno!=v.route[i-1].custno]) for v in vehicles if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0"]) >= 1 and v.direct_flag==False])	#vehiclesからmvehiclesを除いた訪問数の合計を算出
		e_cnt = len([r for v in vehicles for r in v.route[1:-1] if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and (r.spotid.startswith("e") or r.spotid.startswith("b"))])
		mu -= e_cnt
		if argvs.opt_unassigned_flag==True:
			mu+=sum([mvehicles[v] for v in mvehicles if is_reserved(v,argvs)==False])	#avisitを加算
		else:
			mu+=sum([mvehicles[v] for v in mvehicles])	#avisitを加算
	if decr_veh and break_flag==False:
		mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])-1)	#車両台数で割る(muとする)
	else:
		mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False]))	#車両台数で割る(muとする)
	for v in vehicles:
		if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
			if compare_time(mu)==0:
				sErrMes = "failed to calculate APE margin of visits-leveling (aka avevisits_ape) due to delivery number = 0"
				raise ValueError(sErrMes)

			if bulkShipping:
				visit_num = 0
				for r in v.route[1:-1]:
					visit_num += len(r.customers)
				e_cnt = len([r for r in v.route[1:-1] for c in r.customers if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and (c.spotid.startswith("e") or c.spotid.startswith("b") or c.custno=="0")])
				diff = math.fabs(mu-(visit_num-e_cnt))/mu
				if mu <= visit_num-e_cnt:
					APE_P = max(max(diff-avevisits_ape,0),APE_P)	#avevisits_apeに収まっている場合は0とする
				else:
					APE_M = max(max(diff-avevisits_ape,0),APE_M)	#avevisits_apeに収まっている場合は0とする
			else:
				e_cnt = len([r for r in v.route[1:-1] if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and (r.spotid.startswith("e") or r.spotid.startswith("b"))])
				diff = math.fabs(mu-(len([i for i in range(1,len(v.route)-1) if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e" and v.route[i].custno!=v.route[i-1].custno])-e_cnt))/mu
				if mu <= len([i for i in range(1,len(v.route)-1) if v.route[i].custno!="0" and v.route[i].custno!=v.route[i-1].custno])-e_cnt:
					APE_P = max(max(diff-avevisits_ape,0),APE_P)	#avevisits_apeに収まっている場合は0とする
				else:
					APE_M = max(max(diff-avevisits_ape,0),APE_M)	#avevisits_apeに収まっている場合は0とする
	for v in mvehicles:
		if argvs.opt_unassigned_flag==True:
			if is_reserved(v,argvs)==True:
				continue
		if compare_time(mu)==0:
			sErrMes = "failed to calculate APE margin of visits-leveling (aka avevisits_ape) due to delivery number = 0"
			raise ValueError(sErrMes,mvehicles)

		if v!=decr_veh:
			diff = math.fabs(mu-mvehicles[v])/mu	#(ただし、mvehiclesの車両はavisitの値を使う)
			if mu <= mvehicles[v]:
				APE_P = max(max(diff-avevisits_ape,0),APE_P)                                                    #avetime_apeに収まっている場合は0とする
			else:
				APE_M = max(max(diff-avevisits_ape,0),APE_M)                                                    #avetime_apeに収まっている場合は0とする

	if decr_veh and break_flag==False:
		APE=(APE_P+APE_M)*float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0"]) >= 1 and v.direct_flag==False])-1)/2															#車両台数で割る(muとする)
	else:
		APE=(APE_P+APE_M)*float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0"]) >= 1 and v.direct_flag==False]))/2															#車両台数で割る(muとする)

	if argvs.opt_unassigned_flag==True:
		#取り除いた未割り当て荷物最適化予約車両を元に戻す
		vehicles += reserved_vehicles

	return APE


#各車両の配送件数からどれぐらいずれているかの値(AE:絶対誤差)を算出(訪問数)
#vehicles:車両全体
#mvehicles:改善対象車両の訪問数
def calc_avevisits_AE(vehicles,mvehicles,avevisits_ae,bulkShipping,argvs,decr_veh=None):
	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化予約車両を取り除く
		reserved_vehicles,vehicles=get_vehicles_reserved_nonreserved(vehicles,argvs)

	AE=0
	visits_veh = []
	if bulkShipping:
		# 対象車両以外の訪問数
		for v in vehicles:
			if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
				visits = 0
				for r in v.route[1:-1]:
					# 充電スポットを除いた訪問数
					visits += len([c for c in r.customers if not c.spotid.startswith("e") and c.custno!="0" and c.custno[0]!="b"])
				visits_veh.append(visits)
	else:
		# 対象車両以外の訪問数
		for v in vehicles:
			if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
				# 充電スポットを除いた訪問数
				visits = len([i for i in range(1,len(v.route)-1) if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and not v.route[i].custno.startswith("e") and v.route[i].custno!=v.route[i-1].custno])
				visits_veh.append(visits)

	# 対象車両の訪問数
	visits_mveh = []
	for v in mvehicles:
		if argvs.opt_unassigned_flag==True:
			if is_reserved(v,argvs)==True:
				continue
		if mvehicles[v] > 0:
			visits_mveh.append(mvehicles[v])
	
	# 全ての組み合わせで訪問数のペナルティを計算
	for custs in combinations(visits_veh + visits_mveh, 2):
		diff = math.fabs(custs[0] - custs[1])
		AE = max(max(diff-avevisits_ae, 0),AE)	#avevisits_aeに収まっている場合は0とする

	if argvs.opt_unassigned_flag==True:
		#取り除いた未割り当て荷物最適化予約車両を元に戻す
		vehicles += reserved_vehicles

	return AE


#平均値からどれぐらいずれているかの割合(APE:絶対パーセント誤差)を算出(距離)
#vehicles:車両全体
#mvehicles:改善対象車両の走行時間
def calc_avedist_APE(vehicles,mvehicles,avedist_ape,lastc_flag,break_flag,argvs,decr_veh=None):
	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化予約車両を取り除く
		reserved_vehicles,vehicles=get_vehicles_reserved_nonreserved(vehicles,argvs)

	if len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])==0:
		return 0.0

	APE_P=0
	APE_M=0
	if lastc_flag==True:
		mu=sum([v.totalcost_wolast for v in vehicles if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])
	else:
		mu=sum([v.totalcost for v in vehicles if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])							#vehiclesからmvehiclesを除いた到着時刻の合計を算出
	if argvs.opt_unassigned_flag==True:
		mu+=sum([mvehicles[v] for v in mvehicles if is_reserved(v,argvs)==False])	#atimeを加算
	else:
		mu+=sum([mvehicles[v] for v in mvehicles])											#atimeを加算
	if decr_veh and break_flag==False:
		mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False])-1)															#車両台数で割る(muとする)
	else:
		mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False]))															#車両台数で割る(muとする)
	for v in vehicles:
		if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
			if lastc_flag==True:
				if mu==0:
					sErrMes = "failed to calculate APE margin of distance-leveling (aka avedist_ape) due to distance = 0"
					raise ValueError(sErrMes)

				diff = math.fabs(mu-v.totalcost_wolast)/mu
				if mu <= v.totalcost_wolast:
					APE_P = max(max(diff-avedist_ape,0),APE_P)                                                    #avetime_apeに収まっている場合は0とする
				else:
					APE_M = max(max(diff-avedist_ape,0),APE_M)                                                    #avetime_apeに収まっている場合は0とする
			else:
				if mu==0:
					sErrMes = "failed to calculate APE margin of distance-leveling (aka avedist_ape) due to distance = 0"
					raise ValueError(sErrMes)

				diff = math.fabs(mu-v.totalcost)/mu                                     #diff=math.fabs(mu-v.走行距離)/mu)を計算する
				if mu <= v.totalcost:
					APE_P = max(max(diff-avedist_ape,0),APE_P)                                                    #avetime_apeに収まっている場合は0とする
				else:
					APE_M = max(max(diff-avedist_ape,0),APE_M)                                                    #avetime_apeに収まっている場合は0とする
	for v in mvehicles:
		if argvs.opt_unassigned_flag==True:
			if is_reserved(v,argvs)==True:
				continue
		if mu==0:
			sErrMes = "failed to calculate APE margin of distance-leveling (aka avedist_ape) due to distance = 0"
			raise ValueError(sErrMes,mvehicles)

		if v!=decr_veh:
			diff = math.fabs(mu-mvehicles[v])/mu 					                        #(ただし、mvehiclesの車両はadistの値を使う)
			if mu <= mvehicles[v]:
				APE_P = max(max(diff-avedist_ape,0),APE_P)                                                    #avetime_apeに収まっている場合は0とする
			else:
				APE_M = max(max(diff-avedist_ape,0),APE_M)                                                    #avetime_apeに収まっている場合は0とする

	if decr_veh and break_flag==False:
		APE=(APE_P+APE_M)*float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0"]) >= 1 and v.direct_flag==False])-1)/2															#車両台数で割る(muとする)
	else:
		APE=(APE_P+APE_M)*float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0"]) >= 1 and v.direct_flag==False]))/2															#車両台数で割る(muとする)

	if argvs.opt_unassigned_flag==True:
		#取り除いた未割り当て荷物最適化予約車両を元に戻す
		vehicles += reserved_vehicles

	return APE
	#オリジナルコード
	#mu=sum([v.totalcost for v in vehicles if v not in mvehicles])
	#mu+=sum([mvehicles[v] for v in mvehicles])
	#mu/=float(len(vehicles))
	#diffsum = sum([math.fabs(mu-v.totalcost) for v in vehicles if v not in mvehicles])
	#diffsum += sum([math.fabs(mu-mvehicles[v]) for v in mvehicles])
	#APE=(diffsum/mu)/float(len(vehicles))
	#return APE


#各車両の走行時間からどれぐらいずれているかの値(AE:絶対誤差)を算出(距離)
#vehicles:車両全体
#mvehicles:改善対象車両の走行時間
def calc_avedist_AE(vehicles,mvehicles,avedist_ae,lastc_flag,argvs,decr_veh=None):
	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化予約車両を取り除く
		reserved_vehicles,vehicles=get_vehicles_reserved_nonreserved(vehicles,argvs)

	AE=0
	dist_veh = []
	if lastc_flag:
		for v in vehicles:
			if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
				dist_veh.append(v.totalcost_wolast)
	else:
		# 対象車両以外の走行時間
		for v in vehicles:
			if v not in mvehicles and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
				dist_veh.append(v.totalcost)

	# 対象車両の走行時間
	dist_mveh = []
	for v in mvehicles:
		if argvs.opt_unassigned_flag==True:
			if is_reserved(v,argvs)==True:
				continue
		if v != decr_veh:
			dist_mveh.append(mvehicles[v])
	
	# 全ての組み合わせで走行時間のペナルティを計算
	for custs in combinations(dist_veh + dist_mveh, 2):
		diff = math.fabs(custs[0] - custs[1])
		AE = max(max(diff-avedist_ae, 0),AE)	#avedist_aeに収まっている場合は0とする

	if argvs.opt_unassigned_flag==True:
		#取り除いた未割り当て荷物最適化予約車両を元に戻す
		vehicles += reserved_vehicles

	return AE


##2020/04/20
def insert_customers_nearest(custs,customers,vehicles,e_spots,argvs):
	tvehicles=copy.deepcopy(vehicles)
	tcustomers=copy.deepcopy(customers)
	cnt=0
	while True:
		rcnt=0
		while len(tcustomers)>0 and rcnt<3:
			min_c,min_v,min_idx,min_pen=None,None,-1,1e+7
			t_min_c,t_min_idx,t_min_pen,tw_feas_exists=None,-1,1e+7,False
			for v in tvehicles:
				if v.direct_flag==True:
					continue
				t_min_c,t_min_idx,t_min_pen,tw_feas_exists=find_a_customer_to_insert_with_mincost(tcustomers,v,e_spots,tvehicles,argvs)
				if tw_feas_exists==True and t_min_pen<min_pen:
					min_c,min_v,min_idx,min_pen=t_min_c,v,t_min_idx,t_min_pen
			if min_v!=None: #succeeded to find an available vehicle. trying to insert min_c with the nearest spot
				ins_feas=insert_a_customer_withspot(custs,tcustomers,min_c,min_v,min_idx,e_spots,argvs)
				if ins_feas==True:
					tcustomers.remove(min_c)
			else:
				tw_rem,tw_rem_v=-1,None
				for v in tvehicles:
					if v.direct_flag==True:
						continue
					if argvs.lastc_flag==False:
						if compare_time(v.route[-1].due_fs-v.st[-1], tw_rem)>0: #最も最終到達時間に余裕ある車両を選ぶ
							tw_rem=v.route[-1].due_fs-v.st[-1]
							tw_rem_v=v
					elif v.route[-2].custno!="0":
						if compare_time(v.route[-2].due_fs-v.st[-2], tw_rem)>0: #最も最終到達時間に余裕ある車両を選ぶ
							tw_rem=v.route[-2].due_fs-v.st[-2]
							tw_rem_v=v
					else:
						if compare_time(v.route[-3].due_fs-v.st[-3], tw_rem)>0: #最も最終到達時間に余裕ある車両を選ぶ
							tw_rem=v.route[-3].due_fs-v.st[-3]
							tw_rem_v=v
				if tw_rem_v == None: #全車両が到達時間違反の処理
					rcnt+=1
					continue

				espots_in_rt=[c for c in tw_rem_v.route if c.custno.startswith("e")]

				min_pen,min_idx,min_spot=1e+7,-1,None
				btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp,aunass=1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12,1e+12
				atpen,adist,aload,aload2,atime_error,avisits_error,adist_error,atime,apower,aexp,bunass=0,0,0,0,0,0,0,0,0,0,0
				if argvs.lastc_flag==True and v.route[-2].custno!="0":
					bvfinal_t=tw_rem_v.lv[-2]
				elif argvs.lastc_flag==True and v.route[-2].custno=="0":
					bvfinal_t=tw_rem_v.lv[-3]
				else:
					bvfinal_t=tw_rem_v.lv[-1]
				for e in e_spots:
					for i in range(0,len(tw_rem_v.route)-1):
						tvehicle=copy.deepcopy(tw_rem_v)
						tvehicles2=copy.deepcopy(vehicles)
						if tw_rem_v.route[i].custno!=e.custno and tw_rem_v.route[i+1].custno!=e.custno and len(espots_in_rt)==0:
							tvehicle.insert_espot_at(i+1,e,argvs)
							for v in tvehicles2:
								if v.vehno==tvehicle.vehno:
									v=tvehicle
									break

							pick_opt_flag=False
							if argvs.pickup_flag==True:
								for cust in tvehicle.route[1:-1]:
									if not cust.custno.startswith("e") and cust.requestType=="PICKUP":
										pick_opt_flag=True
										break

							if argvs.bulkShipping_flag==False and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno!="0":
								tvehicle.insert_customer_at(-1,copy.deepcopy(custs[0]),argvs)
							elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno!="0":
								depo=TiedCustomer(custs[0].custno,custs[0].spotid,custs[0].ready_fs,custs[0].due_fs,custs[0].x,custs[0].y,custs[0].e_rate)
								depo.customers.append(copy.deepcopy(custs[0].customers[0]))
								depo.servt=custs[0].servt
								depo.dem=custs[0].dem
								depo.dem2=custs[0].dem2
								depo.reje_ve=custs[0].reje_ve
								depo.parkt_open=custs[0].parkt_open
								depo.parkt_arrive=custs[0].parkt_arrive
								depo.depotservt=custs[0].depotservt
								depo.additionalcust=[depo]
								depo.demdivideunit=custs[0].demdivideunit
								depo.requestType=custs[0].requestType
								depo.deny_unass=custs[0].deny_unass #未割り当て荷物
								tvehicle.insert_customer_at(-1,depo,argvs)
							elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno=="0" and len(tvehicle.route)-2!=0:
								remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
							elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno=="0" and len(tvehicle.route)-2!=0:
								remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
							elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno=="0" and len(tvehicle.route)-3!=0:
								remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)
							elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno=="0" and len(tvehicle.route)-3!=0:
								remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)

							for j in range(1,len(tvehicle.route)-2):
								atpen+=max(tvehicle.st[j]-tvehicle.route[j].due_fs,0)
							if argvs.lastc_flag==True and tvehicle.route[-2].custno!="0":
								atpen+=max(tvehicle.st[-2]-tvehicle.route[-2].due_fs,0)+max(tvehicle.lv[-2]-tvehicle.endhour,0)
							elif argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
								atpen+=max(tvehicle.lv[-3]-tvehicle.endhour,0)+max(tvehicle.lv[-3]-tvehicle.endhour,0)
							else:
								atpen+=max(tvehicle.st[-2]-tvehicle.route[-2].due_fs,0)+max(tvehicle.st[-1]-tvehicle.route[-1].due_fs,0)+max(tvehicle.lv[-1]-tvehicle.endhour,0)
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(tvehicle,argvs)==False:
								if argvs.lastc_flag==True and tvehicle.route[-2].custno!="0":
									atpen,btpen=return_lutime_penalty(tvehicle.lv[-2]-tvehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-tw_rem_v.arr[0],atpen,btpen)
								elif argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
									atpen,btpen=return_lutime_penalty(tvehicle.lv[-3]-tvehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-tw_rem_v.arr[0],atpen,btpen)
								else:
									atpen,btpen=return_lutime_penalty(tvehicle.lv[-1]-tvehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-tw_rem_v.arr[0],atpen,btpen)

							if argvs.lastc_flag==True:
								adist=tvehicle.totalcost_wolast
							else:
								adist=tvehicle.totalcost

							aload = max(tvehicle.load_onbrd - tvehicle.cap,0.0)
							aload2 = max(tvehicle.load_onbrd2 - tvehicle.cap2,0.0)
							if argvs.pickup_flag==True:
								max_load_pen1,max_load_pen2=calc_vehicle_loadpickup_penalty(tvehicle.route,tvehicle)
								aload += max_load_pen1
								aload2 += max_load_pen2

							if argvs.avetime_ape_flag==True:
								atime_error=calc_avetime_APE(tvehicles2,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avetime_ae_flag==True:
								atime_error=calc_avetime_AE(tvehicles2,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
							else:
								atime_error=0.0

							if argvs.avevisits_ape_flag==True:
								avisits_error=calc_avevisits_APE(tvehicles2,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
							elif argvs.avevisits_ae_flag==True:
								avisits_error=calc_avevisits_AE(tvehicles2,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
							else:
								avisits_error=0.0

							if argvs.avedist_ape_flag==True:
								adist_error=calc_avedist_APE(tvehicles2,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avedist_ae_flag==True:
								adist_error=calc_avedist_AE(tvehicles2,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
							else:
								atime_error=0.0

							if argvs.lastc_flag==True and tvehicle.route[-2].custno!="0":
								atime=tvehicle.lv[-2]
							elif argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
								atime=tvehicle.lv[-3]
							else:
								atime=tvehicle.lv[-1]

							if argvs.management_etable:
								if argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
									for j in range(len(tvehicle.route)-3):
										etable3=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[j], argvs.management_etable)
										apower=power_etable(tvehicle.route[j],tvehicle.route[j+1],etable3)
								else:
									for j in range(len(tvehicle.route)-2):
										etable3=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[j], argvs.management_etable)
										apower=power_etable(tvehicle.route[j],tvehicle.route[j+1],etable3)
								if argvs.lastc_flag==False:
									etable4=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[-2], argvs.management_etable)
									apower=power_etable(tvehicle.route[-2],tvehicle.route[-1],etable4)
								
							if argvs.management_xtable:
								if argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
									for j in range(len(tvehicle.route)-3):
										xtable3=get_xtable(tvehicle.vtype, tvehicle.lv[j], argvs.management_xtable)
										apower=exp_xtable(tvehicle.route[j],tvehicle.route[j+1],xtable3)
								else:
									for j in range(len(tvehicle.route)-2):
										xtable3=get_xtable(tvehicle.vtype, tvehicle.lv[j], argvs.management_xtable)
										apower=exp_xtable(tvehicle.route[j],tvehicle.route[j+1],xtable3)
								if argvs.lastc_flag==False:
									xtable4=get_xtable(tvehicle.vtype, tvehicle.lv[-2], argvs.management_xtable)
									apower=exp_xtable(tvehicle.route[-2],tvehicle.route[-1],xtable4)


							#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
							if argvs.opt_unassigned_flag==True:
								if tvehicle.reserved_v_flag==True:
									aunass = len([c for c in tvehicle.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

							ires,cdiff=improved_or_not(atpen,btpen,adist,bdist,aload,bload,aload2,bload2,atime_error,btime_error,avisits_error,bvisits_error,adist_error,bdist_error,argvs,atime,btime,apower,bpower,aexp,bexp,aunass,bunass)

							if ires==True:
								btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp=atpen,adist,aload,aload2,atime_error,avisits_error,adist_error,atime,apower,aexp
								min_pen,min_idx,min_spot=cdiff,i+1,e
								bvfinal_t=atime


				if min_idx == -1: #充電スポット後の到達時間違反の処理
					rcnt+=1
					continue

				#v_spotid=[c.spotid for c in tw_rem_v.route]
				#v_spotid.insert(min_idx,min_spot.spotid)
				#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-1-len([c for c in v_spotid[1:-1] if c=="0" or c[0]=='b']) #充電スポットはカウントしない
				visitnum=calc_visitnum(tvehicle.route)

				if len(espots_in_rt)==0 and not tw_rem_v.vehno in min_spot.reje_ve and (tw_rem_v.maxvisit==0 or visitnum<=tw_rem_v.maxvisit):
					tvehicle=copy.deepcopy(tw_rem_v)
					tvehicle.insert_espot_at(min_idx,min_spot,argvs)

					pick_opt_flag=False
					if argvs.pickup_flag==True:
						for cust in tvehicle.route[1:-1]:
							if not cust.custno.startswith("e") and cust.requestType=="PICKUP":
								pick_opt_flag=True
								break

					if argvs.bulkShipping_flag==False and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno!="0":
						tvehicle.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno!="0":
						depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
						depo.customers.append(copy.deepcopy(customers[0].customers[0]))
						depo.servt=customers[0].servt
						depo.dem=customers[0].dem
						depo.dem2=customers[0].dem2
						depo.reje_ve=customers[0].reje_ve
						depo.parkt_open=customers[0].parkt_open
						depo.parkt_arrive=customers[0].parkt_arrive
						depo.depotservt=customers[0].depotservt
						depo.additionalcust=[depo]
						depo.demdivideunit=customers[0].demdivideunit
						depo.requestType=customers[0].requestType
						depo.deny_unass=customers[0].deny_unass #未割り当て荷物
						tvehicle.insert_customer_at(-1,depo,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-2].custno=="0" and len(tvehicle.route)-2!=0:
						remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-2].customers[0].custno=="0" and len(tvehicle.route)-2!=0:
						remove_customers_specified([tvehicle.route[-2]],tvehicle,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].custno!="0" and tvehicle.route[len(tvehicle.route)-3].custno=="0" and len(tvehicle.route)-3!=0:
						remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tvehicle.route[len(tvehicle.route)-1].customers[0].custno!="0" and tvehicle.route[len(tvehicle.route)-3].customers[0].custno=="0" and len(tvehicle.route)-3!=0:
						remove_customers_specified([tvehicle.route[-3]],tvehicle,argvs)

					no_park_idx=[]
					for c in tvehicle.route[1:-1]:
						if c.custno!="0" and c.requestType=="DELIVERY":
							break
					else:
						no_park_idx.append(0)

					if tvehicle.load_pickup==0 and tvehicle.load_pickup2==0:
						if tvehicle.route[-2].custno=="0":
							no_park_idx.append(len(tvehicle.route)-2)
						no_park_idx.append(len(tvehicle.route)-1)

					dtable2 = get_dtable(tvehicle.vtype, tvehicle.lv[min_idx], argvs.management_dtable)
					ttable2 = get_ttable(tvehicle.vtype,tvehicle.lv[min_idx], argvs.management_ttable)
					if argvs.management_etable:
						etable2 = get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[min_idx], argvs.management_etable)
					if argvs.management_xtable:
						xtable2 = get_xtable(tvehicle.vtype, tvehicle.lv[min_idx], argvs.management_xtable)
					if dtable2[tvehicle.route[min_idx].spotno][tvehicle.route[min_idx+1].spotno]==-1 or \
						ttable2[tvehicle.route[min_idx].spotno][tvehicle.route[min_idx+1].spotno]==-1 or \
						(argvs.management_etable and etable2[tvehicle.route[min_idx].spotno][tvehicle.route[min_idx+1].spotno]==-1) or \
						(argvs.management_xtable and xtable2[tvehicle.route[min_idx].spotno][tvehicle.route[min_idx+1].spotno]==-1):
						rcnt+=1
						continue
					else:
						depo_idx=[j for j,c in enumerate(tvehicle.route[:-1]) if c.custno=="0"]+[len(tvehicle.route)-1]
						servt_dict={}
						for k in range(len(depo_idx)-1):
							servt_dict[tvehicle.route[depo_idx[k]]]=0
							servt=0
							for j in range(depo_idx[k]+1,depo_idx[k+1]):
								if not tvehicle.route[j].custno.startswith("e") and tvehicle.route[j].requestType=="DELIVERY" and not tvehicle.route[j].custno.startswith("b"):
									servt+=tvehicle.route[j].depotservt
							if tvehicle.route[depo_idx[k]+1].custno!="0":
								servt_dict[tvehicle.route[depo_idx[k]]]+=servt+tvehicle.depotservt
							else:
								servt_dict[tvehicle.route[depo_idx[k]]]+=servt
						#集荷時間
						servt_dict[tvehicle.route[len(tvehicle.route)-1]]=0
						for k in range(1,len(depo_idx)):
							servt=0
							for j in range(depo_idx[k-1]+1,depo_idx[k]):
								if not tvehicle.route[j].custno.startswith("e") and tvehicle.route[j].requestType=="PICKUP":
									servt+=tvehicle.route[j].depotservt
							servt_dict[tvehicle.route[depo_idx[k]]]+=servt

						if check_impassability(customers,tvehicle,tvehicle.lv[min_idx+1],min_idx+2,servt_dict,len(tvehicle.route)-1,no_park_idx,pick_opt_flag,argvs)[0]==False:
							rcnt+=1
							continue

					tw_rem_v.insert_espot_at(min_idx,min_spot,argvs)
					tw_rem_v.chg_batt_dict[min_spot]=0.0

					if argvs.bulkShipping_flag==False and pick_opt_flag==True and tw_rem_v.route[len(tw_rem_v.route)-1].custno!="0" and tw_rem_v.route[len(tw_rem_v.route)-2].custno!="0" and tw_rem_v.route[len(tw_rem_v.route)-3].custno!="0":
						tw_rem_v.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tw_rem_v.route[len(tw_rem_v.route)-1].customers[0].custno!="0" and tw_rem_v.route[len(tw_rem_v.route)-2].customers[0].custno!="0" and tw_rem_v.route[len(tw_rem_v.route)-3].customers[0].custno!="0":
						depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
						depo.customers.append(copy.deepcopy(customers[0].customers[0]))
						depo.servt=customers[0].servt
						depo.dem=customers[0].dem
						depo.dem2=customers[0].dem2
						depo.reje_ve=customers[0].reje_ve
						depo.parkt_open=customers[0].parkt_open
						depo.parkt_arrive=customers[0].parkt_arrive
						depo.depotservt=customers[0].depotservt
						depo.additionalcust=[depo]
						depo.demdivideunit=customers[0].demdivideunit
						depo.requestType=customers[0].requestType
						depo.deny_unass=customers[0].deny_unass #未割り当て荷物
						tw_rem_v.insert_customer_at(-1,depo,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tw_rem_v.route[len(tw_rem_v.route)-1].custno!="0" and tw_rem_v.route[len(tw_rem_v.route)-2].custno=="0" and len(tw_rem_v.route)-2!=0:
						remove_customers_specified([tw_rem_v.route[-2]],tw_rem_v,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tw_rem_v.route[len(tw_rem_v.route)-1].customers[0].custno!="0" and tw_rem_v.route[len(tw_rem_v.route)-2].customers[0].custno=="0" and len(tw_rem_v.route)-2!=0:
						remove_customers_specified([tw_rem_v.route[-2]],tw_rem_v,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tw_rem_v.route[len(tw_rem_v.route)-1].custno!="0" and tw_rem_v.route[len(tw_rem_v.route)-3].custno=="0" and len(tw_rem_v.route)-3!=0:
						remove_customers_specified([tw_rem_v.route[-3]],tw_rem_v,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tw_rem_v.route[len(tw_rem_v.route)-1].customers[0].custno!="0" and tw_rem_v.route[len(tw_rem_v.route)-3].customers[0].custno=="0" and len(tw_rem_v.route)-3!=0:
						remove_customers_specified([tw_rem_v.route[-3]],tw_rem_v,argvs)
			rcnt+=1

		if len(tcustomers)==0:
			break
		else: #違反ならcustomersをシフトして再実行
			cnt+=1

			tcustomers=deque(customers)
			tcustomers.rotate(-cnt)
			tcustomers=list(tcustomers)
			tvehicles=copy.deepcopy(vehicles)

			if cnt==len(customers): #1周したらやめる
				break

	vehicles=tvehicles
	
	if len(tcustomers)==0:
		return True,vehicles
	else: #入れられなかったcustomersを全部入れる 次版からはreturn Falseにする
		min_v,min_idx={},{}
		for c in customers:
			min_v[c],min_idx[c],min_dis=None,-1,1e+7
			min_vt,min_vt_v = -1e+7,vehicles[0] #制約守れない場合用初期値
			tw_feas_exists=False
			for v in vehicles:
				if v.direct_flag==True:
					continue
				for i in range(1,len(v.route)): #制約を守る一番いい位置に入れる
					tv=copy.deepcopy(v)
					if max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"])!=0 and i>max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"]):
						continue
					tv.insert_customer_at(i,c,argvs)

					pick_opt_flag=False
					if argvs.pickup_flag==True:
						for cust in tv.route[1:-1]:
							if not cust.custno.startswith("e") and cust.requestType=="PICKUP":
								pick_opt_flag=True
								break

					if argvs.bulkShipping_flag==False and pick_opt_flag==True and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-2].custno!="0" and tv.route[len(tv.route)-3].custno!="0":
						tv.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-2].customers[0].custno!="0" and tv.route[len(tv.route)-3].customers[0].custno!="0":
						depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
						depo.customers.append(copy.deepcopy(customers[0].customers[0]))
						depo.servt=customers[0].servt
						depo.dem=customers[0].dem
						depo.dem2=customers[0].dem2
						depo.reje_ve=customers[0].reje_ve
						depo.parkt_open=customers[0].parkt_open
						depo.parkt_arrive=customers[0].parkt_arrive
						depo.depotservt=customers[0].depotservt
						depo.additionalcust=[depo]
						depo.demdivideunit=customers[0].demdivideunit
						depo.requestType=customers[0].requestType
						depo.deny_unass=customers[0].deny_unass #未割り当て荷物
						tv.insert_customer_at(-1,depo,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-2].custno=="0" and len(tv.route)-2!=0:
						remove_customers_specified([tv.route[-2]],tv,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-2].customers[0].custno=="0" and len(tv.route)-2!=0:
						remove_customers_specified([tv.route[-2]],tv,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-3].custno=="0" and len(tv.route)-3!=0:
						remove_customers_specified([tv.route[-3]],tv,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-3].customers[0].custno=="0" and len(tv.route)-3!=0:
						remove_customers_specified([tv.route[-3]],tv,argvs)

					no_park_idx=[]
					for cust in tv.route[1:-1]:
						if cust.custno!="0" and cust.requestType=="DELIVERY":
							break
					else:
						no_park_idx.append(0)

					if tv.load_pickup==0 and tv.load_pickup2==0:
						if tv.route[-2].custno=="0":
							no_park_idx.append(len(tv.route)-2)
						no_park_idx.append(len(tv.route)-1)

					#v_spotid=[cust.spotid for cust in v.route]
					#v_spotid.insert(i,c.spotid)
					#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([cust.custno for cust in tv.route[1:-1] if cust.custno.startswith("e") or cust.custno=="0" or cust.custno.startswith("b")]) #充電スポットはカウントしない
					visitnum=calc_visitnum(tv.route)
					tw_feas,diff_pen,enough_q=time_feasible(customers,v,i,c,argvs)

					depo_idx=[j for j,c in enumerate(tv.route[:-1]) if c.custno=="0"]+[len(tv.route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[tv.route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if not tv.route[j].custno.startswith("e") and tv.route[j].requestType=="DELIVERY" and not tv.route[j].custno.startswith("b"):
								servt+=tv.route[j].depotservt
						if tv.route[depo_idx[k]+1].custno!="0":
							servt_dict[tv.route[depo_idx[k]]]+=servt+tv.depotservt
						else:
							servt_dict[tv.route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[tv.route[len(tv.route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if not tv.route[j].custno.startswith("e") and tv.route[j].requestType=="PICKUP":
								servt+=tv.route[j].depotservt
						servt_dict[tv.route[depo_idx[k]]]+=servt

					if tw_feas==True and diff_pen<min_pen and (tv.maxvisit==0 or tv.maxvisit>=visitnum)\
						and check_impassability(customers,tv,tv.lv[0],1,servt_dict,len(tv.route)-1,no_park_idx,pick_opt_flag,argvs)[0] and not tv.vehno in c.reje_ve:
						min_v[c],min_idx[c],min_pen=v,i,diff_pen
						tw_feas_exists=True
				if tw_feas_exists == False: #制約を守れない場合、空き時間の多いvに入れる
					tv=copy.deepcopy(v)
					
					if max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"])!=0:
						tv.insert_customer_at(max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"]),c,argvs)
					else:
						tv.insert_customer_at(-1,c,argvs)

					pick_opt_flag=False
					if argvs.pickup_flag==True:
						for cust in tv.route[1:-1]:
							if not cust.custno.startswith("e") and cust.requestType=="PICKUP":
								pick_opt_flag=True
								break

					if argvs.bulkShipping_flag==False and pick_opt_flag==True and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-2].custno!="0" and tv.route[len(tv.route)-3].custno!="0":
						tv.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-2].customers[0].custno!="0" and tv.route[len(tv.route)-3].customers[0].custno!="0":
						depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
						depo.customers.append(copy.deepcopy(customers[0].customers[0]))
						depo.servt=customers[0].servt
						depo.dem=customers[0].dem
						depo.dem2=customers[0].dem2
						depo.reje_ve=customers[0].reje_ve
						depo.parkt_open=customers[0].parkt_open
						depo.parkt_arrive=customers[0].parkt_arrive
						depo.depotservt=customers[0].depotservt
						depo.additionalcust=[depo]
						depo.demdivideunit=customers[0].demdivideunit
						depo.requestType=customers[0].requestType
						depo.deny_unass=customers[0].deny_unass #未割り当て荷物
						tv.insert_customer_at(-1,depo,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-2].custno=="0" and len(tv.route)-2!=0:
						remove_customers_specified([tv.route[-2]],tv,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-2].customers[0].custno=="0" and len(tv.route)-2!=0:
						remove_customers_specified([tv.route[-2]],tv,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-3].custno=="0" and len(tv.route)-3!=0:
						remove_customers_specified([tv.route[-3]],tv,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-3].customers[0].custno=="0" and len(tv.route)-3!=0:
						remove_customers_specified([tv.route[-3]],tv,argvs)

					no_park_idx=[]
					for cust in tv.route[1:-1]:
						if cust.custno!="0" and cust.requestType=="DELIVERY":
							break
					else:
						no_park_idx.append(0)

					if tv.load_pickup==0 and tv.load_pickup2==0:
						if tv.route[-2].custno=="0":
							no_park_idx.append(len(tv.route)-2)
						no_park_idx.append(len(tv.route)-1)

					#v_spotid=[cust.spotid for cust in v.route]
					#v_spotid.insert(-1,c.spotid)
					#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([cust.custno for cust in tv.route[1:-1] if cust.custno.startswith("e") or cust.custno=="0" or cust.custno.startswith("b")]) #充電スポットはカウントしない
					visitnum=calc_visitnum(tv.route)

					depo_idx=[j for j,c in enumerate(tv.route[:-1]) if c.custno=="0"]+[len(tv.route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[tv.route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if not tv.route[j].custno.startswith("e") and tv.route[j].requestType=="DELIVERY" and not tv.route[j].custno.startswith("b"):
								servt+=tv.route[j].depotservt
						if tv.route[depo_idx[k]+1].custno!="0":
							servt_dict[tv.route[depo_idx[k]]]+=servt+tv.depotservt
						else:
							servt_dict[tv.route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[tv.route[len(tv.route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if not tv.route[j].custno.startswith("e") and tv.route[j].requestType=="PICKUP":
								servt+=tv.route[j].depotservt
						servt_dict[tv.route[depo_idx[k]]]+=servt

					if (tv.maxvisit==0 or tv.maxvisit>=visitnum) and check_impassability(customers,tv,tv.lv[0],1,servt_dict,len(tv.route)-1,no_park_idx,pick_opt_flag,argvs)[0]\
						and not tv.vehno in c.reje_ve:
						if argvs.lastc_flag==False and compare_time(v.slack_t[-1] , min_vt)>0:
							min_vt = v.slack_t[-1]
						elif argvs.lastc_flag==True and v.route[-2].custno!="0" and compare_time(v.slack_t[-2] , min_vt)>0:
							min_vt = v.slack_t[-2]
						elif argvs.lastc_flag==True and v.route[-2].custno=="0" and compare_time(v.slack_t[-3] , min_vt)>0:
							min_vt = v.slack_t[-3]
						min_vt_v = v
			if tw_feas_exists == False: #制約を守れない場合
				min_v[c],min_idx[c],min_pen = min_vt_v,-1,min_pen #車両の最後に入れる
		for c in customers[:]:
			tv=copy.deepcopy(min_v[c])
			if max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"])!=0 and (min_idx[c]>max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"] or min_idx[c]==-1)):
				if min_idx[c]==-1:
					tv.insert_customer_at(max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"]),c,argvs)
				else:
					continue
			else:
				tv.insert_customer_at(min_idx[c],c,argvs)

			pick_opt_flag=False
			if argvs.pickup_flag==True:
				for cust in tv.route[1:-1]:
					if not cust.custno.startswith("e") and cust.requestType=="PICKUP":
						pick_opt_flag=True
						break

			if argvs.bulkShipping_flag==False and pick_opt_flag==True and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-2].custno!="0" and tv.route[len(tv.route)-3].custno!="0":
				tv.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-2].customers[0].custno!="0" and tv.route[len(tv.route)-3].customers[0].custno!="0":
				depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
				depo.customers.append(copy.deepcopy(customers[0].customers[0]))
				depo.servt=customers[0].servt
				depo.dem=customers[0].dem
				depo.dem2=customers[0].dem2
				depo.reje_ve=customers[0].reje_ve
				depo.parkt_open=customers[0].parkt_open
				depo.parkt_arrive=customers[0].parkt_arrive
				depo.depotservt=customers[0].depotservt
				depo.additionalcust=[depo]
				depo.demdivideunit=customers[0].demdivideunit
				depo.requestType=customers[0].requestType
				depo.deny_unass=customers[0].deny_unass #未割り当て荷物
				tv.insert_customer_at(-1,depo,argvs)
			elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-2].custno=="0" and len(tv.route)-2!=0:
				remove_customers_specified([tv.route[-2]],tv,argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-2].customers[0].custno=="0" and len(tv.route)-2!=0:
				remove_customers_specified([tv.route[-2]],tv,argvs)
			elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-3].custno=="0" and len(tv.route)-3!=0:
				remove_customers_specified([tv.route[-3]],tv,argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-3].customers[0].custno=="0" and len(tv.route)-3!=0:
				remove_customers_specified([tv.route[-3]],tv,argvs)

			no_park_idx=[]
			for cust in tv.route[1:-1]:
				if cust.custno!="0" and cust.requestType=="DELIVERY":
					break
			else:
				no_park_idx.append(0)

			if tv.load_pickup==0 and tv.load_pickup2==0:
				if tv.route[-2].custno=="0":
					no_park_idx.append(len(tv.route)-2)
				no_park_idx.append(len(tv.route)-1)

			#v_spotid=[cust.spotid for cust in min_v[c].route]
			#v_spotid.insert(min_idx[c],c.spotid)
			#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([cust.custno for cust in min_v[c].route[1:-1] if cust.custno.startswith("e") or cust.custno=="0" or cust.custno.startswith("b")]) #充電スポットはカウントしない
			visitnum=calc_visitnum(tv.route)

			depo_idx=[j for j,c in enumerate(tv.route[:-1]) if c.custno=="0"]+[len(tv.route)-1]
			servt_dict={}
			for k in range(len(depo_idx)-1):
				servt_dict[tv.route[depo_idx[k]]]=0
				servt=0
				for j in range(depo_idx[k]+1,depo_idx[k+1]):
					if not tv.route[j].custno.startswith("e") and tv.route[j].requestType=="DELIVERY" and not tv.route[j].custno.startswith("b"):
						servt+=tv.route[j].depotservt
				if tv.route[depo_idx[k]+1].custno!="0":
					servt_dict[tv.route[depo_idx[k]]]+=servt+tv.depotservt
				else:
					servt_dict[tv.route[depo_idx[k]]]+=servt
			#集荷時間
			servt_dict[tv.route[len(tv.route)-1]]=0
			for k in range(1,len(depo_idx)):
				servt=0
				for j in range(depo_idx[k-1]+1,depo_idx[k]):
					if not tv.route[j].custno.startswith("e") and tv.route[j].requestType=="PICKUP":
						servt+=tv.route[j].depotservt
				servt_dict[tv.route[depo_idx[k]]]+=servt

			if check_impassability(customers,tv,tv.lv[0],1,servt_dict,len(tv.route)-1,no_park_idx,pick_opt_flag,argvs)[0]==False:
				rcnt+=1
				continue

			if not min_v[c].vehno in c.reje_ve and min_v[c].direct_flag==False and (min_v[c].maxvisit==0 or visitnum<=min_v[c].maxvisit):
				if max([j for j in range(len(min_v[c].route)) if min_v[c].route[j].custno=="0"])==0 or (min_idx[c]<=max([j for j in range(len(min_v[c].route)) if min_v[c].route[j].custno=="0"]) and min_idx[c]!=-1):			
					min_v[c].insert_customer_at(min_idx[c],c,argvs)
					customers.remove(c)
				elif min_idx[c]==-1:
					min_v[c].insert_customer_at(max([j for j in range(len(min_v[c].route)) if min_v[c].route[j].custno=="0"]),c,argvs)
					customers.remove(c)

				if argvs.bulkShipping_flag==False and pick_opt_flag==True and min_v[c].route[len(min_v[c].route)-1].custno!="0" and min_v[c].route[len(min_v[c].route)-2].custno!="0" and min_v[c].route[len(min_v[c].route)-3].custno!="0":
					min_v[c].insert_customer_at(-1,copy.deepcopy(custs[0]),argvs)
				elif argvs.bulkShipping_flag==True and pick_opt_flag==True and min_v[c].route[len(min_v[c].route)-1].customers[0].custno!="0" and min_v[c].route[len(min_v[c].route)-2].customers[0].custno!="0" and min_v[c].route[len(min_v[c].route)-3].customers[0].custno!="0":
					depo=TiedCustomer(custs[0].custno,custs[0].spotid,custs[0].ready_fs,custs[0].due_fs,custs[0].x,custs[0].y,custs[0].e_rate)
					depo.customers.append(copy.deepcopy(custs[0].customers[0]))
					depo.servt=custs[0].servt
					depo.dem=custs[0].dem
					depo.dem2=custs[0].dem2
					depo.reje_ve=custs[0].reje_ve
					depo.parkt_open=custs[0].parkt_open
					depo.parkt_arrive=custs[0].parkt_arrive
					depo.depotservt=custs[0].depotservt
					depo.additionalcust=[depo]
					depo.demdivideunit=custs[0].demdivideunit
					depo.requestType=custs[0].requestType
					depo.deny_unass=custs[0].deny_unass
					min_v[c].insert_customer_at(-1,depo,argvs)
				elif argvs.bulkShipping_flag==False and pick_opt_flag==False and min_v[c].route[len(min_v[c].route)-1].custno!="0" and min_v[c].route[len(min_v[c].route)-2].custno=="0" and len(min_v[c].route)-2!=0:
					remove_customers_specified([min_v[c].route[-2]],min_v[c],argvs)
				elif argvs.bulkShipping_flag==True and pick_opt_flag==False and min_v[c].route[len(min_v[c].route)-1].customers[0].custno!="0" and min_v[c].route[len(min_v[c].route)-2].customers[0].custno=="0" and len(min_v[c].route)-2!=0:
					remove_customers_specified([min_v[c].route[-2]],min_v[c],argvs)
				elif argvs.bulkShipping_flag==False and pick_opt_flag==False and min_v[c].route[len(min_v[c].route)-1].custno!="0" and min_v[c].route[len(min_v[c].route)-3].custno=="0" and len(min_v[c].route)-3!=0:
					remove_customers_specified([min_v[c].route[-3]],min_v[c],argvs)
				elif argvs.bulkShipping_flag==True and pick_opt_flag==False and min_v[c].route[len(min_v[c].route)-1].customers[0].custno!="0" and min_v[c].route[len(min_v[c].route)-3].customers[0].custno=="0" and len(min_v[c].route)-3!=0:
					remove_customers_specified([min_v[c].route[-3]],min_v[c],argvs)
		if len(customers)==0:
			return False,vehicles
		else: #最終エラー処理
			for c in customers[:]:
				for v in vehicles:
					tv=copy.deepcopy(v)
					
					if max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"])!=0:
						tv.insert_customer_at(max([j for j in range(len(tv.route)) if tv.route[j].custno=="0"]),c,argvs)
					else:
						tv.insert_customer_at(-1,c,argvs)

					pick_opt_flag=False
					if argvs.pickup_flag==True:
						for cust in tv.route[1:-1]:
							if not cust.custno.startswith("e") and cust.requestType=="PICKUP":
								pick_opt_flag=True
								break

					if argvs.bulkShipping_flag==False and pick_opt_flag==True and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-2].custno!="0" and tv.route[len(tv.route)-3].custno!="0":
						tv.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==True and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-2].customers[0].custno!="0" and tv.route[len(tv.route)-3].customers[0].custno!="0":
						depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
						depo.customers.append(copy.deepcopy(customers[0].customers[0]))
						depo.servt=customers[0].servt
						depo.dem=customers[0].dem
						depo.dem2=customers[0].dem2
						depo.reje_ve=customers[0].reje_ve
						depo.parkt_open=customers[0].parkt_open
						depo.parkt_arrive=customers[0].parkt_arrive
						depo.depotservt=customers[0].depotservt
						depo.additionalcust=[depo]
						depo.demdivideunit=customers[0].demdivideunit
						depo.requestType=customers[0].requestType
						depo.deny_unass=customers[0].deny_unass #未割り当て荷物
						tv.insert_customer_at(-1,depo,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-2].custno=="0" and len(tv.route)-2!=0:
						remove_customers_specified([tv.route[-2]],tv,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-2].customers[0].custno=="0" and len(tv.route)-2!=0:
						remove_customers_specified([tv.route[-2]],tv,argvs)
					elif argvs.bulkShipping_flag==False and pick_opt_flag==False and tv.route[len(tv.route)-1].custno!="0" and tv.route[len(tv.route)-3].custno=="0" and len(tv.route)-3!=0:
						remove_customers_specified([tv.route[-3]],tv,argvs)
					elif argvs.bulkShipping_flag==True and pick_opt_flag==False and tv.route[len(tv.route)-1].customers[0].custno!="0" and tv.route[len(tv.route)-3].customers[0].custno=="0" and len(tv.route)-3!=0:
						remove_customers_specified([tv.route[-3]],tv,argvs)

					no_park_idx=[]
					for cust in tv.route[1:-1]:
						if cust.custno!="0" and cust.requestType=="DELIVERY":
							break
					else:
						no_park_idx.append(0)

					if tv.load_pickup==0 and tv.load_pickup2==0:
						if tv.route[-2].custno=="0":
							no_park_idx.append(len(tv.route)-2)
						no_park_idx.append(len(tv.route)-1)

					#v_spotid=[cust.spotid for cust in v.route]
					#v_spotid.insert(-1,c.spotid)
					#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([cust.custno for cust in v.route[1:-1] if cust.custno.startswith("e") or cust.custno=="0" or cust.custno.startswith("b")]) #充電スポットはカウントしない
					visitnum=calc_visitnum(tv.route)

					depo_idx=[j for j,c in enumerate(tv.route[:-1]) if c.custno=="0"]+[len(tv.route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[tv.route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if not tv.route[j].custno.startswith("e") and tv.route[j].requestType=="DELIVERY" and not tv.route[j].custno.startswith("b"):
								servt+=tv.route[j].depotservt
						if tv.route[depo_idx[k]+1].custno!="0":
							servt_dict[tv.route[depo_idx[k]]]+=servt+tv.depotservt
						else:
							servt_dict[tv.route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[tv.route[len(tv.route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if not tv.route[j].custno.startswith("e") and tv.route[j].requestType=="PICKUP":
								servt+=tv.route[j].depotservt
						servt_dict[tv.route[depo_idx[k]]]+=servt

					if check_impassability(customers,tv,tv.lv[0],1,servt_dict,len(tv.route)-1,no_park_idx,pick_opt_flag,argvs)[0]==False:
						continue

					if not v.vehno in c.reje_ve and v.direct_flag==False and (v.maxvisit==0 or visitnum<=v.maxvisit):
						if max([j for j in range(len(v.route)) if v.route[j].custno=="0"])!=0:
							v.insert_customer_at(max([j for j in range(len(v.route)) if v.route[j].custno=="0"]),c,argvs)
							customers.remove(c)
						else:
							v.insert_customer_at(-1,c,argvs)
							customers.remove(c)

						if argvs.bulkShipping_flag==False and pick_opt_flag==True and v.route[len(v.route)-1].custno!="0" and v.route[len(v.route)-2].custno!="0" and v.route[len(v.route)-3].custno!="0":
							v.insert_customer_at(-1,copy.deepcopy(custs[0]),argvs)
						elif argvs.bulkShipping_flag==True and pick_opt_flag==True and v.route[len(v.route)-1].customers[0].custno!="0" and v.route[len(v.route)-2].customers[0].custno!="0" and v.route[len(v.route)-3].customers[0].custno!="0":
							depo=TiedCustomer(custs[0].custno,custs[0].spotid,custs[0].ready_fs,custs[0].due_fs,custs[0].x,custs[0].y,custs[0].e_rate)
							depo.customers.append(copy.deepcopy(custs[0].customers[0]))
							depo.servt=custs[0].servt
							depo.dem=custs[0].dem
							depo.dem2=custs[0].dem2
							depo.reje_ve=custs[0].reje_ve
							depo.parkt_open=custs[0].parkt_open
							depo.parkt_arrive=custs[0].parkt_arrive
							depo.depotservt=custs[0].depotservt
							depo.additionalcust=[depo]
							depo.demdivideunit=custs[0].demdivideunit
							depo.requestType=custs[0].requestType
							depo.deny_unass=custs[0].deny_unass #未割り当て荷物
							v.insert_customer_at(-1,depo,argvs)
						elif argvs.bulkShipping_flag==False and pick_opt_flag==False and v.route[len(v.route)-1].custno!="0" and v.route[len(v.route)-2].custno=="0" and len(v.route)-2!=0:
							remove_customers_specified([v.route[-2]],v,argvs)
						elif argvs.bulkShipping_flag==True and pick_opt_flag==False and v.route[len(v.route)-1].customers[0].custno!="0" and v.route[len(v.route)-2].customers[0].custno=="0" and len(v.route)-2!=0:
							remove_customers_specified([v.route[-2]],v,argvs)
						elif argvs.bulkShipping_flag==False and pick_opt_flag==False and v.route[len(v.route)-1].custno!="0" and v.route[len(v.route)-3].custno=="0" and len(v.route)-3!=0:
							remove_customers_specified([v.route[-3]],v,argvs)
						elif argvs.bulkShipping_flag==True and pick_opt_flag==False and v.route[len(v.route)-1].customers[0].custno!="0" and v.route[len(v.route)-3].customers[0].custno=="0" and len(v.route)-3!=0:
							remove_customers_specified([v.route[-3]],v,argvs)

						break
				else:
					sLogBuf = "cannot insert customer into all vehicles"
					if rank==0:
						logging.log(logging.INFO,sLogBuf)
					sLogBuf_veh = "\n"
					used_customers=[]
					for v in vehicles:
						v.output(argvs, sLogBuf_veh,used_customers,divided)
						sLogBuf_veh += "\n"
					if rank==0:
						logging.log(logging.INFO,sLogBuf_veh)
					raise ValueError(sLogBuf)
			return False,vehicles
##2020/04/20

def max_dist_from_table(vtype, start_time, a, b, management_table):
	dtable = None
	table_found=False
	dtable_last = {}
	dtable_last['start_time'] = -1e9
	max_dist = -1e9
	#table検索
	for table in reversed(management_table):
		if (table['vtype'] == vtype):
			if compare_time(float(dtable_last['start_time']) , float(table['start_time']))<0:
				dtable_last = table
			dtable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_dist = max(dist_dtable(a,b,dtable), max_dist)
		if (table['vtype'] == 'time_common'):
			if compare_time(float(dtable_last['start_time']) , float(table['start_time']))<0:
				dtable_last = table
			dtable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_dist = max(dist_dtable(a,b,dtable), max_dist)
		if (table['vtype'] == 'common'):
			if compare_time(float(dtable_last['start_time']) , float(table['start_time']))<0:
				dtable_last = table
			dtable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_dist = max(dist_dtable(a,b,dtable), max_dist)
	#該当の車両識別番号のtableが見つかった場合
	if table_found:
		if max_dist!=-1e9:
			return max_dist
		else:
			return dtable_last['table'][a.spotno][b.spotno]
	

	if max_dist==-1e9:
		sErrMes = "distance table (aka dtable) does not exist (vtype = "+str(vtype)+", start_time = "+str(start_time)+")"
		raise ValueError(sErrMes)
	
	return max_dist

def max_time_from_table(vtype, start_time, a, b, management_table):
	ttable = None
	table_found=False
	ttable_last = {}
	ttable_last['start_time'] = -1e9
	max_time = -1e9
	#table検索
	for table in reversed(management_table):
		if (table['vtype'] == vtype):
			if compare_time(float(ttable_last['start_time']) , float(table['start_time']))<0:
				ttable_last = table
			ttable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_time = max(travel_time(a,b,ttable), max_time)
		if (table['vtype'] == 'time_common'):
			if compare_time(float(ttable_last['start_time']) , float(table['start_time']))<0:
				ttable_last = table
			ttable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_time = max(travel_time(a,b,ttable), max_time)
		if (table['vtype'] == 'common'):
			if compare_time(float(ttable_last['start_time']) , float(table['start_time']))<0:
				ttable_last = table
			ttable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_time = max(travel_time(a,b,ttable), max_time)
	#該当の車両識別番号のtableが見つかった場合
	if table_found:
		if max_time!=-1e9:
			return max_time
		else:
			return ttable_last['table'][a.spotno][b.spotno]

	if max_time==-1e9:
		sErrMes = "eta table (aka ttable) does not exist (vtype = "+str(vtype)+", start_time = "+str(start_time)+")"
		raise ValueError(sErrMes)
	
	return max_time

def max_e_from_table(vtype, etype, start_time, a, b, management_table):
	etable = None
	table_found=False
	etable_last = {}
	etable_last['start_time'] = -1e9
	max_e = -1e9
	#table検索(運搬車識別番号がある場合)
	for table in reversed(management_table):
		if (table['vtype'] == vtype and table['etype'] == etype):
			if compare_time(float(etable_last['start_time']) , float(table['start_time']))<0:
				etable_last = table
			etable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_e = max(power_etable(a,b,etable), max_e)
		if (table['vtype'] == 'time_common' and table['etype'] == 'time_common'):
			if compare_time(float(etable_last['start_time']) , float(table['start_time']))<0:
				etable_last = table
			etable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_e = max(power_etable(a,b,etable), max_e)
		if (table['vtype'] == 'common' and table['etype'] == 'common'):
			if compare_time(float(etable_last['start_time']) , float(table['start_time']))<0:
				etable_last = table
			etable = table['table']
			table_found=True
			if compare_time(float(table['start_time']) , start_time)>=0:
				max_e = max(power_etable(a,b,etable), max_e)
	#該当の車両識別番号のtableが見つかった場合
	if table_found:
		if max_e!=-1e9:
			return max_e
		else:
			return etable_last['table'][a.spotno][b.spotno]

	if max_e==-1e9:
		sErrMes = "epower table (aka etable) does not exist (vtype = "+str(vtype)+", etype = "+str(etype)+", start_time = "+str(start_time)+")"
		raise ValueError(sErrMes)
	
	return max_e

def reconstruct_routes_withcharging(customers,vehicles,espots,argvs):
	#スポットを挿入し，必要十分な充電を行う。
	sLogBuf = "\n===== reconstruct_routes_withcharging start =====\n"
	if rank==0:
		logging.log(logging.INFO,sLogBuf)

	nearest_espot,ins_idx={},{}
	q_to_charge={}
	customers_tw_broken={}
	for v in vehicles:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
			servt_dict={}
			for k in range(len(depo_idx)-1):
				servt_dict[v.route[depo_idx[k]]]=0
				servt=0
				for j in range(depo_idx[k]+1,depo_idx[k+1]):
					if not v.route[j].custno.startswith("e") and v.route[j].requestType=="DELIVERY" and not v.route[j].custno.startswith("b"):
						servt+=v.route[j].depotservt
				if v.route[depo_idx[k]+1].custno!="0":
					servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
				else:
					servt_dict[v.route[depo_idx[k]]]+=servt
			#集荷時間
			servt_dict[v.route[len(v.route)-1]]=0
			for k in range(1,len(depo_idx)):
				servt=0
				for j in range(depo_idx[k-1]+1,depo_idx[k]):
					if not v.route[j].custno.startswith("e") and v.route[j].requestType=="PICKUP":
						servt+=v.route[j].depotservt
				servt_dict[v.route[depo_idx[k]]]+=servt

			no_park_idx=[]
			for c in v.route[1:-1]:
				if c.custno!="0" and c.requestType=="DELIVERY":
					break
			else:
				no_park_idx.append(0)

			if v.load_pickup==0 and v.load_pickup2==0:
				if v.route[-2].custno=="0":
					no_park_idx.append(len(v.route)-2)
				no_park_idx.append(len(v.route)-1)
			
			neg_ind=[i for i in range(1,len(v.route)) if (v.rem_batt[i] - v.e_margin) <-1e-3]#バッテリー残量がmargin未満になる配送先 拠点除く
			#電欠が生じる顧客があれば，充電が必要となるので行う。
			if len(neg_ind)>=1:
				#there is not enough power.
				#check if the route contains any espot.
				espots_in_rt=[r for r in v.route if r.custno.startswith("e")]
				espots_idx_in_rt=[v.route.index(r) for r in v.route if r.custno.startswith("e")]
				if len(espots_in_rt)==0:
					first_neg_ind=min(neg_ind)
					espot_idx_to_insert=first_neg_ind
					exist_reachable_espots=False

					if not argvs.management_etable: #電力テーブルが無い場合
						av_dist=(v.rem_batt[espot_idx_to_insert-1] - v.e_margin)/v.e_cost #残量で移動できる距離
					else: #電力テーブルが有る場合
						av_batt=v.rem_batt[espot_idx_to_insert-1] - v.e_margin #残量

					espot_reachable=[] #残量で到達可能なスポット
					#時間枠を壊さず行き来できるスポットが存在するルートないの位置(=espot_idx_to_insert)を見つける
					while exist_reachable_espots==False:
						#ルートに挿入することのできる充電スポットを探索
						if not argvs.management_etable: #電力テーブルが無い場合
							for e in espots:
								from_c,to_c=v.route[espot_idx_to_insert-1],e
								dtable1 = get_dtable(v.vtype, v.lv[espot_idx_to_insert-1], argvs.management_dtable)
								ttable1 = get_ttable(v.vtype, v.lv[espot_idx_to_insert-1], argvs.management_ttable)
								if argvs.management_etable:
									etable1 = get_etable(v.vtype, v.etype, v.lv[espot_idx_to_insert-1], argvs.management_etable)
								if argvs.management_xtable:
									xtable1 = get_xtable(v.vtype, v.lv[espot_idx_to_insert-1], argvs.management_xtable)
								if dtable1[from_c.spotno][to_c.spotno]==-1 or \
									ttable1[from_c.spotno][to_c.spotno]==-1 or \
									(argvs.management_etable and etable1[from_c.spotno][to_c.spotno]==-1) or \
									(argvs.management_xtable and xtable1[from_c.spotno][to_c.spotno]==-1):
									continue

								arr_t=v.lv[espot_idx_to_insert-1]+ttable1[from_c.spotno][e.spotno]*v.drskill

								if from_c.spotid!=e.spotid:
									st_t = max(arr_t+e.parkt_arrive,e.ready_fs)+e.parkt_open
								else:
									st_t = max(arr_t,e.ready_fs)
								if compare_time(st_t,e.due_fs)>0:
									continue
								
								if (dtable1[from_c.spotno][to_c.spotno]/1000)<=av_dist: #充電量が足りるかどうかのチェック
									#時間枠チェックを追加
									cur_rem_batt=v.rem_batt[espot_idx_to_insert-1]
									rem_batt_at_spot=cur_rem_batt-(dtable1[from_c.spotno][to_c.spotno]/1000.0)/v.e_cost
									ins_idx[v.vehno]=espot_idx_to_insert #ins_idx[v.vehno]は，運搬車vにスポットを挿入する位置
									#route[ins_idx-1]->e->route[ins_idx]
									q_to_cust_e={}
									c_q_to_charge_e={}
									tw_feasible_e=True
									route_feasible_e=True
									for i in range(ins_idx[v.vehno],len(v.route)-1): #ins_idx[v.vehno](eの直後)から拠点までを順次チェックしてどこかでダメになったらやめる
										lv_time = v.lv[espot_idx_to_insert-1]+ttable1[v.route[espot_idx_to_insert-1].spotno][e.spotno]*v.drskill#仮のlv_time(=arr_time)
										dist_to_icust = max_dist_from_table(v.vtype,lv_time,e,v.route[ins_idx[v.vehno]],argvs.management_dtable) #eからins_idx[v.vehno](eの直後)のチェック
										arr_time = lv_time+max_time_from_table(v.vtype,lv_time,e,v.route[ins_idx[v.vehno]],argvs.management_ttable)*v.drskill
										dlist=[]
										for j in range(ins_idx[v.vehno],i): #iは拠点までの途中
											if v.route[j] in servt_dict:
												if v.route[j].spotid!=v.route[j-1].spotid:
													lv_time = max(arr_time+v.route[j].parkt_arrive,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
												else:
													lv_time = max(arr_time,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
											else:
												if v.route[j].spotid!=v.route[j-1].spotid:
													lv_time = max(arr_time+v.route[j].parkt_arrive,v.route[j].ready_fs)+v.route[j].servt*v.opskill
												else:
													lv_time = max(arr_time,v.route[j].ready_fs)+v.route[j].servt*v.opskill
											if v.route[j].spotid!=v.route[j-1].spotid:
												lv_time+=v.route[j].parkt_open
											dtable2 = get_dtable(v.vtype, lv_time, argvs.management_dtable)
											ttable2 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
											dlist.append(dtable2[v.route[j].spotno][v.route[j+1].spotno])
											arr_time = lv_time + ttable2[v.route[j].spotno][v.route[j+1].spotno]*v.drskill

										if v.route[i] in servt_dict:
											if v.route[i].spotid!=v.route[i-1].spotid:
												lv_time = max(arr_time+v.route[i].parkt_arrive,v.route[i].ready_fs)+servt_dict[v.route[i]]*v.opskill
											else:
												lv_time = max(arr_time,v.route[i].ready_fs)+servt_dict[v.route[i]]*v.opskill
										else:
											if v.route[i].spotid!=v.route[i-1].spotid:
												lv_time = max(arr_time+v.route[i].parkt_arrive,v.route[i].ready_fs)+v.route[i].servt*v.opskill
											else:
												lv_time = max(arr_time,v.route[i].ready_fs)+v.route[i].servt*v.opskill
										if v.route[i].spotid!=v.route[i-1].spotid:
											lv_time+=v.route[i].parkt_open
										dtable3 = get_dtable(v.vtype, lv_time, argvs.management_dtable)
										dist_to_icust+=sum(dlist) #iまで足す
										dist_to_icust+=dtable3[v.route[i].spotno][v.route[-1].spotno] #iから拠点に帰ることを想定(電力量計算のため)
										q_to_cust_e[i]=(dist_to_icust/1000.0)/v.e_cost #route[from_idx]からroute[i]までに必要な電力
										c_q_to_charge_e[i]=q_to_cust_e[i]-rem_batt_at_spot + v.e_margin #route[from_idx]からroute[i]までに必要な電気の量

										#時間枠のチェック
										if v.route[ins_idx[v.vehno]-1] in servt_dict:
											if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
												lv_time=max(v.arr[ins_idx[v.vehno]-1]+v.route[ins_idx[v.vehno]-1].parkt_arrive,v.route[ins_idx[v.vehno]-1].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]-1]]*v.opskill
											else:
												lv_time=max(v.arr[ins_idx[v.vehno]-1],v.route[ins_idx[v.vehno]-1].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]-1]]*v.opskill
										else:
											if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
												lv_time=max(v.arr[ins_idx[v.vehno]-1]+v.route[ins_idx[v.vehno]-1].parkt_arrive,v.route[ins_idx[v.vehno]-1].ready_fs)+v.route[ins_idx[v.vehno]-1].servt*v.opskill
											else:
												lv_time=max(v.arr[ins_idx[v.vehno]-1],v.route[ins_idx[v.vehno]-1].ready_fs)+v.route[ins_idx[v.vehno]-1].servt*v.opskill
										if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
											lv_time+=v.route[ins_idx[v.vehno]-1].parkt_open
										ttable3 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
										arr_time=lv_time+ttable3[v.route[ins_idx[v.vehno]-1].spotno][e.spotno]*v.drskill
										lv_time=max(arr_time,e.ready_fs)+c_q_to_charge_e[i]/e.e_rate+e.servt*v.opskill
										# if e.spotid!=v.route[ins_idx[v.vehno]-1].spotid:
										# 	lv_time+=e.parkt_open
										ttable4 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
										dtable4 = get_dtable(v.vtype, lv_time, argvs.management_dtable)
										if argvs.management_etable:
											etable4 = get_etable(v.vtype, v.etype, lv_time, argvs.management_etable)
										if argvs.management_xtable:
											xtable4 = get_xtable(v.vtype, lv_time, argvs.management_xtable)
										if ttable4[e.spotno][v.route[ins_idx[v.vehno]].spotno]==-1 or \
											dtable4[e.spotno][v.route[ins_idx[v.vehno]].spotno]==-1 or \
											(argvs.management_etable and etable4[e.spotno][v.route[ins_idx[v.vehno]].spotno]==-1) or \
											(argvs.management_xtable and xtable4[e.spotno][v.route[ins_idx[v.vehno]].spotno]==-1):
											route_feasible_e=False
											break
										else:
											arr_time=lv_time+ttable4[e.spotno][v.route[ins_idx[v.vehno]].spotno]*v.drskill
											if v.route[ins_idx[v.vehno]] in servt_dict:
												if v.route[ins_idx[v.vehno]].spotid!=e.spotid and (ins_idx[v.vehno]!=len(v.route)-1 or v.load_pickup!=0 or v.load_pickup2!=0) and v.route[ins_idx[v.vehno]-1].custno!="0":
													lv_time = max(arr_time+v.route[ins_idx[v.vehno]].parkt_arrive,v.route[ins_idx[v.vehno]].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]]]*v.opskill
												else:
													lv_time = max(arr_time,v.route[ins_idx[v.vehno]].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]]]*v.opskill
											else:
												if v.route[ins_idx[v.vehno]].spotid!=e.spotid and (ins_idx[v.vehno]!=len(v.route)-1 or v.load_pickup!=0 or v.load_pickup2!=0) and v.route[ins_idx[v.vehno]-1].custno!="0":
													lv_time = max(arr_time+v.route[ins_idx[v.vehno]].parkt_arrive,v.route[ins_idx[v.vehno]].ready_fs)+v.route[ins_idx[v.vehno]].servt*v.opskill
												else:
													lv_time = max(arr_time,v.route[ins_idx[v.vehno]].ready_fs)+v.route[ins_idx[v.vehno]].servt*v.opskill
											if v.route[ins_idx[v.vehno]].spotid!=e.spotid and (ins_idx[v.vehno]!=len(v.route)-1 or v.load_pickup!=0 or v.load_pickup2!=0) and v.route[ins_idx[v.vehno]-1].custno!="0":
												lv_time+=v.route[ins_idx[v.vehno]].parkt_open

											pick_opt_flag=False
											if argvs.pickup_flag==True:
												for c in v.route[1:-1]:
													if not c.custno.startswith("e") and c.requestType=="PICKUP":
														pick_opt_flag=True
														break

											depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

											if check_impassability(customers,v,lv_time,ins_idx[v.vehno]+1,servt_dict,len(v.route)-1,no_park_idx,pick_opt_flag,argvs)[0]==False:
												route_feasible_e=False
												break

										arr_time=lv_time+ttable4[e.spotno][v.route[ins_idx[v.vehno]].spotno]*v.drskill
										if e.spotid!=v.route[ins_idx[v.vehno]].spotid:
											st_time=max(arr_time+v.route[ins_idx[v.vehno]].parkt_arrive,v.route[ins_idx[v.vehno]].ready_fs)+v.route[ins_idx[v.vehno]].parkt_open
										else:
											st_time=max(arr_time,v.route[ins_idx[v.vehno]].ready_fs)

										if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and ((argvs.lastc_flag==True and ins_idx[v.vehno]==len(v.route)-1) or compare_time(st_time, v.route[ins_idx[v.vehno]].due_fs)>0): #ins_idx[v.vehno](eの直後)の時間チェック
											tw_feasible_e=False
											break

										#checking time feasibility at j-th customer after i-th customer
										for j in range(ins_idx[v.vehno],i): #jはins_idx[v.vehno](eの直後)から途中までのチェック
											from_c,to_c=v.route[j],v.route[j+1]
											if from_c in servt_dict:
												if from_c.spotid!=v.route[j-1].spotid:
													lv_time=max(arr_time+from_c.parkt_arrive,from_c.ready_fs)+servt_dict[from_c]*v.opskill
												else:
													lv_time=max(arr_time,from_c.ready_fs)+servt_dict[from_c]*v.opskill
											else:
												if from_c.spotid!=v.route[j-1].spotid:
													lv_time=max(arr_time+from_c.parkt_arrive,from_c.ready_fs)+from_c.servt*v.opskill
												else:
													lv_time=max(arr_time,from_c.ready_fs)+from_c.servt*v.opskill
											if from_c.spotid!=v.route[j-1].spotid:
												lv_time+=from_c.parkt_open
											ttable5 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
											arr_time=lv_time+ttable5[from_c.spotno][to_c.spotno]*v.drskill
											if from_c.spotid!=to_c.spotid:
												st_time=max(arr_time+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
											else:
												st_time=max(arr_time,to_c.ready_fs)

											if argvs.lastc_flag==True and (v.route[-2].custno=="0" and j>=len(v.route)-2):
												continue
											if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(st_time, to_c.due_fs)>0:
												tw_feasible_e=False
												break
									
									if tw_feasible_e==True and route_feasible_e==True and not v.vehno in e.reje_ve:
										exist_reachable_espots=True
										espot_reachable+=[e]
							if exist_reachable_espots==False:
								espot_idx_to_insert-=1
								av_dist=(v.rem_batt[espot_idx_to_insert-1] - v.e_margin)/v.e_cost #残った電力で到達可能な距離
							if espot_idx_to_insert<0:
								break
						else: #電力テーブルが有る場合
							for e in espots:
								from_c,to_c=v.route[espot_idx_to_insert-1],e
								dtable1 = get_dtable(v.vtype, v.lv[espot_idx_to_insert-1], argvs.management_dtable)
								ttable1 = get_ttable(v.vtype, v.lv[espot_idx_to_insert-1], argvs.management_ttable)
								if argvs.management_etable:
									etable1 = get_etable(v.vtype, v.etype, v.lv[espot_idx_to_insert-1], argvs.management_etable)
								if argvs.management_xtable:
									xtable1 = get_xtable(v.vtype, v.lv[espot_idx_to_insert-1], argvs.management_xtable)
								if dtable1[from_c.spotno][to_c.spotno]==-1 or \
									ttable1[from_c.spotno][to_c.spotno]==-1 or \
									(argvs.management_etable and etable1[from_c.spotno][to_c.spotno]==-1) or \
									(argvs.management_xtable and xtable1[from_c.spotno][to_c.spotno]==-1):
									continue

								arr_t=v.lv[espot_idx_to_insert-1]+ttable1[from_c.spotno][e.spotno]*v.drskill
								if from_c.spotid!=e.spotid:
									st_t=max(arr_t+e.parkt_arrive,e.ready_fs)+e.parkt_open
								else:
									st_t=max(arr_t,e.ready_fs)

								if compare_time(st_t,e.due_fs)>0:
									continue

								if (etable1[from_c.spotno][e.spotno])<=av_batt:	#充電量が足りるかどうかのチェック
									#時間枠チェックを追加
									cur_rem_batt=v.rem_batt[espot_idx_to_insert-1]
									rem_batt_at_spot=cur_rem_batt-etable1[from_c.spotno][to_c.spotno]
									ins_idx[v.vehno]=espot_idx_to_insert #ins_idx[v.vehno]は，運搬車vにスポットを挿入する位置
									#route[ins_idx-1]->e->route[ins_idx]
									q_to_cust_e={}
									c_q_to_charge_e={}
									tw_feasible_e=True
									route_feasible_e=True
									for i in range(ins_idx[v.vehno],len(v.route)-1): #ins_idx[v.vehno](eの直後)から拠点までを順次チェックしてどこかでダメになったらやめる
										ttable14=get_ttable(v.vtype,v.lv[ins_idx[v.vehno]-1],argvs.management_ttable)
										lv_time=v.lv[ins_idx[v.vehno]-1]+ttable14[v.route[ins_idx[v.vehno]-1].spotno][e.spotno]*v.drskill #仮のlv_time(=arr_time)
										q_to_icust=max_e_from_table(v.vtype,v.etype,lv_time,e,v.route[ins_idx[v.vehno]],argvs.management_etable) #eからins_idx[v.vehno](eの直後)のチェック
										arr_time=lv_time+max_time_from_table(v.vtype,lv_time,e,v.route[ins_idx[v.vehno]],argvs.management_ttable)*v.drskill
										qlist=[]
										for j in range(ins_idx[v.vehno],i):
											if v.route[j] in servt_dict:
												if v.route[j].spotid!=v.route[j-1].spotid:
													lv_time=max(arr_time+v.route[j].parkt_arrive,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
												else:
													lv_time=max(arr_time,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
											else:
												if v.route[j].spotid!=v.route[j-1].spotid:
													lv_time=max(arr_time+v.route[j].parkt_arrive,v.route[j].ready_fs)+v.route[j].servt*v.opskill
												else:
													lv_time=max(arr_time,v.route[j].ready_fs)+v.route[j].servt*v.opskill
											if v.route[j].spotid!=v.route[j-1].spotid:
												lv_time+=v.route[j].parkt_open
											etable5=get_etable(v.vtype,v.etype,lv_time,argvs.management_etable)
											ttable15=get_ttable(v.vtype,lv_time,argvs.management_ttable)
											qlist.append(etable5[v.route[j].spotno][v.route[j+1].spotno]) #### #iは拠点までの途中
											arr_time=lv_time+ttable15[v.route[j].spotno][v.route[j+1].spotno]*v.drskill
										q_to_icust+=sum(qlist) #iまで足す

										if v.route[i] in servt_dict:
											if v.route[i].spotid!=v.route[i-1].spotid:
												lv_time=max(arr_time+v.route[i].parkt_arrive,v.route[i].ready_fs)+servt_dict[v.route[i]]*v.opskill
											else:
												lv_time=max(arr_time,v.route[i].ready_fs)+servt_dict[v.route[i]]*v.opskill
										else:
											if v.route[i].spotid!=v.route[i-1].spotid:
												lv_time=max(arr_time+v.route[i].parkt_arrive,v.route[i].ready_fs)+v.route[i].servt*v.opskill
											else:
												lv_time=max(arr_time,v.route[i].ready_fs)+v.route[i].servt*v.opskill
										if v.route[i].spotid!=v.route[i-1].spotid:
											lv_time+=v.route[i].parkt_open
										etable6=get_etable(v.vtype,v.etype,lv_time,argvs.management_etable)

										q_to_icust+=etable6[v.route[i].spotno][v.route[-1].spotno] #iから拠点に帰ることを想定(電力量計算のため)
										q_to_cust_e[i]=q_to_icust #route[from_idx]からroute[i]までに必要な電力
										c_q_to_charge_e[i]=q_to_cust_e[i]-rem_batt_at_spot + v.e_margin #route[from_idx]からroute[i]までに必要な電気の量

										#時間枠のチェック
										if v.route[ins_idx[v.vehno]-1] in servt_dict:
											if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
												lv_time=max(v.arr[ins_idx[v.vehno]-1]+v.route[ins_idx[v.vehno]-1].parkt_arrive,v.route[ins_idx[v.vehno]-1].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]-1]]*v.opskill
											else:
												lv_time=max(v.arr[ins_idx[v.vehno]-1],v.route[ins_idx[v.vehno]-1].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]-1]]*v.opskill
										else:
											if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
												lv_time=max(v.arr[ins_idx[v.vehno]-1]+v.route[ins_idx[v.vehno]-1].parkt_arrive,v.route[ins_idx[v.vehno]-1].ready_fs)+v.route[ins_idx[v.vehno]-1].servt*v.opskill
											else:
												lv_time=max(v.arr[ins_idx[v.vehno]-1],v.route[ins_idx[v.vehno]-1].ready_fs)+v.route[ins_idx[v.vehno]-1].servt*v.opskill
										if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
											lv_time+=v.route[ins_idx[v.vehno]-1].parkt_open
										ttable6 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
										arr_time=lv_time+ttable6[v.route[ins_idx[v.vehno]-1].spotno][e.spotno]*v.drskill
										lv_time=max(arr_time,e.ready_fs)+c_q_to_charge_e[i]/e.e_rate+e.servt*v.opskill
										# if e.spotid!=v.route[ins_idx[v.vehno]-1].spotid:
										# 	lv_time+=e.parkt_open
										ttable7 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
										dtable7 = get_dtable(v.vtype, lv_time, argvs.management_dtable)
										if argvs.management_etable:
											etable7 = get_etable(v.vtype, v.etype, lv_time, argvs.management_etable)
										if argvs.management_xtable:
											xtable7 = get_xtable(v.vtype, lv_time, argvs.management_xtable)
										if ttable7[e.spotno][v.route[ins_idx[v.vehno]].spotno]==-1 or \
											dtable7[e.spotno][v.route[ins_idx[v.vehno]].spotno]==-1 or \
											(argvs.management_etable and etable7[e.spotno][v.route[ins_idx[v.vehno]].spotno]==-1) or \
											(argvs.management_xtable and xtable7[e.spotno][v.route[ins_idx[v.vehno]].spotno]==-1):
											route_feasible_e=False
											break
										else:
											arr_time=lv_time+ttable7[e.spotno][v.route[ins_idx[v.vehno]].spotno]*v.drskill
											if v.route[ins_idx[v.vehno]] in servt_dict:
												if v.route[ins_idx[v.vehno]].spotid!=e.spotid and (ins_idx[v.vehno]!=len(v.route)-1 or v.load_pickup!=0 or v.load_pickup2!=0) and v.route[ins_idx[v.vehno]].custno!="0":
													lv_time = max(arr_time+v.route[ins_idx[v.vehno]].parkt_arrive,v.route[ins_idx[v.vehno]].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]]]*v.opskill
												else:
													lv_time = max(arr_time,v.route[ins_idx[v.vehno]].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]]]*v.opskill
											else:
												if v.route[ins_idx[v.vehno]].spotid!=e.spotid and (ins_idx[v.vehno]!=len(v.route)-1 or v.load_pickup!=0 or v.load_pickup2!=0) and v.route[ins_idx[v.vehno]].custno!="0":
													lv_time = max(arr_time+v.route[ins_idx[v.vehno]].parkt_arrive,v.route[ins_idx[v.vehno]].ready_fs)+v.route[ins_idx[v.vehno]].servt*v.opskill
												else:
													lv_time = max(arr_time,v.route[ins_idx[v.vehno]].ready_fs)+v.route[ins_idx[v.vehno]].servt*v.opskill
											if v.route[ins_idx[v.vehno]].spotid!=e.spotid and (ins_idx[v.vehno]!=len(v.route)-1 or v.load_pickup!=0 or v.load_pickup2!=0) and v.route[ins_idx[v.vehno]].custno!="0":
												lv_time+=v.route[ins_idx[v.vehno]].parkt_open

											pick_opt_flag=False
											if argvs.pickup_flag==True:
												for c in v.route[1:-1]:
													if not c.custno.startswith("e") and c.requestType=="PICKUP":
														pick_opt_flag=True
														break	

											depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
											servt_dict={}
											for k in range(len(depo_idx)-1):
												servt_dict[v.route[depo_idx[k]]]=0
												servt=0
												for j in range(depo_idx[k]+1,depo_idx[k+1]):
													if not v.route[j].custno.startswith("e") and v.route[j].requestType=="DELIVERY" and not v.route[j].custno.startswith("b"):
														servt+=v.route[j].depotservt
												if v.route[depo_idx[k]+1].custno!="0":
													servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
												else:
													servt_dict[v.route[depo_idx[k]]]+=servt
											#集荷時間
											servt_dict[v.route[len(v.route)-1]]=0
											for k in range(1,len(depo_idx)):
												servt=0
												for j in range(depo_idx[k-1]+1,depo_idx[k]):
													if not v.route[j].custno.startswith("e") and v.route[j].requestType=="PICKUP":
														servt+=v.route[j].depotservt
												servt_dict[v.route[depo_idx[k]]]+=servt

											if check_impassability(customers,v,lv_time,ins_idx[v.vehno]+1,servt_dict,len(v.route)-1,no_park_idx,pick_opt_flag,argvs)[0]==False:
												route_feasible_e=False
												break

										arr_time=lv_time+ttable7[e.spotno][v.route[ins_idx[v.vehno]].spotno]*v.drskill
										if e.spotid!=v.route[ins_idx[v.vehno]].spotid:
											st_time=max(arr_time+v.route[ins_idx[v.vehno]].parkt_arrive,v.route[ins_idx[v.vehno]].ready_fs)+v.route[ins_idx[v.vehno]].parkt_open
										else:
											st_time=max(arr_time,v.route[ins_idx[v.vehno]].ready_fs)

										if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and ((argvs.lastc_flag==True and ins_idx[v.vehno]==len(v.route)-1) or compare_time(st_time, v.route[ins_idx[v.vehno]].due_fs)>0): #ins_idx[v.vehno](eの直後)の時間チェック
											tw_feasible_e=False
											break

										#checking time feasibility at j-th customer after i-th customer
										for j in range(ins_idx[v.vehno],i): #jはins_idx[v.vehno](eの直後)から途中までのチェック
											from_c,to_c=v.route[j],v.route[j+1]
											if from_c in servt_dict:
												if from_c.spotid!=v.route[j-1].spotid:
													lv_time=max(arr_time+from_c.parkt_arrive,from_c.ready_fs)+servt_dict[from_c.servt]*v.opskill
												else:
													lv_time=max(arr_time,from_c.ready_fs)+servt_dict[from_c.servt]*v.opskill
											else:
												if from_c.spotid!=v.route[j-1].spotid:
													lv_time=max(arr_time+from_c.parkt_arrive,from_c.ready_fs)+from_c.servt*v.opskill
												else:
													lv_time=max(arr_time,from_c.ready_fs)+from_c.servt*v.opskill
											if from_c.spotid!=v.route[j-1].spotid:
												lv_time+=from_c.parkt_open
											ttable8 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
											arr_time=lv_time+ttable8[from_c.spotno][to_c.spotno]*v.drskill
											if from_c.spotid!=to_c.spotid:
												st_time=max(arr_time+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
											else:
												st_time=max(arr_time,to_c.ready_fs)
											if argvs.lastc_flag==True and (v.route[-2].custno=="0" and j>=len(v.route)-2):
												continue
											if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(st_time, to_c.due_fs)>0:
												tw_feasible_e=False
												break

									tvehicle=copy.deepcopy(v)
									tvehicle.insert_espot_at(espot_idx_to_insert,e,argvs)

									if ((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and ((argvs.lastc_flag==True and tvehicle.route[-2].custno=="0" and compare_time(tvehicle.lv[-3],tvehicle.endhour)>0) or (argvs.lastc_flag==True and tvehicle.route[-2].custno!="0" and compare_time(tvehicle.lv[-2],tvehicle.endhour)>0))) or \
									((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and argvs.lastc_flag==False and compare_time(tvehicle.lv[-1],tvehicle.endhour)>0):
										tw_feasible_e=False

									if tw_feasible_e==True and route_feasible_e==True and not v.vehno in e.reje_ve:									
										exist_reachable_espots=True
										espot_reachable+=[e]
							if exist_reachable_espots==False:
								espot_idx_to_insert-=1
								av_batt=v.rem_batt[espot_idx_to_insert-1] - v.e_margin #残った電力で到達可能な距離
							if espot_idx_to_insert<0:
								break

					if exist_reachable_espots==False: #<=追加
						continue #充電スポットが見つからない場合従来解を優先しそのままにする
					from_c,to_c=v.route[espot_idx_to_insert-1],espot_reachable[0]
					nearest_espot[v.vehno]=espot_reachable[0]

					if not argvs.management_etable: #電力テーブルが無い場合
						if v.route[espot_idx_to_insert-1] in servt_dict:
							if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
								lv_time = max(v.arr[espot_idx_to_insert-1]+v.route[espot_idx_to_insert-1].parkt_arrive,v.route[espot_idx_to_insert-1].ready_fs)+servt_dict[v.route[espot_idx_to_insert-1]]*v.opskill
							else:
								lv_time = max(v.arr[espot_idx_to_insert-1],v.route[espot_idx_to_insert-1].ready_fs)+servt_dict[v.route[espot_idx_to_insert-1]]*v.opskill
						else:
							if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
								lv_time = max(v.arr[espot_idx_to_insert-1]+v.route[espot_idx_to_insert-1].parkt_arrive,v.route[espot_idx_to_insert-1].ready_fs)+v.route[espot_idx_to_insert-1].servt*v.opskill
							else:
								lv_time = max(v.arr[espot_idx_to_insert-1],v.route[espot_idx_to_insert-1].ready_fs)+v.route[espot_idx_to_insert-1].servt*v.opskill
						if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
							lv_time+=v.route[espot_idx_to_insert-1].parkt_open
						dtable8 = get_dtable(v.vtype, lv_time, argvs.management_dtable)
						min_dist=dtable8[from_c.spotno][to_c.spotno]
					else: #電力テーブルが有る場合
						if v.route[espot_idx_to_insert-1] in servt_dict:
							if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
								lv_time = max(v.arr[espot_idx_to_insert-1]+v.route[espot_idx_to_insert-1].parkt_arrive,v.route[espot_idx_to_insert-1].ready_fs)+servt_dict[v.route[espot_idx_to_insert-1]]*v.opskill
							else:
								lv_time = max(v.arr[espot_idx_to_insert-1],v.route[espot_idx_to_insert-1].ready_fs)+servt_dict[v.route[espot_idx_to_insert-1]]*v.opskill
						else:
							if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
								lv_time = max(v.arr[espot_idx_to_insert-1]+v.route[espot_idx_to_insert-1].parkt_arrive,v.route[espot_idx_to_insert-1].ready_fs)+v.route[espot_idx_to_insert-1].servt*v.opskill
							else:
								lv_time = max(v.arr[espot_idx_to_insert-1],v.route[espot_idx_to_insert-1].ready_fs)+v.route[espot_idx_to_insert-1].servt*v.opskill
						if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
							lv_time+=v.route[espot_idx_to_insert-1].parkt_open
						etable2 = get_etable(v.vtype,v.etype,lv_time,argvs.management_etable)
						min_batt=etable2[from_c.spotno][to_c.spotno]
					
					#route[espot_idx_to_insert-1]から到達可能なスポットのうち，消費電力の最も少ないものを見つける
					#電力テーブルがない場合は消費電力は距離に比例するため、距離の最も小さいものを見つける
					if not argvs.management_etable: #電力テーブルが無い場合
						for e in espot_reachable:
							from_c,to_c=v.route[espot_idx_to_insert-1],e
							if v.route[espot_idx_to_insert-1] in servt_dict:
								if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
									lv_time = max(v.arr[espot_idx_to_insert-1]+v.route[espot_idx_to_insert-1].parkt_arrive,v.route[espot_idx_to_insert-1].ready_fs)+servt_dict[v.route[espot_idx_to_insert-1]]*v.opskill
								else:
									lv_time = max(v.arr[espot_idx_to_insert-1],v.route[espot_idx_to_insert-1].ready_fs)+servt_dict[v.route[espot_idx_to_insert-1]]*v.opskill
							else:
								if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
									lv_time = max(v.arr[espot_idx_to_insert-1]+v.route[espot_idx_to_insert-1].parkt_arrive,v.route[espot_idx_to_insert-1].ready_fs)+v.route[espot_idx_to_insert-1].servt*v.opskill
								else:
									lv_time = max(v.arr[espot_idx_to_insert-1],v.route[espot_idx_to_insert-1].ready_fs)+v.route[espot_idx_to_insert-1].servt*v.opskill
							if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
								lv_time+=v.route[espot_idx_to_insert-1].parkt_open
							dtable9 = get_dtable(v.vtype, lv_time, argvs.management_dtable)
							if min_dist>dtable9[from_c.spotno][to_c.spotno]:
								nearest_espot[v.vehno]=to_c
								min_dist=dtable9[from_c.spotno][to_c.spotno]
						#時間枠チェック
						cur_rem_batt=v.rem_batt[espot_idx_to_insert-1]
						rem_batt_at_spot=cur_rem_batt-(min_dist/1000.0)/v.e_cost
					else: #電力テーブルが有る場合
						for e in espot_reachable:
							from_c,to_c=v.route[espot_idx_to_insert-1],e
							if v.route[espot_idx_to_insert-1] in servt_dict:
								if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
									lv_time = max(v.arr[espot_idx_to_insert-1]+v.route[espot_idx_to_insert-1].parkt_arrive,v.route[espot_idx_to_insert-1].ready_fs)+servt_dict[v.route[espot_idx_to_insert-1]]*v.opskill
								else:
									lv_time = max(v.arr[espot_idx_to_insert-1],v.route[espot_idx_to_insert-1].ready_fs)+servt_dict[v.route[espot_idx_to_insert-1]]*v.opskill
							else:
								if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
									lv_time = max(v.arr[espot_idx_to_insert-1]+v.route[espot_idx_to_insert-1].parkt_arrive,v.route[espot_idx_to_insert-1].ready_fs)+v.route[espot_idx_to_insert-1].servt*v.opskill
								else:
									lv_time = max(v.arr[espot_idx_to_insert-1],v.route[espot_idx_to_insert-1].ready_fs)+v.route[espot_idx_to_insert-1].servt*v.opskill
							if ((espot_idx_to_insert-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[espot_idx_to_insert-1].spotid!=v.route[espot_idx_to_insert-2].spotid):
								lv_time+=v.route[espot_idx_to_insert-1].parkt_open
							etable3 = get_etable(v.vtype,v.etype,lv_time,argvs.management_etable)
							if min_batt>(etable3[from_c.spotno][to_c.spotno]):
								nearest_espot[v.vehno]=to_c
								min_batt=etable3[from_c.spotno][to_c.spotno]
						#時間枠チェック
						cur_rem_batt=v.rem_batt[espot_idx_to_insert-1]
						rem_batt_at_spot=cur_rem_batt-min_batt

					ins_idx[v.vehno]=espot_idx_to_insert #ins_idx[v.vehno]は，運搬車vにスポットを挿入する位置。
			
					#route[ins_idx-1]->nearest_espot->route[ins_idx]
					q_to_cust={}
					c_q_to_charge={}
					tw_feasible={}
					for i in range(ins_idx[v.vehno],len(v.route)-1):
						if not argvs.management_etable: #電力テーブルが無い場合
							ttable9 = get_ttable(v.vtype, v.lv[espot_idx_to_insert-1], argvs.management_ttable)
							lv_time = v.lv[espot_idx_to_insert-1]+ttable9[v.route[espot_idx_to_insert-1].spotno][nearest_espot[v.vehno].spotno]*v.drskill#仮のlv_time(=arr_time)
							dist_to_icust=max_dist_from_table(v.vtype,lv_time,nearest_espot[v.vehno],v.route[ins_idx[v.vehno]],argvs.management_dtable) #eからins_idx[v.vehno](eの直後)のチェック
							arr_time = lv_time+max_time_from_table(v.vtype,lv_time,e,v.route[ins_idx[v.vehno]],argvs.management_ttable)*v.drskill
							dlist=[]
							for j in range(ins_idx[v.vehno],i):
								if v.route[j] in servt_dict:
									if v.route[j].spotid!=v.route[j-1].spotid:
										lv_time = max(arr_time+v.route[j].parkt_arrive,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
									else:
										lv_time = max(arr_time,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
								else:
									if v.route[j].spotid!=v.route[j-1].spotid:
										lv_time = max(arr_time+v.route[j].parkt_arrive,v.route[j].ready_fs)+v.route[j].servt*v.opskill
									else:
										lv_time = max(arr_time,v.route[j].ready_fs)+v.route[j].servt*v.opskill
								if v.route[j].spotid!=v.route[j-1].spotid:
									lv_time+=v.route[j].parkt_open
								dtable10 = get_dtable(v.vtype, lv_time, argvs.management_dtable)
								ttable10 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
								dlist.append(dtable10[v.route[j].spotno][v.route[j+1].spotno])
								arr_time = lv_time+ttable10[v.route[j].spotno][v.route[j+1].spotno]*v.drskill
							dist_to_icust+=sum(dlist)
							if v.route[i] in servt_dict:
								if v.route[i].spotid!=v.route[i-1].spotid:
									lv_time = max(arr_time+v.route[i].parkt_arrive,v.route[i].ready_fs)+servt_dict[v.route[i]]*v.opskill
								else:
									lv_time = max(arr_time,v.route[i].ready_fs)+servt_dict[v.route[i]]*v.opskill
							else:
								if v.route[i].spotid!=v.route[i-1].spotid:
									lv_time = max(arr_time+v.route[i].parkt_arrive,v.route[i].ready_fs)+v.route[i].servt*v.opskill
								else:
									lv_time = max(arr_time,v.route[i].ready_fs)+v.route[i].servt*v.opskill
							if v.route[i].spotid!=v.route[i-1].spotid:
								lv_time+=v.route[i].parkt_open
							dtable11 = get_dtable(v.vtype, lv_time, argvs.management_dtable)
							dist_to_icust+=dtable11[v.route[i].spotno][v.route[-1].spotno]
							q_to_cust[i]=(dist_to_icust/1000.0)/v.e_cost #route[from_idx]からroute[i]までに必要な電気の量
						else: #電力テーブルが有る場合
							ttable16 = get_ttable(v.vtype, v.lv[espot_idx_to_insert-1], argvs.management_ttable)
							lv_time = v.lv[espot_idx_to_insert-1]+ttable16[v.route[espot_idx_to_insert-1].spotno][nearest_espot[v.vehno].spotno]*v.drskill#仮のlv_time(=arr_time)
							batt_to_icust=max_e_from_table(v.vtype,v.etype,lv_time,nearest_espot[v.vehno],v.route[ins_idx[v.vehno]],argvs.management_etable)
							arr_time = lv_time+max_time_from_table(v.vtype,lv_time,e,v.route[ins_idx[v.vehno]],argvs.management_ttable)*v.drskill
							battlist=[]
							for j in range(ins_idx[v.vehno],i):
								if v.route[j] in servt_dict:
									if v.route[j].spotid!=v.route[j-1].spotid:
										lv_time = max(arr_time+v.route[j].parkt_arrive,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
									else:
										lv_time = max(arr_time,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
								else:
									if v.route[j].spotid!=v.route[j-1].spotid:
										lv_time = max(arr_time+v.route[j].parkt_arrive,v.route[j].ready_fs)+v.route[j].servt*v.opskill
									else:
										lv_time = max(arr_time,v.route[j].ready_fs)+v.route[j].servt*v.opskill
								if v.route[j].spotid!=v.route[j-1].spotid:
									lv_time+=v.route[j].parkt_open
								etable4 = get_etable(v.vtype, v.etype, lv_time, argvs.management_etable)
								ttable17 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
								battlist.append(etable4[v.route[j].spotno][v.route[j+1].spotno])
								arr_time = lv_time+ttable17[v.route[j].spotno][v.route[j+1].spotno]*v.drskill
							batt_to_icust+=sum(battlist)

							ar_time_tmp=arr_time
							for r1, r2 in zip(v.route[i:-1], v.route[i+1:]):	#v.route[i]からv.route[-1]までの電力合計算出
								if r1 in servt_dict:
									if r1.spotid!=v.route[v.route.index(r1)-1].spotid:
										lv_time_tmp=max(ar_time_tmp+r1.parkt_arrive,r1.ready_fs)+servt_dict[r1]*v.opskill 
									else:
										lv_time_tmp=max(ar_time_tmp,r1.ready_fs)+servt_dict[r1]*v.opskill 
								else:
									if r1.spotid!=v.route[v.route.index(r1)-1].spotid:
										lv_time_tmp=max(ar_time_tmp+r1.parkt_arrive,r1.ready_fs)+r1.servt*v.opskill 
									else:
										lv_time_tmp=max(ar_time_tmp,r1.ready_fs)+r1.servt*v.opskill 
								if r1.spotid!=v.route[v.route.index(r1)-1].spotid:
									lv_time_tmp+=r1.parkt_open
								etable5 = get_etable(v.vtype, v.etype, lv_time_tmp, argvs.management_etable)
								ttable18 = get_ttable(v.vtype, lv_time_tmp, argvs.management_ttable)
								batt_to_icust+=etable5[r1.spotno][r2.spotno]
								ar_time_tmp=lv_time_tmp+ttable18[r1.spotno][r2.spotno]*v.drskill
							q_to_cust[i]=batt_to_icust #route[from_idx]からroute[i]までに必要な電気の量

						tw_feasible[i]=True

						#q_to_cust[i]が運搬車の電力容量を超えたら，挿入できない(tw_feasible[i]=False)と判定する
						if q_to_cust[i] > v.e_capacity:
							tw_feasible[i]=False

						c_q_to_charge[i]=q_to_cust[i]-rem_batt_at_spot + v.e_margin

						#時間枠のチェック
						if v.route[ins_idx[v.vehno]-1] in servt_dict:
							if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
								lv_time=max(v.arr[ins_idx[v.vehno]-1]+v.route[ins_idx[v.vehno]-1].parkt_arrive,v.route[ins_idx[v.vehno]-1].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]-1]]*v.opskill
							else:
								lv_time=max(v.arr[ins_idx[v.vehno]-1],v.route[ins_idx[v.vehno]-1].ready_fs)+servt_dict[v.route[ins_idx[v.vehno]-1]]*v.opskill
						else:
							if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
								lv_time=max(v.arr[ins_idx[v.vehno]-1]+v.route[ins_idx[v.vehno]-1].parkt_arrive,v.route[ins_idx[v.vehno]-1].ready_fs)+v.route[ins_idx[v.vehno]-1].servt*v.opskill
							else:
								lv_time=max(v.arr[ins_idx[v.vehno]-1],v.route[ins_idx[v.vehno]-1].ready_fs)+v.route[ins_idx[v.vehno]-1].servt*v.opskill
						if ((ins_idx[v.vehno]-1==0 and (v.load_onbrd!=0 or v.load_onbrd2!=0)) or v.route[ins_idx[v.vehno]-1].spotid!=v.route[ins_idx[v.vehno]-2].spotid):
							lv_time+=v.route[ins_idx[v.vehno]-1].parkt_open
						ttable11 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
						arr_time=lv_time+ttable11[v.route[ins_idx[v.vehno]-1].spotno][nearest_espot[v.vehno].spotno]*v.drskill
						lv_time=arr_time+c_q_to_charge[i]/nearest_espot[v.vehno].e_rate+nearest_espot[v.vehno].servt*v.opskill
						# if nearest_espot[v.vehno].spotid!=v.route[ins_idx[v.vehno]-1].spotid:
						# 	lv_time+=nearest_espot[v.vehno].parkt_open
						ttable12 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
						arr_time=lv_time+ttable12[nearest_espot[v.vehno].spotno][v.route[ins_idx[v.vehno]].spotno]*v.drskill
						if nearest_espot[v.vehno].spotid !=  v.route[ins_idx[v.vehno]].spotid:
							st_time=max(arr_time+v.route[ins_idx[v.vehno]].parkt_arrive,v.route[ins_idx[v.vehno]].ready_fs)
						else:
							st_time=max(arr_time,v.route[ins_idx[v.vehno]].ready_fs)

						if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and ((argvs.lastc_flag==True and ins_idx[v.vehno]==len(v.route)-1) or compare_time(st_time, v.route[ins_idx[v.vehno]].due_fs)>0):
							tw_feasible[i]=False

						#checking time feasibility at j-th customer after i-th customer
						for j in range(ins_idx[v.vehno],i):
							from_c,to_c=v.route[j],v.route[j+1]
							if from_c in servt_dict:
								if from_c.spotid!=v.route[j-1].spotid:
									lv_time=max(arr_time+from_c.parkt_arrive,from_c.ready_fs)+servt_dict[from_c]*v.opskill
								else:
									lv_time=max(arr_time,from_c.ready_fs)+servt_dict[from_c]*v.opskill
							else:
								if from_c.spotid!=v.route[j-1].spotid:
									lv_time=max(arr_time+from_c.parkt_arrive,from_c.ready_fs)+from_c.servt*v.opskill
								else:
									lv_time=max(arr_time,from_c.ready_fs)+from_c.servt*v.opskill
							if from_c.spotid!=v.route[j-1].spotid:
								lv_time+=from_c.parkt_open
							ttable13 = get_ttable(v.vtype, lv_time, argvs.management_ttable)
							arr_time=lv_time+ttable13[from_c.spotno][to_c.spotno]*v.drskill
							if from_c.spotid!=to_c.spotid:
								st_time=max(arr_time+to_c.parkt_arrive,to_c.ready_fs)+from_c.parkt_open
							else:
								st_time=max(arr_time,to_c.ready_fs)
							if argvs.lastc_flag==True and (v.route[-2].custno=="0" and j>=len(v.route)-2):
								continue
							if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(st_time, to_c.due_fs)>0:
								tw_feasible[i]=False
					
					if [k for k,v in tw_feasible.items() if v==True] == []: 
						# return #電欠でもエラーとせずそのまま出力する
						customers_tw_broken[v.vehno]=v.route[ins_idx[v.vehno]:-1] 
					else: 
						idx_feas=max([k for k,v in tw_feasible.items() if v==True]) 

						#運搬車vのルートで，欠電を起している顧客の集まり 
						customers_tw_broken[v.vehno]=v.route[idx_feas+1:-1] 
					#運搬車vで欠電を起こさないために必要な充電量
						q_to_charge[v]=c_q_to_charge[idx_feas]
				
	tvehs=copy.deepcopy(vehicles)
	for tv in tvehs:
		for v in vehicles:
			if v.vehno==tv.vehno:
				tv.route=v.route[:]

	removable=True

	#remove customers in customers_tw_broken[tv] from tv.route
	for vehno in customers_tw_broken:
		for v in vehicles:
			if v.vehno==vehno:
				remove_customers_specified(customers_tw_broken[vehno],v,argvs)
	all_customers_removed=[]
	for vehno in customers_tw_broken:
		all_customers_removed+=customers_tw_broken[vehno]
	
	for vehno in nearest_espot:
		for v in vehicles:
			if v.vehno==vehno:
				#v_spotid=[c.spotid for c in v.route]
				#v_spotid.insert(ins_idx[v.vehno],nearest_espot[vehno].spotid)
				#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-1-len([c for c in v_spotid[1:-1] if c=="0" or c.startswith("b")]) #充電スポットはカウントしない
				visitnum=calc_visitnum(v.route)

				if v.maxvisit==0 or visitnum<=v.maxvisit:
					#insert nearest_espot[v] at ins_idx[v.vehno] and update the charging quantity
					if v.direct_flag==False or customers_tw_broken[vehno]==[]: #直送便に充電スポットを挿入することで違反する場合は挿入しない
						v.insert_espot_at(ins_idx[v.vehno],nearest_espot[vehno],argvs)

						pick_opt_flag=False
						if argvs.pickup_flag==True:
							for c in v.route[1:-1]:
								if not c.custno.startswith("e") and c.requestType=="PICKUP":
									pick_opt_flag=True
									break

						if argvs.bulkShipping_flag==False and pick_opt_flag==True and v.route[len(v.route)-1].custno!="0" and v.route[len(v.route)-2].custno!="0" and v.route[len(v.route)-3].custno!="0":
							v.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
						elif argvs.bulkShipping_flag==True and pick_opt_flag==True and v.route[len(v.route)-1].customers[0].custno!="0" and v.route[len(v.route)-2].customers[0].custno!="0" and v.route[len(v.route)-3].customers[0].custno!="0":
							depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
							depo.customers.append(copy.deepcopy(customers[0].customers[0]))
							depo.servt=customers[0].servt
							depo.dem=customers[0].dem
							depo.dem2=customers[0].dem2
							depo.reje_ve=customers[0].reje_ve
							depo.parkt_open=customers[0].parkt_open
							depo.parkt_arrive=customers[0].parkt_arrive
							depo.depotservt=customers[0].depotservt
							depo.additionalcust=[depo]
							depo.demdivideunit=customers[0].demdivideunit
							depo.requestType=customers[0].requestType
							depo.deny_unass=customers[0].deny_unass #未割り当て荷物
							v.insert_customer_at(-1,depo,argvs)
						elif argvs.bulkShipping_flag==False and pick_opt_flag==False and v.route[len(v.route)-1].custno!="0" and v.route[len(v.route)-2].custno=="0" and len(v.route)-2!=0:
							remove_customers_specified([v.route[-2]],v,argvs)
						elif argvs.bulkShipping_flag==True and pick_opt_flag==False and v.route[len(v.route)-1].customers[0].custno!="0" and v.route[len(v.route)-2].customers[0].custno=="0" and len(v.route)-2!=0:
							remove_customers_specified([v.route[-2]],v,argvs)
						elif argvs.bulkShipping_flag==False and pick_opt_flag==False and v.route[len(v.route)-1].custno!="0" and v.route[len(v.route)-3].custno=="0" and len(v.route)-3!=0:
							remove_customers_specified([v.route[-3]],v,argvs)
						elif argvs.bulkShipping_flag==True and pick_opt_flag==False and v.route[len(v.route)-1].customers[0].custno!="0" and v.route[len(v.route)-3].customers[0].custno=="0" and len(v.route)-3!=0:
							remove_customers_specified([v.route[-3]],v,argvs)
	
	#reinsert the removed customers in other positions	
	_,vehicles=insert_customers_nearest(customers,all_customers_removed,vehicles,espots,argvs) # daic e_spots->espots, ttable追加

	#空車両になる場合はやめる
	for v in vehicles:
		if (argvs.decr_vnum==False or v.rmpriority==0) and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and not c.custno.startswith("e")])==0:
			del customers_tw_broken[v.vehno]
			del nearest_espot[v.vehno]
		
			removable=False
			break

	if not removable:
		vehicles=copy.deepcopy(tvehs)
		for tv in tvehs:
			for v in vehicles:
				if v.vehno==tv.vehno:
					v.route=tv.route[:]

	return vehicles

def init_assign_dtable(customers,vehicles,argvs):
	vnum=len(vehicles)
	custnum=len(customers)-1
	c_per_v=int(custnum/vnum)
	for v in vehicles:
		v.push_customer(customers[0],argvs)
	ccnt=1
	for v in vehicles:
		for i in range(c_per_v):
			v.push_customer(customers[ccnt],argvs)
			ccnt=ccnt+1
	vidx=0
	for c in range(ccnt,custnum+1):
		vehicles[vidx].push_customer(customers[c],argvs)
		vidx=vidx+1
	for v in vehicles:
		v.push_customer(customers[0],argvs)

	for v in vehicles:
		v.update_totalcost_dtable(argvs)
		v.update_arrtime_tw(argvs)
		v.update_load_onbrd()
		v.update_rem_battery(argvs)#20200318 追加
		v.update_chg_battery()#20200406

##20200626
def printlog(vLog, errLevel=logging.INFO):
	
	#DEBUG:   デバッグしたときに見る細かい内部状態のログ(変数の値とか)
	#INFO:    通常動作の節目に関するログ
	#ERROR:   何らかの動作エラー
	#CRITICAL:システムダウンレベルのエラー

	if type(vLog) == str:
		sLog = vLog
	elif type(vLog) in (list, tuple):
		sLog = " ".join(list(map(str, vLog)))
	else:
		sLog = str(vLog)
	if rank==0:
		logging.log(errLevel,sLog)

##20200526
def read_skills(filename):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		skills = []
		for row in csv_reader:
			if not "OperationSkill" in row:
				skills.append(row)
	return skills

##20200526
def read_initroutes(filename):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		iniroutes = []
		for row in csv_reader:
			iniroutes.append(row)
	return iniroutes

def read_loaddivide_initroutes(filename,customers,argvs):
	with open(filename,"r") as f:
		csv_reader = csv.reader(f,delimiter=",",quotechar='"')
		iniroutes = []
		iniroutes_dict = {}
		removed_cust={}
		addcust=[]
		dem_dict={}
		dem2_dict={}
		demdivide_dict={}
		for row in csv_reader:
			if row[1]!="CUST NO.":
				if len(addcust)==int(row[0]):
					addcust.append([])

				if row[0] in iniroutes_dict:
					iniroutes_dict[row[0]]+=[row[1]]
				else:
					iniroutes_dict[row[0]]=[row[1]]

				addcust[len(addcust)-1].append(row[1:])

				dem_dict[row[1]]=0
				dem2_dict[row[1]]=0
				demdivide_dict[row[1]]=0

		for row in addcust:
			for cust in row[1:-1]:
				if float(cust[1])<0 or float(cust[2])<0:
					cust[1]=str(abs(float(cust[1])))
					cust[2]=str(abs(float(cust[2])))
					requestType="PICKUP"
				else:
					requestType="DELIVERY"
				if cust[0] in removed_cust:
					customers.append(Customer(cust[0],removed_cust[cust[0]].spotid,removed_cust[cust[0]].y,removed_cust[cust[0]].x,float(cust[1]),float(cust[2]),removed_cust[cust[0]].ready,removed_cust[cust[0]].due,removed_cust[cust[0]].servt*60,argvs.starttime,removed_cust[cust[0]].reje_ve,removed_cust[cust[0]].parkt_arrive*60,removed_cust[cust[0]].parkt_open*60,removed_cust[cust[0]].depotservt*60,removed_cust[cust[0]].additionalcust,int(cust[3]),requestType,removed_cust[cust[0]].deny_unass))
					dem_dict[cust[0]]+=float(cust[1])
					dem2_dict[cust[0]]+=float(cust[2])
					demdivide_dict[cust[0]]+=int(cust[3])
				else:
					for c in customers:
						if c.custno==cust[0]:
							removed_cust[cust[0]]=c
							dem_dict[cust[0]]-=c.dem
							dem2_dict[cust[0]]-=c.dem2
							demdivide_dict[cust[0]]-=c.demdivideunit
							customers.remove(c)
							break
					customers.append(Customer(cust[0],removed_cust[cust[0]].spotid,removed_cust[cust[0]].y,removed_cust[cust[0]].x,float(cust[1]),float(cust[2]),removed_cust[cust[0]].ready,removed_cust[cust[0]].due,removed_cust[cust[0]].servt*60,argvs.starttime,removed_cust[cust[0]].reje_ve,removed_cust[cust[0]].parkt_arrive*60,removed_cust[cust[0]].parkt_open*60,removed_cust[cust[0]].depotservt*60,removed_cust[cust[0]].additionalcust,int(cust[3]),requestType,removed_cust[cust[0]].deny_unass))
					dem_dict[cust[0]]+=float(cust[1])
					dem2_dict[cust[0]]+=float(cust[2])
					demdivide_dict[cust[0]]+=int(cust[3])

		for key in dem_dict:
			if dem_dict[key]!=0 or dem2_dict[key]!=0 or demdivide_dict[key]!=0:
				sErrMes = "input load divided customer error (custno = "+str(key)+")"
				raise ValueError(sErrMes) 

		for k,v in iniroutes_dict.items():
			iniroutes.append(["route"+k]+v)

	return iniroutes

def is_expired():
	#現在日付 > 利用期限日付(デフォルト : 9999/12/31)
	if datetime.date.today()>datetime.date(9999,12,31):
		return True
	else:
		return False

##20200526
def set_initroutes2(_custs,e_spots,_vehs,_nbflag,iniroutes,skills,argvs):
	global divided
	divided=False
	#利用期限を過ぎていたらエラー出力して終了
	if is_expired():
		sErrMes="license expired"
		raise ValueError(sErrMes)

	sLog = ["_custs = ",[c.custno for c in _custs],", e_spots = ",[c.custno for c in e_spots],", _vehs = ",[v.vehno for v in _vehs],", _nbflag = ",vars(_nbflag),", iniroutes = ",iniroutes,", skills = ",skills,", argvs = ",argvs]
	sLogBuf = " ".join(list(map(str,sLog)))
	if rank==0:
		logging.log(logging.DEBUG,sLogBuf)

	preprocess(_custs,e_spots,_vehs,argvs)

	try:
		if get_breakspot_pattern(_vehs, argvs)==3:
			#休憩パターン３で初期解に休憩スポットが含まれる場合
			for route in iniroutes:
				for custno in route[1:]:
					if custno[0] == "b":	#休憩スポットも許可する
						sErrMes = "failed to read initial solution due to break customer object (custno = "+custno+")"
						raise ValueError(sErrMes)
	except Exception:
		sErr = traceback.format_exc()
		sErr = ["<Error message log>",sErr]
		sLogBuf = " ".join(list(map(str,sErr)))
		if rank==0:
			logging.log(logging.ERROR,sLogBuf)
		raise

	#APIのみの利用のために、ここでも再度呼び出す
	argvs.error_check(_custs)
	for c in _custs:
		c.error_check()
	for v in _vehs:
		v.error_check(argvs)

	#全車両が同じ時間テーブルを使うときかつ設定が同じ場合skillshuffle_flag=Trueにする
	if argvs.skillfile!=None:
		argvs.skillshuffle_flag=True
		try:
			for (v1,v2) in [(v1,v2) for v1 in _vehs for v2 in _vehs if v1.vehno<v2.vehno]:
				for table in argvs.management_ttable:
					if table["vtype"]==v1.vtype:
						if table["table"]!=get_ttable(v2.vtype,table["start_time"],argvs.management_ttable):
							argvs.skillshuffle_flag=False
							break
				for table in argvs.management_ttable:
					if table["vtype"]==v2.vtype:
						if table["table"]!=get_ttable(v1.vtype,table["start_time"],argvs.management_ttable):
							argvs.skillshuffle_flag=False
							break

				for table in argvs.management_dtable:
					if table["vtype"]==v1.vtype:
						if table["table"]!=get_dtable(v2.vtype,table["start_time"],argvs.management_dtable):
							argvs.skillshuffle_flag=False
							break
				for table in argvs.management_dtable:
					if table["vtype"]==v2.vtype:
						if table["table"]!=get_dtable(v1.vtype,table["start_time"],argvs.management_dtable):
							argvs.skillshuffle_flag=False
							break

				if argvs.management_etable:
					for table in argvs.management_etable:
						if table["vtype"]==v1.vtype and table["etype"]==v1.etype:
							if table["table"]!=get_etable(v2.vtype,v2.etype,table["start_time"],argvs.management_etable):
								argvs.skillshuffle_flag=False
								break
					for table in argvs.management_etable:
						if table["vtype"]==v2.vtype and table["etype"]==v2.etype:
							if table["table"]!=get_etable(v1.vtype,v1.etype,table["start_time"],argvs.management_etable):
								argvs.skillshuffle_flag=False
								break

				if argvs.management_xtable:
					for table in argvs.management_xtable:
						if table["vtype"]==v1.vtype:
							if table["table"]!=get_xtable(v2.vtype,table["start_time"],argvs.management_xtable):
								argvs.skillshuffle_flag=False
								break
					for table in argvs.management_xtable:
						if table["vtype"]==v2.vtype:
							if table["table"]!=get_xtable(v1.vtype,table["start_time"],argvs.management_xtable):
								argvs.skillshuffle_flag=False
								break

				if v1.cap!=v2.cap or \
				v1.cap2!=v2.cap2 or \
				v1.e_capacity!=v2.e_capacity or \
				v1.e_initial!=v2.e_initial or \
				v1.e_cost!=v2.e_cost or \
				v1.e_margin!=v2.e_margin or \
				v1.vtype!=v2.vtype or \
				v1.etype!=v2.etype or \
				v1.enddepot.custno!=v2.enddepot.custno or \
				v1.starthour!=v2.starthour or \
				v1.endhour!=v2.endhour or \
				v1.maxvisit!=v2.maxvisit or \
				v1.maxrotate!=v2.maxrotate or \
				v1.depotservt!=v2.depotservt:
					argvs.skillshuffle_flag=False
					break
			for v in _vehs:
				for c in _custs:
					if v.vehno in c.reje_ve:
						argvs.skillshuffle_flag=False
						break
		except(ValueError):
			argvs.skillshuffle_flag=False

	try:
		#休憩パターン３で初期解に休憩スポットが含まれる場合
		if get_breakspot_pattern(_vehs, argvs)==3:
			for route in iniroutes:
				for custno in route[1:]:
					if custno[0] == "b":
						sErrMes = "failed to read initial solution due to break customer object (custno = "+custno+")"
						raise ValueError(sErrMes)

		#訪問先のIDが整数値の文字列以外の場合
		for route in iniroutes:
			if len(route)>1 and route[1]!="Id":
				for custno in route[1:]:
					if not custno.isdecimal() and custno[0] != "b":	#休憩スポットも許可する
						sErrMes = "customer id (aka custno) set to not as string of integer (custno = "+custno+")"
						raise ValueError(sErrMes)

		#訪問先の数が2以下の場合
		for route in iniroutes:
			if (((len(route)>=2 and len(route)<=3) or (len(route)>3 and argvs.multitrip_flag==False and len([c for c in route[1:] if c!="0" and c[0]!="b"])==0)) or len(route)==0) and not "Id" in route:
				sErrMes = "initial solution (aka iniroutes) includes plan without customers (routes = "+str(route[1:])+")"
				raise ValueError(sErrMes)

		#訪問先の全IDが引数_custsの全custnoに対して不足している場合 #takebreakも入れる
		if argvs.multitrip_flag==False:
			spots=[c.custno for c in _custs]
			for v in _vehs:
				#spots += [c.custno for c in v.takebreak]
				for tb in v.takebreak:
					spots += [c.custno for c in tb.additionalcust]
			for i,route in enumerate(iniroutes):
				if len(route)>1 and route[1]!="Id":
					for custno in route[2:-1]:
						if custno in spots:
							for cust in _custs:
								if cust.custno==custno:
									for addcust in cust.additionalcust:
										spots.remove(addcust.custno)
									break
							for cust in _vehs[i-1].takebreak:
								if cust.custno==custno:
									for addcust in cust.additionalcust:
										spots.remove(addcust.custno)
									break
						else:
							sErrMes = "all custno of customer class (aka _custs) must include all customer id (aka custno) of iniroutes (custno = "+custno+", customer = "+str([c.custno for c in _custs])+", iniroutes = "+str([custno for custno in route[1:]])+")"
							raise ValueError(sErrMes)
		else:
			spots=[c.custno for c in _custs]
			for v in _vehs:
				spots += [c.custno for c in v.takebreak]
			for route in iniroutes:
				if len(route)>1 and route[1]!="Id":
					for custno in route[2:-1]:
						if custno!="0":
							if custno in spots:
								for cust in _custs:
									if cust.custno==custno:
										for addcust in cust.additionalcust:
											spots.remove(addcust.custno)
										break
							else:
								sErrMes = "all custno of customer class (aka _custs) must include all customer id (aka custno) of iniroutes (custno = "+custno+", customer = "+str([c.custno for c in _custs])+", iniroutes = "+str([custno for custno in route[1:]])+")"
								raise ValueError(sErrMes)

		#iniroutesの台数(length)が_vehsの台数(length)以下でない場合
		len_ini=len(iniroutes)
		if len_ini!=0:
			if len(iniroutes[0])>1 and iniroutes[0][1]=="Id":
				len_ini-=1
		if len(_vehs)<len_ini:
			sErrMes = "initial solution (aka iniroutes) length is more than length of vehicle class (aka _vehs) (len(iniroutes) = "+str(len(iniroutes))+", len(vehicle) = "+str(len(_vehs))+")"
			raise ValueError(sErrMes)

		#e_spotsに充電スポット以外が格納されている場合
		for c in e_spots:
			if not c.custno.startswith("e"):
				sErrMes = "CS_spots include something not \"e\" + positive integer (custno = "+str(c.custno)+")"
				raise ValueError(sErrMes)

		#ArgvsオブジェクトのskillfileがNoneでskillsがNoneでない場合
		if argvs.skillfile==None and skills!=None:
			sErrMes = "skills argument must be set to none when skillfile field of Argvs object set none (skills = "+str(skills)+")"
			raise ValueError(sErrMes)

		#荷物分割した初期解なのに同じカスタマナンバーがある場合
		for route in iniroutes:
			for i in range(3,len(route)):
				if (route[i]!="0" and route[i][0]!="b") and route[i]==route[i-1]:
					sErrMes = "load divided customers are succesive (custno = "+str(route[i])+")"
					raise ValueError(sErrMes)

	except Exception:
		sErr = traceback.format_exc()
		sErr = ["<Error message log>",sErr]
		sLogBuf = " ".join(list(map(str,sErr)))
		if rank==0:
			logging.log(logging.ERROR,sLogBuf)
		raise

	#未割り当て荷物最適化 初期解入力の保存
	if argvs.opt_unassigned_flag==True:
		for i,route in enumerate(iniroutes):
			argvs.initroute.update({_vehs[i].vehno:route[1:]})

	idist={}
	for i in range(len(_custs)):
		if _custs[i].custno in idist:
			idist[_custs[i].custno]+=[i]
		else:
			idist[_custs[i].custno]=[i]


	for v in _vehs:
		v.push_customer(_custs[0],argvs)

	sLogBuf = "\n"
	vidx=0
	vlists=[i for i in range(0,len(_vehs))]
	for row in iniroutes:
		rotate_num=1
		sLog = ["row:",row]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		if not "Id" in row:
			for c in row[2:-1]:
				if c=="0":
					rotate_num+=1

				if _vehs[vidx].maxrotate>0 and rotate_num>_vehs[vidx].maxrotate:
					if argvs.opt_unassigned_flag==True:
						#未割り当て荷物最適化で、入らない荷物を除外する
						if _custs[idist[c][0]].deny_unass!=True:
							#row.remove([_custs[idist[c][0]]])
							continue
						else:
							sErrMes = "failed to read initial solution due to maxrotate"
							raise ValueError(sErrMes)
					else:
						sErrMes = "failed to read initial solution due to maxrotate"
						raise ValueError(sErrMes)

				if c.startswith("e"):
					sErrMes = "Can't include e-spot in initialfile"
					raise ValueError(sErrMes)
				else:
					if c[0] != "b":
						if not _vehs[vidx].vehno in _custs[idist[c][0]].reje_ve:
							if c!="0":
								_vehs[vidx].push_customer(_custs[idist[c][0]],argvs)
								del idist[c][0]
							else:
								_vehs[vidx].push_customer(copy.copy(_custs[idist[c][0]]),argvs)
								_vehs[vidx].route[-1].additionalcust=[]
								_vehs[vidx].route[-1].additionalcust.append(_vehs[vidx].route[-1])
						else:
							if argvs.opt_unassigned_flag==True:
								#未割り当て荷物最適化で、入らない荷物を除外する
								if _custs[idist[c][0]].deny_unass!=True:
									row.remove(c)
									continue
								else:
									sErrMes = "failed to read initial solution due to unvisitable vehicle"
									raise ValueError(sErrMes)
							else:
								sErrMes = "failed to read initial solution due to unvisitable vehicle"
								raise ValueError(sErrMes)
					else:
						#この車両のtakebreakのなかで当てはまるものを入れる
						for t in _vehs[vidx].takebreak:
							if t.custno == c:
								if not _vehs[vidx].vehno in t.reje_ve:	#立ち寄り不可でないことをチェックする
									_vehs[vidx].push_customer(copy.copy(t), argvs)
									_vehs[vidx].route[-1].additionalcust=[]
									_vehs[vidx].route[-1].additionalcust.append(_vehs[vidx].route[-1])
									break

								else:	#立ち寄り不可ならエラー
									sErrMes = "failed to read initial solution due to unvisitable vehicle"
									raise ValueError(sErrMes)

						else:	#該当するtakebreakが見つからない
							sErrMes = "failed to read initial solution due to break-spot"
							raise ValueError(sErrMes)
								
			##20180904
	
			_vehs[vidx].rtid = row[0]

			# if skills!=None:
			# 	for skill in skills:
			# 		if not "OperationSkill" in skill:
			# 			if skill[0]==row[0]:
			# 				_vehs[vidx].opskill,_vehs[vidx].drskill = float(skill[1]),float(skill[2])
			# 				if _vehs[vidx].opskill<0:
			# 					sErrMes = "opskill is less than 0.0 (opskill = "+str(_vehs[vidx].opskill)+")"
			# 					raise ValueError(sErrMes)
			# 				if _vehs[vidx].drskill<0:
			# 					sErrMes = "drskill is less than 0.0 (drskill = "+str(_vehs[vidx].drskilll)+")"
			# 					raise ValueError(sErrMes)
			# 				vlists.remove(vidx)
						
					##20180904
			vidx+=1
			

	if skills!=None:
		idx=0
		for skill in skills:
			if not "OperationSkill" in skill:
				if idx<len(vlists):
					_vehs[vlists[idx]].opskill,_vehs[vlists[idx]].drskill = float(skill[1]),float(skill[2])
					if _vehs[vlists[idx]].opskill<0:
						sErrMes = "delivery skill (aka opskill) set to less than 0.0 (opskill = "+str(_vehs[vlists[idx]].opskill)+")"
						raise ValueError(sErrMes)
					if _vehs[vlists[idx]].drskill<0:
						sErrMes = "driving skill (aka drskill) set to less than 0.0 (drskill = "+str(_vehs[vlists[idx]].drskill)+")"
						raise ValueError(sErrMes)
					idx+=1

	
	for v in _vehs:
		v.push_customer(v.enddepot,argvs)


		depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

		servt_dict={}
		#配送時間
		for k in range(len(depo_idx)-1):
			servt_dict[v.route[depo_idx[k]]]=0
			servt=0
			for j in range(depo_idx[k]+1,depo_idx[k+1]):
				if v.route[j].requestType=="DELIVERY" and v.route[j].custno[0]!='b':
					servt+=v.route[j].depotservt
			if v.route[depo_idx[k]+1].custno!="0" and v.route[depo_idx[k]+1].custno[0]!="b": #休憩スポットも
				servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
			else:
				servt_dict[v.route[depo_idx[k]]]+=servt
		#集荷時間
		servt_dict[v.enddepot]=0
		for k in range(1,len(depo_idx)):
			servt=0
			for j in range(depo_idx[k-1]+1,depo_idx[k]):
				if v.route[j].requestType=="PICKUP":
					servt+=v.route[j].depotservt
			servt_dict[v.enddepot]+=servt

		load=[0 for c in v.route]
		load2=[0 for c in v.route]
		for i in range(len(v.route)-1):
			if i in depo_idx:
				for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
					if v.route[j].requestType=="DELIVERY":
						if v.route[j].custno[0]=="b":
							load[i]+=v.route[j].dem
							load2[i]+=v.route[j].dem2
			else:
				if v.route[i].custno[0]=="b":
					if v.route[i].requestType=="DELIVERY":
						load[i]=load[i-1]-v.route[i].dem
						load2[i]=load2[i-1]-v.route[i].dem2
					else:
						load[i]=load[i-1]+v.route[i].dem
						load2[i]=load2[i-1]+v.route[i].dem2
				else:
					load[i]=load[i-1]
					load2[i]=load2[i-1]

		for i in reversed(range(len(load))):
			if i in depo_idx and i+1 in depo_idx:
				load[i]=load[i+1]
				load2[i]=load2[i+1]

		load=[i if i>1e-9 else 0 for i in load] #誤差対策
		load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

		no_park_idx=[]
		for c in v.route[depo_idx[0]+1:depo_idx[1]]:
			if c.requestType=="DELIVERY":
				break
		else:
			if load[0]==0 and load2[0]==0:
				no_park_idx.append(0)
		
		for i in range(1,len(depo_idx)-1):
			if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
				for c in v.route[depo_idx[i]+1:depo_idx[i+1]]:
					if c.requestType=="DELIVERY":
						break
				else:
					if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
						no_park_idx.append(depo_idx[i])
		if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
			no_park_idx.append(depo_idx[-1])

		pick_opt_flag=False
		non_depo=False
		if argvs.pickup_flag==True:
			for i in reversed(range(1,len(v.route)-1)):
				if v.route[i].custno!="0":
					if v.route[i].custno[0]!="b":
						non_depo=True
						if v.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
				elif non_depo==True:
					break
		
		if argvs.opt_unassigned_flag==True:
			while argvs.bulkShipping_flag==False and len([c for c in v.route[1:-1] if c.custno!="0" or c.custno.startswith("b")])!=0:
				impass,_,_,_,unass_c=check_impassability(_custs,v,v.lv[0],1,servt_dict,len(v.route)-1,no_park_idx,False,argvs)
				if impass==False:
					#通行不可
					if argvs.opt_unassigned_flag==True:
						#未割り当て荷物最適化で、入らない荷物を除外する
						if unass_c.deny_unass!=True:
							remove_customers_specified([unass_c],v,argvs)
						else:
							sErrMes = "failed to read initial solution due to cost of -1"
							raise ValueError(sErrMes)
					else:
						sErrMes = "failed to read initial solution due to cost of -1"
						raise ValueError(sErrMes)
				else:
					#通行可
					break
		else:
			if argvs.bulkShipping_flag==False and len([c for c in v.route[1:-1] if c.custno!="0" or c.custno.startswith("b")])!=0:
				if check_impassability(_custs,v,v.lv[0],1,servt_dict,len(v.route)-1,no_park_idx,False,argvs)[0]==False:
					sErrMes = "failed to read initial solution due to cost of -1"
					raise ValueError(sErrMes)

	#訪問数上限を超えている場合
	for v in _vehs:
		#visitnum=len([len([*group]) for i,group in groupby([c.spotid for c in v.route[1:-1]])])-len([c for c in v.route[1:-1] if c.custno=="0" and c.custno[0]!="b"])
		#v_spotid=[c.spotid for c in v.route]
		visitnum=calc_visitnum(v.route)

		if v.maxvisit>0 and visitnum>v.maxvisit:
			if argvs.opt_unassigned_flag==True:
				#未割り当て荷物最適化で、入らない荷物を除外する
				while calc_visitnum(v.route)>v.maxvisit:
					can_unass = [c for c in v.route if c.deny_unass==False and c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e" ] #除外可能荷物のリスト
					if len(can_unass)>0:
						#除外可能荷物があれば1つ除外する
						remove_customers_specified([can_unass[-1]],v,argvs)
					else:
						#除外可能荷物が無いならエラー
						sErrMes = "initial solution (aka iniroutes) includes plan with over max visits (aka maxvisit) (visitnum = "+str(visitnum)+", maxvisit = "+str(v.maxvisit)+")"
						raise ValueError(sErrMes)
			else:
				sErrMes = "initial solution (aka iniroutes) includes plan with over max visits (aka maxvisit) (visitnum = "+str(visitnum)+", maxvisit = "+str(v.maxvisit)+")"
				raise ValueError(sErrMes)

	tcnum=0
	tied_customers=[]
	tied_customers.append(TiedCustomer("0",_custs[0].spotid,_custs[0].ready_fs,_custs[0].due_fs,_custs[0].x,_custs[0].y))
	tied_customers[tcnum].customers.append(_custs[0])
	tied_customers[tcnum].servt=_custs[0].servt
	tied_customers[tcnum].dem=_custs[0].dem
	tied_customers[tcnum].dem2=_custs[0].dem2
	tied_customers[tcnum].reje_ve=_custs[0].reje_ve
	tied_customers[tcnum].parkt_open=_custs[0].parkt_open
	tied_customers[tcnum].parkt_arrive=_custs[0].parkt_arrive
	tied_customers[tcnum].depotservt=_custs[0].depotservt
	tied_customers[tcnum].additionalcust=[tied_customers[tcnum]]
	tied_customers[tcnum].demdivideunit=_custs[0].demdivideunit
	tied_customers[tcnum].requestType=_custs[0].requestType
	tied_customers[tcnum].deny_unass=_custs[0].deny_unass #未割り当て荷物
	tcnum+=1

	eps=1e-12

	if argvs.bulkShipping_flag:	
		for v in _vehs:	
			v.route[0]=tied_customers[0]

			for i,c in enumerate(v.route[1:-1]):
				if argvs.init_changecust=="free" and c.custno!="0" and v.route[i].spotid==c.spotid and compare_time(v.route[i].ready_fs, c.ready_fs)==0 and compare_time(v.route[i].due_fs, c.due_fs)==0 and v.route[i].requestType==c.requestType and len(v.route[i].additionalcust)==1 and len(c.additionalcust)==1 and v.route[i].custno[0]!='b' and c.custno[0]!='b' and v.route[i].deny_unass==c.deny_unass: #同スポット&同時間枠&dem同符号&dem2同符号が連続していたらtie-upする
					tied_customers[tcnum-1].customers.append(c)
					tied_customers[tcnum-1].servt=sum([cust.servt for cust in tied_customers[tcnum-1].customers])
					tied_customers[tcnum-1].dem=sum([cust.dem for cust in tied_customers[tcnum-1].customers])
					tied_customers[tcnum-1].dem2=sum([cust.dem2 for cust in tied_customers[tcnum-1].customers])
					tied_customers[tcnum-1].reje_ve=list(set([v for cust in tied_customers[tcnum-1].customers for v in cust.reje_ve])) #重複削除
					tied_customers[tcnum-1].depotservt=sum([cust.depotservt for cust in tied_customers[tcnum-1].customers])

				else:
					if c.custno!="0":
						if c.custno[0]!='b':
							tied_customers.append(TiedCustomer(str(tcnum),c.spotid,c.ready_fs,c.due_fs,c.x,c.y))
						else:
							tied_customers.append(TiedCustomer(c.custno,c.spotid,c.ready_fs,c.due_fs,c.x,c.y))
						tied_customers[tcnum].customers.append(c)
						tied_customers[tcnum].servt=c.servt
						tied_customers[tcnum].dem=c.dem
						tied_customers[tcnum].dem2=c.dem2
						tied_customers[tcnum].reje_ve=c.reje_ve
						tied_customers[tcnum].spotno=c.spotno
						tied_customers[tcnum].parkt_open=c.parkt_open
						tied_customers[tcnum].parkt_arrive=c.parkt_arrive
						tied_customers[tcnum].depotservt=c.depotservt
						tied_customers[tcnum].requestType=c.requestType
						tied_customers[tcnum].deny_unass=c.deny_unass #未割り当て荷物
						if len(c.additionalcust)==1:
							tied_customers[tcnum].additionalcust=[tied_customers[tcnum]]
						tied_customers[tcnum].demdivideunit=c.demdivideunit

						v.route[i+1]=tied_customers[tcnum]
					
						tcnum+=1
					else:
						v.route[i+1]=copy.copy(tied_customers[0])
						v.route[i+1].additionalcust=[v.route[i+1]]


			v.route=[c for c in v.route if type(c)==TiedCustomer]

			if len(v.route)<=2:
				continue	

			depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

			servt_dict={}
			#配送時間
			for k in range(len(depo_idx)-1):
				servt_dict[v.route[depo_idx[k]]]=0
				servt=0
				for j in range(depo_idx[k]+1,depo_idx[k+1]):
					if v.route[j].requestType=="DELIVERY" and v.route[j].custno[0]!='b':
						servt+=v.route[j].depotservt
				if v.route[depo_idx[k]+1].custno!="0":
					servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
				else:
					servt_dict[v.route[depo_idx[k]]]+=servt
			#集荷時間
			servt_dict[v.enddepot]=0
			for k in range(1,len(depo_idx)):
				servt=0
				for j in range(depo_idx[k-1]+1,depo_idx[k]):
					if v.route[j].requestType=="PICKUP":
						servt+=v.route[j].depotservt
				servt_dict[v.enddepot]+=servt

			load=[0 for c in v.route]
			load2=[0 for c in v.route]
			for i in range(len(v.route)-1):
				if i in depo_idx:
					for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
						if v.route[j].requestType=="DELIVERY":
							if v.route[j].custno[0] != "b":
									load[i]+=v.route[j].dem
									load2[i]+=v.route[j].dem2
				else:
					if v.route[i].custno[0] != "b":
						if v.route[i].requestType=="DELIVERY":
							load[i]=load[i-1]-v.route[i].dem
							load2[i]=load2[i-1]-v.route[i].dem2
						else:
							load[i]=load[i-1]+v.route[i].dem
							load2[i]=load2[i-1]+v.route[i].dem2

			for i in reversed(range(len(load))):
				if i in depo_idx and i+1 in depo_idx:
					load[i]=load[i+1]
					load2[i]=load2[i+1]

			load=[i if i>1e-9 else 0 for i in load] #誤差対策
			load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

			no_park_idx=[]
			for c in v.route[depo_idx[0]+1:depo_idx[1]]:
				if c.requestType=="DELIVERY":
					break
			else:
				if load[0]==0 and load2[0]==0:
					no_park_idx.append(0)
			
			for i in range(1,len(depo_idx)-1):
				if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
					for c in v.route[depo_idx[i]+1:depo_idx[i+1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
							no_park_idx.append(depo_idx[i])
			if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
				no_park_idx.append(depo_idx[-1])

			non_depo=False
			if argvs.pickup_flag==True:
				for i in reversed(range(1,len(v.route)-1)):
					if v.route[i].custno!="0":
						if v.route[i].custno[0]!="b":
							non_depo=True
							if v.route[i].requestType=="PICKUP":
								break
					elif non_depo==True:
						break

			if argvs.opt_unassigned_flag==True:
				while argvs.bulkShipping_flag==False and len([c for c in v.route[1:-1] if c.custno!="0" or c.custno.startswith("b")])!=0:
					impass,_,_,_,unass_c=check_impassability(_custs,v,v.lv[0],1,servt_dict,len(v.route)-1,no_park_idx,False,argvs)
					if impass==False:
						#通行不可
						if argvs.opt_unassigned_flag==True:
							#未割り当て荷物最適化で、入らない荷物を除外する
							if unass_c.deny_unass!=True:
								remove_customers_specified([unass_c],v,argvs)
							else:
								sErrMes = "failed to read initial solution due to cost of -1"
								raise ValueError(sErrMes)
						else:
							sErrMes = "failed to read initial solution due to cost of -1"
							raise ValueError(sErrMes)
					else:
						#通行可
						break
			else:
				if check_impassability(_custs,v,v.lv[0],1,servt_dict,len(v.route)-1,no_park_idx,False,argvs)[0]==False:
					sErrMes = "failed to read initial solution due to cost of -1"
					raise ValueError(sErrMes)

		#飛び地対応
		for c in tied_customers[:]:
			if c.additionalcust==[]:
				for ac in c.customers[0].additionalcust[1:]:
					tied_customers.append(TiedCustomer(str(tcnum),ac.spotid,ac.ready_fs,ac.due_fs,ac.x,ac.y))
					tied_customers[tcnum].customers.append(ac)
					tied_customers[tcnum].servt=ac.servt
					tied_customers[tcnum].dem=ac.dem
					tied_customers[tcnum].dem2=ac.dem2
					tied_customers[tcnum].reje_ve=ac.reje_ve
					tied_customers[tcnum].spotno=ac.spotno
					tied_customers[tcnum].parkt_open=ac.parkt_open
					tied_customers[tcnum].parkt_arrive=ac.parkt_arrive
					tied_customers[tcnum].depotservt=ac.depotservt
					tied_customers[tcnum].additionalcust=[]
					tied_customers[tcnum].demdivideunit=ac.demdivideunit
					tied_customers[tcnum].requestType=ac.requestType
					tied_customers[tcnum].deny_unass=ac.deny_unass

					tcnum+=1
		for c in tied_customers:
			if c.additionalcust==[]:
				for ac in c.customers[0].additionalcust:
					for tc in tied_customers:
						if tc.customers[0].custno==ac.custno:
							c.additionalcust.append(tc)
							break

		_custs=tied_customers.copy()+[c for c in _custs if not c in [cust for tc in tied_customers for cust in tc.customers]]

		for v in _vehs:
			v.push_customer(v.enddepot,argvs)

			if argvs.opt_unassigned_flag==True:
				while argvs.bulkShipping_flag==False and len([c for c in v.route[1:-1] if c.custno!="0" or c.custno.startswith("b")])!=0:
					impass,_,_,_,unass_c=check_impassability(_custs,v,v.lv[0],1,servt_dict,len(v.route)-1,no_park_idx,False,argvs)
					if impass==False:
						#通行不可
						if argvs.opt_unassigned_flag==True:
							#未割り当て荷物最適化で、入らない荷物を除外する
							if unass_c.deny_unass!=True:
								remove_customers_specified([unass_c],v,argvs)
							else:
								sErrMes = "failed to read initial solution due to cost of -1"
								raise ValueError(sErrMes)
						else:
							sErrMes = "failed to read initial solution due to cost of -1"
							raise ValueError(sErrMes)
					else:
						#通行可
						break
			else:
				if check_impassability(_custs,v,v.lv[0],1,servt_dict,len(v.route)-1,no_park_idx,False,argvs)[0]==False:
					sErrMes = "failed to read initial solution due to cost of -1"
					raise ValueError(sErrMes)

			tc=TiedCustomer(str(tcnum),v.route[-1].spotid,v.route[-1].ready_fs,v.route[-1].due_fs,v.route[-1].x,v.route[-1].y)
			tc.customers.append(v.route[-1])
			tc.servt=v.route[-1].servt
			tc.dem=v.route[-1].dem
			tc.dem2=v.route[-1].dem2
			tc.reje_ve=v.route[-1].reje_ve
			tc.spotno=v.route[-1].spotno
			tc.parkt_open=v.route[-1].parkt_open
			tc.parkt_arrive=v.route[-1].parkt_arrive
			tc.depotservt=v.route[-1].depotservt
			tc.additionalcust=[tc]
			tc.demdivideunit=v.route[-1].demdivideunit
			tc.requestType=v.route[-1].requestType
			tc.deny_unass=v.route[-1].deny_unass #未割り当て荷物
			if v.route[-1].custno=="0":
				tc.custno="0"
			v.route[-1]=tc
			tcnum+=1

	if argvs.break_flag:
		#spotid=""対策
		for v in _vehs:
			for arr_p,c in enumerate(v.route):
				if c.spotid=="":
					#spotid無し対応
					from_spotno = v.route[arr_p-1].spotno
					to_spotno = v.route[arr_p+1].spotno
					ttable1 = get_ttable(v.vtype, v.lv[from_spotno], argvs.management_ttable)
					tdiff = ttable1[from_spotno][to_spotno]
					from_time = max(c.ready_fs - v.lv[arr_p-1], 0)
					to_time = max(tdiff - from_time, 0)
					last_spotno = add_table(v, from_spotno, to_spotno, from_time, to_time, arr_p, argvs)	#時間テーブルなどに休憩スポットを追加
					c.spotno = last_spotno
			v.update_totalcost_dtable(argvs)

		if get_breakspot_pattern(_vehs, argvs)!=3:
			#パターン1・2の場合は、初期解に正しく休憩スポットが入っているかチェック
			if argvs.opt_unassigned_flag == True:
				while True:
					try:
						check_break_initroute(_vehs, argvs)
					except Exception as e:
						if e.args[1].deny_unass==True:
							sErrMes = "failed to create initial solution due to cost of -1 or unvisitable vehicles or max visits or fixed vehicles"
							raise ValueError(sErrMes)
						for v in _vehs:
							if e.args[1] in v.route:
								remove_customers_specified([e.args[1]],v,argvs)
								if v.reserved_v_flag==True:
									_custs.remove(e.args[1])
								break
						else:
							raise ValueError(e.args[0])
					else:
						break
			else:
				check_break_initroute(_vehs, argvs)

	#未割当荷物
	rem_customers=_custs[:]
	if argvs.bulkShipping_flag==False:
		for v in _vehs:
			for c in v.route[1:-1]:
				if c.custno!="0" and c.custno[0]!="b":
					for ac in c.additionalcust:
						ac.changecust=argvs.init_changecust
						rem_customers.remove(ac)
	else:
		for v in _vehs:
			for c in v.route[1:-1]:
				if c.custno!="0" and c.custno[0]!="b":
					for ac in c.additionalcust:
						ac.changecust=argvs.init_changecust
						rem_customers.remove(ac)

		rem_customers[0]=rem_customers[0].customers[0]

	for c in rem_customers[1:]:
		for ac in c.additionalcust:
			ac.changecust="free"

	#changecust の設定
	for c in _custs[:]:
		for ir in argvs.initroute:
			if c.custno in argvs.initroute[ir]:
				c.changecust=argvs.init_changecust
				break

	if len(rem_customers)>1:
		if argvs.bulkShipping_flag==True:
			tcusts=[c for c in _custs[1:] if not c in rem_customers]
		else:
			tcusts=[c for c in _custs[:] if not c in rem_customers]
		if argvs.opt_unassigned_flag == True:
			#未割り当て荷物最適化有り
			rem_customers=unass_proc(rem_customers,_vehs,argvs)
		else:
			#未割り当て荷物最適化無し
			rem_customers=construction_II(rem_customers,_vehs,len(_vehs),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs)
		rem_customers=[c for c in rem_customers if c.custno[0]!="b"]
		if set(tcusts+rem_customers)!=set(_custs):
			_custs=rem_customers+tcusts


	#荷物自動分割
	autoloaddivide_flag=False
	for c in _custs:
		if c.demdivideunit!=1:
			autoloaddivide_flag=True
			break

	if autoloaddivide_flag==True:
		#同じCUSTNOが連続する場合は削除する
		if argvs.bulkShipping_flag==False:
			for v in _vehs:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
					continue
				i=1
				while True:
					if i>len(v.route)-2:
						break

					if v.route[i].custno==v.route[i-1].custno:
						if v.route[i].custno!="0":
							for ac in v.route[i-1].additionalcust:
								ac.dem+=v.route[i].dem
								ac.dem2+=v.route[i].dem2
								ac.demdivideunit+=v.route[i].demdivideunit
								if v.route[i].changecust=="additive":
									ac.changecust="additive"
							for ac in v.route[i].additionalcust:
								_custs.remove(ac)
							remove_customers_specified([v.route[i]],v,argvs)
							i=1
							continue

					i+=1

	if argvs.delaystart2_flag==True and argvs.break_flag==False : #休憩スポットが有効ならばdelayしない
		delay_arr_time2(_vehs,_vehs,argvs)
	
	if argvs.break_flag==True:
		#spotid=""対策
		for v in _vehs:
			for arr_p,c in enumerate(v.route):
				if c.spotid=="":
					#spotid無し対応
					from_spotno = v.route[arr_p-1].spotno
					to_spotno = v.route[arr_p+1].spotno
					ttable1 = get_ttable(v.vtype, v.lv[from_spotno], argvs.management_ttable)
					tdiff = ttable1[from_spotno][to_spotno]
					from_time = max(c.ready_fs - v.lv[arr_p-1], 0)
					to_time = max(tdiff - from_time, 0)
					last_spotno = add_table(v, from_spotno, to_spotno, from_time, to_time, arr_p, argvs)	#時間テーブルなどに休憩スポットを追加
					c.spotno = last_spotno

	for v in _vehs:
		v.update_totalcost_dtable(argvs)

	if argvs.break_flag:
		if get_breakspot_pattern(_vehs, argvs)==3:
			# 休憩スポットのCUST IDのふりなおし(パターン３のみ)
			bcnt = 0
			for bv in _vehs:
				for r in bv.route:
					if r.custno[0] == 'b':
						r.custno = 'b' + str(bcnt)
						bcnt += 1

	if rank==0:
		logging.log(logging.INFO,sLogBuf)
	sLogBuf = "after initialization"
	if rank==0:
		logging.log(logging.INFO,sLogBuf)
	sLogBuf_veh = "\n"
	totalcost,totalcost_wolast=0.0,0.0
	used_customers=[]
	for v in _vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			sLogBuf_veh = v.output(argvs, sLogBuf_veh,used_customers,divided)
			sLogBuf_veh += "\n"
		totalcost+=v.totalcost
		totalcost_wolast+=v.totalcost_wolast
	if rank==0:
		logging.log(logging.INFO,sLogBuf_veh)
	sLogBuf = "\n"
	sLogBuf += "-----\n"
	sLog = ["TOTAL_DISTANCE:",round(totalcost,2)]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["TOTAL_DISTANCE_TO_LASTCUST:",round(totalcost_wolast,2)]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLogBuf += "-----\n"

	# daic nbflag->_nbflag (元はグローバル変数にアクセスしていた)
	tnbflag=NbFlag(_nbflag.relflag,_nbflag.inswapflag,_nbflag.exflag,_nbflag.crossflag,False)
	#tnbflag=NbFlag(nbflag.relflag,nbflag.inswapflag,nbflag.exflag,nbflag.crossflag,False)

	if rank==0:
		logging.log(logging.INFO,sLogBuf)

	return tnbflag,_custs


def c11(i,u,j,veh,ilv,ilv_new,ulv,argvs):
	mu = 0.5
	dtable_ilv = get_dtable(veh.vtype, ilv, argvs.management_dtable)
	dtable_ilv_new = get_dtable(veh.vtype, ilv_new, argvs.management_dtable)
	dtable_ulv = get_dtable(veh.vtype, ulv, argvs.management_dtable)
	return dtable_ilv_new[i.spotno][u.spotno] + dtable_ulv[u.spotno][j.spotno]-mu*dtable_ilv[i.spotno][j.spotno]

def c12(i,u,j,veh,ilv,ulv,bj,argvs):
	ttable_ilv = get_ttable(veh.vtype, ilv, argvs.management_ttable)
	ttable_ulv = get_ttable(veh.vtype, ulv, argvs.management_ttable)
	bju=ilv+ttable_ilv[i.spotno][u.spotno]*veh.drskill+ttable_ulv[u.spotno][j.spotno]*veh.drskill
	return bju-bj

def c1(i,u,j,veh,ilv,ilv_new,ulv,bj,argvs):
	alpha1=alpha2=0.5
	return  alpha1*c11(i,u,j,veh,ilv,ilv_new,ulv,argvs)+alpha2*c12(i,u,j,veh,ilv_new,ulv,bj,argvs)

def check_impassability(customers,veh,lv_t,start_idx,servt_dict,last_idx,no_park_idx,pick_opt_flag,argvs):
	dist=0.0
	power=0.0
	exp=0.0

	pick_opt_status, pick_opt_idx = get_pick_opt_status(veh, argvs)

	if pick_opt_flag==True and pick_opt_status==False: #集荷最適化
		for i in range(start_idx,len(veh.route)-1):
			if veh.route[i-1].custno==veh.route[i].custno and veh.route[i].custno!="0":
				continue

			ttable1 = get_ttable(veh.vtype, lv_t, argvs.management_ttable)
			if ttable1[veh.route[i-1].spotno][veh.route[i].spotno]==-1:
				return False,dist,power,exp,veh.route[i] 

			dtable1 = get_dtable(veh.vtype, lv_t, argvs.management_dtable)
			if dtable1[veh.route[i-1].spotno][veh.route[i].spotno]==-1:
				return False,dist,power,exp,veh.route[i] 

			if argvs.management_etable:
				etable1 = get_etable(veh.vtype, veh.etype, lv_t, argvs.management_etable)
				if etable1[veh.route[i-1].spotno][veh.route[i].spotno]==-1:
					return False,dist,power,exp,veh.route[i] 

			if argvs.management_xtable:
				xtable1 = get_xtable(veh.vtype, lv_t, argvs.management_xtable)
				if xtable1[veh.route[i-1].spotno][veh.route[i].spotno]==-1:
					return False,dist,power,exp,veh.route[i] 

			if argvs.lastc_flag==False or i<last_idx:
				dist+=dtable1[veh.route[i-1].spotno][veh.route[i].spotno]
				if argvs.management_etable:
					power+=etable1[veh.route[i-1].spotno][veh.route[i].spotno]
				if argvs.management_xtable:
					exp+=xtable1[veh.route[i-1].spotno][veh.route[i].spotno]

			arr_t=lv_t+ttable1[veh.route[i-1].spotno][veh.route[i].spotno]*veh.drskill
			if veh.route[i] in servt_dict:
				if veh.route[i].spotid!=veh.route[i-1].spotid and not veh.route[i].spotid.startswith("e") and not i in no_park_idx:
					lv_t=max(arr_t+veh.route[i].parkt_arrive,veh.route[i].ready_fs)+servt_dict[veh.route[i]]*veh.opskill
				else:
					lv_t=max(arr_t,veh.route[i].ready_fs)+servt_dict[veh.route[i]]*veh.opskill
			else:
				if veh.route[i].spotid!=veh.route[i-1].spotid and not veh.route[i].spotid.startswith("e") and not veh.route[i].custno.startswith("b") and not i in no_park_idx:
					lv_t=max(arr_t+veh.route[i].parkt_arrive,veh.route[i].ready_fs)+veh.route[i].servt*veh.opskill
				elif veh.route[i].custno[0]!="b":
					lv_t=max(arr_t,veh.route[i].ready_fs)+veh.route[i].servt*veh.opskill
				else:
					lv_t=max(arr_t,veh.route[i].ready_fs)+veh.route[i].servt
			if veh.route[i].spotid!=veh.route[i-1].spotid and not veh.route[i].spotid.startswith("e") and not veh.route[i].spotid.startswith("b") and not i in no_park_idx:
				lv_t+=veh.route[i].parkt_open
			if veh.route[i].custno.startswith("e"):
				lv_t+=veh.chg_batt[i]/veh.route[i].e_rate	

		ttable3 = get_ttable(veh.vtype, lv_t, argvs.management_ttable)
		if ttable3[veh.route[-2].spotno][customers[0].spotno]==-1:
			return False,dist,power,exp,customers[0]

		dtable3 = get_dtable(veh.vtype, lv_t, argvs.management_dtable)
		if dtable3[veh.route[-2].spotno][customers[0].spotno]==-1:
			return False,dist,power,exp,customers[0]

		if argvs.management_etable:
			etable3 = get_etable(veh.vtype, veh.etype, lv_t, argvs.management_etable)
			if etable3[veh.route[-2].spotno][customers[0].spotno]==-1:
				return False,dist,power,exp,customers[0]

		if argvs.management_xtable:
			xtable3 = get_xtable(veh.vtype, lv_t, argvs.management_xtable)
			if xtable3[veh.route[-2].spotno][customers[0].spotno]==-1:
				return False,dist,power,exp,customers[0]

		if argvs.lastc_flag==False:
			dist+=dtable3[veh.route[-2].spotno][customers[0].spotno]
			if argvs.management_etable:
				power+=etable3[veh.route[-2].spotno][customers[0].spotno]
			if argvs.management_xtable:
				exp+=xtable3[veh.route[-2].spotno][customers[0].spotno]

		arr_t=lv_t+ttable3[veh.route[-2].spotno][customers[0].spotno]*veh.drskill
		lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[veh.route[-1]]+veh.depotservt)*veh.opskill
		lv_t+=customers[0].parkt_open

		ttable4 = get_ttable(veh.vtype, lv_t, argvs.management_ttable)
		if ttable4[customers[0].spotno][veh.route[-1].spotno]==-1:
			return False,dist,power,exp,veh.route[-1]

		dtable4 = get_dtable(veh.vtype, lv_t, argvs.management_dtable)
		if dtable4[customers[0].spotno][veh.route[-1].spotno]==-1:
			return False,dist,power,exp,veh.route[-1]

		if argvs.management_etable:
			etable4 = get_etable(veh.vtype, veh.etype, lv_t, argvs.management_etable)
			if etable4[customers[0].spotno][veh.route[-1].spotno]==-1:
				return False,dist,power,exp,veh.route[-1]

		if argvs.management_xtable:
			xtable4 = get_xtable(veh.vtype, lv_t, argvs.management_xtable)
			if xtable4[customers[0].spotno][veh.route[-1].spotno]==-1:
				return False,dist,power,exp,veh.route[-1]

		if argvs.lastc_flag==False:
			dist+=dtable4[customers[0].spotno][veh.route[-1].spotno]
			if argvs.management_etable:
				power+=etable4[customers[0].spotno][veh.route[-1].spotno]
			if argvs.management_xtable:
				exp+=xtable4[customers[0].spotno][veh.route[-1].spotno]		
	else:
		for i in range(start_idx,len(veh.route)):
			if veh.route[i-1].custno==veh.route[i].custno and veh.route[i].custno!="0":
				continue

			for j in range(i,len(veh.route)-1):
				if veh.route[j].custno!="0":
					break
			else: #デポ削除後の通行不可チェック
				if pick_opt_flag==False:
					if veh.route[i-1].custno[0]=="b" and veh.route[i-1].spotid=="":
						for l in reversed(range(0, i-1)):
							if veh.route[l].custno[0]!="b":
								break
						else:
							return False,dist,power,exp,veh.route[i]

						# from
						lv_from = veh.lv[l]
						ttable2 = get_ttable(veh.vtype, lv_from, argvs.management_ttable)
						if ttable2[veh.route[l].spotno][veh.route[-1].spotno]==-1:
							return False,dist,power,exp,veh.route[-1]

						dtable2 = get_dtable(veh.vtype, lv_from, argvs.management_dtable)
						if dtable2[veh.route[l].spotno][veh.route[-1].spotno]==-1:
							return False,dist,power,exp,veh.route[-1]

						if argvs.management_etable:
							etable2 = get_etable(veh.vtype, veh.etype, lv_from, argvs.management_etable)
							if etable2[veh.route[l].spotno][veh.route[-1].spotno]==-1:
								return False,dist,power,exp,veh.route[-1]

						if argvs.management_xtable:
							xtable2 = get_xtable(veh.vtype, lv_from, argvs.management_xtable)
							if xtable2[veh.route[l].spotno][veh.route[-1].spotno]==-1:
								return False,dist,power,exp,veh.route[-1]

						# to
						lv_to = veh.lv[i-1]
						ttable2 = get_ttable(veh.vtype, lv_to, argvs.management_ttable)
						if ttable2[veh.route[l].spotno][veh.route[-1].spotno]==-1:
							return False,dist,power,exp,veh.route[-1]

						dtable2 = get_dtable(veh.vtype, lv_to, argvs.management_dtable)
						if dtable2[veh.route[l].spotno][veh.route[-1].spotno]==-1:
							return False,dist,power,exp,veh.route[-1]

						if argvs.management_etable:
							etable2 = get_etable(veh.vtype, veh.etype, lv_to, argvs.management_etable)
							if etable2[veh.route[l].spotno][veh.route[-1].spotno]==-1:
								return False,dist,power,exp,veh.route[-1]

						if argvs.management_xtable:
							xtable2 = get_xtable(veh.vtype, lv_to, argvs.management_xtable)
							if xtable2[veh.route[l].spotno][veh.route[-1].spotno]==-1:
								return False,dist,power,exp,veh.route[-1]

					else:
						ttable2 = get_ttable(veh.vtype, lv_t, argvs.management_ttable)
						if ttable2[veh.route[i-1].spotno][veh.route[-1].spotno]==-1:
							return False,dist,power,exp,veh.route[-1]

						dtable2 = get_dtable(veh.vtype, lv_t, argvs.management_dtable)
						if dtable2[veh.route[i-1].spotno][veh.route[-1].spotno]==-1:
							return False,dist,power,exp,veh.route[-1]

						if argvs.management_etable:
							etable2 = get_etable(veh.vtype, veh.etype, lv_t, argvs.management_etable)
							if etable2[veh.route[i-1].spotno][veh.route[-1].spotno]==-1:
								return False,dist,power,exp,veh.route[-1]

						if argvs.management_xtable:
							xtable2 = get_xtable(veh.vtype, lv_t, argvs.management_xtable)
							if xtable2[veh.route[i-1].spotno][veh.route[-1].spotno]==-1:
								return False,dist,power,exp,veh.route[-1]

					if argvs.lastc_flag==False:
						dist+=dtable2[veh.route[i-1].spotno][veh.route[-1].spotno]
						if argvs.management_etable:
							power+=etable2[veh.route[i-1].spotno][veh.route[-1].spotno]
						if argvs.management_xtable:
							exp+=xtable2[veh.route[i-1].spotno][veh.route[-1].spotno]

					break

			if i!= len(veh.route)-1 and veh.route[i].custno=="0" and veh.route[i+1].custno.startswith("e"):
				ttable3 = get_ttable(veh.vtype, lv_t, argvs.management_ttable)
				if ttable3[veh.route[i-1].spotno][veh.route[i+1].spotno]==-1:
					return False,dist,power,exp,veh.route[i+1]

				dtable3 = get_dtable(veh.vtype, lv_t, argvs.management_dtable)
				if dtable3[veh.route[i-1].spotno][veh.route[i+1].spotno]==-1:
					return False,dist,power,exp,veh.route[i+1]

				if argvs.management_etable:
					etable3 = get_etable(veh.vtype, veh.etype, lv_t, argvs.management_etable)
					if etable3[veh.route[i-1].spotno][veh.route[i+1].spotno]==-1:
						return False,dist,power,exp,veh.route[i+1]

				if argvs.management_xtable:
					xtable3 = get_xtable(veh.vtype, lv_t, argvs.management_xtable)
					if xtable3[veh.route[i-1].spotno][veh.route[i+1].spotno]==-1:
						return False,dist,power,exp,veh.route[i+1]

			if veh.route[i-1].custno[0]=="b" and veh.route[i-1].spotid=="":
				for l in reversed(range(0, i-1)):
					if veh.route[l].custno[0]!="b":
						break
				else:
					return False,dist,power,exp,veh.route[i]

				for m in (range(i, len(veh.route))):
					if veh.route[m].custno[0]!="b":
						break
				else:
					return False,dist,power,exp,veh.route[i]

				# from
				lv_from = veh.lv[l]
				ttable1 = get_ttable(veh.vtype, lv_from, argvs.management_ttable)
				if ttable1[veh.route[l].spotno][veh.route[m].spotno]==-1:
					return False,dist,power,exp,veh.route[m]

				dtable1 = get_dtable(veh.vtype, lv_from, argvs.management_dtable)
				if dtable1[veh.route[l].spotno][veh.route[m].spotno]==-1:
					return False,dist,power,exp,veh.route[m]

				if argvs.management_etable:
					etable1 = get_etable(veh.vtype, veh.etype, lv_from, argvs.management_etable)
					if etable1[veh.route[l].spotno][veh.route[m].spotno]==-1:
						return False,dist,power,exp,veh.route[m]

				if argvs.management_xtable:
					xtable1 = get_xtable(veh.vtype, lv_from, argvs.management_xtable)
					if xtable1[veh.route[l].spotno][veh.route[m].spotno]==-1:
						return False,dist,power,exp,veh.route[m]

				# to
				lv_to = veh.lv[i-1]
				ttable1 = get_ttable(veh.vtype, lv_to, argvs.management_ttable)
				if ttable1[veh.route[l].spotno][veh.route[m].spotno]==-1:
					return False,dist,power,exp,veh.route[m]

				dtable1 = get_dtable(veh.vtype, lv_to, argvs.management_dtable)
				if dtable1[veh.route[l].spotno][veh.route[m].spotno]==-1:
					return False,dist,power,exp,veh.route[m]

				if argvs.management_etable:
					etable1 = get_etable(veh.vtype, veh.etype, lv_to, argvs.management_etable)
					if etable1[veh.route[l].spotno][veh.route[m].spotno]==-1:
						return False,dist,power,exp,veh.route[m]

				if argvs.management_xtable:
					xtable1 = get_xtable(veh.vtype, lv_to, argvs.management_xtable)
					if xtable1[veh.route[l].spotno][veh.route[m].spotno]==-1:
						return False,dist,power,exp,veh.route[m]

			else:
				ttable1 = get_ttable(veh.vtype, lv_t, argvs.management_ttable)
				if ttable1[veh.route[i-1].spotno][veh.route[i].spotno]==-1:
					return False,dist,power,exp,veh.route[i]

				dtable1 = get_dtable(veh.vtype, lv_t, argvs.management_dtable)
				if dtable1[veh.route[i-1].spotno][veh.route[i].spotno]==-1:
					return False,dist,power,exp,veh.route[i]

				if argvs.management_etable:
					etable1 = get_etable(veh.vtype, veh.etype, lv_t, argvs.management_etable)
					if etable1[veh.route[i-1].spotno][veh.route[i].spotno]==-1:
						return False,dist,power,exp,veh.route[i]

				if argvs.management_xtable:
					xtable1 = get_xtable(veh.vtype, lv_t, argvs.management_xtable)
					if xtable1[veh.route[i-1].spotno][veh.route[i].spotno]==-1:
						return False,dist,power,exp,veh.route[i]

			if argvs.lastc_flag==False or i<last_idx:
				dist+=dtable1[veh.route[i-1].spotno][veh.route[i].spotno]
				if argvs.management_etable:
					power+=etable1[veh.route[i-1].spotno][veh.route[i].spotno]
				if argvs.management_xtable:
					exp+=xtable1[veh.route[i-1].spotno][veh.route[i].spotno]

			if veh.route[i-1].spotid!="" and veh.route[i].spotid!="":
				arr_t=lv_t+ttable1[veh.route[i-1].spotno][veh.route[i].spotno]*veh.drskill
			else:
				arr_t=lv_t+ttable1[veh.route[i-1].spotno][veh.route[i].spotno]
			if veh.route[i] in servt_dict:
				if veh.route[i].spotid!=veh.route[i-1].spotid and not veh.route[i].spotid.startswith("e") and not i in no_park_idx:
					lv_t=max(arr_t+veh.route[i].parkt_arrive,veh.route[i].ready_fs)+servt_dict[veh.route[i]]*veh.opskill
				else:
					lv_t=max(arr_t,veh.route[i].ready_fs)+servt_dict[veh.route[i]]*veh.opskill
			else:
				if veh.route[i].spotid!=veh.route[i-1].spotid and not veh.route[i].spotid.startswith("e") and not veh.route[i].custno.startswith("b") and not i in no_park_idx:
					lv_t=max(arr_t+veh.route[i].parkt_arrive,veh.route[i].ready_fs)+veh.route[i].servt*veh.opskill
				elif veh.route[i].custno[0]!="b":
					lv_t=max(arr_t,veh.route[i].ready_fs)+veh.route[i].servt*veh.opskill
				else:
					lv_t=max(arr_t,veh.route[i].ready_fs)+veh.route[i].servt
			if veh.route[i].spotid!=veh.route[i-1].spotid and not veh.route[i].spotid.startswith("e") and not i in no_park_idx:
				lv_t+=veh.route[i].parkt_open
			if veh.route[i].custno.startswith("e"):
				lv_t+=veh.chg_batt[i]/veh.route[i].e_rate	

	return True,dist,power,exp,0

def calc_dist(veh,start_idx,end_idx,argvs):
	dist=0.0

	for i in range(start_idx,end_idx):
		ttable1 = get_ttable(veh.vtype, veh.lv[i-1], argvs.management_ttable)

		dtable1 = get_dtable(veh.vtype, veh.lv[i-1], argvs.management_dtable)

		dist+=dtable1[veh.route[i-1].spotno][veh.route[i].spotno]	

	return dist

def calc_power(veh,start_idx,end_idx,argvs):
	power=0.0

	if argvs.management_etable:
		for i in range(start_idx,end_idx):
			ttable1 = get_ttable(veh.vtype, veh.lv[i-1], argvs.management_ttable)

			etable1 = get_etable(veh.vtype, veh.etype, veh.lv[i-1], argvs.management_etable)

			power+=etable1[veh.route[i-1].spotno][veh.route[i].spotno]

	return power

def calc_exp(veh,start_idx,end_idx,argvs):
	exp=0.0

	if argvs.management_xtable:
		for i in range(start_idx,end_idx):
			ttable1 = get_ttable(veh.vtype, veh.lv[i-1], argvs.management_ttable)

			xtable1 = get_xtable(veh.vtype, veh.lv[i-1], argvs.management_xtable)

			exp+=xtable1[veh.route[i-1].spotno][veh.route[i].spotno]

	return exp


def halve_route(customers,veh1,veh2,num,vehicles,argvs):
	#veh1.routeのうちveh2に入れられるものを最大veh1.routeの半分までveh2に移動
	if len([c for c in veh2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>0:
		sErrMes = "veh2 not empty"
		raise ValueError(sErrMes) # sys.exit() # daic

	if argvs.break_flag:
		veh1 = remove_breakspot(veh1, vehicles, argvs)
		veh2 = remove_breakspot(veh2, vehicles, argvs)

	for c in reversed(veh1.route[1:-1]):
		if not veh2.vehno in c.reje_ve and c.custno!="0" and c.changecust=="free" :
			tveh1=copy.deepcopy(veh1)
			tveh2=copy.deepcopy(veh2)
			tveh1.route=copy.copy(veh1.route)
			tveh2.route=copy.copy(veh2.route)
			tveh2.route.insert(1,c)
			tveh1.route.remove(c)

			if argvs.break_flag:
				_management_ttable = t_dcopy(argvs.management_ttable)
				_management_dtable = t_dcopy(argvs.management_dtable)
				_management_xtable = t_dcopy(argvs.management_xtable)
				_management_etable = t_dcopy(argvs.management_etable)
				_t_route = r_backup(vehicles)
				tveh1, tveh2 = insert_breakspot(tveh1.takebreak, tveh2.takebreak, customers, tveh1, vehicles, argvs, 0, tveh2)
				if tveh1==None or tveh2==None:
					argvs.management_ttable = t_dcopy(_management_ttable)
					argvs.management_dtable = t_dcopy(_management_dtable)
					argvs.management_xtable = t_dcopy(_management_xtable)
					argvs.management_etable = t_dcopy(_management_etable)
					vehicles = r_restore(vehicles, _t_route, argvs)
					continue
				else:
					argvs.management_ttable = t_dcopy(_management_ttable)
					argvs.management_dtable = t_dcopy(_management_dtable)
					argvs.management_xtable = t_dcopy(_management_xtable)
					argvs.management_etable = t_dcopy(_management_etable)
					vehicles = r_restore(vehicles, _t_route, argvs)
			else:
				tveh1.update_totalcost_dtable(argvs)
				tveh2.update_totalcost_dtable(argvs)
				tveh1.update_load_onbrd()
				tveh2.update_load_onbrd()

			depo_idx1=[j for j,cust in enumerate(veh1.route[:-1]) if cust.custno=="0"]+[len(veh1.route)-1]
			servt_dict1={}
			#配送時間
			for k in range(len(depo_idx1)-1):
				servt_dict1[veh1.route[depo_idx1[k]]]=0
				servt=0
				for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
					if veh1.route[j].requestType=="DELIVERY":
						servt+=veh1.route[j].depotservt
					if depo_idx1[k]<veh1.route.index(c) and veh1.route.index(c)<=depo_idx1[k+1] and c.requestType=="DELIVERY": 
						servt-=c.depotservt
				if veh1.route[depo_idx1[k]+1].custno!="0":
					servt_dict1[veh1.route[depo_idx1[k]]]+=servt+veh1.depotservt
				else:
					servt_dict1[veh1.route[depo_idx1[k]]]+=servt
			#集荷時間
			servt_dict1[veh1.route[len(veh1.route)-1]]=0
			for k in range(1,len(depo_idx1)):
				servt=0
				for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
					if veh1.route[j].requestType=="PICKUP":
						servt+=veh1.route[j].depotservt
					if depo_idx1[k-1]<veh1.route.index(c) and veh1.route.index(c)<=depo_idx1[k] and c.requestType=="PICKUP": 
						servt-=c.depotservt
				servt_dict1[veh1.route[depo_idx1[k]]]+=servt

			tdepo_idx1=[j for j,cust in enumerate(tveh1.route[:-1]) if cust.custno=="0"]+[len(tveh1.route)-1]
			load=[0 for cust in tveh1.route]
			load2=[0 for cust in tveh1.route]
			for i in range(len(tveh1.route)-1):
				if i in tdepo_idx1:
					for j in range(i+1,tdepo_idx1[tdepo_idx1.index(i)+1]):
						if tveh1.route[j].requestType=="DELIVERY":
							if tveh1.route[j].custno[0] != "b":
								load[i]+=tveh1.route[j].dem
								load2[i]+=tveh1.route[j].dem2
				else:
					if tveh1.route[i].custno[0] != "b":
						if tveh1.route[i].requestType=="DELIVERY":
							load[i]=load[i-1]-tveh1.route[i].dem
							load2[i]=load2[i-1]-tveh1.route[i].dem2
						else:
							load[i]=load[i-1]+tveh1.route[i].dem
							load2[i]=load2[i-1]+tveh1.route[i].dem2

			for i in reversed(range(len(load))):
				if i in tdepo_idx1 and i+1 in tdepo_idx1:
					load[i]=load[i+1]
					load2[i]=load2[i+1]

			load=[i if i>1e-9 else 0 for i in load] #誤差対策
			load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

			no_park_idx1=[]
			for cust in tveh1.route[tdepo_idx1[0]+1:tdepo_idx1[1]]:
				if cust.requestType=="DELIVERY":
					break
			else:
				if load[0]==0 and load2[0]==0:
					no_park_idx1.append(0)
			
			for i in range(1,len(tdepo_idx1)-1):
				if load[tdepo_idx1[i]-1]==0 and load2[tdepo_idx1[i]-1]==0:
					for cust in tveh1.route[tdepo_idx1[i]+1:tdepo_idx1[i+1]]:
						if cust.requestType=="DELIVERY":
							break
					else:
						if load[tdepo_idx1[i]]==0 and load2[tdepo_idx1[i]]==0:
							if tdepo_idx1[i]>=veh1.route.index(c):
								no_park_idx1.append(tdepo_idx1[i]+1)
							else:
								no_park_idx1.append(tdepo_idx1[i])
			if load[tdepo_idx1[-1]-1]==0 and load2[tdepo_idx1[-1]-1]==0:
				no_park_idx1.append(tdepo_idx1[-1]+1)

				

			depo_idx2=[j for j,cust in enumerate(veh2.route[:-1]) if cust.custno=="0"]+[len(veh2.route)-1]
			servt_dict2={}
			#配送時間
			for k in range(len(depo_idx2)-1):
				servt_dict2[veh2.route[depo_idx2[k]]]=0
				servt=0
				for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
					if veh2.route[j].requestType=="DELIVERY":
						servt+=veh2.route[j].depotservt
					if depo_idx2[k]<1 and 1<=depo_idx2[k+1] and c.requestType=="DELIVERY": 
						servt+=c.depotservt
				if veh2.route[depo_idx2[k]+1].custno!="0":
					servt_dict2[veh2.route[depo_idx2[k]]]+=servt+veh2.depotservt
				else:
					servt_dict2[veh2.route[depo_idx2[k]]]+=servt
			#集荷時間
			servt_dict2[veh2.route[len(veh2.route)-1]]=0
			for k in range(1,len(depo_idx2)):
				servt=0
				for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
					if veh2.route[j].requestType=="PICKUP":
						servt+=veh2.route[j].depotservt
					if depo_idx2[k-1]<1 and 1<=depo_idx2[k] and c.requestType=="PICKUP": 
						servt+=c.depotservt
				servt_dict2[veh2.route[depo_idx2[k]]]+=servt

			tdepo_idx2=[j for j,cust in enumerate(tveh2.route[:-1]) if cust.custno=="0"]+[len(tveh2.route)-1]
			load=[0 for cust in tveh2.route]
			load2=[0 for cust in tveh2.route]
			for i in range(len(tveh2.route)-1):
				if tveh2.route[i]==c:
					continue
				if i in tdepo_idx2:
					for j in range(i+1,tdepo_idx2[tdepo_idx2.index(i)+1]):
						if tveh2.route[j].requestType=="DELIVERY":
							if tveh2.route[j].custno[0] != "b":
								load[i]+=tveh2.route[j].dem
								load2[i]+=tveh2.route[j].dem2
				else:
					if tveh2.route[i].custno[0] != "b":
						if tveh2.route[i].requestType=="DELIVERY":
							load[i]=load[i-1]-tveh2.route[i].dem
							load2[i]=load2[i-1]-tveh2.route[i].dem2
						else:
							load[i]=load[i-1]+tveh2.route[i].dem
							load2[i]=load2[i-1]+tveh2.route[i].dem2

			for i in reversed(range(len(load))):
				if i in tdepo_idx2 and i+1 in tdepo_idx2:
					load[i]=load[i+1]
					load2[i]=load2[i+1]

			load=[i if i>1e-9 else 0 for i in load] #誤差対策
			load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

			no_park_idx2=[]
			for cust in tveh2.route[tdepo_idx2[0]+1:tdepo_idx2[1]]:
				if cust.requestType=="DELIVERY":
					break
			else:
				if load[0]==0 and load2[0]==0:
					no_park_idx2.append(0)
			
			for i in range(1,len(tdepo_idx2)-1):
				if load[tdepo_idx2[i]-1]==0 and load2[tdepo_idx2[i]-1]==0:
					for cust in tveh2.route[tdepo_idx2[i]+1:tdepo_idx2[i+1]]:
						if cust.requestType=="DELIVERY":
							break
					else:
						if load[tdepo_idx2[i]]==0 and load2[tdepo_idx2[i]]==0:
							no_park_idx2.append(tdepo_idx2[i]-1)
			if load[tdepo_idx2[-1]-1]==0 and load2[tdepo_idx2[-1]-1]==0:
				no_park_idx2.append(tdepo_idx2[-1]-1)

			if not 0 in no_park_idx1:
				lv1=max(veh1.starthour+veh1.route[0].parkt_arrive,veh1.route[0].ready_fs)+servt_dict1[veh1.route[0]]*veh1.opskill
			else:
				lv1=max(veh1.starthour,veh1.route[0].ready_fs)+servt_dict1[veh1.route[0]]*veh1.opskill
			if not 0 in no_park_idx1:
				lv1+=veh1.route[0].parkt_open

			impassable=True
			for j in range(veh1.route.index(c)-1):
				from_c,to_c=veh1.route[j],veh1.route[j+1]
				ttable4 = get_ttable(veh1.vtype, lv1, argvs.management_ttable)
				dtable4 = get_dtable(veh1.vtype, lv1, argvs.management_dtable)
				if argvs.management_etable:
					etable4 = get_etable(veh1.vtype, veh1.etype, lv1, argvs.management_etable)
				if argvs.management_xtable:
					xtable4 = get_xtable(veh1.vtype, lv1, argvs.management_xtable)

				if ttable4[from_c.spotno][to_c.spotno]==-1 or\
				dtable4[from_c.spotno][to_c.spotno]==-1 or \
				(argvs.management_etable and etable4[from_c.spotno][to_c.spotno]==-1) or \
				(argvs.management_xtable and xtable4[from_c.spotno][to_c.spotno]==-1):
					impassable=False
					break

				arr_t=lv1+ttable4[from_c.spotno][to_c.spotno]*veh1.drskill

				if to_c.spotid!=from_c.spotid and not j+1 in no_park_idx1:
					lv1=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)
				else:
					lv1=max(arr_t,to_c.ready_fs)
				if to_c in servt_dict1:
					lv1+=servt_dict1[to_c]*veh1.opskill
				else:
					lv1+=to_c.servt*veh1.opskill
				if to_c.spotid!=from_c.spotid and not j+1 in no_park_idx1:
					lv1+=to_c.parkt_open

			if impassable==False:
				continue

			if not 0 in no_park_idx2:
				lv2=max(veh2.starthour+veh2.route[0].parkt_arrive,veh2.route[0].ready_fs)+servt_dict2[veh2.route[0]]*veh2.opskill
			else:
				lv2=max(veh2.starthour,veh2.route[0].ready_fs)+servt_dict2[veh2.route[0]]*veh2.opskill
			if not 0 in no_park_idx2:
				lv2+=veh2.route[0].parkt_open

			insert_flag=True

			ttable1 = get_ttable(veh1.vtype, lv1, argvs.management_ttable)
			ttable2 = get_ttable(veh2.vtype, lv2, argvs.management_ttable)
			if ttable1[veh1.route[veh1.route.index(c)-1].spotno][veh1.route[veh1.route.index(c)+1].spotno]==-1 or ttable2[veh2.route[0].spotno][c.spotno]==-1:
				insert_flag=False
				continue

			arr_t=lv2+ttable2[veh2.route[0].spotno][c.spotno]*veh2.drskill
			if c.spotid!=veh2.route[0].spotid:
				lv_t=max(arr_t+c.parkt_arrive,c.ready_fs)+c.servt*veh2.opskill
			else:
				lv_t=max(arr_t,c.ready_fs)+c.servt*veh2.opskill
			if c.spotid!=veh2.route[0].spotid:
				lv_t+=c.parkt_open
			ttable3 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
			if ttable3[c.spotno][veh2.route[1].spotno]==-1:
				insert_flag=False
				continue

			dtable1 = get_dtable(veh1.vtype, lv1, argvs.management_dtable)
			dtable2 = get_dtable(veh2.vtype, lv2, argvs.management_dtable)
			if dtable1[veh1.route[veh1.route.index(c)-1].spotno][veh1.route[veh1.route.index(c)+1].spotno]==-1 or dtable2[veh2.route[0].spotno][c.spotno]==-1:
				insert_flag=False
				continue

			arr_t=lv2+ttable2[veh2.route[0].spotno][c.spotno]*veh2.drskill
			if c.spotid!=veh2.route[0].spotid:
				lv_t=max(arr_t+c.parkt_arrive,c.ready_fs)+c.servt*veh2.opskill
			else:
				lv_t=max(arr_t,c.ready_fs)+c.servt*veh2.opskill
			if c.spotid!=veh2.route[0].spotid:
				lv_t+=c.parkt_open
			dtable3 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
			if dtable3[c.spotno][veh2.route[1].spotno]==-1:
				insert_flag=False
				continue

			if argvs.management_etable:
				etable1 = get_etable(veh1.vtype, veh1.etype, lv1, argvs.management_etable)
				etable2 = get_etable(veh2.vtype, veh2.etype, lv2, argvs.management_etable)
				if etable1[veh1.route[veh1.route.index(c)-1].spotno][veh1.route[veh1.route.index(c)+1].spotno]==-1 or etable2[veh2.route[0].spotno][c.spotno]==-1:
					insert_flag=False
					continue

				arr_t=lv2+ttable2[veh2.route[0].spotno][c.spotno]*veh2.drskill
				if c.spotid!=veh2.route[0].spotid:
					lv_t=max(arr_t+c.parkt_arrive,c.ready_fs)+c.servt*veh2.opskill
				else:
					lv_t=max(arr_t,c.ready_fs)+c.servt*veh2.opskill
				if c.spotid!=veh2.route[0].spotid:
					lv_t+=c.parkt_open
				etable3 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
				if etable3[c.spotno][veh2.route[1].spotno]==-1:
					insert_flag=False
					continue

			if argvs.management_xtable:
				xtable1 = get_xtable(veh1.vtype, lv1, argvs.management_xtable)
				xtable2 = get_xtable(veh2.vtype, lv2, argvs.management_xtable)
				if xtable1[veh1.route[veh1.route.index(c)-1].spotno][veh1.route[veh1.route.index(c)+1].spotno]==-1 or xtable2[veh2.route[0].spotno][c.spotno]==-1:
					insert_flag=False
					continue

				arr_t=lv2+ttable2[veh2.route[0].spotno][c.spotno]*veh2.drskill
				if c.spotid!=veh2.route[0].spotid:
					lv_t=max(arr_t+c.parkt_arrive,c.ready_fs)+c.servt*veh2.opskill
				else:
					lv_t=max(arr_t,c.ready_fs)+c.servt*veh2.opskill
				if c.spotid!=veh2.route[0].spotid:
					lv_t+=c.parkt_open
				xtable3 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)
				if xtable3[c.spotno][veh2.route[1].spotno]==-1:
					insert_flag=False
					continue

			arr_t=lv_t+ttable2[c.spotno][veh2.route[1].spotno]*veh2.drskill
			if veh2.route[1].spotid!=c.spotid and not 1 in no_park_idx2:
				lv_t=max(arr_t+veh2.route[1].parkt_arrive,veh2.route[1].ready_fs)+veh2.route[1].servt*veh2.opskill
			else:
				lv_t=max(arr_t,veh2.route[1].ready_fs)+veh2.route[1].servt*veh2.opskill
			if veh2.route[1].spotid!=c.spotid and not 1 in no_park_idx2:
				lv_t+=veh2.route[1].parkt_open

			# maxvisit check
			if veh2.maxvisit != 0:
				#troute = [cu.spotid for cu in veh2.route]
				#troute.insert(1, c.spotid)
				#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for j,c in enumerate(troute[1:-1]) if c=="0" and (troute[j]!="0" or j==0)])
				_tveh = dcopy(veh2)
				_tveh.route.insert(-1,c)
				visit_num = calc_visitnum(_tveh.route)
				if visit_num > veh2.maxvisit:
					continue

			arr1=lv1+ttable1[veh1.route[veh1.route.index(c)-1].spotno][veh1.route[veh1.route.index(c)+1].spotno]*veh1.drskill
			if veh1.route[veh1.route.index(c)+1].spotid!=veh1.route[veh1.route.index(c)-1].spotid and not veh1.route.index(c)+1 in no_park_idx1:
				lv1=max(arr1+veh1.route[veh1.route.index(c)+1].parkt_arrive,veh1.route[veh1.route.index(c)+1].ready_fs)
			else:
				lv1=max(arr1,veh1.route[veh1.route.index(c)+1].ready_fs)
			if veh1.route[veh1.route.index(c)+1] in servt_dict1:
				lv1+=servt_dict1[veh1.route[veh1.route.index(c)+1]]*veh1.opskill
			else:
				lv1+=veh1.route[veh1.route.index(c)+1].servt*veh1.opskill
			if veh1.route[veh1.route.index(c)+1].spotid!=veh1.route[veh1.route.index(c)-1].spotid and not veh1.route.index(c)+1 in no_park_idx1:
				lv1+=veh1.route[veh1.route.index(c)+1].parkt_open

			insert_flag=check_impassability(customers,veh1,lv1,veh1.route.index(c)+2,servt_dict1,len(veh1.route)-1,no_park_idx1,False,argvs)[0]
			if insert_flag==False:
				continue
			insert_flag=check_impassability(customers,veh2,lv_t,2,servt_dict2,len(veh2.route)-1,no_park_idx2,False,argvs)[0]
			if insert_flag==False:
				continue


				
			if argvs.break_flag:
				_management_ttable = t_dcopy(argvs.management_ttable)
				_management_dtable = t_dcopy(argvs.management_dtable)
				_management_xtable = t_dcopy(argvs.management_xtable)
				_management_etable = t_dcopy(argvs.management_etable)
				_t_route = r_backup(vehicles)
				_veh1 = dcopy(veh1)
				_veh2 = dcopy(veh2)
				_veh2.route.insert(1,c)
				_veh1.route.remove(c)
				_veh1 = insert_breakspot(_veh1.takebreak, None, customers, _veh1, vehicles, argvs)
				_veh2 = insert_breakspot(_veh2.takebreak, None, customers, _veh2, vehicles, argvs)
				if veh1==None or veh2==None:
					argvs.management_ttable = t_dcopy(_management_ttable)
					argvs.management_dtable = t_dcopy(_management_dtable)
					argvs.management_xtable = t_dcopy(_management_xtable)
					argvs.management_etable = t_dcopy(_management_etable)
					vehicles = r_restore(vehicles, _t_route, argvs)
					continue
				else:
					veh1 = dcopy(_veh1)
					veh2 = dcopy(_veh2)
					vehnos=[v.vehno for v in vehicles]
					vehicles[vehnos.index(veh1.vehno)] = dcopy(_veh1)
					vehicles[vehnos.index(veh2.vehno)] = dcopy(_veh2)
			else:
				veh2.route.insert(1,c)
				veh1.route.remove(c)
				veh1.update_totalcost_dtable(argvs)
				veh2.update_totalcost_dtable(argvs)
				veh1.update_load_onbrd()
				veh2.update_load_onbrd()

			if argvs.multitrip_flag==True:
				depo_idx=[j for j,cust in enumerate(veh2.route[:-1]) if cust.custno=="0"]+[len(veh2.route)-1]
				servt_dict={}
				#配送時間
				for k in range(len(depo_idx)-1):
					servt_dict[veh2.route[depo_idx[k]]]=0
					servt=0
					for j in range(depo_idx[k]+1,depo_idx[k+1]):
						if veh2.route[j].requestType=="DELIVERY" and veh2.route[j].custno[0]!='b':
							servt+=veh2.route[j].depotservt
					if veh2.route[depo_idx[k]+1].custno!="0":
						servt_dict[veh2.route[depo_idx[k]]]+=servt+veh2.depotservt
					else:
						servt_dict[veh2.route[depo_idx[k]]]+=servt
				#集荷時間
				servt_dict[veh2.route[len(veh2.route)-1]]=0
				for k in range(1,len(depo_idx)):
					servt=0
					for j in range(depo_idx[k-1]+1,depo_idx[k]):
						if veh2.route[j].requestType=="PICKUP":
							servt+=veh2.route[j].depotservt
					servt_dict[veh2.route[depo_idx[k]]]+=servt
					

				load_pen,load_pen2=calc_vehicle_loadpickup_penalty(veh2.route,veh2)

				for j in range(len(depo_idx)-1):
					load_onbrd,load_onbrd2=0,0
					for k in range(depo_idx[j]+1,depo_idx[j+1]):
						if veh2.route[k].requestType=="DELIVERY":
							if veh2.route[k].custno[0] != "b":
								load_onbrd+=veh2.route[k].dem
								load_onbrd2+=veh2.route[k].dem2

					load_pen+=max(load_onbrd-veh2.cap,0)
					load_pen2+=max(load_onbrd2-veh2.cap2,0)

				if load_pen>0 or load_pen2>0:
					for j in range(1,depo_idx[1]):
						tveh=copy.deepcopy(veh2)
						if argvs.bulkShipping_flag==True:
							depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
							depo.customers.append(copy.deepcopy(customers[0].customers[0]))
							depo.servt=customers[0].servt
							depo.dem=customers[0].dem
							depo.dem2=customers[0].dem2
							depo.reje_ve=customers[0].reje_ve
							depo.parkt_open=customers[0].parkt_open
							depo.parkt_arrive=customers[0].parkt_arrive
							depo.depotservt=customers[0].depotservt
							depo.additionalcust=[depo]
							depo.demdivideunit=customers[0].demdivideunit
							depo.requestType=customers[0].requestType
							depo.deny_unass=customers[0].deny_unass #未割り当て荷物
							tveh.insert_customer_at(j+1,depo,argvs) #デポを挿入
						else:
							tveh.insert_customer_at(j+1,copy.deepcopy(customers[0]),argvs) #デポを挿入

						tdepo_idx=[j for j,cust in enumerate(tveh.route[:-1]) if cust.custno=="0"]+[len(tveh.route)-1]

						load=[0 for cust in tveh.route]
						load2=[0 for cust in tveh.route]
						for i in range(len(tveh.route)-1):
							if i in tdepo_idx:
								for l in range(i+1,tdepo_idx[tdepo_idx.index(i)+1]):
									if tveh.route[l].requestType=="DELIVERY":
										if tveh.route[l].custno[0] != "b":
											load[i]+=tveh.route[l].dem
											load2[i]+=tveh.route[l].dem2
							else:
								if tveh.route[i].custno[0] != "b":
									if tveh.route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-tveh.route[i].dem
										load2[i]=load2[i-1]-tveh.route[i].dem2
									else:
										load[i]=load[i-1]+tveh.route[i].dem
										load2[i]=load2[i-1]+tveh.route[i].dem2

						for i in reversed(range(len(load))):
							if i in tdepo_idx and i+1 in tdepo_idx:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx=[]
						for cust in tveh.route[tdepo_idx[0]+1:tdepo_idx[1]]:
							if cust.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx.append(0)
						
						for i in range(1,len(tdepo_idx)-1):
							if load[tdepo_idx[i]-1]==0 and load2[tdepo_idx[i]-1]==0:
								for cust in tveh.route[tdepo_idx[i]+1:tdepo_idx[i+1]]:
									if cust.requestType=="DELIVERY":
										break
								else:
									if load[tdepo_idx[i]]==0 and load2[tdepo_idx[i]]==0:
										no_park_idx.append(tdepo_idx[i]-1)
						if load[tdepo_idx[-1]-1]==0 and load2[tdepo_idx[-1]-1]==0:
							no_park_idx.append(tdepo_idx[-1]-1)

						if veh2.maxrotate>0 and len([c for c in veh2.route[:-1] if c.custno=="0" and c.custno[0]!="b"])+1>veh2.maxrotate: #回転数上限を超える場合
							continue
						
						#通行不可の場合	
						ttable13 = get_ttable(veh2.vtype, veh2.lv[j], argvs.management_ttable)
						if ttable13[veh2.route[j].spotno][customers[0].spotno]==-1:
							continue

						dtable11 = get_dtable(veh2.vtype,veh2.lv[j], argvs.management_dtable)
						if dtable11[veh2.route[j].spotno][customers[0].spotno]==-1:
							continue

						if argvs.management_etable:
							etable10 = get_etable(veh2.vtype, veh2.etype, veh2.lv[j], argvs.management_etable)
							if etable10[veh2.route[j].spotno][customers[0].spotno]==-1:
								continue

						if argvs.management_xtable:
							xtable10 = get_xtable(veh2.vtype, veh2.lv[j], argvs.management_xtable)
							if xtable10[veh2.route[j].spotno][customers[0].spotno]==-1:
								continue

						arr_t=veh2.lv[j]+ttable13[veh2.route[j].spotno][customers[0].spotno]*veh2.drskill

						servt=0
						#配送時間
						for k in range(j+1,depo_idx[1]):
							if veh2.route[k].requestType=="DELIVERY":
								servt+=veh2.route[k].depotservt
						#集荷時間
						for k in range(1,j):
							if veh2.route[k].requestType=="PICKUP":
								servt+=veh2.route[k].depotservt

						servt+=veh2.depotservt

						if customers[0].spotid!=veh2.route[j].spotid and len([cust for cust in veh2.route[1:j+1] if cust.requestType=="PICKUP"])>0:
							lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+servt*veh2.opskill
						else:
							lv_t=max(arr_t,customers[0].ready_fs)+servt*veh2.opskill
						if customers[0].spotid!=veh2.route[j].spotid and len([cust for cust in veh2.route[1:j+1] if cust.requestType=="PICKUP"])>0:
							lv_t+=customers[0].parkt_open

						ttable14 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
						if ttable14[customers[0].spotno][veh2.route[j+1].spotno]==-1:
							continue

						dtable12 = get_dtable(veh2.vtype,lv_t, argvs.management_dtable)
						if dtable12[customers[0].spotno][veh2.route[j+1].spotno]==-1:
							continue

						if argvs.management_etable:
							etable11 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if etable11[customers[0].spotno][veh2.route[j+1].spotno]==-1:
								continue

						if argvs.management_xtable:
							xtable11 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)
							if xtable11[customers[0].spotno][veh2.route[j+1].spotno]==-1:
								continue

						arr_t=lv_t+ttable14[customers[0].spotno][veh2.route[j+1].spotno]*veh2.drskill
						if veh2.route[j+1].spotid!=customers[0].spotid and not j+1 in no_park_idx2:
							lv_t=max(arr_t+veh2.route[j+1].parkt_arrive,veh2.route[j+1].ready_fs)+veh2.route[j+1].servt*veh2.opskill
						else:
							lv_t=max(arr_t,veh2.route[j+1].ready_fs)+veh2.route[j+1].servt*veh2.opskill
						if veh2.route[j+1].spotid!=customers[0].spotid and not j+1 in no_park_idx2:
							lv_t+=veh2.route[j+1].parkt_open

						impassable=True
						for k in range(j+1,depo_idx[1]-1):
							from_c,to_c=veh2.route[k],veh2.route[k+1]

							ttable15 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							if ttable15[from_c.spotno][to_c.spotno]==-1:
								impassable=False
								break

							dtable13 = get_dtable(veh2.vtype,lv_t, argvs.management_dtable)
							if dtable13[from_c.spotno][to_c.spotno]==-1:
								impassable=False
								break

							if argvs.management_etable:
								etable12 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
								if etable12[from_c.spotno][to_c.spotno]==-1:
									impassable=False
									break

							if argvs.management_xtable:
								xtable12 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)
								if xtable12[from_c.spotno][to_c.spotno]==-1:
									impassable=False
									break

							arr_t=lv_t+ttable15[from_c.spotno][to_c.spotno]*veh2.drskill
							if veh2.route[k+1].spotid!=veh2.route[k].spotid and not k+1 in no_park_idx2:
								lv_t=max(arr_t+veh2.route[k+1].parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
							else:
								lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
							if veh2.route[k+1].spotid!=veh2.route[k].spotid and not k+1 in no_park_idx2:
								lv_t+=veh2.route[k+1].parkt_open

						if impassable==False:
							continue

						servt=0
						#配送時間
						if len(depo_idx)>2:
							for k in range(depo_idx[1]+1,depo_idx[2]):
								if veh2.route[k].requestType=="DELIVERY":
									servt+=veh2.route[k].depotservt
						#集荷時間
						for k in range(j+1,depo_idx[1]):
							if veh2.route[k].requestType=="DELIVERY":
								servt+=veh2.route[k].depotservt

						if len(depo_idx)>2:
							if depo_idx[2]!=len(veh2.route)-1:
								servt+=veh2.depotservt

							servt_dict[veh2.route[depo_idx[2]]]=servt

						insert_flag=check_impassability(customers,veh2,lv_t,depo_idx[1],servt_dict,len(veh2.route)-1,no_park_idx,False,argvs)[0]
						if insert_flag==False:
							continue
							

						#troute = [c.spotid for c in veh2.route]
						#troute.insert(-1, customers[0].spotid)
						#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for k,c in enumerate(troute[1:-1]) if c=="0" and (troute[k]!="0" or k==0)])
						_tveh = dcopy(veh2)
						_tveh.route.insert(-1,c)
						visit_num = calc_visitnum(_tveh.route)

						if veh2.maxvisit>0 and visit_num>veh2.maxvisit: #訪問数上限を超える場合
							continue

						if argvs.bulkShipping_flag==True:
							depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
							depo.customers.append(copy.deepcopy(customers[0].customers[0]))
							depo.servt=customers[0].servt
							depo.dem=customers[0].dem
							depo.dem2=customers[0].dem2
							depo.reje_ve=customers[0].reje_ve
							depo.parkt_open=customers[0].parkt_open
							depo.parkt_arrive=customers[0].parkt_arrive
							depo.depotservt=customers[0].depotservt
							depo.additionalcust=[depo]
							depo.demdivideunit=customers[0].demdivideunit
							depo.requestType=customers[0].requestType
							depo.deny_unass=customers[0].deny_unass #未割り当て荷物
							veh2.insert_customer_at(j+1,depo,argvs) #デポを挿入
						else:
							veh2.insert_customer_at(j+1,copy.deepcopy(customers[0]),argvs) #デポを挿入
						break




		if len([c for c in veh2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==num: #過半数を移動したら終了
			break

	

##20200526
def adjust_nveh_construction_I2(customers,e_spots,vehicles,ivnum,_nbflag,skills,argvs):
	global divided
	divided=False
	#利用期限を過ぎていたらエラー出力して終了
	if is_expired():
		sErrMes="license expired"
		raise ValueError(sErrMes)

	# frame=inspect.currentframe().f_back
	sLog = ["customers = ",[c.custno for c in customers],", e_spots = ",[c.custno for c in e_spots],", vehicles = ",[v.vehno for v in vehicles],", ivnum = ",ivnum,", _nbflag = ",vars(_nbflag),", skills = ",skills,", argvs = ",argvs]
	sLogBuf = " ".join(list(map(str,sLog)))
	if rank==0:
		logging.log(logging.DEBUG,sLogBuf)

	sLogBuf = "\n"
	preprocess(customers,e_spots,vehicles,argvs)

	#APIのみの利用のために、ここでも再度呼び出す
	argvs.error_check(customers)
	for c in customers:
		c.error_check()
	for v in vehicles:
		v.error_check(argvs)

	#全車両が同じ時間テーブルを使うときかつ車両の設定が同じ場合skillshuffle_flag=Trueにする
	if argvs.skillfile!=None:
		argvs.skillshuffle_flag=True
		try:
			for (v1,v2) in [(v1,v2) for v1 in vehicles for v2 in vehicles if v1.vehno<v2.vehno]:
				for table in argvs.management_ttable:
					if table["vtype"]==v1.vtype:
						if table["table"]!=get_ttable(v2.vtype,table["start_time"],argvs.management_ttable):
							argvs.skillshuffle_flag=False
							break
				for table in argvs.management_ttable:
					if table["vtype"]==v2.vtype:
						if table["table"]!=get_ttable(v1.vtype,table["start_time"],argvs.management_ttable):
							argvs.skillshuffle_flag=False
							break

				for table in argvs.management_dtable:
					if table["vtype"]==v1.vtype:
						if table["table"]!=get_dtable(v2.vtype,table["start_time"],argvs.management_dtable):
							argvs.skillshuffle_flag=False
							break
				for table in argvs.management_dtable:
					if table["vtype"]==v2.vtype:
						if table["table"]!=get_ttable(v1.vtype,table["start_time"],argvs.management_dtable):
							argvs.skillshuffle_flag=False
							break

				if argvs.management_etable:
					for table in argvs.management_etable:
						if table["vtype"]==v1.vtype and table["etype"]==v1.etype:
							if table["table"]!=get_etable(v2.vtype,v2.etype,table["start_time"],argvs.management_etable):
								argvs.skillshuffle_flag=False
								break
					for table in argvs.management_etable:
						if table["vtype"]==v2.vtype and table["etype"]==v2.etype:
							if table["table"]!=get_etable(v1.vtype,v1.etype,table["start_time"],argvs.management_etable):
								argvs.skillshuffle_flag=False
								break

				if argvs.management_xtable:
					for table in argvs.management_xtable:
						if table["vtype"]==v1.vtype:
							if table["table"]!=get_xtable(v2.vtype,table["start_time"],argvs.management_xtable):
								argvs.skillshuffle_flag=False
								break
					for table in argvs.management_xtable:
						if table["vtype"]==v2.vtype:
							if table["table"]!=get_xtable(v1.vtype,table["start_time"],argvs.management_xtable):
								argvs.skillshuffle_flag=False
								break

				if v1.cap!=v2.cap or \
				v1.cap2!=v2.cap2 or \
				v1.e_capacity!=v2.e_capacity or \
				v1.e_initial!=v2.e_initial or \
				v1.e_cost!=v2.e_cost or \
				v1.e_margin!=v2.e_margin or \
				v1.vtype!=v2.vtype or \
				v1.etype!=v2.etype or \
				v1.enddepot.custno!=v2.enddepot.custno or \
				v1.starthour!=v2.starthour or \
				v1.endhour!=v2.endhour or \
				v1.maxvisit!=v2.maxvisit or \
				v1.maxrotate!=v2.maxrotate or \
				v1.depotservt!=v2.depotservt:
					argvs.skillshuffle_flag=False
					break
			for v in vehicles:
				for c in customers:
					if v.vehno in c.reje_ve:
						argvs.skillshuffle_flag=False
						break
		except(ValueError):
			argvs.skillshuffle_flag=False
		

	try:
		#ivnumが1以上の整数値以外の場合
		if type(ivnum)==str:
			sErrMes = "vehicle number (aka ivnum) set to other than 0 or positive integer (ivnum = \'"+str(ivnum)+"\')"
			raise ValueError(sErrMes)
		elif not str(ivnum).isdecimal():
			sErrMes = "vehicle number (aka ivnum) set to other than 0 or positive integer (ivnum = "+str(ivnum)+")"
			raise ValueError(sErrMes)
		elif  int(ivnum)<=0:
			sErrMes = "vehicle number (aka ivnum) set to other than 0 or positive integer (ivnum = "+str(ivnum)+")"
			raise ValueError(sErrMes)

		#vehiclesの要素(車両)数と値が異なる場合
		if argvs.num_addv==-1:
			if len(vehicles)!=ivnum:
				sErrMes = "vehicle number (aka ivnum) differs from vehicle class length (ivnum = "+str(ivnum)+", vehicle class length = "+str(len(vehicles))+")"
				raise ValueError(sErrMes)
		else:
			if len(vehicles)!=ivnum+argvs.num_addv:
				sErrMes = "vehicle number (aka ivnum) differs from vehicle class length (ivnum+num_addv = "+str(ivnum+argvs.num_addv)+", vehicle class length = "+str(len(vehicles))+")"
				raise ValueError(sErrMes)

		#e_spotsに充電スポット以外が格納されている場合
		for c in e_spots:
			if not c.custno.startswith("e"):
				sErrMes = "CS_spots include something not \"e\" + positive integer (custno = "+str(c.custno)+")"
				raise ValueError(sErrMes)

		#ArgvsオブジェクトのskillfileがNoneでskillsがNoneでない場合
		if argvs.skillfile==None and skills!=None:
			sErrMes = "skills argument must be set to none when skillfile field of Argvs object set none (skills = "+str(skills)+")"
			raise ValueError(sErrMes)

		# #車両名が"route"+"引数vehicles中のVehicleのvehnoメンバー"でない場合
		# if skills:
		# 	for skill in skills:
		# 		if not "OperationSkill" in skill:
		# 			vname_flag=False
		# 			for v in vehicles:
		# 				if skill[0]=="route"+str(v.vehno):
		# 					vname_flag=True
		# 					break
		# 			if vname_flag==False:
		# 				sErrMes = "vehicle name is not \"route\"+vehno (vehicle name = "+skill[0]+")"
		# 				raise ValueError(sErrMes)

		vlists=[i for i in range(0,len(vehicles))]
		if skills!=None:
			# for v in vehicles:
			# 	for skill in skills:
			# 		if not "OperationSkill" in skill:
			# 			if skill[0].replace("route","")==str(v.vehno):
			# 				v.opskill,v.drskill = float(skill[1]),float(skill[2])
			# 				if v.opskill<0:
			# 					sErrMes = "opskill is less than 0.0 (opskill = "+str(v.opskill)+")"
			# 					raise ValueError(sErrMes)
			# 				if v.drskill<0:
			# 					sErrMes = "drskill is less than 0.0 (drskill = "+str(v.drskill)+")"
			# 					raise ValueError(sErrMes)
			# 				vlists.remove(vidx)
							
			# 			##20180904
			# 	vidx+=1
		
			idx=0
			for skill in skills:
				if not "OperationSkill" in skill:
					if idx<len(vlists):
						vehicles[vlists[idx]].opskill,vehicles[vlists[idx]].drskill = float(skill[1]),float(skill[2])
						if vehicles[vlists[idx]].opskill<0:
							sErrMes = "delivery skill (aka opskill) set to less than 0.0 (opskill = "+str(vehicles[vlists[idx]].opskill)+")"
							raise ValueError(sErrMes)
						if vehicles[vlists[idx]].drskill<0:
							sErrMes = "driving skill (aka drskill) set to less than 0.0 (drskill = "+str(vehicles[vlists[idx]].drskill)+")"
							raise ValueError(sErrMes)
						idx+=1

		tnbflag=NbFlag(_nbflag.relflag,_nbflag.inswapflag,_nbflag.exflag,_nbflag.crossflag,_nbflag.mergeflag)

		if argvs.opt_unassigned_flag == True:
			#未割り当て荷物最適化有り
			customers=unass_proc(customers,vehicles,argvs)
		else:
			#未割り当て荷物最適化無し
			customers=construction_II(customers,vehicles,ivnum,argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs)

		#荷物自動分割
		autoloaddivide_flag=False
		for c in customers:
			if c.demdivideunit!=1:
				autoloaddivide_flag=True
				break

		if autoloaddivide_flag==True:
			#同じCUSTNOが連続する場合は削除する
			if argvs.bulkShipping_flag==False:
				for v in vehicles:
					if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
						continue
					i=1
					while True:
						if i>len(v.route)-2:
							break

						if v.route[i].custno==v.route[i-1].custno:
							if v.route[i].custno!="0":
								for ac in v.route[i-1].additionalcust:
									ac.dem+=v.route[i].dem
									ac.dem2+=v.route[i].dem2
									ac.demdivideunit+=v.route[i].demdivideunit
									if v.route[i].changecust=="additive":
										ac.changecust="additive"
								for ac in v.route[i].additionalcust:
									customers.remove(ac)
								remove_customers_specified([v.route[i]],v,argvs)
								if argvs.break_flag:
									v = insert_breakspot(v.takebreak, None, customers, v, vehicles, argvs)
								i=1
								continue

						i+=1
		
		sLogBuf += "--------------------------------------\n"
		sLogBuf += "generated initial route\n"
		vidx=0

		
	except Exception:
		sErr = traceback.format_exc()
		sErr = ["<Error message log>",sErr]
		sLogBuf_error = " ".join(list(map(str,sErr)))
		if rank==0:
			logging.log(logging.ERROR,sLogBuf_error)
		raise
	
	if argvs.delaystart2_flag==True and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
		delay_arr_time2(vehicles,vehicles,argvs)

	for v in vehicles:
		v.update_totalcost_dtable(argvs)

	if rank==0:
		logging.log(logging.INFO,sLogBuf)

	sLogBuf_veh = "\n"
	##20180904
	#for v in [v for v in vehicles if len(v.route)>3]:
	used_customers=[]
	for v in [v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1]:
		sLogBuf_veh = v.output(argvs, sLogBuf_veh,used_customers,divided)
		sLogBuf_veh += "\n"

	if rank==0:
		logging.log(logging.INFO,sLogBuf_veh)

	sLogBuf = "\n"
	totalcost,totalcost_wolast=0,0
	vidx=0
	for v in vehicles:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			totalcost+=v.totalcost
			totalcost_wolast+=v.totalcost_wolast
			vidx=vidx+1
	sLog = ["===== Initial solution: TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== Initial solution: TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	sLogBuf += "\n"
	totaltime,totaltime_wolast=0,0
	for v in vehicles:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
			totaltime+=v.lv[-1]-v.arr[0]
			for i in range(len(v.route)-2,0,-1):
				if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
					totaltime_wolast+=v.lv[i]-v.arr[0]
					break
	sLog = ["===== Initial solution: TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== Initial solution: TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	if rank==0:
		logging.log(logging.INFO,sLogBuf)

	return tnbflag,customers
	
	#cargoes_in_a_route=[]
	#for v in [v for v in vehicles if len(v.route)>=3]:
	#	for i in v.route:
	#		cargoes_in_a_route+=[i.custno]

#割当されなかった荷物の抽出
# in  : customers,vehicles,argvs
# out : rem_customers 割当されていない荷物
def get_unass_customers(customers,vehicles,argvs):

	rem_customers=customers[:]
	if argvs.bulkShipping_flag==False:
		for v in vehicles:
			for c in v.route[1:-1]:
				if c.custno!="0" and c.custno[0]!="b":
					for ac in c.additionalcust:
						if ac in rem_customers:
							rem_customers.remove(ac)
	else:
		for v in vehicles:
			for c in v.route[1:-1]:
				if c.custno!="0" and c.custno[0]!="b":
					for ac in c.customers:
						if ac in rem_customers:
							rem_customers.remove(ac)

	return rem_customers

#ハードエラーか？
# in  : e
# out : True: ハードエラ, False:ソフトエラー
def is_hard_error(e):

	#ハードエラーのメッセージリスト
	hard_error_messages = [
		"failed to create initial solution due to cost of -1 or unvisitable vehicles or max visits or fixed vehicles",
		"failed to create initial solution due to timeout",
		"failed to create initial solution due to break-time",
		"failed to read initial solution due to break-time"
	]

	is_flag=False #一旦ソフトエラーにセット
	for m in hard_error_messages:
		if e.args[0].find(m) > -1:
			is_flag=True #ハードエラー
			break

	return is_flag


#未割り当て荷物最適化処理
# in  : customers,vehicles,argvs
# out : cusomers
def unass_proc(customers,vehicles,argvs):

	#vehnoからvehicles内のindexへ変換するためのリストを作る
	vehnos=[v.vehno for v in vehicles]

	#未割り当て荷物 先に通常車両のみで初期解を作るため、通常車両と予約車両に分ける
	nonreserved_vehicles=[v for v in vehicles if v.reserved_v_flag==False]
	reserved_vehicles=[v for v in vehicles if v.reserved_v_flag==True]

	init_customers=[c for ir in argvs.initroute for c in argvs.initroute[ir] if c!="0"]
	rem_customers=[c for c in customers if c.custno not in init_customers]
	reserve_customers=[c for c in customers if c.custno in init_customers]

	try:
		#最初に通常車両のみで初期解生成する
		customers=construction_II(rem_customers,nonreserved_vehicles,len(nonreserved_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs)

	except Exception as e:
		if is_hard_error(e):
			#ハードエラーだったら未割り当てとなった荷物があるかチェックする
			rem_customers=get_unass_customers(customers,nonreserved_vehicles,argvs)+reserve_customers
			#rem_customers=customers[:]

			#未割り当て禁止荷物が含まれていたらエラー終了する
			if len([c for c in rem_customers if c.deny_unass==True])>0:
				sErrMes = "failed to create initial solution due to cost of -1"
				raise ValueError(sErrMes)

			#予約車両だけで初期解生成する
			if len(reserved_vehicles)>0: #予約車両がない時は、未割り当て荷物を除外する
				if len([c for c in rem_customers if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>0:
					#rem_customers += reserve_customers
					customers+=construction_II(rem_customers,reserved_vehicles,len(reserved_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs)
					#予約車両の初期解をvehiclesに書き戻す
					for v in reserved_vehicles:
						vehicles[vehnos.index(v.vehno)].route = v.route
						vehicles[vehnos.index(v.vehno)].update_totalcost_dtable(argvs)
		else:
			#ソフトエラーだったらエラーを再raiseする
			raise ValueError(e.args[0])
	else:
		#エラーが発生しなかった場合も未割り当て荷物が発生していないか確認する
		rem_customers=get_unass_customers(rem_customers,nonreserved_vehicles,argvs)+reserve_customers

		#未割り当て禁止荷物が含まれていたらエラー終了する
		if len([c for c in rem_customers if c.custno!="0" and c.deny_unass==True])>0:
			sErrMes = "failed to create initial solution due to cost of -1"
			raise ValueError(sErrMes)

		#予約車両だけで初期解生成する
		if len(reserved_vehicles)>0: #予約車両がない時は、未割り当て荷物を除外する
			if len([c for c in rem_customers if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>0:
				#rem_customers += reserve_customers
				customers+=construction_II(rem_customers,reserved_vehicles,len(reserved_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs)
				#予約車両の初期解をvehiclesに書き戻す
				for v in reserved_vehicles:
					vehicles[vehnos.index(v.vehno)].route = v.route
					vehicles[vehnos.index(v.vehno)].update_totalcost_dtable(argvs)

	#通常車両の初期解をvehiclesに書き戻す
	for v in nonreserved_vehicles:
		vehicles[vehnos.index(v.vehno)].route = v.route
		vehicles[vehnos.index(v.vehno)].update_totalcost_dtable(argvs)

	#不要な予約車両を削除する
	veh_size=len(vehicles)
	for i in reversed(range(veh_size)):
		v=vehicles[i]
		if v.reserved_v_flag==True:
			if len([c for c in v.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])==0:
				vehicles.remove(v)

	return customers


def make_sorted_list_by_num_of_reject(vehicles,customers):
	reje_num=[[i,0] for i in range(len(vehicles))]

	#立ち寄り不可のcustomerをカウント
	for i,v in enumerate(vehicles):
		for c in customers:
			if v.vehno in c.reje_ve:
				reje_num[i][1]+=1

	reje_num.sort(key=lambda x: x[1],reverse=True)

	vehicles_sorted=[[i[0] for i in reje_num]]

	#inswap
	for i in range(1,len(vehicles)):
		vehicles_temp=vehicles_sorted[0][:]
		vehicles_temp[i-1],vehicles_temp[i]=vehicles_temp[i],vehicles_temp[i-1]

		vehicles_sorted.append(vehicles_temp)

	# #relocate
	# for i1,i2 in combinations(range(len(vehicles)),2):
	# 	if i1+1==i2:
	# 		continue

	# 	vehicles_temp=vehicles_sorted[0][:]
	# 	vehicles_temp[i1],vehicles_temp[i2]=vehicles_temp[i2],vehicles_temp[i1]

	# 	vehicles_sorted.append(vehicles_temp)


	return vehicles_sorted

def make_direct_vehicles(customers,vehicles,sorted_idx,argvs):
	#直送優先アルゴ
	direct_customers=[]

	tcnum=0
	for tc in customers:
		tcnum+=1

	for v in vehicles:
		tcnum+=1
		if v.direct_flag==True:
			tcnum+=len(v.route)-1

	
	for tc in customers:
		if len(tc.customers)==1:
			continue

		#dem1
		#該当車両に到達可能な最大積載量の車両群をlistアップする
		reachable_max_vehicles=[]
		max_cap=0
		for i in range(len(vehicles)):
			v=vehicles[sorted_idx[i]]
			#未割り当て荷物最適化 予約車両ならば直送便から除外する
			if is_reserved(v,argvs)==True:
				continue
			if tc.requestType=="DELIVERY":
				lv=max(v.starthour+customers[0].parkt_arrive,customers[0].ready_fs)+(tc.depotservt+v.depotservt)*v.opskill+customers[0].parkt_open
			else:
				lv=max(v.starthour,customers[0].ready_fs)+v.depotservt*v.opskill

			dtable1=get_dtable(v.vtype,lv,argvs.management_dtable)
			if dtable1[customers[0].spotno][tc.spotno]==-1:
				continue
			ttable1=get_ttable(v.vtype,lv,argvs.management_ttable)
			if ttable1[customers[0].spotno][tc.spotno]==-1:
				continue
			if argvs.management_etable:
				etable1=get_etable(v.vtype,v.etype,lv,argvs.management_etable)
				if etable1[customers[0].spotno][tc.spotno]==-1:
					continue
			if argvs.management_xtable:
				xtable1=get_xtable(v.vtype,lv,argvs.management_xtable)
				if xtable1[customers[0].spotno][tc.spotno]==-1:
					continue

			if not v.vehno in tc.reje_ve and max_cap<=v.cap and v.direct_flag==False and (len(v.route)==2 or len(v.route)==0):
				reachable_max_vehicles.append(v)
				max_cap=v.cap

		if tc.dem >0 and tc.requestType=="DELIVERY": #配送の場合
			while max_cap<=abs(tc.dem):
				cap_feas=True
				time_feas=False
				for v in reachable_max_vehicles[:]:
					tveh=copy.deepcopy(v)
					ttc=copy.deepcopy(tc)

					solve_knapsack(v,ttc.customers) #最大積載量車両に荷物を満載する

					if ttc.customers==[]:
						cap_feas=False
						break
					
					ttc.custno=str(tcnum)
					tcnum+=1
					ttc.servt=sum([c.servt for c in ttc.customers])
					ttc.dem=sum([c.dem for c in ttc.customers])
					ttc.dem2=sum([c.dem2 for c in ttc.customers])
					ttc.reje_ve=list(set([v for c in ttc.customers for v in c.reje_ve])) #重複削除
					ttc.depotservt=sum([c.depotservt for c in ttc.customers])

					v.route.clear()
					v.push_customer(customers[0],argvs)
					v.push_customer(ttc,argvs)
					enddepot=TiedCustomer(str(tcnum),v.enddepot.spotid,v.enddepot.ready_fs,v.enddepot.due_fs,v.enddepot.x,v.enddepot.y)
					enddepot.customers.append(v.enddepot)
					enddepot.servt=v.enddepot.servt
					enddepot.dem=v.enddepot.dem
					enddepot.dem2=v.enddepot.dem2
					enddepot.reje_ve=v.enddepot.reje_ve
					enddepot.spotno=v.enddepot.spotno
					enddepot.parkt_open=v.enddepot.parkt_open
					enddepot.parkt_arrive=v.enddepot.parkt_arrive
					enddepot.depotservt=v.enddepot.depotservt
					enddepot.additionalcust=[enddepot]
					enddepot.demdivideunit=v.enddepot.demdivideunit
					enddepot.requestType=v.enddepot.requestType
					enddepot.deny_unass=v.enddepot.deny_unass #未割り当て荷物
					tcnum+=1
					if v.enddepot.custno=="0":
						enddepot.custno="0"
					v.push_customer(enddepot,argvs)
					
					dtable2=get_dtable(v.vtype,v.lv[1],argvs.management_dtable)
			
					ttable2=get_ttable(v.vtype,v.lv[1],argvs.management_ttable)
			
					if argvs.management_etable:
						etable2=get_etable(v.vtype,v.etype,v.lv[1],argvs.management_etable)
				
					if argvs.management_xtable:
						xtable2=get_xtable(v.vtype,v.lv[1],argvs.management_xtable)
				
					
					#顧客受け入れ時刻を確認して可能なら
					if compare_time(v.st[1], tc.due_fs)<=0 and ((compare_time(v.lv[1], v.endhour)<=0 and argvs.lastc_flag==True) or (compare_time(v.lv[-1], v.endhour)<=0 and argvs.lastc_flag==False)) and\
					dtable2[tc.spotno][v.route[-1].spotno]!=-1 and ttable2[tc.spotno][v.route[-1].spotno]!=-1 and ((not argvs.management_etable) or etable2[tc.spotno][v.route[-1].spotno]!=-1) and ((not argvs.management_xtable) or xtable2[tc.spotno][v.route[-1].spotno]!=-1):
						time_feas=True
						direct_customers.append(ttc)
						reachable_max_vehicles.remove(v) #list化した車両群から該当車両を削除
						
						#当該スポットIDだけに行く車両として最終解として採用
						v.direct_flag=True

						#同一spotidかつ同一時間枠で集荷があれば一緒に直送する
						for tc_minus in customers:
							if ttc.spotid==tc_minus.spotid and tc_minus.requestType=="PICKUP" and compare_time(ttc.ready_fs, tc_minus.ready_fs)==0 and compare_time(ttc.due_fs, tc_minus.due_fs)==0 and not v.vehno in tc_minus.reje_ve:
								ttc_minus=copy.deepcopy(tc_minus)

								if v.cap<=abs(ttc_minus.dem):
									solve_knapsack(v,ttc_minus.customers,False) #最大積載量車両に荷物を満載する

								if ttc_minus.customers==[]:
									break

								#作業時間を集荷に合算
								ttc_minus.servt=sum([c.servt for c in ttc_minus.customers])+ttc.servt
								ttc.servt=0.0

								ttc_minus.dem=sum([c.dem for c in ttc_minus.customers])
								ttc_minus.dem2=sum([c.dem2 for c in ttc_minus.customers])
								ttc_minus.reje_ve=list(set([v for c in ttc_minus.customers for v in c.reje_ve])) #重複削除
								ttc_minus.depotservt=sum([c.depotservt for c in ttc_minus.customers])

								direct_customers.append(ttc_minus)

								tv=copy.deepcopy(v)
								tv.insert_customer_at(2,ttc_minus,argvs)

								if (compare_time(tv.lv[1], tv.endhour)<=0 and argvs.lastc_flag==True) or (compare_time(tv.lv[-1], tv.endhour)<=0 and argvs.lastc_flag==False):
									v.insert_customer_at(2,ttc_minus,argvs)
								else:
									continue

								#スポットIDから満載にした荷物を削除
								tc_minus.customers=[c for c in tc_minus.customers if not c.custno in [cust.custno for cust in ttc_minus.customers]]

								if tc_minus.customers!=[]:
									tc_minus.servt=sum([c.servt for c in tc_minus.customers])
									tc_minus.dem=sum([c.dem for c in tc_minus.customers])
									tc_minus.dem2=sum([c.dem2 for c in tc_minus.customers])
									tc_minus.reje_ve=list(set([v for c in tc_minus.customers for v in c.reje_ve])) #重複削除
									tc_minus.depotservt=sum([c.depotservt for c in tc_minus.customers])

								break



						#スポットIDから満載にした荷物を削除
						tc.customers=[c for c in tc.customers if not c.custno in [cust.custno for cust in ttc.customers]] 

						if tc.customers!=[]:
							tc.servt=sum([c.servt for c in tc.customers])
							tc.dem=sum([c.dem for c in tc.customers])
							tc.dem2=sum([c.dem2 for c in tc.customers])
							tc.reje_ve=list(set([v for c in tc.customers for v in c.reje_ve])) #重複削除
							tc.depotservt=sum([c.depotservt for c in tc.customers])
						else:
							break

						if abs(tc.dem)<max_cap:
							break
					else:
						v.route=copy.copy(tveh.route)
						v.update_arrtime_tw(argvs)
				
				if reachable_max_vehicles==[] or cap_feas==False or time_feas==False:
					break
		elif tc.dem>0 and tc.requestType=="PICKUP": #集荷の場合
			while max_cap<=abs(tc.dem):
				cap_feas=True
				time_feas=False
				for v in reachable_max_vehicles[:]:
					tveh=copy.deepcopy(v)
					ttc=copy.deepcopy(tc)

					solve_knapsack(v,ttc.customers) #最大積載量車両に荷物を満載する

					if ttc.customers==[]:
						cap_feas=False
						break

					ttc.custno=str(tcnum)
					tcnum+=1
					ttc.servt=sum([c.servt for c in ttc.customers])
					ttc.dem=sum([c.dem for c in ttc.customers])
					ttc.dem2=sum([c.dem2 for c in ttc.customers])
					ttc.reje_ve=list(set([v for c in ttc.customers for v in c.reje_ve])) #重複削除
					ttc.depotservt=sum([c.depotservt for c in ttc.customers])

					v.route.clear()
					v.push_customer(customers[0],argvs)
					v.push_customer(ttc,argvs)
					enddepot=TiedCustomer(str(tcnum),v.enddepot.spotid,v.enddepot.ready_fs,v.enddepot.due_fs,v.enddepot.x,v.enddepot.y)
					enddepot.customers.append(v.enddepot)
					enddepot.servt=v.enddepot.servt
					enddepot.dem=v.enddepot.dem
					enddepot.dem2=v.enddepot.dem2
					enddepot.reje_ve=v.enddepot.reje_ve
					enddepot.spotno=v.enddepot.spotno
					enddepot.parkt_open=v.enddepot.parkt_open
					enddepot.parkt_arrive=v.enddepot.parkt_arrive
					enddepot.depotservt=v.enddepot.depotservt
					enddepot.additionalcust=[enddepot]
					enddepot.demdivideunit=v.enddepot.demdivideunit
					enddepot.requestType=v.enddepot.requestType
					enddepot.deny_unass=v.enddepot.deny_unass #未割り当て荷物
					tcnum+=1
					if v.enddepot.custno=="0":
						enddepot.custno="0"
					v.push_customer(enddepot,argvs)
					
					dtable2=get_dtable(v.vtype,v.lv[1],argvs.management_dtable)
			
					ttable2=get_ttable(v.vtype,v.lv[1],argvs.management_ttable)
			
					if argvs.management_etable:
						etable2=get_etable(v.vtype,v.etype,v.lv[1],argvs.management_etable)
				
					if argvs.management_xtable:
						xtable2=get_xtable(v.vtype,v.lv[1],argvs.management_xtable)
				
					
					#顧客受け入れ時刻を確認して可能なら
					if compare_time(v.st[1], tc.due_fs)<=0 and ((compare_time(v.lv[1], v.endhour)<=0 and argvs.lastc_flag==True) or (compare_time(v.lv[-1], v.endhour)<=0 and argvs.lastc_flag==False)) and\
					dtable2[tc.spotno][v.route[-1].spotno]!=-1 and ttable2[tc.spotno][v.route[-1].spotno]!=-1 and ((not argvs.management_etable) or etable2[tc.spotno][v.route[-1].spotno]!=-1) and ((not argvs.management_xtable) or xtable2[tc.spotno][v.route[-1].spotno]!=-1):
						time_feas=True
						direct_customers.append(ttc)
						reachable_max_vehicles.remove(v) #list化した車両群から該当車両を削除
						
						#当該スポットIDだけに行く車両として最終解として採用
						v.direct_flag=True

						#同一spotidかつ同一時間枠で配送があれば一緒に直送する
						for tc_plus in customers:
							if ttc.spotid==tc_plus.spotid and tc_plus.requestType=="DELIVERY" and compare_time(ttc.ready_fs, tc_plus.ready_fs)==0 and compare_time(ttc.due_fs, tc_plus.due_fs)==0 and not v.vehno in tc_plus.reje_ve:
								ttc_plus=copy.deepcopy(tc_plus)

								if v.cap<=abs(ttc_plus.dem):
									solve_knapsack(v,ttc_plus.customers,False) #最大積載量車両に荷物を満載する

								if ttc_plus.customers==[]:
									break

								#作業時間を集荷に合算
								ttc_plus.servt=0.0
								ttc.servt=sum([c.servt for c in ttc_plus.customers])+ttc.servt

								ttc_plus.dem=sum([c.dem for c in ttc_plus.customers])
								ttc_plus.dem2=sum([c.dem2 for c in ttc_plus.customers])
								ttc_plus.reje_ve=list(set([v for c in ttc_plus.customers for v in c.reje_ve])) #重複削除
								ttc.depotservt=sum([c.depotservt for c in ttc_plus.customers])
								direct_customers.append(ttc_plus)

								tv=copy.deepcopy(v)
								tv.insert_customer_at(1,ttc_plus,argvs)

								if (compare_time(tv.lv[1], tv.endhour)<=0 and argvs.lastc_flag==True) or (compare_time(tv.lv[-1], tv.endhour)<=0 and argvs.lastc_flag==False):
									v.insert_customer_at(1,ttc_plus,argvs)
								else:
									continue

								#スポットIDから満載にした荷物を削除
								tc_plus.customers=[c for c in tc_plus.customers if not c.custno in [cust.custno for cust in ttc_plus.customers]]

								if tc_plus.customers!=[]:
									tc_plus.servt=sum([c.servt for c in tc_plus.customers])
									tc_plus.dem=sum([c.dem for c in tc_plus.customers])
									tc_plus.dem2=sum([c.dem2 for c in tc_plus.customers])
									tc_plus.reje_ve=list(set([v for c in tc_plus.customers for v in c.reje_ve])) #重複削除
									tc_plus.depotservt=sum([c.depotservt for c in tc_plus.customers])

								break



						#スポットIDから満載にした荷物を削除
						tc.customers=[c for c in tc.customers if not c.custno in [cust.custno for cust in ttc.customers]] 

						if tc.customers!=[]:
							tc.servt=sum([c.servt for c in tc.customers])
							tc.dem=sum([c.dem for c in tc.customers])
							tc.dem2=sum([c.dem2 for c in tc.customers])
							tc.reje_ve=list(set([v for c in tc.customers for v in c.reje_ve])) #重複削除
							tc.depotservt=sum([c.depotservt for c in tc.customers])
						else:
							break

						if abs(tc.dem)<max_cap:
							break
					else:
						v.route=copy.copy(tveh.route)
						v.update_arrtime_tw(argvs)
				
				if reachable_max_vehicles==[] or cap_feas==False or time_feas==False:
					break

		#dem2
		#該当車両に到達可能な最大積載量の車両群をlistアップする
		reachable_max_vehicles=[]
		max_cap2=0
		for i in range(len(vehicles)):
			v=vehicles[sorted_idx[i]]
			if tc.requestType=="DELIVERY":
				lv=max(v.starthour+customers[0].parkt_arrive,customers[0].ready_fs)+tc.depotservt+v.depotservt+customers[0].parkt_open
			else:
				lv=max(v.starthour,customers[0].ready_fs)+v.depotservt

			dtable1=get_dtable(v.vtype,lv,argvs.management_dtable)
			if dtable1[customers[0].spotno][tc.spotno]==-1:
				continue
			ttable1=get_ttable(v.vtype,lv,argvs.management_ttable)
			if ttable1[customers[0].spotno][tc.spotno]==-1:
				continue
			if argvs.management_etable:
				etable1=get_etable(v.vtype,v.etype,lv,argvs.management_etable)
				if etable1[customers[0].spotno][tc.spotno]==-1:
					continue
			if argvs.management_xtable:
				xtable1=get_xtable(v.vtype,lv,argvs.management_xtable)
				if xtable1[customers[0].spotno][tc.spotno]==-1:
					continue

			if  not v.vehno in tc.reje_ve and max_cap2<=v.cap2 and v.direct_flag==False and (len(v.route)==2 or len(v.route)==0):
				reachable_max_vehicles.append(v)
				max_cap2=v.cap2

		if tc.dem2>0 and tc.requestType=="DELIVERY": #配送の場合
			while max_cap2<=abs(tc.dem2):
				cap_feas=True
				time_feas=False
				for v in reachable_max_vehicles[:]:
					tveh=copy.deepcopy(v)
					ttc=copy.deepcopy(tc)

					solve_knapsack(v,ttc.customers) #最大積載量車両に荷物を満載する

					if ttc.customers==[]:
						cap_feas=False
						break

					ttc.custno=str(tcnum)
					tcnum+=1
					ttc.servt=sum([c.servt for c in ttc.customers])
					ttc.dem=sum([c.dem for c in ttc.customers])
					ttc.dem2=sum([c.dem2 for c in ttc.customers])
					ttc.reje_ve=list(set([v for c in ttc.customers for v in c.reje_ve])) #重複削除
					ttc.depotservt=sum([c.depotservt for c in ttc.customers])
					
					v.route.clear()
					v.push_customer(customers[0],argvs)
					v.push_customer(ttc,argvs)
					enddepot=TiedCustomer(str(tcnum),v.enddepot.spotid,v.enddepot.ready_fs,v.enddepot.due_fs,v.enddepot.x,v.enddepot.y)
					enddepot.customers.append(v.enddepot)
					enddepot.servt=v.enddepot.servt
					enddepot.dem=v.enddepot.dem
					enddepot.dem2=v.enddepot.dem2
					enddepot.reje_ve=v.enddepot.reje_ve
					enddepot.spotno=v.enddepot.spotno
					enddepot.parkt_open=v.enddepot.parkt_open
					enddepot.parkt_arrive=v.enddepot.parkt_arrive
					enddepot.depotservt=v.enddepot.depotservt
					enddepot.additionalcust=[enddepot]
					enddepot.demdivideunit=v.enddepot.demdivideunit
					enddepot.requestType=v.enddepot.requestType
					enddepot.deny_unass=v.enddepot.deny_unass #未割り当て荷物
					tcnum+=1
					if v.enddepot.custno=="0":
						enddepot.custno="0"
					v.push_customer(enddepot,argvs)

					dtable2=get_dtable(v.vtype,v.lv[1],argvs.management_dtable)
			
					ttable2=get_ttable(v.vtype,v.lv[1],argvs.management_ttable)
			
					if argvs.management_etable:
						etable2=get_etable(v.vtype,v.etype,v.lv[1],argvs.management_etable)
				
					if argvs.management_xtable:
						xtable2=get_xtable(v.vtype,v.lv[1],argvs.management_xtable)
				
					
					#顧客受け入れ時刻を確認して可能なら
					if compare_time(v.st[1], tc.due_fs)<=0 and ((compare_time(v.lv[1], v.endhour)<=0 and argvs.lastc_flag==True) or (compare_time(v.lv[-1], v.endhour)<=0 and argvs.lastc_flag==False)) and\
					dtable2[tc.spotno][v.route[-1].spotno]!=-1 and ttable2[tc.spotno][v.route[-1].spotno]!=-1 and ((not argvs.management_etable) or etable2[tc.spotno][v.route[-1].spotno]!=-1) and ((not argvs.management_xtable) or xtable2[tc.spotno][v.route[-1].spotno]!=-1):
						time_feas=True
						direct_customers.append(ttc)
						reachable_max_vehicles.remove(v) #list化した車両群から該当車両を削除
						
						#当該スポットIDだけに行く車両として最終解として採用
						v.direct_flag=True

						#同一spotidかつ同一時間枠で集荷があれば一緒に直送する
						for tc_minus in customers:
							if ttc.spotid==tc_minus.spotid and tc_minus.requestType=="PICKUP" and compare_time(ttc.ready_fs, tc_minus.ready_fs)==0 and compare_time(ttc.due_fs,tc_minus.due_fs)==0 and not v.vehno in tc_minus.reje_ve:
								ttc_minus=copy.deepcopy(tc_minus)

								if v.cap2<=abs(ttc_minus.dem2):
									solve_knapsack(v,ttc_minus.customers,False) #最大積載量車両に荷物を満載する

								if ttc_minus.customers==[]:
									break

								#作業時間を集荷に合算
								ttc_minus.servt=sum([c.servt for c in ttc_minus.customers])+ttc.servt
								ttc.servt=0.0

								ttc_minus.dem=sum([c.dem for c in ttc_minus.customers])
								ttc_minus.dem2=sum([c.dem2 for c in ttc_minus.customers])
								ttc_minus.reje_ve=list(set([v for c in ttc_minus.customers for v in c.reje_ve])) #重複削除
								ttc_minus.depotservt=sum([c.depotservt for c in ttc_minus.customers])
								direct_customers.append(ttc_minus)

								tv=copy.deepcopy(v)
								tv.insert_customer_at(2,ttc_minus,argvs)

								if (compare_time(tv.lv[1], tv.endhour)<=0 and argvs.lastc_flag==True) or (compare_time(tv.lv[-1], tv.endhour)<=0 and argvs.lastc_flag==False):
									v.insert_customer_at(2,ttc_minus,argvs)
								else:
									continue

								#スポットIDから満載にした荷物を削除
								tc_minus.customers=[c for c in tc_minus.customers if not c.custno in [cust.custno for cust in ttc_minus.customers]]

								if tc_minus.customers!=[]:
									tc_minus.servt=sum([c.servt for c in tc_minus.customers])
									tc_minus.dem=sum([c.dem for c in tc_minus.customers])
									tc_minus.dem2=sum([c.dem2 for c in tc_minus.customers])
									tc_minus.reje_ve=list(set([v for c in tc_minus.customers for v in c.reje_ve])) #重複削除
									tc_minus.depotservt=sum([c.depotservt for c in tc_minus.customers])

								break



						#スポットIDから満載にした荷物を削除
						tc.customers=[c for c in tc.customers if not c.custno in [cust.custno for cust in ttc.customers]] 

						if tc.customers!=[]:
							tc.servt=sum([c.servt for c in tc.customers])
							tc.dem=sum([c.dem for c in tc.customers])
							tc.dem2=sum([c.dem2 for c in tc.customers])
							tc.reje_ve=list(set([v for c in tc.customers for v in c.reje_ve])) #重複削除
							tc.depotservt=sum([c.depotservt for c in tc.customers])
						else:
							break

						if abs(tc.dem2)<max_cap2:
							break
					else:
						v.route=copy.copy(tveh.route)
						v.update_arrtime_tw(argvs)
				
				if reachable_max_vehicles==[] or cap_feas==False or time_feas==False:
					break
		elif tc.dem2>0 and tc.requestType=="PICKUP": #集荷の場合
			while max_cap2<=abs(tc.dem2):
				cap_feas=True
				time_feas=False
				for v in reachable_max_vehicles[:]:
					tveh=copy.deepcopy(v)
					ttc=copy.deepcopy(tc)

					solve_knapsack(v,ttc.customers) #最大積載量車両に荷物を満載する

					if ttc.customers==[]:
						cap_feas=False
						break

					ttc.custno=str(tcnum)
					tcnum+=1
					ttc.servt=sum([c.servt for c in ttc.customers])
					ttc.dem=sum([c.dem for c in ttc.customers])
					ttc.dem2=sum([c.dem2 for c in ttc.customers])
					ttc.reje_ve=list(set([v for c in ttc.customers for v in c.reje_ve])) #重複削除
					ttc.depotservt=sum([c.depotservt for c in ttc.customers])

					v.route.clear()
					v.push_customer(customers[0],argvs)
					v.push_customer(ttc,argvs)
					enddepot=TiedCustomer(str(tcnum),v.enddepot.spotid,v.enddepot.ready_fs,v.enddepot.due_fs,v.enddepot.x,v.enddepot.y)
					enddepot.customers.append(v.enddepot)
					enddepot.servt=v.enddepot.servt
					enddepot.dem=v.enddepot.dem
					enddepot.dem2=v.enddepot.dem2
					enddepot.reje_ve=v.enddepot.reje_ve
					enddepot.spotno=v.enddepot.spotno
					enddepot.parkt_open=v.enddepot.parkt_open
					enddepot.parkt_arrive=v.enddepot.parkt_arrive
					enddepot.depotservt=v.enddepot.depotservt
					enddepot.additionalcust=[enddepot]
					enddepot.demdivideunit=v.enddepot.demdivideunit
					enddepot.requestType=v.enddepot.requestType
					enddepot.deny_unass=v.enddepot.deny_unass #未割り当て荷物
					tcnum+=1
					if v.enddepot.custno=="0":
						enddepot.custno="0"
					v.push_customer(enddepot,argvs)

					dtable2=get_dtable(v.vtype,v.lv[1],argvs.management_dtable)
			
					ttable2=get_ttable(v.vtype,v.lv[1],argvs.management_ttable)
			
					if argvs.management_etable:
						etable2=get_etable(v.vtype,v.etype,v.lv[1],argvs.management_etable)
				
					if argvs.management_xtable:
						xtable2=get_xtable(v.vtype,v.lv[1],argvs.management_xtable)
				
					
					#顧客受け入れ時刻を確認して可能なら
					if compare_time(v.st[1], tc.due_fs)<=0 and ((compare_time(v.lv[1], v.endhour)<=0 and argvs.lastc_flag==True) or (compare_time(v.lv[-1], v.endhour)<=0 and argvs.lastc_flag==False)) and\
					dtable2[tc.spotno][v.route[-1].spotno]!=-1 and ttable2[tc.spotno][v.route[-1].spotno]!=-1 and ((not argvs.management_etable) or etable2[tc.spotno][v.route[-1].spotno]!=-1) and ((not argvs.management_xtable) or xtable2[tc.spotno][v.route[-1].spotno]!=-1):
						time_feas=True
						direct_customers.append(ttc)
						reachable_max_vehicles.remove(v) #list化した車両群から該当車両を削除
						
						#当該スポットIDだけに行く車両として最終解として採用
						v.direct_flag=True

						#同一spotidかつ同一時間枠で配送があれば一緒に直送する
						for tc_plus in customers:
							if ttc.spotid==tc_plus.spotid and tc_plus.requestType=="DELIVERY" and compare_time(ttc.ready_fs, tc_plus.ready_fs)==0 and compare_time(ttc.due_fs, tc_plus.due_fs)==0 and not v.vehno in tc_plus.reje_ve:
								ttc_plus=copy.deepcopy(tc_plus)

								if v.cap2<=abs(ttc_plus.dem2):
									solve_knapsack(v,ttc_plus.customers,False) #最大積載量車両に荷物を満載する

								if ttc_plus.customers==[]:
									break

								#作業時間を集荷に合算
								ttc_plus.servt=0.0
								ttc.servt=sum([c.servt for c in ttc_plus.customers])+ttc.servt

								ttc_plus.dem=sum([c.dem for c in ttc_plus.customers])
								ttc_plus.dem2=sum([c.dem2 for c in ttc_plus.customers])
								ttc_plus.reje_ve=list(set([v for c in ttc_plus.customers for v in c.reje_ve])) #重複削除
								ttc.depotservt=sum([c.depotservt for c in ttc_plus.customers])
								direct_customers.append(ttc_plus)

								tv=copy.deepcopy(v)
								tv.insert_customer_at(1,ttc_plus,argvs)

								if (compare_time(tv.lv[1], tv.endhour)<=0 and argvs.lastc_flag==True) or (compare_time(tv.lv[-1], tv.endhour)<=0 and argvs.lastc_flag==False):
									v.insert_customer_at(1,ttc_plus,argvs)
								else:
									continue

								#スポットIDから満載にした荷物を削除
								tc_plus.customers=[c for c in tc_plus.customers if not c.custno in [cust.custno for cust in ttc_plus.customers]]

								if tc_plus.customers!=[]:
									tc_plus.servt=sum([c.servt for c in tc_plus.customers])
									tc_plus.dem=sum([c.dem for c in tc_plus.customers])
									tc_plus.dem2=sum([c.dem2 for c in tc_plus.customers])
									tc_plus.reje_ve=list(set([v for c in tc_plus.customers for v in c.reje_ve])) #重複削除
									tc_plus.depotservt=sum([c.depotservt for c in tc_plus.customers])

								break



						#スポットIDから満載にした荷物を削除
						tc.customers=[c for c in tc.customers if not c.custno in [cust.custno for cust in ttc.customers]] 

						if tc.customers!=[]:
							tc.servt=sum([c.servt for c in tc.customers])
							tc.dem=sum([c.dem for c in tc.customers])
							tc.dem2=sum([c.dem2 for c in tc.customers])
							tc.reje_ve=list(set([v for c in tc.customers for v in c.reje_ve])) #重複削除
							tc.depotservt=sum([c.depotservt for c in tc.customers])
						else:
							break

						if abs(tc.dem2)<max_cap2:
							break
					else:
						v.route=copy.copy(tveh.route)
						v.update_arrtime_tw(argvs)
				
				if reachable_max_vehicles==[] or cap_feas==False or time_feas==False:
					break	

	return direct_customers		

def construction_II(customers,vehicles,ivnum,avetime_ape_flag,avetime_ae_flag,avevisits_ape_flag,avevisits_ae_flag,avedist_ape_flag,avedist_ae_flag,lastc_flag,decr_vnum,argvs, logout=True):
	sLogBuf = "\n"
	vnum=len(vehicles)
	#custnum=len(customers)-1

	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物 未割当て禁止荷物が先に処理されるように並べ替える
		tdepo=copy.deepcopy(customers[0])
		customers=sorted(customers[1:],key=lambda x:x.deny_unass==False)	
		customers.insert(0, copy.deepcopy(tdepo))

	customers_org=customers.copy()

	#荷物マージ
	
	eps=1e-12

	tied_customers=[]

	tcnum=0
	for c in customers:
		for tc in tied_customers:
			if c.spotid==tc.spotid and compare_time(c.ready_fs, tc.ready_fs)==0 and compare_time(c.due_fs, tc.due_fs)==0 and c.requestType==tc.requestType and len(c.additionalcust)==1 and len(tc.additionalcust)==1 and c.custno[0]!='b' and tc.custno[0]!='b' and c.deny_unass==tc.deny_unass: 
				tc.customers.append(c)
				tc.servt=sum([cust.servt for cust in tc.customers])
				tc.dem=sum([cust.dem for cust in tc.customers])
				tc.dem2=sum([cust.dem2 for cust in tc.customers])
				tc.reje_ve=list(set([v for cust in tc.customers for v in cust.reje_ve])) #重複削除
				tc.depotservt=sum([cust.depotservt for cust in tc.customers])
				break
		else:
			if c.custno!="0" and c.custno[0]!="b":
				tied_customers.append(TiedCustomer(str(tcnum+max([0]+[int(ac.custno) for v in vehicles for cust in v.route[1:-1] for ac in cust.additionalcust if ac.custno[0]!="b"])),c.spotid,c.ready_fs,c.due_fs,c.x,c.y))
			else:
				tied_customers.append(TiedCustomer(c.custno,c.spotid,c.ready_fs,c.due_fs,c.x,c.y))
			tied_customers[tcnum].customers.append(c)
			tied_customers[tcnum].servt=c.servt
			tied_customers[tcnum].dem=c.dem
			tied_customers[tcnum].dem2=c.dem2
			tied_customers[tcnum].reje_ve=c.reje_ve
			tied_customers[tcnum].spotno=c.spotno
			tied_customers[tcnum].parkt_open=c.parkt_open
			tied_customers[tcnum].parkt_arrive=c.parkt_arrive
			tied_customers[tcnum].depotservt=c.depotservt
			if len(c.additionalcust)==1: 
				tied_customers[tcnum].additionalcust=[tied_customers[tcnum]]
			tied_customers[tcnum].demdivideunit=c.demdivideunit
			tied_customers[tcnum].requestType=c.requestType
			tied_customers[tcnum].deny_unass=c.deny_unass #未割り当て荷物
			tcnum+=1

	#飛び地対応
	for c in tied_customers:
		if c.additionalcust==[]:
			for ac in c.customers[0].additionalcust:
				for tc in tied_customers:
					if tc.customers[0].custno==ac.custno:
						c.additionalcust.append(tc)
						break
	
	customers=copy.copy(tied_customers)		


	vehicles_sorted=make_sorted_list_by_num_of_reject(vehicles,customers)
	sample_num=10 #試行回数
	tvehicles=copy.deepcopy(vehicles)
	if argvs.break_flag:
		management_ttable = t_dcopy(argvs.management_ttable)
		management_dtable = t_dcopy(argvs.management_dtable)
		management_xtable = t_dcopy(argvs.management_xtable)
		management_etable = t_dcopy(argvs.management_etable)
		t_route = r_backup(vehicles)

	for v in vehicles:
		if v.direct_flag==False:
			#後ろのdepotを削除
			for c in reversed(v.route[:-1]):
				if c.custno!="0" and c.custno[0]!="b":
					break
				if c.custno=="0":
					remove_customers_specified([c],v,argvs) #後ろにあるdepotを削除

	iniroutes={v.vehno:v.route[1:-1] for v in vehicles}		
	
	for sorted_idx in vehicles_sorted[:sample_num]:
		direct_customers = []
		temp_route=[]
		
		
		vehicles[:]=copy.deepcopy(tvehicles)[:]
		for i in range(len(vehicles)):
			for j in range(len(vehicles[i].route)):
				vehicles[i].route[j]=tvehicles[i].route[j]

		if argvs.bulkShipping_flag==False:
			customers=copy.deepcopy(tied_customers)	
		if argvs.multitrip_flag==False: #回転機能の際は直送便は使わない
			direct_customers+=make_direct_vehicles(customers,vehicles,sorted_idx,argvs) #直送便
		direct_vehicles_flag=True

		if argvs.bulkShipping_flag: #空のTiedCustomerを削除
			for c in customers[:]:
				if c.customers==[]:
					for ac in c.additionalcust:
						customers.remove(ac)

			for v in vehicles:
				if v.direct_flag==False:
					v.route=[]
		else: #もとに戻す
			customers=customers_org

			dc=direct_customers.copy()
			direct_customers.clear()

			for tc in dc:
				for c in tc.customers:
					direct_customers.append(c)
			
			for c in direct_customers:
				for ac in c.additionalcust:
					for cust in customers:
						if ac.custno==cust.custno:
							customers.remove(cust)

			for v in vehicles:
				route=v.route.copy()
				v.route=[]

				if v.direct_flag==True:
					# servt=0.0
					# for tc in route:					
					# 	for c in tc.customers:
					# 		servt+=c.servt
					# 		c.servt=0.0
					# route[-2].customers[-1].servt=servt #最後の配送先に荷作業時間を合算する

					for tc in route:
						if tc.custno[0] != 'b':
							for c in tc.customers:
								v.push_customer(c,argvs)
						else:
							v.push_customer(tc,argvs)

		if argvs.break_flag:
			for v in vehicles:
				if len(v.route) < 1:
					continue
				tv = dcopy(v)
				tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
				if tv != None:
					#各配送先のdueチェック
					for i, c in enumerate(tv.route):
						if c.due_fs < tv.st[i]:
							argvs.management_ttable = t_dcopy(management_ttable)
							argvs.management_dtable = t_dcopy(management_dtable)
							argvs.management_xtable = t_dcopy(management_xtable)
							argvs.management_etable = t_dcopy(management_etable)
							vehicles = r_restore(vehicles, t_route, argvs)
							insert_direct_flag=False
							for v in vehicles:
								v.direct_flag=False
								v.route.clear()
								v.update_arrtime_tw(argvs)
							customers+=direct_customers
							direct_customers.clear()
							break
					else:
						#車両営業時間枠チェック
						last_idx = get_last_idx(tv, argvs)
						if tv.endhour < tv.lv[last_idx]:
							argvs.management_ttable = t_dcopy(management_ttable)
							argvs.management_dtable = t_dcopy(management_dtable)
							argvs.management_xtable = t_dcopy(management_xtable)
							argvs.management_etable = t_dcopy(management_etable)
							vehicles = r_restore(vehicles, t_route, argvs)
							insert_direct_flag=False
							for v in vehicles:
								v.direct_flag=False
								v.route.clear()
								v.update_arrtime_tw(argvs)
							customers+=direct_customers
							direct_customers.clear()
							break
						else:
							#休憩スポット挿入成功
							vehnos=[v.vehno for v in vehicles]
							vehicles[vehnos.index(tv.vehno)] = dcopy(tv)
							management_ttable = t_dcopy(argvs.management_ttable)
							management_dtable = t_dcopy(argvs.management_dtable)
							management_xtable = t_dcopy(argvs.management_xtable)
							management_etable = t_dcopy(argvs.management_etable)
							t_route = r_backup(vehicles)
							v = dcopy(tv)
				else:
					argvs.management_ttable = t_dcopy(management_ttable)
					argvs.management_dtable = t_dcopy(management_dtable)
					argvs.management_xtable = t_dcopy(management_xtable)
					argvs.management_etable = t_dcopy(management_etable)
					vehicles = r_restore(vehicles, t_route, argvs)
					insert_direct_flag=False
					for v in vehicles:
						v.direct_flag=False
						v.route.clear()
						v.update_arrtime_tw(argvs)
					customers+=direct_customers
					direct_customers.clear()
					break

		tnbflag=NbFlag(True,True,True,True,True)

		if argvs.break_flag:
			management_ttable = t_dcopy(argvs.management_ttable)
			management_dtable = t_dcopy(argvs.management_dtable)
			management_xtable = t_dcopy(argvs.management_xtable)
			management_etable = t_dcopy(argvs.management_etable)
			t_route = r_backup(vehicles)
		while True:
			insert_flag=True
			insert_direct_flag=True

			all_direct_flag=True
			for v in vehicles:
				if v.direct_flag==False:
					all_direct_flag=False
					break
			
			if all_direct_flag and len(customers)>=2:
				for v in vehicles:
					v.direct_flag=False
					v.route.clear()
					v.update_arrtime_tw(argvs)

				customers+=direct_customers
				direct_customers.clear()

				all_direct_flag=False
			
			timeout_flag=False

					
			if all_direct_flag==True:
				break

			#finding seed customer
			
			cust_in_routes=[]
			

			#初期解生成
			tcust=customers.copy()
			curv=0

			while curv<vnum and vehicles[sorted_idx[curv]].direct_flag==True:
				curv=curv+1

			vcnt=0
			for v in vehicles:
				if v.direct_flag==True:
					continue

				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
					v.route=v.route[1:-1]

				vcnt+=1

				v.push_customer(customers[0],argvs)
				if argvs.bulkShipping_flag:
					# v.push_customer(TiedCustomer(str(tcnum),v.enddepot.spotid,v.enddepot.ready_fs,v.enddepot.due_fs,v.enddepot.x,v.enddepot.y),argvs)
					_cust = []
					for c in customers:
						if c.custno[0] != 'b':
							_cust.append(c)
					enddepot=TiedCustomer(str(max([int(c.custno) for c in _cust])+vcnt),v.enddepot.spotid,v.enddepot.ready_fs,v.enddepot.due_fs,v.enddepot.x,v.enddepot.y)
					#enddepot=TiedCustomer(str(max([int(c.custno) for c in customers])+vcnt),v.enddepot.spotid,v.enddepot.ready_fs,v.enddepot.due_fs,v.enddepot.x,v.enddepot.y)
					enddepot.customers=[v.enddepot]
					enddepot.parkt_open=v.enddepot.parkt_open
					enddepot.parkt_arrive=v.enddepot.parkt_arrive
					enddepot.depotservt=v.enddepot.depotservt
					enddepot.spotno=v.enddepot.spotno
					enddepot.additionalcust=[enddepot]
					enddepot.demdivideunit=v.enddepot.demdivideunit
					enddepot.requestType=v.enddepot.requestType
					enddepot.deny_unass=v.enddepot.deny_unass #未割り当て荷物
					if v.enddepot.custno=="0":
						enddepot.custno="0"
					v.push_customer(enddepot,argvs)
					
				else:
					v.push_customer(v.enddepot,argvs)

				for c in iniroutes[v.vehno]:
					v.insert_customer_at(-1,c,argvs)
			
			#拠点の配送開始時刻の算出のため、update_arrtime_tw()を呼び出す
			vehicles[sorted_idx[curv]].update_arrtime_tw(argvs)
			dtable1 = get_dtable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[0], argvs.management_dtable)

			
			if argvs.multitrip_flag==False and len(tcust) > 1 and len(vehicles[sorted_idx[curv]].route)==2: #回転がある場合は、回転を増やすことで違反をなくせるので、違反解を作らないことを優先するため下記処理を実行しない
				dist_from_depot={}
				for c in tcust[1:]: #飛び地も対象
					dist_from_depot[c]=dtable1[tcust[0].spotno][c.spotno]
				sorted(dist_from_depot.items(),key=lambda x:x[1],reverse=True)

				seed_c={}
				seed_c[curv]=sorted(dist_from_depot.items(),key=lambda x:x[1],reverse=True)[0][0]
				
				# check_feasibility_of_the_first(seed_c[curv],vehicles[sorted_idx[curv]],customers,argvs)
				# 初期解で違反解を許容するため
				if not vehicles[sorted_idx[curv]].vehno in seed_c[curv].reje_ve:
					#通行可能なら
					ttable10 = get_ttable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[0], argvs.management_ttable)

					dtable8 = get_dtable(vehicles[sorted_idx[curv]].vtype,vehicles[sorted_idx[curv]].lv[0], argvs.management_dtable)

					if argvs.management_etable:
						etable7 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, vehicles[sorted_idx[curv]].lv[0], argvs.management_etable)

					if argvs.management_xtable:
						xtable7 = get_xtable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[0], argvs.management_xtable)

					if ttable10[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]!=-1 and \
					dtable8[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]!=-1 and \
					(not argvs.management_etable or etable7[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]!=-1) and \
					(not argvs.management_xtable or xtable7[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]!=-1):
						arr_t=vehicles[sorted_idx[curv]].lv[0]+ttable10[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]*vehicles[sorted_idx[curv]].drskill
						if seed_c[curv].spotid!=vehicles[sorted_idx[curv]].route[0].spotid:
							lv_t=max(arr_t+seed_c[curv].parkt_arrive,seed_c[curv].ready_fs)+seed_c[curv].servt*vehicles[sorted_idx[curv]].opskill
						else:
							lv_t=max(arr_t,seed_c[curv].ready_fs)+seed_c[curv].servt*vehicles[sorted_idx[curv]].opskill
						if seed_c[curv].spotid!=vehicles[sorted_idx[curv]].route[0].spotid:
							lv_t+=seed_c[curv].parkt_open

						ttable11 = get_ttable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_ttable)

						dtable9 = get_dtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_dtable)

						if argvs.management_etable:
							etable8 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, lv_t, argvs.management_etable)

						if argvs.management_xtable:
							xtable8 = get_xtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_xtable)

						if  ttable11[seed_c[curv].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]!=-1 and \
						dtable9[seed_c[curv].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]!=-1 and \
						(not argvs.management_etable or etable8[seed_c[curv].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]!=-1) and \
						(not argvs.management_xtable or xtable8[seed_c[curv].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]!=-1):
							vehicles[sorted_idx[curv]].insert_customer_at(1,seed_c[curv],argvs)
							cust_in_routes+=[seed_c[curv]]
							for c in seed_c[curv].additionalcust:
								tcust.remove(c)
		
							if argvs.break_flag:
								t_route = r_backup(vehicles)
								tv = dcopy(vehicles[sorted_idx[curv]])
								tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
								if tv != None:
									vehicles[sorted_idx[curv]] = dcopy(tv)
									management_ttable = t_dcopy(argvs.management_ttable)
									management_dtable = t_dcopy(argvs.management_dtable)
									management_xtable = t_dcopy(argvs.management_xtable)
									management_etable = t_dcopy(argvs.management_etable)
									t_route = r_backup(vehicles)
								else:
									argvs.management_ttable = t_dcopy(management_ttable)
									argvs.management_dtable = t_dcopy(management_dtable)
									argvs.management_xtable = t_dcopy(management_xtable)
									argvs.management_etable = t_dcopy(management_etable)
									vehicles = r_restore(vehicles, t_route, argvs)
			insert_depo_flag=False
			ins_skiplist = []
			while len(tcust)>=2:
				clen=len(tcust)
		###->
				dtable_endtime = time.time()
				if argvs.timeout > 0.0 and ((dtable_endtime - argvs.ls_d_starttime) > argvs.timeout) and logout: 
					sLogBuf_timeout = "initial construction timeout!\n" #20180807
					if rank==0:
						logging.log(logging.ERROR,sLogBuf_timeout)

					##初期解を作ってタイムアウト終了する場合
					timeout_flag=True

					if argvs.break_flag:
						management_ttable = t_dcopy(argvs.management_ttable)
						management_dtable = t_dcopy(argvs.management_dtable)
						management_xtable = t_dcopy(argvs.management_xtable)
						management_etable = t_dcopy(argvs.management_etable)
						t_route = r_backup(vehicles)

					for v in vehicles:
						if len(v.route)==2:
							for c in tcust[1:]:
								if not c in tcust:
									continue
								if not v.vehno in c.reje_ve:
									if argvs.break_flag:
										argvs.management_ttable = t_dcopy(management_ttable)
										argvs.management_dtable = t_dcopy(management_dtable)
										argvs.management_xtable = t_dcopy(management_xtable)
										argvs.management_etable = t_dcopy(management_etable)
										vehicles = r_restore(vehicles, t_route, argvs)
									#通行可能なら
									ttable12 = get_ttable(v.vtype, v.lv[0], argvs.management_ttable)

									dtable10 = get_dtable(v.vtype, v.lv[0], argvs.management_dtable)

									if argvs.management_etable:
										etable9 = get_etable(v.vtype, v.etype, v.lv[0], argvs.management_etable)

									if argvs.management_xtable:
										xtable9 = get_xtable(v.vtype, v.lv[0], argvs.management_xtable)

									if ttable12[v.route[0].spotno][c.spotno]!=-1 and \
									dtable10[v.route[0].spotno][c.spotno]!=-1 and \
									(not argvs.management_etable or etable9[v.route[0].spotno][c.spotno]!=-1) and \
									(not argvs.management_xtable or xtable9[v.route[0].spotno][c.spotno]!=-1):
										arr_t=v.lv[0]+ttable12[v.route[0].spotno][c.spotno]*v.drskill
										lv_t=max(arr_t,c.ready_fs)+c.servt*v.opskill

										ttable13 = get_ttable(v.vtype, lv_t, argvs.management_ttable)

										dtable11 = get_dtable(v.vtype, lv_t, argvs.management_dtable)

										if argvs.management_etable:
											etable10 = get_etable(v.vtype, v.etype, lv_t, argvs.management_etable)

										if argvs.management_xtable:
											xtable10 = get_xtable(v.vtype, lv_t, argvs.management_xtable)

										if ttable13[c.spotno][v.route[-1].spotno]!=-1 and \
										dtable11[c.spotno][v.route[-1].spotno]!=-1 and \
										(not argvs.management_etable or etable10[c.spotno][v.route[-1].spotno]!=-1) and \
										(not argvs.management_xtable or xtable10[c.spotno][v.route[-1].spotno]!=-1):
											if argvs.break_flag:
												tv = dcopy(v)
												tv.insert_customer_at(1,c,argvs)
												tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
												if tv != None:
													v = dcopy(tv)
													management_ttable = t_dcopy(argvs.management_ttable)
													management_dtable = t_dcopy(argvs.management_dtable)
													management_xtable = t_dcopy(argvs.management_xtable)
													management_etable = t_dcopy(argvs.management_etable)
													t_route = r_backup(vehicles)
												else:
													argvs.management_ttable = t_dcopy(management_ttable)
													argvs.management_dtable = t_dcopy(management_dtable)
													argvs.management_xtable = t_dcopy(management_xtable)
													argvs.management_etable = t_dcopy(management_etable)
													vehicles = r_restore(vehicles, t_route, argvs)
													continue
											else:
												v.insert_customer_at(1,c,argvs)

											for u in c.additionalcust:
												if u in tcust:
													tcust.remove(u)
											break
							else:
								sErrMes = "failed to create initial solution due to timeout"
								raise ValueError(sErrMes)		

					if argvs.break_flag:
						management_ttable = t_dcopy(argvs.management_ttable)
						management_dtable = t_dcopy(argvs.management_dtable)
						management_xtable = t_dcopy(argvs.management_xtable)
						management_etable = t_dcopy(argvs.management_etable)
						t_route = r_backup(vehicles)

					while len(tcust)>=2:
						cust_len=len(tcust)

						for c in tcust[1:]:
							if not c in tcust:
								continue

							for v in vehicles:
								if v.vehno in c.reje_ve:
									continue

								maxvisit = False
								if v.maxvisit != 0:
									#troute = [cust.spotid for cust in v.route]
									#troute.insert(-1, c.spotid)
									#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([cust for j,cust in enumerate(troute[1:-1]) if cust=="0" and (troute[j]!="0" or j==0)])
									#visit_num = calc_visitnum(troute)
									_tveh = dcopy(v)
									_tveh.route.insert(-1,c)
									visit_num = calc_visitnum(_tveh.route)
									if visit_num > v.maxvisit:
										maxvisit = True
								if maxvisit:
									continue

								if argvs.break_flag:
									argvs.management_ttable = t_dcopy(management_ttable)
									argvs.management_dtable = t_dcopy(management_dtable)
									argvs.management_xtable = t_dcopy(management_xtable)
									argvs.management_etable = t_dcopy(management_etable)
									vehicles = r_restore(vehicles, t_route, argvs)

								#通行可能なら
								ttable14 = get_ttable(v.vtype, v.lv[-2], argvs.management_ttable)

								dtable12 = get_dtable(v.vtype, v.lv[-2], argvs.management_dtable)

								if argvs.management_etable:
									etable11 = get_etable(v.vtype, v.etype, v.lv[-2], argvs.management_etable)

								if argvs.management_xtable:
									xtable11 = get_xtable(v.vtype, v.lv[-2], argvs.management_xtable)

								if ttable14[v.route[-2].spotno][c.spotno]!=-1 and \
								dtable12[v.route[-2].spotno][c.spotno]!=-1 and \
								(not argvs.management_etable or etable11[v.route[-2].spotno][c.spotno]!=-1) and \
								(not argvs.management_xtable or xtable11[v.route[-2].spotno][c.spotno]!=-1):
									if v.route[-2].custno==c.custno and c.custno!="0":	#荷物分割からの呼び出し対応
										arr_t=v.arr[-2]
										st_t=v.st[-2]
										lv_t=v.lv[-2]
									else:
										arr_t=v.lv[-2]+ttable14[v.route[-2].spotno][c.spotno]*v.drskill
										if v.route[-2].spotid!=c.spotid:
											lv_t=max(arr_t+c.parkt_arrive,c.ready_fs)+c.servt*v.opskill
										else:
											lv_t=max(arr_t,c.ready_fs)+c.servt*v.opskill
										if v.route[-2].spotid!=c.spotid:
											lv_t+=c.parkt_open

									ttable15 = get_ttable(v.vtype, lv_t, argvs.management_ttable)

									dtable13 = get_dtable(v.vtype, lv_t, argvs.management_dtable)

									if argvs.management_etable:
										etable12 = get_etable(v.vtype, v.etype, lv_t, argvs.management_etable)

									if argvs.management_xtable:
										xtable12 = get_xtable(v.vtype, lv_t, argvs.management_xtable)

									if ttable15[c.spotno][v.route[-1].spotno]!=-1 and \
									dtable13[c.spotno][v.route[-1].spotno]!=-1 and \
									(not argvs.management_etable or etable12[c.spotno][v.route[-1].spotno]!=-1) and \
									(not argvs.management_xtable or xtable12[c.spotno][v.route[-1].spotno]!=-1):
										if argvs.break_flag:
											tv = dcopy(v)
											tv.insert_customer_at(len(v.route)-1,c,argvs)
											if argvs.break_flag:
												tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
											if tv != None:
												v = dcopy(tv)
												management_ttable = t_dcopy(argvs.management_ttable)
												management_dtable = t_dcopy(argvs.management_dtable)
												management_xtable = t_dcopy(argvs.management_xtable)
												management_etable = t_dcopy(argvs.management_etable)
												t_route = r_backup(vehicles)
											else:
												argvs.management_ttable = t_dcopy(management_ttable)
												argvs.management_dtable = t_dcopy(management_dtable)
												argvs.management_xtable = t_dcopy(management_xtable)
												argvs.management_etable = t_dcopy(management_etable)
												vehicles = r_restore(vehicles, t_route, argvs)
												continue
										else:
											v.insert_customer_at(len(v.route)-1,c,argvs)

										for u in c.additionalcust:
											if u in tcust:
												tcust.remove(u)

										break

						if cust_len==len(tcust):
							sErrMes = "failed to create initial solution due to timeout"
							raise ValueError(sErrMes)	

					break #20180807
					#ここまで
		###<-





				###########################################################################################################
				#best insertion position for customers (in key)
				best_pos,best_c1={},{}
				ins_feas=False
				for u in tcust[1:]:
					best_c1[u],best_pos[u]=1e+9,-1
					for index,i in enumerate(zip(vehicles[sorted_idx[curv]].route[:-1],vehicles[sorted_idx[curv]].route[1:],vehicles[sorted_idx[curv]].lv[:-1])):
						if len([l for l in ins_skiplist if l['uast']==u and l['index']==index+1]) > 0:
							continue #休憩スポットを挿入できない組み合わせなのでスキップする

						bj=vehicles[sorted_idx[curv]].arr[index+1]
						impassable=True
						tw_feas=True

						depo_idx=[j for j,c in enumerate(vehicles[sorted_idx[curv]].route[:-1]) if c.custno=="0"]+[len(vehicles[sorted_idx[curv]].route)-1]
						servt_dict={}
						for k in range(len(depo_idx)-1):
							servt_dict[vehicles[sorted_idx[curv]].route[depo_idx[k]]]=0
							servt=0
							for j in range(depo_idx[k]+1,depo_idx[k+1]):
								if not(j!=0 and vehicles[sorted_idx[curv]].route[j].custno==vehicles[sorted_idx[curv]].route[j-1].custno and vehicles[sorted_idx[curv]].route[j].custno!="0"): #荷物分割からの呼び出し対応
									if vehicles[sorted_idx[curv]].route[j].requestType=="DELIVERY" and vehicles[sorted_idx[curv]].route[j].custno[0]!='b':
										servt+=vehicles[sorted_idx[curv]].route[j].depotservt
									if depo_idx[k]<index+1 and index+1<=depo_idx[k+1] and u.requestType=="DELIVERY" and u.custno[0]!='b': 
										servt+=u.depotservt
							if vehicles[sorted_idx[curv]].route[depo_idx[k]+1].custno!="0":
								servt_dict[vehicles[sorted_idx[curv]].route[depo_idx[k]]]+=servt+vehicles[sorted_idx[curv]].depotservt
							else:
								servt_dict[vehicles[sorted_idx[curv]].route[depo_idx[k]]]+=servt
			
						#集荷時間
						servt_dict[vehicles[sorted_idx[curv]].route[len(vehicles[sorted_idx[curv]].route)-1]]=0
						for k in range(1,len(depo_idx)):
							servt=0
							for j in range(depo_idx[k-1]+1,depo_idx[k]):
								if not(j!=0 and vehicles[sorted_idx[curv]].route[j].custno==vehicles[sorted_idx[curv]].route[j-1].custno and vehicles[sorted_idx[curv]].route[j].custno!="0"): #荷物分割からの呼び出し対応
									if vehicles[sorted_idx[curv]].route[j].requestType=="PICKUP":
										servt+=vehicles[sorted_idx[curv]].route[j].depotservt
									if depo_idx[k-1]<index+1 and index+1<=depo_idx[k] and u.requestType=="PICKUP": 
										servt+=u.depotservt
							servt_dict[vehicles[sorted_idx[curv]].route[depo_idx[k]]]+=servt
							

						
						if len([c for c in vehicles[sorted_idx[curv]].route[1:depo_idx[1]] if c.requestType=="DELIVERY"])>1 or (index<depo_idx[1] and i[0].requestType=="DELIVERY"):
							lv_t=max(vehicles[sorted_idx[curv]].starthour+vehicles[sorted_idx[curv]].route[0].parkt_arrive,vehicles[sorted_idx[curv]].route[0].ready_fs)+servt_dict[vehicles[sorted_idx[curv]].route[0]]*vehicles[sorted_idx[curv]].opskill
						else:
							lv_t=max(vehicles[sorted_idx[curv]].starthour,vehicles[sorted_idx[curv]].route[0].ready_fs)+servt_dict[vehicles[sorted_idx[curv]].route[0]]*vehicles[sorted_idx[curv]].opskill
						if len([c for c in vehicles[sorted_idx[curv]].route[1:depo_idx[1]] if c.requestType=="DELIVERY"])>1 or (index<depo_idx[1] and i[0].requestType=="DELIVERY"):
							lv_t+=vehicles[sorted_idx[curv]].route[0].parkt_open

						for j in range(index):
							from_c,to_c=vehicles[sorted_idx[curv]].route[j],vehicles[sorted_idx[curv]].route[j+1]
							ttable1 = get_ttable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_ttable)
							dtable2 = get_dtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable1 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable1 = get_xtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_xtable)

							if ttable1[from_c.spotno][to_c.spotno]==-1 or\
							dtable2[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable1[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable1[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							if j!=0 and vehicles[sorted_idx[curv]].route[j].custno==vehicles[sorted_idx[curv]].route[j+1].custno and vehicles[sorted_idx[curv]].route[j+1].custno!="0": #荷物分割からの呼び出し対応
								arr_t=vehicles[sorted_idx[curv]].arr[j]
								st_t=vehicles[sorted_idx[curv]].st[j]
							else:
								arr_t=lv_t+ttable1[from_c.spotno][to_c.spotno]*vehicles[sorted_idx[curv]].drskill
								if to_c.spotid!=from_c.spotid and \
								(not j+1 in depo_idx or \
								len([c for c in vehicles[sorted_idx[curv]].route[depo_idx[depo_idx.index(j+1)-1]+1:j+1] if c.requestType=="PICKUP"])>1 or \
								len([c for c in vehicles[sorted_idx[curv]].route[j+2:depo_idx[depo_idx.index(j+1)+1]] if c.requestType=="DELIVERY"])>1 or \
								(index in range(j+2,depo_idx[depo_idx.index(j+1)+1]) and u.requestType=="DELIVERY")):
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									st_t=max(arr_t,to_c.ready_fs)

							if (from_c.custno!="0" or to_c.custno!="0") and compare_time(st_t,to_c.due_fs)>0:
								tw_feas=False
								break

							if from_c.custno==to_c.custno and to_c.custno!="0": #荷物分割からの呼び出し対応
								lv_t=vehicles[sorted_idx[curv]].lv[j]
							else:
								if to_c.spotid!=from_c.spotid and \
								(not j+1 in depo_idx or \
								len([c for c in vehicles[sorted_idx[curv]].route[depo_idx[depo_idx.index(j+1)-1]+1:j+1] if c.requestType=="PICKUP"])>1 or \
								len([c for c in vehicles[sorted_idx[curv]].route[j+2:depo_idx[depo_idx.index(j+1)+1]] if c.requestType=="DELIVERY"])>1 or \
								(index in range(j+2,depo_idx[depo_idx.index(j+1)+1]) and u.requestType=="DELIVERY")):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)
								else:
									lv_t=max(arr_t,to_c.ready_fs)
								if to_c in servt_dict:
									lv_t+=servt_dict[to_c]*vehicles[sorted_idx[curv]].opskill
								else:
									lv_t+=to_c.servt*vehicles[sorted_idx[curv]].opskill
								if to_c.spotid!=from_c.spotid and \
								(not j+1 in depo_idx or \
								len([c for c in vehicles[sorted_idx[curv]].route[depo_idx[depo_idx.index(j+1)-1]+1:j+1] if c.requestType=="PICKUP"])>1 or \
								len([c for c in vehicles[sorted_idx[curv]].route[j+2:depo_idx[depo_idx.index(j+1)+1]] if c.requestType=="DELIVERY"])>1 or \
								(index in range(j+2,depo_idx[depo_idx.index(j+1)+1]) and u.requestType=="DELIVERY")):
									lv_t+=to_c.parkt_open

						if impassable==False or tw_feas==False:
							continue

						ilv_new=lv_t
						ttable2 = get_ttable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_ttable)
						dtable3 = get_dtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable2 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable2 = get_xtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_xtable)

						if ttable2[i[0].spotno][u.spotno]==-1 or\
						dtable3[i[0].spotno][u.spotno]==-1 or \
						(argvs.management_etable and etable2[i[0].spotno][u.spotno]==-1) or \
						(argvs.management_xtable and xtable2[i[0].spotno][u.spotno]==-1):
							continue

						if i[0].custno==u.custno and u.custno!="0": #荷物分割からの呼び出し対応
							pass
						else:
							arr_t=lv_t+ttable2[i[0].spotno][u.spotno]*vehicles[sorted_idx[curv]].drskill
							if u.spotid!=i[0].spotid:
								st_t=max(arr_t+u.parkt_arrive,u.ready_fs)+u.parkt_open
							else:
								st_t=max(arr_t,u.ready_fs)

						if compare_time(st_t, u.due_fs)>0:
							continue

						if i[0].custno==u.custno and u.custno!="0": #荷物分割からの呼び出し対応
							pass
						else:
							if u.spotid!=i[0].spotid:
								lv_t=max(arr_t+u.parkt_arrive,u.ready_fs)+u.servt*vehicles[sorted_idx[curv]].opskill
							else:
								lv_t=max(arr_t,u.ready_fs)+u.servt*vehicles[sorted_idx[curv]].opskill
							if u.spotid!=i[0].spotid:
								lv_t+=u.parkt_open
						u_lv=lv_t

						ttable19 = get_ttable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_ttable)
						dtable17 = get_dtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable16 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable16 = get_xtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_xtable)

						if ttable19[u.spotno][i[1].spotno]==-1 or\
						dtable17[u.spotno][i[1].spotno]==-1 or \
						(argvs.management_etable and etable16[u.spotno][i[1].spotno]==-1) or \
						(argvs.management_xtable and xtable16[u.spotno][i[1].spotno]==-1):
							continue

						if argvs.lastc_flag:
							for j in reversed(range(0,len(vehicles[sorted_idx[curv]].route))):
								if vehicles[sorted_idx[curv]].route[j].custno=="0" or vehicles[sorted_idx[curv]].route[j].custno[0]=="b" or vehicles[sorted_idx[curv]].route[j].custno[0]=="e" or j==len(vehicles[sorted_idx[curv]].route)-1:
									last_idx=j
								else:
									break

						i1_index=index+1
						cur_n=len(vehicles[sorted_idx[curv]].route)

						if u.custno==i[1].custno and u.custno!="0": #荷物分割からの呼び出し対応
							pass
						else:
							arr_t=lv_t+ttable19[u.spotno][i[1].spotno]*vehicles[sorted_idx[curv]].drskill
						if argvs.lastc_flag==False or i1_index<last_idx:
							if u.custno==i[1].custno and u.custno!="0": #荷物分割からの呼び出し対応
								pass
							else:
								if i[1].spotid!=u.spotid:
									st_t=max(arr_t+i[1].parkt_arrive,i[1].ready_fs)+i[1].parkt_open
								else:
									st_t=max(arr_t,i[1].ready_fs)
							if compare_time(st_t, i[1].due_fs)>0:
								continue

							if u.custno==i[1].custno and u.custno!="0": #荷物分割からの呼び出し対応
								pass
							else:
								if i[1].spotid!=u.spotid:
									lv_t=max(arr_t+i[1].parkt_arrive,i[1].ready_fs)
								else:
									lv_t=max(arr_t,i[1].ready_fs)
								if i[1] in servt_dict:
									lv_t+=servt_dict[i[1]]*vehicles[sorted_idx[curv]].opskill
								else:
									lv_t+=i[1].servt*vehicles[sorted_idx[curv]].opskill
								if i[1].spotid!=u.spotid:
									lv_t+=i[1].parkt_open
						

						for j in range(i1_index,cur_n-1):
							if argvs.lastc_flag==True and j+1==last_idx:
								continue
							from_c,to_c=vehicles[sorted_idx[curv]].route[j],vehicles[sorted_idx[curv]].route[j+1]

							ttable3 = get_ttable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[j], argvs.management_ttable)
							dtable14 = get_dtable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[j], argvs.management_dtable)
							if argvs.management_etable:
								etable13 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, vehicles[sorted_idx[curv]].lv[j], argvs.management_etable)
							if argvs.management_xtable:
								xtable13 = get_xtable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[j], argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or\
							dtable14[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable13[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable13[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							if j!=0 and vehicles[sorted_idx[curv]].route[j].custno == vehicles[sorted_idx[curv]].route[j+1].custno and vehicles[sorted_idx[curv]].route[j].custno!="0": #荷物分割からの呼び出し対応
								arr_t=vehicles[sorted_idx[curv]].arr[j]
								st_t=vehicles[sorted_idx[curv]].st[j]
								lv_t=vehicles[sorted_idx[curv]].lv[j]
							else:
								arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*vehicles[sorted_idx[curv]].drskill
								if to_c.spotid!=from_c.spotid and \
								(not j+1 in depo_idx or \
								len([c for c in vehicles[sorted_idx[curv]].route[depo_idx[depo_idx.index(j+1)-1]+1:j+1] if c.requestType=="PICKUP"])>1 or \
								(j+1!=cur_n-1 and len([c for c in vehicles[sorted_idx[curv]].route[j+2:depo_idx[depo_idx.index(j+1)+1]] if c.requestType=="DELIVERY"])>1) or \
								(index in range(depo_idx[depo_idx.index(j+1)-1]+1,j+1) and u.requestType=="PICKUP")):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)
									st_t=max(arr_t,to_c.ready_fs)
								if to_c in servt_dict:
									lv_t+=servt_dict[to_c]*vehicles[sorted_idx[curv]].opskill
								else:
									lv_t+=to_c.servt*vehicles[sorted_idx[curv]].opskill
								if to_c.spotid!=from_c.spotid and \
								(not j+1 in depo_idx or \
								len([c for c in vehicles[sorted_idx[curv]].route[depo_idx[depo_idx.index(j+1)-1]+1:j+1] if c.requestType=="PICKUP"])>1 or \
								(j+1!=cur_n-1 and len([c for c in vehicles[sorted_idx[curv]].route[j+2:depo_idx[depo_idx.index(j+1)+1]] if c.requestType=="DELIVERY"])>1) or \
								(index in range(depo_idx[depo_idx.index(j+1)-1]+1,j+1) and u.requestType=="PICKUP")):
									lv_t+=to_c.parkt_open
							if (from_c.custno!="0" or to_c.custno!="0") and compare_time(st_t, to_c.due_fs)>0:
								tw_feas=False

						if compare_time(lv_t, vehicles[sorted_idx[curv]].endhour)>0:
							tw_feas=False

						if impassable==False:
							continue


						# maxvisit check
						maxvisit = False
						if vehicles[sorted_idx[curv]].maxvisit != 0:
							#troute = [c.spotid for c in vehicles[sorted_idx[curv]].route]
							#troute.insert(index+1, u.spotid)
							#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for j,c in enumerate(troute[1:-1]) if c=="0" and (troute[j]!="0" or j==0)])
							#visit_num = calc_visitnum(troute)
							_tveh = dcopy(vehicles[sorted_idx[curv]])
							_tveh.route.insert(index+1, u)
							visit_num = calc_visitnum(_tveh.route)
							if visit_num > vehicles[sorted_idx[curv]].maxvisit:
								maxvisit = True
						if maxvisit:
							continue

						if argvs.init_changecust=="additive" and vehicles[sorted_idx[curv]].route[index].custno=="0" and vehicles[sorted_idx[curv]].route[index+1].custno=="0":
							if len([c for c in vehicles[sorted_idx[curv]].route[index+2:-1] if c.changecust=="additive" and c.custno!="0" and c.custno[0]!="b"])!=0:
								continue

						cap_feas=True
						max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty([c for c in vehicles[sorted_idx[curv]].route[:index+1]]+[u]+[c for c in vehicles[sorted_idx[curv]].route[index+1:]],vehicles[sorted_idx[curv]])
						
						load_onbrd,load_onbrd2=0,0
						for j in range(len(depo_idx)-1):
							if depo_idx[j]<index+1 and index+1<=depo_idx[j+1]:
								for k in range(depo_idx[j]+1,depo_idx[j+1]):
									if vehicles[sorted_idx[curv]].route[k].requestType=="DELIVERY":
										if vehicles[sorted_idx[curv]].route[k].custno[0] != "b":
											if not(k!=0 and vehicles[sorted_idx[curv]].route[k-1].custno==vehicles[sorted_idx[curv]].route[k].custno and vehicles[sorted_idx[curv]].route[k].custno!="0"): #荷物分割からの呼び出し対応
												load_onbrd+=vehicles[sorted_idx[curv]].route[k].dem
												load_onbrd2+=vehicles[sorted_idx[curv]].route[k].dem2

						if (u.requestType=="DELIVERY" and u.custno[0]!='b' and load_onbrd+u.dem>vehicles[sorted_idx[curv]].cap+1e-7) or\
						(u.requestType=="DELIVERY" and u.custno[0]!='b' and load_onbrd2+u.dem2>vehicles[sorted_idx[curv]].cap2+1e-7) or \
						(max_load_pen>0) or\
						(max_load_pen2>0):
							cap_feas=False

						if compare_time(c1(i[0],u,i[1],vehicles[sorted_idx[curv]],i[2],ilv_new,u_lv,bj,argvs), best_c1[u])<0 and tw_feas==True and cap_feas==True and not vehicles[sorted_idx[curv]].vehno in u.reje_ve:
							best_c1[u]=c1(i[0],u,i[1],vehicles[sorted_idx[curv]],i[2],ilv_new,u_lv,bj,argvs)
							best_pos[u]=index+1
							ins_feas=True
				###########################################################################################################




				if ins_feas==True:
					#finding customers to insert
					max_c2,uast=-1e+9,None
					ld=0.1
					c2={}
					for u in tcust[1:]:
						c2[u]=ld*dtable1[tcust[0].spotno][u.spotno]-best_c1[u]
						if compare_time(c2[u], max_c2)>0:
							max_c2,uast=c2[u],u

					if argvs.break_flag:
						_management_ttable = t_dcopy(argvs.management_ttable)
						_management_dtable = t_dcopy(argvs.management_dtable)
						_management_xtable = t_dcopy(argvs.management_xtable)
						_management_etable = t_dcopy(argvs.management_etable)
						_t_route = r_backup(vehicles)
						tv = dcopy(vehicles[sorted_idx[curv]])
						tv.insert_customer_at(best_pos[uast],uast,argvs)
						tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
						if tv != None:
							vehicles[sorted_idx[curv]] = dcopy(tv)
							_management_ttable = t_dcopy(argvs.management_ttable)
							_management_dtable = t_dcopy(argvs.management_dtable)
							_management_xtable = t_dcopy(argvs.management_xtable)
							_management_etable = t_dcopy(argvs.management_etable)
							_t_route = r_backup(vehicles)
							ins_skiplist.clear()
						else:
							argvs.management_ttable = t_dcopy(_management_ttable)
							argvs.management_dtable = t_dcopy(_management_dtable)
							argvs.management_xtable = t_dcopy(_management_xtable)
							argvs.management_etable = t_dcopy(_management_etable)
							vehicles = r_restore(vehicles, _t_route, argvs)
							if len([l for l in ins_skiplist if l['uast']==uast and l['index']==best_pos[uast]]) == 0:
								ins_skiplist.append({'uast':uast, 'index':best_pos[uast]})
							else:
								sErrMes = "failed to create initial solution due to break-time (vehno = " + str(vehicles[sorted_idx[curv]].vehno) + ")"
								raise ValueError(sErrMes)
							continue

					else:
						vehicles[sorted_idx[curv]].insert_customer_at(best_pos[uast],uast,argvs)

					cust_in_routes+=[uast]
					for u in uast.additionalcust:
						if u in tcust:
							tcust.remove(u)

					#tlastc_flag=False
					tlastc_flag=lastc_flag
					tivnum=100
					#tnbflag_inswap=NbFlag(False,True,False,False,False)
					#tnbflag_inswap=NbFlag(True,True,True,True,False)
					#平準化高速化
					# if avetime_ape_flag==True or avetime_ae_flag==True or avevisits_ape_flag==True or avevisits_ae_flag==True or avedist_ape_flag==True or avedist_ae_flag==True:
					# 	tnbflag_inswap=NbFlag(True,True,True,True,False)
					# else:
					# 	tnbflag_inswap=NbFlag(False,True,False,False,False)
					tnbflag_inswap=NbFlag(False,True,False,False,False)

					if argvs.delaystart2_flag==True and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
						argvs.delaystart2_flag=False
						if set([customers[0]]+[ac for v in vehicles[0:curv+1] for c in v.route[:-1] for ac in c.additionalcust if ac.custno!="0" and ac.custno[0]!="b"])<=set(customers+direct_customers):
							localsearch_dtable_org(customers+direct_customers,vehicles[0:(curv+1)],tnbflag_inswap,tivnum,tlastc_flag,decr_vnum,argvs,logout)
						else:
							localsearch_dtable_org([customers[0]]+[ac for v in vehicles[0:curv+1] for c in v.route[:-1] for ac in c.additionalcust if ac.custno!="0" and ac.custno[0]!="b"],vehicles[0:(curv+1)],tnbflag_inswap,tivnum,tlastc_flag,decr_vnum,argvs)
						argvs.delaystart2_flag=True
					else:
						if set([customers[0]]+[ac for v in vehicles[0:curv+1] for c in v.route[:-1] for ac in c.additionalcust if ac.custno!="0" and ac.custno[0]!="b"])<=set(customers+direct_customers):
							localsearch_dtable_org(customers+direct_customers,vehicles[0:(curv+1)],tnbflag_inswap,tivnum,tlastc_flag,decr_vnum,argvs,logout)
						else:
							localsearch_dtable_org([customers[0]]+[ac for v in vehicles[0:curv+1] for c in v.route[:-1] for ac in c.additionalcust if ac.custno!="0" and ac.custno[0]!="b"],vehicles[0:(curv+1)],tnbflag_inswap,tivnum,tlastc_flag,decr_vnum,argvs)

					for v in vehicles[0:(curv+1)]:
						pick_opt_status, pick_opt_idx = get_pick_opt_status(v, argvs)
						if len(v.route)>2 and pick_opt_status:
							remove_customers_specified([v.route[pick_opt_idx]],v,argvs) #初期解では最後にのみ集荷最適化


				else:
					if argvs.break_flag:
						management_ttable = t_dcopy(argvs.management_ttable)
						management_dtable = t_dcopy(argvs.management_dtable)
						management_xtable = t_dcopy(argvs.management_xtable)
						management_etable = t_dcopy(argvs.management_etable)
						t_route = r_backup(vehicles)
					while True:
						curv=curv+1
						if curv>=vnum:
							break
						if argvs.break_flag:
							argvs.management_ttable = t_dcopy(management_ttable)
							argvs.management_dtable = t_dcopy(management_dtable)
							argvs.management_xtable = t_dcopy(management_xtable)
							argvs.management_etable = t_dcopy(management_etable)
							vehicles = r_restore(vehicles, t_route, argvs)

						if vehicles[sorted_idx[curv]].direct_flag==False:
							if insert_depo_flag==True:
								if vehicles[sorted_idx[curv]].route[-2].custno=="0": #デポが連続する場合
									continue

								if vehicles[sorted_idx[curv]].maxrotate>0 and len([c for c in vehicles[sorted_idx[curv]].route[:-1] if c.custno=="0" and c.custno[0]!="b"])+1>vehicles[sorted_idx[curv]].maxrotate: #回転数上限を超える場合
									continue
								
								#通行不可の場合	
								ttable13 = get_ttable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[-2], argvs.management_ttable)
								if ttable13[vehicles[sorted_idx[curv]].route[-2].spotno][customers[0].spotno]==-1:
									continue

								dtable11 = get_dtable(vehicles[sorted_idx[curv]].vtype,vehicles[sorted_idx[curv]].lv[-2], argvs.management_dtable)
								if dtable11[vehicles[sorted_idx[curv]].route[-2].spotno][customers[0].spotno]==-1:
									continue

								if argvs.management_etable:
									etable10 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, vehicles[sorted_idx[curv]].lv[-2], argvs.management_etable)
									if etable10[vehicles[sorted_idx[curv]].route[-2].spotno][customers[0].spotno]==-1:
										continue

								if argvs.management_xtable:
									xtable10 = get_xtable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[-2], argvs.management_xtable)
									if xtable10[vehicles[sorted_idx[curv]].route[-2].spotno][customers[0].spotno]==-1:
										continue

								depo_idx=[j for j,c in enumerate(vehicles[sorted_idx[curv]].route[:-1]) if c.custno=="0"]+[len(vehicles[sorted_idx[curv]].route)-1]
								servt_dict={}
								for k in range(len(depo_idx)-1):
									servt_dict[vehicles[sorted_idx[curv]].route[depo_idx[k]]]=0
									servt=0
									for j in range(depo_idx[k]+1,depo_idx[k+1]):
										if not(j!=0 and vehicles[sorted_idx[curv]].route[j].custno==vehicles[sorted_idx[curv]].route[j-1].custno and vehicles[sorted_idx[curv]].route[j].custno!="0"):
											if vehicles[sorted_idx[curv]].route[j].requestType=="DELIVERY" and vehicles[sorted_idx[curv]].route[j].custno[0]!='b':
												servt+=vehicles[sorted_idx[curv]].route[j].depotservt
											if depo_idx[k]<index+1 and index+1<=depo_idx[k+1] and u.requestType=="DELIVERY" and u.custno[0]!='b' :
												servt+=u.depotservt
									if vehicles[sorted_idx[curv]].route[depo_idx[k]+1].custno!="0":
										servt_dict[vehicles[sorted_idx[curv]].route[depo_idx[k]]]+=servt+vehicles[sorted_idx[curv]].depotservt
									else:
										servt_dict[vehicles[sorted_idx[curv]].route[depo_idx[k]]]+=servt
					
								#集荷時間
								servt_dict[vehicles[sorted_idx[curv]].route[len(vehicles[sorted_idx[curv]].route)-1]]=0
								for k in range(1,len(depo_idx)):
									servt=0
									for j in range(depo_idx[k-1]+1,depo_idx[k]):
										if not(j!=0 and vehicles[sorted_idx[curv]].route[j].custno==vehicles[sorted_idx[curv]].route[j-1].custno and vehicles[sorted_idx[curv]].route[j].custno!="0"):
											if vehicles[sorted_idx[curv]].route[j].requestType=="PICKUP":
												servt+=vehicles[sorted_idx[curv]].route[j].depotservt
											if depo_idx[k-1]<index+1 and index+1<=depo_idx[k] and u.requestType=="PICKUP": 
												servt+=u.depotservt
									servt_dict[vehicles[sorted_idx[curv]].route[depo_idx[k]]]+=servt

								arr_t=vehicles[sorted_idx[curv]].lv[-2]+ttable13[vehicles[sorted_idx[curv]].route[-2].spotno][customers[0].spotno]*vehicles[sorted_idx[curv]].drskill

								lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+servt_dict[vehicles[sorted_idx[curv]].route[-1]]*vehicles[sorted_idx[curv]].opskill
								lv_t+=customers[0].parkt_open

								#通行不可の場合	
								ttable22 = get_ttable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_ttable)
								if ttable22[customers[0].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]==-1:
									continue

								dtable20 = get_dtable(vehicles[sorted_idx[curv]].vtype,lv_t, argvs.management_dtable)
								if dtable20[customers[0].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]==-1:
									continue

								if argvs.management_etable:
									etable19 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, lv_t, argvs.management_etable)
									if etable19[customers[0].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]==-1:
										continue

								if argvs.management_xtable:
									xtable19 = get_xtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_xtable)
									if xtable19[customers[0].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]==-1:
										continue

								#troute = [c.spotid for c in vehicles[sorted_idx[curv]].route]
								#troute.insert(-1, customers[0].spotid)
								#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for k,c in enumerate(troute[1:-1]) if c=="0" and (troute[k]!="0" or k==0)])
								_tveh = dcopy(vehicles[sorted_idx[curv]])
								_tveh.route.insert(-1, customers[0])
								visit_num = calc_visitnum(_tveh.route)
								if vehicles[sorted_idx[curv]].maxvisit>0 and visit_num>vehicles[sorted_idx[curv]].maxvisit: #訪問数上限を超える場合
									continue

								if argvs.bulkShipping_flag==True:
									depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
									depo.customers.append(copy.deepcopy(customers[0].customers[0]))
									depo.servt=customers[0].servt
									depo.dem=customers[0].dem
									depo.dem2=customers[0].dem2
									depo.reje_ve=customers[0].reje_ve
									depo.parkt_open=customers[0].parkt_open
									depo.parkt_arrive=customers[0].parkt_arrive
									depo.depotservt=customers[0].depotservt
									depo.additionalcust=[depo]
									depo.demdivideunit=customers[0].demdivideunit
									depo.requestType=customers[0].requestType
									depo.deny_unass=customers[0].deny_unass #未割り当て荷物
									vehicles[sorted_idx[curv]].insert_customer_at(-1,depo,argvs) #デポを挿入
								else:
									vehicles[sorted_idx[curv]].insert_customer_at(-1,copy.deepcopy(customers[0]),argvs) #デポを挿入

								if argvs.break_flag:
									_management_ttable = t_dcopy(argvs.management_ttable)
									_management_dtable = t_dcopy(argvs.management_dtable)
									_management_xtable = t_dcopy(argvs.management_xtable)
									_management_etable = t_dcopy(argvs.management_etable)
									_t_route = r_backup(vehicles)
									tv = dcopy(vehicles[sorted_idx[curv]])
									tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
									if tv != None:
										vehicles[sorted_idx[curv]] = tv
										_management_ttable = t_dcopy(argvs.management_ttable)
										_management_dtable = t_dcopy(argvs.management_dtable)
										_management_xtable = t_dcopy(argvs.management_xtable)
										_management_etable = t_dcopy(argvs.management_etable)
										_t_route = r_backup(vehicles)
									else:
										argvs.management_ttable = t_dcopy(_management_ttable)
										argvs.management_dtable = t_dcopy(_management_dtable)
										argvs.management_xtable = t_dcopy(_management_xtable)
										argvs.management_etable = t_dcopy(_management_etable)
										vehicles = r_restore(vehicles, _t_route, argvs)
										continue

							break

					if curv>=vnum:
						if argvs.multitrip_flag==False: #回転機能なし
							if logout:
								sLogBuf_error = "no more empty vehicles.. in initial routes construction"
								if rank==0:
									logging.log(logging.ERROR,sLogBuf_error)
								sLogBuf_error = "try with larger number of vehicles (-v #(number of vehicles)))"
								if rank==0:
									logging.log(logging.ERROR,sLogBuf_error)
							#raise ValueError() # sys.exit() # daic



							###########################################################################################################
							#ビークル(vehicles[curv-1])に対し、未割当のカスタマー情報を追加(ソート無し、挿入できない場合は別の車両に挿入)
							while True:
								cust_len=len(tcust)
								for i in range(curv-1,-1,-1):
									for cust in tcust[1:]:
										if not cust in tcust:
											continue											
										if argvs.break_flag:
											management_ttable = t_dcopy(argvs.management_ttable)
											management_dtable = t_dcopy(argvs.management_dtable)
											management_xtable = t_dcopy(argvs.management_xtable)
											management_etable = t_dcopy(argvs.management_etable)
											t_route = r_backup(vehicles)
										route_size=len(vehicles[sorted_idx[i]].route)
										for pos in range(route_size-1,0,-1):
											if argvs.break_flag:
												argvs.management_ttable = t_dcopy(management_ttable)
												argvs.management_dtable = t_dcopy(management_dtable)
												argvs.management_xtable = t_dcopy(management_xtable)
												argvs.management_etable = t_dcopy(management_etable)
												vehicles = r_restore(vehicles, t_route, argvs)
											if argvs.break_flag:
												_management_ttable = t_dcopy(argvs.management_ttable)
												_management_dtable = t_dcopy(argvs.management_dtable)
												_management_xtable = t_dcopy(argvs.management_xtable)
												_management_etable = t_dcopy(argvs.management_etable)
												_t_route = r_backup(vehicles)
												tv=copy.deepcopy(vehicles[sorted_idx[i]])
												tv.insert_customer_at(pos,cust,argvs)
												ttv=dcopy(tv)
												tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
												if tv != None:
													#ここは仮のtvなので、restoreする
													argvs.management_ttable = t_dcopy(_management_ttable)
													argvs.management_dtable = t_dcopy(_management_dtable)
													argvs.management_xtable = t_dcopy(_management_xtable)
													argvs.management_etable = t_dcopy(_management_etable)
													vehicles = r_restore(vehicles, _t_route, argvs)
												else:
													argvs.management_ttable = t_dcopy(_management_ttable)
													argvs.management_dtable = t_dcopy(_management_dtable)
													argvs.management_xtable = t_dcopy(_management_xtable)
													argvs.management_etable = t_dcopy(_management_etable)
													vehicles = r_restore(vehicles, _t_route, argvs)
													tv=ttv
											else:
												tv=copy.deepcopy(vehicles[sorted_idx[i]])
												tv.insert_customer_at(pos,cust,argvs)

											depo_idx=[j for j,c in enumerate(vehicles[sorted_idx[i]].route[:-1]) if c.custno=="0"]+[len(vehicles[sorted_idx[i]].route)-1]
											servt_dict={}
											for k in range(len(depo_idx)-1):
												servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]=0
												servt=0
												for j in range(depo_idx[k]+1,depo_idx[k+1]):
													if not(j!=0 and vehicles[sorted_idx[i]].route[j-1].custno==vehicles[sorted_idx[i]].route[j].custno and vehicles[sorted_idx[i]].route[j].custno!="0"):
														if vehicles[sorted_idx[i]].route[j].requestType=="DELIVERY" and vehicles[sorted_idx[i]].route[j].custno[0]!='b':
															servt+=vehicles[sorted_idx[i]].route[j].depotservt
														if depo_idx[k]<pos and pos<=depo_idx[k+1] and cust.requestType=="DELIVERY" and cust.custno[0]!='b':
															servt+=cust.depotservt
												if vehicles[sorted_idx[i]].route[depo_idx[k]+1].custno!="0":
													servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt+vehicles[sorted_idx[i]].depotservt
												else:
													servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt
											#集荷時間
											servt_dict[vehicles[sorted_idx[i]].route[len(vehicles[sorted_idx[i]].route)-1]]=0
											for k in range(1,len(depo_idx)):
												servt=0
												for j in range(depo_idx[k-1]+1,depo_idx[k]):
													if not(j!=0 and vehicles[sorted_idx[i]].route[j-1].custno==vehicles[sorted_idx[i]].route[j].custno and vehicles[sorted_idx[i]].route[j].custno!="0"):
														if vehicles[sorted_idx[i]].route[j].requestType=="PICKUP":
															servt+=vehicles[sorted_idx[i]].route[j].depotservt
														if depo_idx[k-1]<pos and pos<=depo_idx[k] and cust.requestType=="PICKUP": 
															servt+=u.depotservt
												servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt

											tdepo_idx=[j for j,c in enumerate(tv.route[:-1]) if c.custno=="0"]+[len(tv.route)-1]

											load=[0 for c in tv.route]
											load2=[0 for c in tv.route]
											for l in range(len(tv.route)-1):
												if l in tdepo_idx:
													for j in range(l+1,tdepo_idx[tdepo_idx.index(l)+1]):
														if tv.route[j].requestType=="DELIVERY":
															if tv.route[j].custno[0] != "b":
																load[l]+=tv.route[j].dem
																load2[l]+=tv.route[j].dem2
												else:
													if tv.route[l].custno[0] != "b":
														if not(j!=0 and tv.route[j-1].custno==tv.route[j].custno and tv.route[j].custno!="0"):
															if tv.route[l].requestType=="DELIVERY":
																load[l]=load[l-1]-tv.route[l].dem
																load2[l]=load2[l-1]-tv.route[l].dem2
															else:
																load[l]=load[l-1]+tv.route[l].dem
																load2[l]=load2[l-1]+tv.route[l].dem2

											for j in reversed(range(len(load))):
												if j in tdepo_idx and j+1 in tdepo_idx:
													load[j]=load[j+1]
													load2[j]=load2[j+1]

											load=[j if j>1e-9 else 0 for j in load] #誤差対策
											load2=[j if j>1e-9 else 0 for j in load2] #誤差対策

											no_park_idx=[]
											for c in tv.route[tdepo_idx[0]+1:tdepo_idx[1]]:
												if c.requestType=="DELIVERY":
													break
											else:
												if load[0]==0 and load2[0]==0:
													no_park_idx.append(0)
											
											for j in range(1,len(tdepo_idx)-1):
												if load[tdepo_idx[j]-1]==0 and load2[tdepo_idx[j]-1]==0:
													for c in tv.route[tdepo_idx[j]+1:tdepo_idx[j+1]]:
														if c.requestType=="DELIVERY":
															break
													else:
														if load[tdepo_idx[j]]==0 and load2[tdepo_idx[j]]==0:
															if tdepo_idx[j]>=pos:
																no_park_idx.append(tdepo_idx[j]-1)
															else:
																no_park_idx.append(tdepo_idx[j])
											if load[tdepo_idx[-1]-1]==0 and load2[tdepo_idx[-1]-1]==0:
												no_park_idx.append(tdepo_idx[-1]-1)
												

											if not 0 in no_park_idx:
												lv_t=max(vehicles[sorted_idx[i]].starthour+vehicles[sorted_idx[i]].route[0].parkt_arrive,vehicles[sorted_idx[i]].route[0].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[0]]*vehicles[sorted_idx[i]].opskill
											else:
												lv_t=max(vehicles[sorted_idx[i]].starthour,vehicles[sorted_idx[i]].route[0].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[0]]*vehicles[sorted_idx[i]].opskill
											if not 0 in no_park_idx:
												lv_t+=vehicles[sorted_idx[i]].route[0].parkt_open

											impassable=True
											if argvs.break_flag:
												vehicles = r_restore(vehicles, _t_route, argvs)
											for j in range(pos-1):
												from_c,to_c=vehicles[sorted_idx[i]].route[j],vehicles[sorted_idx[i]].route[j+1]
												ttable20 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
												dtable18 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
												if argvs.management_etable:
													etable17 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
												if argvs.management_xtable:
													xtable17 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)

												if ttable20[from_c.spotno][to_c.spotno]==-1 or\
												dtable18[from_c.spotno][to_c.spotno]==-1 or \
												(argvs.management_etable and etable17[from_c.spotno][to_c.spotno]==-1) or \
												(argvs.management_xtable and xtable17[from_c.spotno][to_c.spotno]==-1):
													impassable=False
													break

												if j!=0 and vehicles[sorted_idx[i]].route[j].custno == vehicles[sorted_idx[i]].route[j+1].custno and vehicles[sorted_idx[i]].route[j].custno!="0": #荷物分割からの呼び出し対応
													arr_t=vehicles[sorted_idx[i]].arr[j]
													st_t=vehicles[sorted_idx[i]].st[j]
													lv_t=vehicles[sorted_idx[i]].lv[j]
												else:
													arr_t=lv_t+ttable20[from_c.spotno][to_c.spotno]*vehicles[sorted_idx[i]].drskill

													if to_c.spotid!=from_c.spotid and not j+1 in no_park_idx:
														lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)
													else:
														lv_t=max(arr_t,to_c.ready_fs)
													if to_c in servt_dict:
														lv_t+=servt_dict[to_c]*vehicles[sorted_idx[i]].opskill
													else:
														lv_t+=to_c.servt*vehicles[sorted_idx[i]].opskill
													if to_c.spotid!=from_c.spotid and not j+1 in no_park_idx:
														lv_t+=to_c.parkt_open
											if impassable==False:
												continue

											if not vehicles[sorted_idx[i]].vehno in cust.reje_ve and vehicles[sorted_idx[i]].direct_flag==False:
												#通行可能なら
												ttable6 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
												if ttable6[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
													continue											

												dtable4 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
												if dtable4[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
													continue

												if argvs.management_etable:
													etable3 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
													if etable3[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
														continue

												if argvs.management_xtable:
													xtable3 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)
													if xtable3[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
														continue

												if vehicles[sorted_idx[i]].route[pos-1].custno==cust.custno and vehicles[sorted_idx[i]].route[pos-1].custno!="0": #荷物分割からの呼び出し対応
													pass #同じcustnoが続いたら前の時刻にしておけばよい
												else:
													arr_t=vehicles[sorted_idx[i]].lv[pos-1]+ttable6[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]*vehicles[sorted_idx[i]].drskill
													if cust.spotid!=vehicles[sorted_idx[i]].route[pos-1].spotid:
														lv_t=max(arr_t+cust.parkt_arrive,cust.ready_fs)+cust.servt*vehicles[sorted_idx[i]].opskill
													else:
														lv_t=max(arr_t,cust.ready_fs)+cust.servt*vehicles[sorted_idx[i]].opskill
													if cust.spotid!=vehicles[sorted_idx[i]].route[pos-1].spotid:
														lv_t+=cust.parkt_open

												ttable7 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
												dtable5 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
												if argvs.management_etable:
													etable4 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
												if argvs.management_xtable:
													xtable4 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)

												if ttable7[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1 or \
												dtable5[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1 or \
												(argvs.management_etable and etable4[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1) or \
												(argvs.management_xtable and xtable4[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1):
													continue

												if cust.custno==vehicles[sorted_idx[i]].route[pos].custno and cust.custno!="0": #荷物分割からの呼び出し対応
													pass #同じcustnoが続いたら前の時刻にしておけばよい
												else:
													arr_t=lv_t+ttable7[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]*vehicles[sorted_idx[i]].drskill
													if vehicles[sorted_idx[i]].route[pos] in servt_dict:
														if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
															lv_t=max(arr_t+vehicles[sorted_idx[i]].route[pos].parkt_arrive,vehicles[sorted_idx[i]].route[pos].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[pos]]*vehicles[sorted_idx[i]].opskill
														else:
															lv_t=max(arr_t,vehicles[sorted_idx[i]].route[pos].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[pos]]*vehicles[sorted_idx[i]].opskill
													else:
														if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
															lv_t=max(arr_t+vehicles[sorted_idx[i]].route[pos].parkt_arrive,vehicles[sorted_idx[i]].route[pos].ready_fs)+vehicles[sorted_idx[i]].route[pos].servt*vehicles[sorted_idx[i]].opskill
														else:
															lv_t=max(arr_t,vehicles[sorted_idx[i]].route[pos].ready_fs)+vehicles[sorted_idx[i]].route[pos].servt*vehicles[sorted_idx[i]].opskill
													if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
														lv_t+=vehicles[sorted_idx[i]].route[pos].parkt_open

												if check_impassability(customers,vehicles[sorted_idx[i]],lv_t,pos+1,servt_dict,len(vehicles[sorted_idx[i]].route)-1,no_park_idx,False,argvs)[0]==False:
													continue

												# maxvisit check
												maxvisit = False
												if vehicles[sorted_idx[i]].maxvisit != 0:
													#troute = [c.spotid for c in vehicles[sorted_idx[i]].route]
													#troute.insert(pos, cust.spotid)
													#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for j,c in enumerate(troute[1:-1]) if c=="0" and (troute[j]!="0" or j==0)])
													_tveh = dcopy(vehicles[sorted_idx[i]])
													_tveh.route.insert(pos, cust)
													visit_num = calc_visitnum(_tveh.route)
													if visit_num > vehicles[sorted_idx[i]].maxvisit:
														maxvisit = True
												if maxvisit:
													continue

												if argvs.init_changecust=="additive" and vehicles[sorted_idx[i]].route[pos-1].custno=="0" and vehicles[sorted_idx[i]].route[pos].custno=="0":
													if len([c for c in vehicles[sorted_idx[i]].route[pos+1:-1] if c.changecust=="additive" and c.custno!="0" and  c.custno[0]!="b"])!=0:
														continue

												if argvs.break_flag:
													vehicles[sorted_idx[i]].insert_customer_at(pos,cust,argvs)
													_management_ttable = t_dcopy(argvs.management_ttable)
													_management_dtable = t_dcopy(argvs.management_dtable)
													_management_xtable = t_dcopy(argvs.management_xtable)
													_management_etable = t_dcopy(argvs.management_etable)
													_t_route = r_backup(vehicles)
													tveh = dcopy(vehicles[sorted_idx[i]])
													tveh = insert_breakspot(tveh.takebreak, None, customers, tveh, vehicles, argvs)
													if tveh != None:
														#ここは実vehicleなのでルートのみ保存、テーブルはリストアしない
														vehicles[sorted_idx[i]] = dcopy(tveh)
													else:
														argvs.management_ttable = t_dcopy(_management_ttable)
														argvs.management_dtable = t_dcopy(_management_dtable)
														argvs.management_xtable = t_dcopy(_management_xtable)
														argvs.management_etable = t_dcopy(_management_etable)
														vehicles = r_restore(vehicles, _t_route, argvs)
												else:
													vehicles[sorted_idx[i]].insert_customer_at(pos,cust,argvs)

												for ac in cust.additionalcust:
													tcust.remove(ac)
												break

								if len(tcust)==1:
									break

								#挿入不可配送先と直送便がある場合、直送便をやめる
								if len(tcust)==cust_len and [v for v in vehicles if v.direct_flag==True]!=[]:
									insert_direct_flag=False

									for v in vehicles:
										v.direct_flag=False
										v.route.clear()
										v.update_arrtime_tw(argvs)
									
									customers+=direct_customers
									direct_customers.clear()

									direct_vehicles_flag=False

									break

								#挿入不可配送先がある場合はtie-upされた配送先を分割する
								if len(tcust)==cust_len:
									insert_flag=False
									break	

							if argvs.break_flag:
								if len(tcust)!=1:
									argvs.management_ttable = t_dcopy(management_ttable)
									argvs.management_dtable = t_dcopy(management_dtable)
									argvs.management_xtable = t_dcopy(management_xtable)
									argvs.management_etable = t_dcopy(management_etable)
									vehicles = r_restore(vehicles, t_route, argvs)

							###########################################################################################################		
						elif insert_depo_flag==True and clen==len(tcust):
							#妥協ルート作成(時間枠無視)
							while True:
								cust_len2=len(tcust)
								for v in vehicles:
									if v.route[-2].custno=="0": #デポが連続する場合
										continue

									if v.maxrotate>0 and len([c for c in v.route[:-1] if c.custno=="0"])+1>v.maxrotate: #回転数上限を超える場合
										continue
									
									#通行不可の場合	
									ttable14 = get_ttable(v.vtype, v.lv[-2], argvs.management_ttable)
									if ttable14[v.route[-2].spotno][customers[0].spotno]==-1:
										continue

									dtable12 = get_dtable(v.vtype,v.lv[-2], argvs.management_dtable)
									if dtable12[v.route[-2].spotno][customers[0].spotno]==-1:
										continue

									if argvs.management_etable:
										etable11 = get_etable(v.vtype, v.etype, v.lv[-2], argvs.management_etable)
										if etable11[v.route[-2].spotno][customers[0].spotno]==-1:
											continue

									if argvs.management_xtable:
										xtable11 = get_xtable(v.vtype, v.lv[-2], argvs.management_xtable)
										if xtable11[v.route[-2].spotno][customers[0].spotno]==-1:
											continue

									depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
									servt_dict={}
									for k in range(len(depo_idx)-1):
										servt_dict[v.route[depo_idx[k]]]=0
										servt=0
										for j in range(depo_idx[k]+1,depo_idx[k+1]):
											if not(j!=0 and v.route[j-1].custno==v.route[j-1].custno and v.route[j].custno!="0"): #荷物分割からの呼び出し対応
												if v.route[j].requestType=="DELIVERY" and v.route[j].custno[0]!='b':
													servt+=v.route[j].depotservt
												if depo_idx[k]<index+1 and index+1<=depo_idx[k+1] and u.requestType=="DELIVERY" and u.custno[0]!='b':
													servt+=u.depotservt
										if v.route[depo_idx[k]+1].custno!="0":
											servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
										else:
											servt_dict[v.route[depo_idx[k]]]+=servt
						
									#集荷時間
									servt_dict[v.route[len(v.route)-1]]=0
									for k in range(1,len(depo_idx)):
										servt=0
										for j in range(depo_idx[k-1]+1,depo_idx[k]):
											if not(j!=0 and v.route[j-1].custno==v.route[j-1].custno and v.route[j].custno!="0"): #荷物分割からの呼び出し対応
												if v.route[j].requestType=="PICKUP":
													servt+=v.route[j].depotservt
												if depo_idx[k-1]<index+1 and index+1<=depo_idx[k] and u.requestType=="PICKUP": 
													servt+=u.depotservt
										servt_dict[v.route[depo_idx[k]]]+=servt

									arr_t=v.lv[-2]+ttable14[v.route[-2].spotno][customers[0].spotno]*v.drskill

									lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+servt_dict[v.route[-1]]*v.opskill
									lv_t+=customers[0].parkt_open

									#通行不可の場合	
									ttable23 = get_ttable(v.vtype, lv_t, argvs.management_ttable)
									if ttable23[customers[0].spotno][v.route[-1].spotno]==-1:
										continue

									dtable21 = get_dtable(v.vtype,lv_t, argvs.management_dtable)
									if dtable21[customers[0].spotno][v.route[-1].spotno]==-1:
										continue

									if argvs.management_etable:
										etable20 = get_etable(v.vtype, v.etype, lv_t, argvs.management_etable)
										if etable20[customers[0].spotno][v.route[-1].spotno]==-1:
											continue

									if argvs.management_xtable:
										xtable20 = get_xtable(v.vtype, lv_t, argvs.management_xtable)
										if xtable20[customers[0].spotno][v.route[-1].spotno]==-1:
											continue

									#troute = [c.spotid for c in v.route]
									#troute.insert(-1, customers[0].spotid)
									#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for k,c in enumerate(troute[1:-1]) if c=="0" and (troute[k]!="0" or k==0)])
									_tveh = dcopy(v)
									_tveh.route.insert(-1,customers[0])
									visit_num = calc_visitnum(_tveh.route)

									if v.maxvisit>0 and visit_num>v.maxvisit: #訪問数上限を超える場合
										continue

									if argvs.break_flag:
										_management_ttable = t_dcopy(argvs.management_ttable)
										_management_dtable = t_dcopy(argvs.management_dtable)
										_management_xtable = t_dcopy(argvs.management_xtable)
										_management_etable = t_dcopy(argvs.management_etable)
										_t_route = r_backup(vehicles)
										tv = dcopy(v)
										if argvs.bulkShipping_flag==True:
											depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
											depo.customers.append(copy.deepcopy(customers[0].customers[0]))
											depo.servt=customers[0].servt
											depo.dem=customers[0].dem
											depo.dem2=customers[0].dem2
											depo.reje_ve=customers[0].reje_ve
											depo.parkt_open=customers[0].parkt_open
											depo.parkt_arrive=customers[0].parkt_arrive
											depo.depotservt=customers[0].depotservt
											depo.additionalcust=[depo]
											depo.demdivideunit=customers[0].demdivideunit
											depo.requestType=customers[0].requestType
											depo.deny_unass=customers[0].deny_unass #未割り当て荷物
											tv.insert_customer_at(-1,depo,argvs) #デポを挿入
										else:
											tv.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs) #デポを挿入
										tv = insert_breakspot(v.takebreak, None, customers, tv, vehicles, argvs)
										if tv != None:
											#ここは実vehicleなのでルートのみ保存、テーブルはリストアしない
											v = dcopy(tv)
										else:
											argvs.management_ttable = t_dcopy(_management_ttable)
											argvs.management_dtable = t_dcopy(_management_dtable)
											argvs.management_xtable = t_dcopy(_management_xtable)
											argvs.management_etable = t_dcopy(_management_etable)
											vehicles = r_restore(vehicles, _t_route, argvs)
											continue
									else:
										if argvs.bulkShipping_flag==True:
											depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
											depo.customers.append(copy.deepcopy(customers[0].customers[0]))
											depo.servt=customers[0].servt
											depo.dem=customers[0].dem
											depo.dem2=customers[0].dem2
											depo.reje_ve=customers[0].reje_ve
											depo.parkt_open=customers[0].parkt_open
											depo.parkt_arrive=customers[0].parkt_arrive
											depo.depotservt=customers[0].depotservt
											depo.additionalcust=[depo]
											depo.demdivideunit=customers[0].demdivideunit
											depo.requestType=customers[0].requestType
											depo.deny_unass=customers[0].deny_unass #未割り当て荷物
											v.insert_customer_at(-1,depo,argvs) #デポを挿入
										else:
											v.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs) #デポを挿入

								while True:
									cust_len=len(tcust)
									for i in range(len(vehicles)):
										if argvs.break_flag:
											management_ttable = t_dcopy(argvs.management_ttable)
											management_dtable = t_dcopy(argvs.management_dtable)
											management_xtable = t_dcopy(argvs.management_xtable)
											management_etable = t_dcopy(argvs.management_etable)
											t_route = r_backup(vehicles)
										for cust in tcust[1:]:
											if not cust in tcust:
												continue											
											for pos in range(len(vehicles[sorted_idx[i]].route)-1,0,-1):
												if argvs.break_flag:
													argvs.management_ttable = t_dcopy(management_ttable)
													argvs.management_dtable = t_dcopy(management_dtable)
													argvs.management_xtable = t_dcopy(management_xtable)
													argvs.management_etable = t_dcopy(management_etable)
													vehicles = r_restore(vehicles, t_route, argvs)
													_management_ttable = t_dcopy(argvs.management_ttable)
													_management_dtable = t_dcopy(argvs.management_dtable)
													_management_xtable = t_dcopy(argvs.management_xtable)
													_management_etable = t_dcopy(argvs.management_etable)
													_t_route = r_backup(vehicles)
													tv=copy.deepcopy(vehicles[sorted_idx[i]])
													tv.insert_customer_at(pos,cust,argvs)
													tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
													if tv != None:
														#ここは仮のtvなので、restoreする
														argvs.management_ttable = t_dcopy(_management_ttable)
														argvs.management_dtable = t_dcopy(_management_dtable)
														argvs.management_xtable = t_dcopy(_management_xtable)
														argvs.management_etable = t_dcopy(_management_etable)
														vehicles = r_restore(vehicles, _t_route, argvs)
													else:
														argvs.management_ttable = t_dcopy(_management_ttable)
														argvs.management_dtable = t_dcopy(_management_dtable)
														argvs.management_xtable = t_dcopy(_management_xtable)
														argvs.management_etable = t_dcopy(_management_etable)
														vehicles = r_restore(vehicles, _t_route, argvs)
														continue
												else:
													tv=copy.deepcopy(vehicles[sorted_idx[i]])
													tv.insert_customer_at(pos,cust,argvs)

												depo_idx=[j for j,c in enumerate(vehicles[sorted_idx[i]].route[:-1]) if c.custno=="0"]+[len(vehicles[sorted_idx[i]].route)-1]
												servt_dict={}
												for k in range(len(depo_idx)-1):
													servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]=0
													servt=0
													for j in range(depo_idx[k]+1,depo_idx[k+1]):
														if not(i!=0 and vehicles[sorted_idx[i]].route[j-1].custno==vehicles[sorted_idx[i]].route[j].custno and vehicles[sorted_idx[i]].route[j].custno!="0"): #荷物分割からの呼び出し対応
															if vehicles[sorted_idx[i]].route[j].requestType=="DELIVERY" and vehicles[sorted_idx[i]].route[j].custno[0]!='b':
																servt+=vehicles[sorted_idx[i]].route[j].depotservt
															if depo_idx[k]<pos and pos<=depo_idx[k+1] and cust.requestType=="DELIVERY" and cust.custno[0]!='b':
																servt+=cust.depotservt
													if vehicles[sorted_idx[i]].route[depo_idx[k]+1].custno!="0":
														servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt+vehicles[sorted_idx[i]].depotservt
													else:
														servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt
												#集荷時間
												servt_dict[vehicles[sorted_idx[i]].route[len(vehicles[sorted_idx[i]].route)-1]]=0
												for k in range(1,len(depo_idx)):
													servt=0
													for j in range(depo_idx[k-1]+1,depo_idx[k]):
														if not(i!=0 and vehicles[sorted_idx[i]].route[j-1].custno==vehicles[sorted_idx[i]].route[j].custno and vehicles[sorted_idx[i]].route[j].custno!="0"): #荷物分割からの呼び出し対応
															if vehicles[sorted_idx[i]].route[j].requestType=="PICKUP":
																servt+=vehicles[sorted_idx[i]].route[j].depotservt
															if depo_idx[k-1]<pos and pos<=depo_idx[k] and cust.requestType=="PICKUP": 
																servt+=u.depotservt
													servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt

												tdepo_idx=[j for j,c in enumerate(tv.route[:-1]) if c.custno=="0"]+[len(tv.route)-1]

												load=[0 for c in tv.route]
												load2=[0 for c in tv.route]
												for l in range(len(tv.route)-1):
													if l in tdepo_idx:
														for j in range(l+1,tdepo_idx[tdepo_idx.index(l)+1]):
															if tv.route[j].requestType=="DELIVERY":
																if tv.route[j].custno[0] != "b":
																	load[l]+=tv.route[j].dem
																	load2[l]+=tv.route[j].dem2
													else:
														if tv.route[l].custno[0] != 'b':
															if not(l!=0 and tv.route[l-1].custno==tv.route[l].custno and tv.route[l].custno!="0"): #荷物分割からの呼び出し対応
																if tv.route[l].requestType=="DELIVERY":
																	load[l]=load[l-1]-tv.route[l].dem
																	load2[l]=load2[l-1]-tv.route[l].dem2
																else:
																	load[l]=load[l-1]+tv.route[l].dem
																	load2[l]=load2[l-1]+tv.route[l].dem2

												for j in reversed(range(len(load))):
													if j in tdepo_idx and j+1 in tdepo_idx:
														load[j]=load[j+1]
														load2[j]=load2[j+1]

												load=[j if j>1e-9 else 0 for j in load] #誤差対策
												load2=[j if j>1e-9 else 0 for j in load2] #誤差対策

												no_park_idx=[]
												for c in tv.route[tdepo_idx[0]+1:tdepo_idx[1]]:
													if c.requestType=="DELIVERY":
														break
												else:
													if load[0]==0 and load2[0]==0:
														no_park_idx.append(0)
												
												for j in range(1,len(tdepo_idx)-1):
													if load[tdepo_idx[j]-1]==0 and load2[tdepo_idx[j]-1]==0:
														for c in tv.route[tdepo_idx[j]+1:tdepo_idx[j+1]]:
															if c.requestType=="DELIVERY":
																break
														else:
															if load[tdepo_idx[j]]==0 and load2[tdepo_idx[j]]==0:
																if tdepo_idx[j]>=pos:
																	no_park_idx.append(tdepo_idx[j]-1)
																else:
																	no_park_idx.append(tdepo_idx[j])
												if load[tdepo_idx[-1]-1]==0 and load2[tdepo_idx[-1]-1]==0:
													no_park_idx.append(tdepo_idx[-1]-1)
													

												if not 0 in no_park_idx:
													lv_t=max(vehicles[sorted_idx[i]].starthour+vehicles[sorted_idx[i]].route[0].parkt_arrive,vehicles[sorted_idx[i]].route[0].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[0]]*vehicles[sorted_idx[i]].opskill
												else:
													lv_t=max(vehicles[sorted_idx[i]].starthour,vehicles[sorted_idx[i]].route[0].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[0]]*vehicles[sorted_idx[i]].opskill
												if not 0 in no_park_idx:
													lv_t+=vehicles[sorted_idx[i]].route[0].parkt_open
												impassable=True
												for j in range(pos-1):
													from_c,to_c=vehicles[sorted_idx[i]].route[j],vehicles[sorted_idx[i]].route[j+1]
													ttable20 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
													dtable18 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
													if argvs.management_etable:
														etable17 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
													if argvs.management_xtable:
														xtable17 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)

													if ttable20[from_c.spotno][to_c.spotno]==-1 or\
													dtable18[from_c.spotno][to_c.spotno]==-1 or \
													(argvs.management_etable and etable17[from_c.spotno][to_c.spotno]==-1) or \
													(argvs.management_xtable and xtable17[from_c.spotno][to_c.spotno]==-1):
														impassable=False
														break

													if j!=0 and vehicles[sorted_idx[i]].route[j-1].custno==vehicles[sorted_idx[i]].route[j].custno and vehicles[sorted_idx[i]].route[j].custno!="0":
														arr_t=vehicles[sorted_idx[i]].arr[j-1]
														st_t=vehicles[sorted_idx[i]].st[j-1]
														lv_t=vehicles[sorted_idx[i]].lv[j-1]
													else:
														arr_t=lv_t+ttable20[from_c.spotno][to_c.spotno]*vehicles[sorted_idx[i]].drskill

														if to_c.spotid!=from_c.spotid and not j+1 in no_park_idx:
															lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)
														else:
															lv_t=max(arr_t,to_c.ready_fs)
														if to_c in servt_dict:
															lv_t+=servt_dict[to_c]*vehicles[sorted_idx[i]].opskill
														else:
															lv_t+=to_c.servt*vehicles[sorted_idx[i]].opskill
														if to_c.spotid!=from_c.spotid and not j+1 in no_park_idx:
															lv_t+=to_c.parkt_open

												if impassable==False:
													continue

												if not vehicles[sorted_idx[i]].vehno in cust.reje_ve and vehicles[sorted_idx[i]].direct_flag==False:
													#通行可能なら
													ttable6 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
													if ttable6[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
														continue											

													dtable4 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
													if dtable4[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
														continue

													if argvs.management_etable:
														etable3 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
														if etable3[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
															continue

													if argvs.management_xtable:
														xtable3 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)
														if xtable3[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
															continue

													if vehicles[sorted_idx[i]].route[pos-1].custno==cust.custno and cust.custno!="0":
														pass  #同じcustnoが続いたら前の時刻にしておけばよい
													else:
														arr_t=vehicles[sorted_idx[i]].lv[pos-1]+ttable6[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]*vehicles[sorted_idx[i]].drskill
														if cust.spotid!=vehicles[sorted_idx[i]].route[pos-1].spotid:
															lv_t=max(arr_t+cust.parkt_arrive,cust.ready_fs)+cust.servt*vehicles[sorted_idx[i]].opskill
														else:
															lv_t=max(arr_t,cust.ready_fs)+cust.servt*vehicles[sorted_idx[i]].opskill
														if cust.spotid!=vehicles[sorted_idx[i]].route[pos-1].spotid:
															lv_t+=cust.parkt_open

													ttable7 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
													dtable5 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
													if argvs.management_etable:
														etable4 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
													if argvs.management_xtable:
														xtable4 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)

													if ttable7[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1 or \
													dtable5[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1 or \
													(argvs.management_etable and etable4[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1) or \
													(argvs.management_xtable and xtable4[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1):
														continue

													if cust.custno==vehicles[sorted_idx[i]].route[pos].custno and vehicles[sorted_idx[i]].route[pos].custno!="0": #荷物分割からの呼び出し
														pass #同じcustnoが続いたら前の時刻にしておけばよい
													else:
														arr_t=lv_t+ttable7[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]*vehicles[sorted_idx[i]].drskill
														if vehicles[sorted_idx[i]].route[pos] in servt_dict:
															if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
																lv_t=max(arr_t+vehicles[sorted_idx[i]].route[pos].parkt_arrive,vehicles[sorted_idx[i]].route[pos].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[pos]]*vehicles[sorted_idx[i]].opskill
															else:
																lv_t=max(arr_t,vehicles[sorted_idx[i]].route[pos].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[pos]]*vehicles[sorted_idx[i]].opskill
														else:
															if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
																lv_t=max(arr_t+vehicles[sorted_idx[i]].route[pos].parkt_arrive,vehicles[sorted_idx[i]].route[pos].ready_fs)+vehicles[sorted_idx[i]].route[pos].servt*vehicles[sorted_idx[i]].opskill
															else:
																lv_t=max(arr_t,vehicles[sorted_idx[i]].route[pos].ready_fs)+vehicles[sorted_idx[i]].route[pos].servt*vehicles[sorted_idx[i]].opskill
														if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
															lv_t+=vehicles[sorted_idx[i]].route[pos].parkt_open

													if check_impassability(customers,vehicles[sorted_idx[i]],lv_t,pos+1,servt_dict,len(vehicles[sorted_idx[i]].route)-1,no_park_idx,False,argvs)[0]==False:
														continue

													# maxvisit check
													maxvisit = False
													if vehicles[sorted_idx[i]].maxvisit != 0:
														#troute = [c.spotid for c in vehicles[sorted_idx[i]].route]
														#troute.insert(pos, cust.spotid)
														#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for k,c in enumerate(troute[1:-1]) if c=="0" and (troute[k]!="0" or k==0)])
														#visit_num = calc_visitnum(troute)
														_tveh = dcopy(vehicles[sorted_idx[i]])
														_tveh.route.insert(pos, cust)
														visit_num = calc_visitnum(_tveh.route)
														if visit_num > vehicles[sorted_idx[i]].maxvisit:
															maxvisit = True
													if maxvisit:
														continue

													if argvs.init_changecust=="additive" and vehicles[sorted_idx[i]].route[pos-1].custno=="0" and vehicles[sorted_idx[i]].route[pos].custno=="0":
														if len([c for c in vehicles[sorted_idx[i]].route[pos+1:-1] if c.changecust=="additive" and c.custno!="0" and  c.custno[0]!="b"])!=0:
															continue

													max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty([c for c in vehicles[sorted_idx[i]].route[:pos]]+[cust]+[c for c in vehicles[sorted_idx[i]].route[pos:]],vehicles[sorted_idx[i]])
													depo_idx=[j for j,c in enumerate(vehicles[sorted_idx[i]].route[:-1]) if c.custno=="0"]+[len(vehicles[sorted_idx[i]].route)-1]
													load_onbrd,load_onbrd2=0,0
													for j in range(len(depo_idx)-1):
														if depo_idx[j]<pos and pos<=depo_idx[j+1]:
															for k in range(depo_idx[j]+1,depo_idx[j+1]):
																if vehicles[sorted_idx[i]].route[k].requestType=="DELIVERY":
																	if vehicles[sorted_idx[i]].route[k].custno[0] != "b":
																		if not(vehicles[sorted_idx[i]].route[k-1].custno==vehicles[sorted_idx[i]].route[k].custno and vehicles[sorted_idx[i]].route[k].custno!="0"):
																			load_onbrd+=vehicles[sorted_idx[i]].route[k].dem
																			load_onbrd2+=vehicles[sorted_idx[i]].route[k].dem2

													if (u.requestType=="DELIVERY" and u.custno[0]!="b" and load_onbrd+u.dem>vehicles[sorted_idx[i]].cap+1e-7) or\
													(u.requestType=="DELIVERY" and u.custno[0]!="b" and load_onbrd2+u.dem2>vehicles[sorted_idx[i]].cap2+1e-7) or \
													(max_load_pen>0) or\
													(max_load_pen2>0):
														continue

													if argvs.break_flag:
														argvs.management_ttable = t_dcopy(_management_ttable)
														argvs.management_dtable = t_dcopy(_management_dtable)
														argvs.management_xtable = t_dcopy(_management_xtable)
														argvs.management_etable = t_dcopy(_management_etable)
														vehicles = r_restore(vehicles, t_route, argvs)
													vehicles[sorted_idx[i]].insert_customer_at(pos,cust,argvs)
													if argvs.break_flag:
														tveh = dcopy(vehicles[sorted_idx[i]])
														tveh = insert_breakspot(tveh.takebreak, None, customers, tveh, vehicles, argvs)
														if tveh != None:
															#ここは実vehicleなのでルートのみ保存、テーブルはリストアしない
															vehicles[sorted_idx[i]] = tveh
														else:
															argvs.management_ttable = t_dcopy(_management_ttable)
															argvs.management_dtable = t_dcopy(_management_dtable)
															argvs.management_xtable = t_dcopy(_management_xtable)
															argvs.management_etable = t_dcopy(_management_etable)
															vehicles = r_restore(vehicles, _t_route, argvs)
															continue
													for ac in cust.additionalcust:
														tcust.remove(ac)
													break
											else:
												continue
											break #配送先の偏りがあると回転が発生しない車両が出てしまうため

									if cust_len==len(tcust) or len(tcust)==1:
										break

								if cust_len2==len(tcust) or len(tcust)==1:
									break

							#妥協ルート作成(時間枠、積載量無視)
							while True:
								cust_len=len(tcust)
								if argvs.break_flag:
									management_ttable = t_dcopy(argvs.management_ttable)
									management_dtable = t_dcopy(argvs.management_dtable)
									management_xtable = t_dcopy(argvs.management_xtable)
									management_etable = t_dcopy(argvs.management_etable)
									t_route = r_backup(vehicles)
								for i in range(len(vehicles)):
									for cust in tcust[1:]:
										for pos in range(len(vehicles[sorted_idx[i]].route)-1,0,-1):
											if argvs.break_flag:
												argvs.management_ttable = t_dcopy(management_ttable)
												argvs.management_dtable = t_dcopy(management_dtable)
												argvs.management_xtable = t_dcopy(management_xtable)
												argvs.management_etable = t_dcopy(management_etable)
												vehicles = r_restore(vehicles, t_route, argvs)
												tv=copy.deepcopy(vehicles[sorted_idx[i]])
												tv.insert_customer_at(pos,cust,argvs)
												ttv=dcopy(tv)
												_management_ttable = t_dcopy(argvs.management_ttable)
												_management_dtable = t_dcopy(argvs.management_dtable)
												_management_xtable = t_dcopy(argvs.management_xtable)
												_management_etable = t_dcopy(argvs.management_etable)
												_t_route = r_backup(vehicles)
												tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
												if tv != None:
													#ここは仮のtvなので、restoreする
													argvs.management_ttable = t_dcopy(_management_ttable)
													argvs.management_dtable = t_dcopy(_management_dtable)
													argvs.management_xtable = t_dcopy(_management_xtable)
													argvs.management_etable = t_dcopy(_management_etable)
													vehicles = r_restore(vehicles, _t_route, argvs)
												else:
													argvs.management_ttable = t_dcopy(_management_ttable)
													argvs.management_dtable = t_dcopy(_management_dtable)
													argvs.management_xtable = t_dcopy(_management_xtable)
													argvs.management_etable = t_dcopy(_management_etable)
													vehicles = r_restore(vehicles, _t_route, argvs)
													tv=ttv
											else:
												tv=copy.deepcopy(vehicles[sorted_idx[i]])
												tv.insert_customer_at(pos,cust,argvs)

											depo_idx=[j for j,c in enumerate(vehicles[sorted_idx[i]].route[:-1]) if c.custno=="0"]+[len(vehicles[sorted_idx[i]].route)-1]
											servt_dict={}
											for k in range(len(depo_idx)-1):
												servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]=0
												servt=0
												for j in range(depo_idx[k]+1,depo_idx[k+1]):
													if not(j!=0 and vehicles[sorted_idx[i]].route[j-1].custno==vehicles[sorted_idx[i]].route[j].custno and vehicles[sorted_idx[i]].route[j].custno!="0"): #荷物分割からの呼び出し対応
														if vehicles[sorted_idx[i]].route[j].requestType=="DELIVERY" and vehicles[sorted_idx[i]].route[j].custno[0]!='b':
															servt+=vehicles[sorted_idx[i]].route[j].depotservt
														if depo_idx[k]<pos and pos<=depo_idx[k+1] and cust.requestType=="DELIVERY" and cust.custno[0]!='b':
															servt+=cust.depotservt
												if vehicles[sorted_idx[i]].route[depo_idx[k]+1].custno!="0":
													servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt+vehicles[sorted_idx[i]].depotservt
												else:
													servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt
											#集荷時間
											servt_dict[vehicles[sorted_idx[i]].route[len(vehicles[sorted_idx[i]].route)-1]]=0
											for k in range(1,len(depo_idx)):
												servt=0
												for j in range(depo_idx[k-1]+1,depo_idx[k]):
													if not(j!=0 and vehicles[sorted_idx[i]].route[j-1].custno==vehicles[sorted_idx[i]].route[j].custno and vehicles[sorted_idx[i]].route[j].custno!="0"): #荷物分割からの呼び出し対応
														if vehicles[sorted_idx[i]].route[j].requestType=="PICKUP":
															servt+=vehicles[sorted_idx[i]].route[j].depotservt
														if depo_idx[k-1]<pos and pos<=depo_idx[k] and cust.requestType=="PICKUP": 
															servt+=u.depotservt
												servt_dict[vehicles[sorted_idx[i]].route[depo_idx[k]]]+=servt

											tdepo_idx=[j for j,c in enumerate(tv.route[:-1]) if c.custno=="0"]+[len(tv.route)-1]

											load=[0 for c in tv.route]
											load2=[0 for c in tv.route]
											for l in range(len(tv.route)-1):
												if l in tdepo_idx:
													for j in range(l+1,tdepo_idx[tdepo_idx.index(l)+1]):
														if tv.route[j].requestType=="DELIVERY":
															if tv.route[j].custno[0] != 'b':
																load[l]+=tv.route[j].dem
																load2[l]+=tv.route[j].dem2
												else:
													if tv.route[l].custno[0] != "b":
														if not(l!=0 and tv.route[l-1].custno==tv.route[l].custno and tv.route[l].custno!="0"):
															if tv.route[l].requestType=="DELIVERY":
																load[l]=load[l-1]-tv.route[l].dem
																load2[l]=load2[l-1]-tv.route[l].dem2
															else:
																load[l]=load[l-1]+tv.route[l].dem
																load2[l]=load2[l-1]+tv.route[l].dem2

											for j in reversed(range(len(load))):
												if j in tdepo_idx and j+1 in tdepo_idx:
													load[j]=load[j+1]
													load2[j]=load2[j+1]

											load=[j if j>1e-9 else 0 for j in load] #誤差対策
											load2=[j if j>1e-9 else 0 for j in load2] #誤差対策

											no_park_idx=[]
											for c in tv.route[tdepo_idx[0]+1:tdepo_idx[1]]:
												if c.requestType=="DELIVERY":
													break
											else:
												if load[0]==0 and load2[0]==0:
													no_park_idx.append(0)
											
											for j in range(1,len(tdepo_idx)-1):
												if load[tdepo_idx[j]-1]==0 and load2[tdepo_idx[j]-1]==0:
													for c in tv.route[tdepo_idx[j]+1:tdepo_idx[j+1]]:
														if c.requestType=="DELIVERY":
															break
													else:
														if load[tdepo_idx[j]]==0 and load2[tdepo_idx[j]]==0:
															if tdepo_idx[j]>=pos:
																no_park_idx.append(tdepo_idx[j]-1)
															else:
																no_park_idx.append(tdepo_idx[j])
											if load[tdepo_idx[-1]-1]==0 and load2[tdepo_idx[-1]-1]==0:
												no_park_idx.append(tdepo_idx[-1]-1)
												

											if not 0 in no_park_idx:
												lv_t=max(vehicles[sorted_idx[i]].starthour+vehicles[sorted_idx[i]].route[0].parkt_arrive,vehicles[sorted_idx[i]].route[0].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[0]]*vehicles[sorted_idx[i]].opskill
											else:
												lv_t=max(vehicles[sorted_idx[i]].starthour,vehicles[sorted_idx[i]].route[0].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[0]]*vehicles[sorted_idx[i]].opskill
											if not 0 in no_park_idx:
												lv_t+=vehicles[sorted_idx[i]].route[0].parkt_open

											impassable=True
											for j in range(pos-1):
												from_c,to_c=vehicles[sorted_idx[i]].route[j],vehicles[sorted_idx[i]].route[j+1]
												ttable21 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
												dtable19 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
												if argvs.management_etable:
													etable18 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
												if argvs.management_xtable:
													xtable18 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)

												if ttable21[from_c.spotno][to_c.spotno]==-1 or\
												dtable19[from_c.spotno][to_c.spotno]==-1 or \
												(argvs.management_etable and etable18[from_c.spotno][to_c.spotno]==-1) or \
												(argvs.management_xtable and xtable18[from_c.spotno][to_c.spotno]==-1):
													impassable=False
													break

												if j!=0 and vehicles[sorted_idx[i]].route[j].custno==vehicles[sorted_idx[i]].route[j+1].custno and vehicles[sorted_idx[i]].route[j].custno!="0":
													arr_t=vehicles[sorted_idx[i]].arr[j] 
													st_t=vehicles[sorted_idx[i]].st[j] 
													lv_t=vehicles[sorted_idx[i]].lv[j] 
												else:
													arr_t=lv_t+ttable21[from_c.spotno][to_c.spotno]*vehicles[sorted_idx[i]].drskill

													if to_c.spotid!=from_c.spotid and not j+1 in no_park_idx:
														lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)
													else:
														lv_t=max(arr_t,to_c.ready_fs)
													if to_c in servt_dict:
														lv_t+=servt_dict[to_c]*vehicles[sorted_idx[i]].opskill
													else:
														lv_t+=to_c.servt*vehicles[sorted_idx[i]].opskill
													if to_c.spotid!=from_c.spotid and not j+1 in no_park_idx:
														lv_t+=to_c.parkt_open
												
											if impassable==False:
												continue

											if not vehicles[sorted_idx[i]].vehno in cust.reje_ve and vehicles[sorted_idx[i]].direct_flag==False:
												#通行可能なら
												ttable6 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
												if ttable6[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
													continue											

												dtable4 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
												if dtable4[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
													continue

												if argvs.management_etable:
													etable3 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
													if etable3[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
														continue

												if argvs.management_xtable:
													xtable3 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)
													if xtable3[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]==-1:
														continue

												if vehicles[sorted_idx[i]].route[pos-1].custno==cust.custno and cust.custno!="0": #荷物分割からの呼び出し対応
													arr_t=vehicles[sorted_idx[i]].arr[pos-1]
													st_t=vehicles[sorted_idx[i]].st[pos-1]
													lv_t=vehicles[sorted_idx[i]].lv[pos-1]
												else:
													arr_t=vehicles[sorted_idx[i]].lv[pos-1]+ttable6[vehicles[sorted_idx[i]].route[pos-1].spotno][cust.spotno]*vehicles[sorted_idx[i]].drskill
													if cust.spotid!=vehicles[sorted_idx[i]].route[pos-1].spotid:
														lv_t=max(arr_t+cust.parkt_arrive,cust.ready_fs)+cust.servt*vehicles[sorted_idx[i]].opskill
													else:
														lv_t=max(arr_t,cust.ready_fs)+cust.servt*vehicles[sorted_idx[i]].opskill
													if cust.spotid!=vehicles[sorted_idx[i]].route[pos-1].spotid:
														lv_t+=cust.parkt_open

												ttable7 = get_ttable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_ttable)
												dtable5 = get_dtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_dtable)
												if argvs.management_etable:
													etable4 = get_etable(vehicles[sorted_idx[i]].vtype, vehicles[sorted_idx[i]].etype, lv_t, argvs.management_etable)
												if argvs.management_xtable:
													xtable4 = get_xtable(vehicles[sorted_idx[i]].vtype, lv_t, argvs.management_xtable)

												if ttable7[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1 or \
												dtable5[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1 or \
												(argvs.management_etable and etable4[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1) or \
												(argvs.management_xtable and xtable4[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]==-1):
													continue

												if cust.custno==vehicles[sorted_idx[i]].route[pos].custno and cust.custno!="0": #荷物分割からの呼び出し対応
													pass #前と同じcustnoならそのまま使えば良い
												else:
													arr_t=lv_t+ttable7[cust.spotno][vehicles[sorted_idx[i]].route[pos].spotno]*vehicles[sorted_idx[i]].drskill
													if vehicles[sorted_idx[i]].route[pos] in servt_dict:
														if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
															lv_t=max(arr_t+vehicles[sorted_idx[i]].route[pos].parkt_arrive,vehicles[sorted_idx[i]].route[pos].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[pos]]*vehicles[sorted_idx[i]].opskill
														else:
															lv_t=max(arr_t,vehicles[sorted_idx[i]].route[pos].ready_fs)+servt_dict[vehicles[sorted_idx[i]].route[pos]]*vehicles[sorted_idx[i]].opskill
													else:
														if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
															lv_t=max(arr_t+vehicles[sorted_idx[i]].route[pos].parkt_arrive,vehicles[sorted_idx[i]].route[pos].ready_fs)+vehicles[sorted_idx[i]].route[pos].servt*vehicles[sorted_idx[i]].opskill
														else:
															lv_t=max(arr_t,vehicles[sorted_idx[i]].route[pos].ready_fs)+vehicles[sorted_idx[i]].route[pos].servt*vehicles[sorted_idx[i]].opskill
													if vehicles[sorted_idx[i]].route[pos].spotid!=cust.spotid and not pos in no_park_idx:
														lv_t+=vehicles[sorted_idx[i]].route[pos].parkt_open

												if check_impassability(customers,vehicles[sorted_idx[i]],lv_t,pos+1,servt_dict,len(vehicles[sorted_idx[i]].route)-1,no_park_idx,False,argvs)[0]==False:
													continue

												# maxvisit check
												maxvisit = False
												if vehicles[sorted_idx[i]].maxvisit != 0:
													#troute = [c.spotid for c in vehicles[sorted_idx[i]].route]
													#troute.insert(pos, cust.spotid)
													#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for k,c in enumerate(troute[1:-1]) if c=="0" and (troute[k]!="0" or k==0)])
													#visit_num = calc_visitnum(troute)
													_tveh = dcopy(vehicles[sorted_idx[i]])
													_tveh.route.insert(pos, cust)
													visit_num = calc_visitnum(_tveh.route)
													if visit_num > vehicles[sorted_idx[i]].maxvisit:
														maxvisit = True
												if maxvisit:
													continue

												if argvs.init_changecust=="additive" and vehicles[sorted_idx[i]].route[pos-1].custno=="0" and vehicles[sorted_idx[i]].route[pos].custno=="0":
													if len([c for c in vehicles[sorted_idx[i]].route[pos+1:-1] if c.changecust=="additive" and c.custno!="0" and  c.custno[0]!="b"])!=0:
														continue

												if argvs.break_flag:
													vehicles[sorted_idx[i]].insert_customer_at(pos,cust,argvs)
													_management_ttable = t_dcopy(argvs.management_ttable)
													_management_dtable = t_dcopy(argvs.management_dtable)
													_management_xtable = t_dcopy(argvs.management_xtable)
													_management_etable = t_dcopy(argvs.management_etable)
													_t_route = r_backup(vehicles)
													tveh = dcopy(vehicles[sorted_idx[i]])
													tveh = insert_breakspot(tveh.takebreak, None, customers, tveh, vehicles, argvs)
													if tveh != None:
														#ここは実vehicleなのでルートのみ保存、テーブルはリストアしない
														vehicles[sorted_idx[i]] = dcopy(tveh)
													else:
														argvs.management_ttable = t_dcopy(_management_ttable)
														argvs.management_dtable = t_dcopy(_management_dtable)
														argvs.management_xtable = t_dcopy(_management_xtable)
														argvs.management_etable = t_dcopy(_management_etable)
														vehicles = r_restore(vehicles, _t_route, argvs)
												else:
													vehicles[sorted_idx[i]].insert_customer_at(pos,cust,argvs)
												for ac in cust.additionalcust:
													tcust.remove(ac)
												break
										else:
											continue
										break #配送先の偏りがあると回転が発生しない車両が出てしまうため

								if cust_len==len(tcust) or len(tcust)==1:
									break

							if len(tcust)==1:
								break

							#挿入不可配送先と直送便がある場合、直送便をやめる
							if len(tcust)==cust_len and [v for v in vehicles if v.direct_flag==True]!=[]:
								insert_direct_flag=False

								for v in vehicles:
									v.direct_flag=False
									v.route.clear()
									v.update_arrtime_tw(argvs)
									
									customers+=direct_customers
									direct_customers.clear()

									direct_vehicles_flag=False
								break

							#挿入不可配送先がある場合はtie-upされた配送先を分割する
							if len(tcust)==cust_len:
								insert_flag=False
								break	
						else: #回転機能あり
							insert_depo_flag=True
							curv=0
							
							if vehicles[sorted_idx[0]].route[-2].custno=="0": #デポが連続する場合
								continue
							
							if vehicles[sorted_idx[0]].maxrotate>0 and len([c for c in vehicles[sorted_idx[0]].route[:-1] if c.custno=="0" or c.custno.startswith("b")])+1>vehicles[sorted_idx[0]].maxrotate: #回転数上限を超える場合
								continue
							
							#通行不可の場合	
							ttable12 = get_ttable(vehicles[sorted_idx[0]].vtype, vehicles[sorted_idx[0]].lv[-2], argvs.management_ttable)
							if ttable12[vehicles[sorted_idx[0]].route[-2].spotno][customers[0].spotno]==-1:
								continue

							dtable10 = get_dtable(vehicles[sorted_idx[0]].vtype,vehicles[sorted_idx[0]].lv[-2], argvs.management_dtable)
							if dtable10[vehicles[sorted_idx[0]].route[-2].spotno][customers[0].spotno]==-1:
								continue

							if argvs.management_etable:
								etable9 = get_etable(vehicles[sorted_idx[0]].vtype, vehicles[sorted_idx[0]].etype, vehicles[sorted_idx[0]].lv[-2], argvs.management_etable)
								if etable9[vehicles[sorted_idx[0]].route[-2].spotno][customers[0].spotno]==-1:
									continue

							if argvs.management_xtable:
								xtable9 = get_xtable(vehicles[sorted_idx[0]].vtype, vehicles[sorted_idx[0]].lv[-2], argvs.management_xtable)
								if xtable9[vehicles[sorted_idx[0]].route[-2].spotno][customers[0].spotno]==-1:
									continue

							depo_idx=[j for j,c in enumerate(vehicles[sorted_idx[0]].route[:-1]) if c.custno=="0"]+[len(vehicles[sorted_idx[0]].route)-1]
							servt_dict={}
							for k in range(len(depo_idx)-1):
								servt_dict[vehicles[sorted_idx[0]].route[depo_idx[k]]]=0
								servt=0
								for j in range(depo_idx[k]+1,depo_idx[k+1]):
									if not(j!=0 and vehicles[sorted_idx[0]].route[j-1].custno==vehicles[sorted_idx[0]].route[j].custno and vehicles[sorted_idx[0]].route[j].custno!="0"): #荷物分割からの呼び出し対応
										if vehicles[sorted_idx[0]].route[j].requestType=="DELIVERY" and vehicles[sorted_idx[0]].route[j].custno[0]!='b':
											servt+=vehicles[sorted_idx[0]].route[j].depotservt
										if depo_idx[k]<index+1 and index+1<=depo_idx[k+1] and u.requestType=="DELIVERY" and u.custno[0]!='b':
											servt+=u.depotservt
								if vehicles[sorted_idx[0]].route[depo_idx[k]+1].custno!="0":
									servt_dict[vehicles[sorted_idx[0]].route[depo_idx[k]]]+=servt+vehicles[sorted_idx[0]].depotservt
								else:
									servt_dict[vehicles[sorted_idx[0]].route[depo_idx[k]]]+=servt
				
							#集荷時間
							servt_dict[vehicles[sorted_idx[0]].route[len(vehicles[sorted_idx[0]].route)-1]]=0
							for k in range(1,len(depo_idx)):
								servt=0
								for j in range(depo_idx[k-1]+1,depo_idx[k]):
									if not(j!=0 and vehicles[sorted_idx[0]].route[j-1].custno==vehicles[sorted_idx[0]].route[j].custno and vehicles[sorted_idx[0]].route[j].custno!="0"): #荷物分割からの呼び出し対応
										if vehicles[sorted_idx[0]].route[j].requestType=="PICKUP":
											servt+=vehicles[sorted_idx[0]].route[j].depotservt
										if depo_idx[k-1]<index+1 and index+1<=depo_idx[k] and u.requestType=="PICKUP": 
											servt+=u.depotservt
								servt_dict[vehicles[sorted_idx[0]].route[depo_idx[k]]]+=servt

							arr_t=vehicles[sorted_idx[0]].lv[-2]+ttable12[vehicles[sorted_idx[0]].route[-2].spotno][customers[0].spotno]*vehicles[sorted_idx[0]].drskill

							lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+servt_dict[vehicles[sorted_idx[0]].route[-1]]*vehicles[sorted_idx[0]].opskill
							lv_t+=customers[0].parkt_open

							#通行不可の場合	
							ttable24 = get_ttable(vehicles[sorted_idx[0]].vtype, lv_t, argvs.management_ttable)
							if ttable24[customers[0].spotno][vehicles[sorted_idx[0]].route[-1].spotno]==-1:
								continue

							dtable22 = get_dtable(vehicles[sorted_idx[0]].vtype,lv_t, argvs.management_dtable)
							if dtable22[customers[0].spotno][vehicles[sorted_idx[0]].route[-1].spotno]==-1:
								continue

							if argvs.management_etable:
								etable21 = get_etable(vehicles[sorted_idx[0]].vtype, vehicles[sorted_idx[0]].etype, lv_t, argvs.management_etable)
								if etable21[customers[0].spotno][vehicles[sorted_idx[0]].route[-1].spotno]==-1:
									continue

							if argvs.management_xtable:
								xtable21 = get_xtable(vehicles[sorted_idx[0]].vtype, lv_t, argvs.management_xtable)
								if xtable21[customers[0].spotno][vehicles[sorted_idx[0]].route[-1].spotno]==-1:
									continue

							#troute = [c.spotid for c in vehicles[sorted_idx[0]].route]
							#troute.insert(-1, customers[0].spotid)
							#visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])-len([c for k,c in enumerate(troute[1:-1]) if c=="0" and (troute[k]!="0" or k==0)])
							#visit_num = calc_visitnum(troute)
							_tveh = dcopy(vehicles[sorted_idx[0]])
							_tveh.route.insert(-1, customers[0])
							visit_num = calc_visitnum(_tveh.route)

							if vehicles[sorted_idx[0]].maxvisit>0 and visit_num>vehicles[sorted_idx[0]].maxvisit: #訪問数上限を超える場合
								continue

							if argvs.break_flag:
								_management_ttable = t_dcopy(argvs.management_ttable)
								_management_dtable = t_dcopy(argvs.management_dtable)
								_management_xtable = t_dcopy(argvs.management_xtable)
								_management_etable = t_dcopy(argvs.management_etable)
								_t_route = r_backup(vehicles)
								tv = dcopy(vehicles[sorted_idx[0]])
								if argvs.bulkShipping_flag==True:
									depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
									depo.customers.append(copy.deepcopy(customers[0].customers[0]))
									depo.servt=customers[0].servt
									depo.dem=customers[0].dem
									depo.dem2=customers[0].dem2
									depo.reje_ve=customers[0].reje_ve
									depo.parkt_open=customers[0].parkt_open
									depo.parkt_arrive=customers[0].parkt_arrive
									depo.depotservt=customers[0].depotservt
									depo.additionalcust=[depo]
									depo.demdivideunit=customers[0].demdivideunit
									depo.requestType=customers[0].requestType
									depo.deny_unass=customers[0].deny_unass #未割り当て荷物
									tv.insert_customer_at(-1,depo,argvs) #デポを挿入
								else:
									tv.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs) #デポを挿入
								tv = insert_breakspot(vehicles[sorted_idx[0]].takebreak, None, customers, tv, vehicles, argvs)
								if tv != None:
									#ここは実vehicleなのでルートのみ保存、テーブルはリストアしない
									vehicles[sorted_idx[0]] = dcopy(tv)
								else:
									argvs.management_ttable = t_dcopy(_management_ttable)
									argvs.management_dtable = t_dcopy(_management_dtable)
									argvs.management_xtable = t_dcopy(_management_xtable)
									argvs.management_etable = t_dcopy(_management_etable)
									vehicles = r_restore(vehicles, _t_route, argvs)

							else:
								if argvs.bulkShipping_flag==True:
									depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
									depo.customers.append(copy.deepcopy(customers[0].customers[0]))
									depo.servt=customers[0].servt
									depo.dem=customers[0].dem
									depo.dem2=customers[0].dem2
									depo.reje_ve=customers[0].reje_ve
									depo.parkt_open=customers[0].parkt_open
									depo.parkt_arrive=customers[0].parkt_arrive
									depo.depotservt=customers[0].depotservt
									depo.additionalcust=[depo]
									depo.demdivideunit=customers[0].demdivideunit
									depo.requestType=customers[0].requestType
									depo.deny_unass=customers[0].deny_unass #未割り当て荷物
									vehicles[sorted_idx[0]].insert_customer_at(-1,depo,argvs) #デポを挿入
								else:
									vehicles[sorted_idx[0]].insert_customer_at(-1,copy.deepcopy(customers[0]),argvs) #デポを挿入

							continue

						break

					if insert_direct_flag==False or insert_flag==False:
						break

					# cdist_from_depot={c:dist_from_depot[c] for c in dist_from_depot.keys() if c in tcust}
					# seed_c[curv]=sorted(cdist_from_depot.items(),key=lambda x:x[1],reverse=True)[0][0]
					# check_feasibility_of_the_first(seed_c[curv],vehicles[sorted_idx[curv]],customers,argvs)
					# 初期解で違反解を許容するため
					# if not vehicles[sorted_idx[curv]].vehno in seed_c[curv].reje_ve:
					# 	#通行可能なら
					# 	ttable8 = get_ttable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[0], argvs.management_ttable)
					# 	if ttable8[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]==-1:
					# 		continue

					# 	dtable6 = get_dtable(vehicles[sorted_idx[curv]].vtype,vehicles[sorted_idx[curv]].lv[0], argvs.management_dtable)
					# 	if dtable6[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]==-1:
					# 		continue

					# 	if argvs.management_etable:
					# 		etable5 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, vehicles[sorted_idx[curv]].lv[0], argvs.management_etable)
					# 		if etable5[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]==-1:
					# 			continue

					# 	if argvs.management_xtable:
					# 		xtable5 = get_xtable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].lv[0], argvs.management_xtable)
					# 		if xtable5[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]==-1:
					# 			continue

					# 	arr_t=vehicles[sorted_idx[curv]].lv[0]+ttable8[vehicles[sorted_idx[curv]].route[0].spotno][seed_c[curv].spotno]*vehicles[sorted_idx[curv]].drskill
					# 	lv_t=max(arr_t,seed_c[curv].ready_fs)+seed_c[curv].servt*vehicles[sorted_idx[curv]].opskill

					# 	ttable9 = get_ttable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_ttable)
					# 	dtable7 = get_dtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_dtable)
					# 	if argvs.management_etable:
					# 		etable6 = get_etable(vehicles[sorted_idx[curv]].vtype, vehicles[sorted_idx[curv]].etype, lv_t, argvs.management_etable)
					# 	if argvs.management_xtable:
					# 		xtable6 = get_xtable(vehicles[sorted_idx[curv]].vtype, lv_t, argvs.management_xtable)

					# 	if ttable9[seed_c[curv].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]==-1 or \
					# 	dtable7[seed_c[curv].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]==-1 or \
					# 	(argvs.management_etable and etable6[seed_c[curv].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]==-1) or \
					# 	(argvs.management_xtable and xtable6[seed_c[curv].spotno][vehicles[sorted_idx[curv]].route[-1].spotno]==-1):
					# 		continue

					# 	# maxvisit check
					# 	maxvisit = False
					# 	if vehicles[sorted_idx[curv]].maxvisit != 0:
					# 		troute = [c.spotid for c in vehicles[sorted_idx[curv]].route]
					# 		troute.insert(1, seed_c[curv].spotid)
					# 		visit_num = len([len([*group]) for _, group in groupby(troute[1:-1])])
					# 		if visit_num > vehicles[sorted_idx[curv]].maxvisit:
					# 			maxvisit = True
					# 	if maxvisit:
					# 		continue

					# 	vehicles[sorted_idx[curv]].insert_customer_at(1,seed_c[curv],argvs)
					# 	cust_in_routes+=[seed_c[curv]]
					# 	tcust.remove(seed_c[curv])
				
				
			if timeout_flag==True:
				break		
			cap_feas=True
			for v in vehicles:
				max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v.route,v)
				depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
				
				for j in range(len(depo_idx)-1):
					load_onbrd,load_onbrd2=0,0
					for k in range(depo_idx[j]+1,depo_idx[j+1]):
						if v.route[k].requestType=="DELIVERY":
							if v.route[k].custno[0] != "b":
								load_onbrd+=v.route[k].dem
								load_onbrd2+=v.route[k].dem2
					if (load_onbrd>v.cap or load_onbrd2>v.cap2) and v.direct_flag==False:
						cap_feas=False
						break

				if cap_feas==False:
					break

				if (max_load_pen>0 or max_load_pen2>0) and v.direct_flag==False:
					cap_feas=False
					break

			
			if (cap_feas==False or insert_flag==False) and argvs.bulkShipping_flag==True: #2つのtie-up荷物に分ける
				for tc in sorted(customers,key=lambda x: max(abs(x.dem),abs(x.dem2)),reverse=True):
					#分割できなければ次の荷物量のスポットにする
					if len(tc.customers)==1:
						continue

					tied_customer1=TiedCustomer(tc.custno,tc.spotid,tc.ready_fs,tc.due_fs,tc.x,tc.y)
					if argvs.break_flag==False:
						tied_customer2=TiedCustomer(str(tcnum+max([0]+[int(ac.custno) for v in vehicles for cust in v.route[1:-1] for ac in cust.additionalcust])+1),tc.spotid,tc.ready_fs,tc.due_fs,tc.x,tc.y)
					else:
						tied_customer2=TiedCustomer(str(tcnum+max([0]+[int(ac.custno) for v in vehicles for cust in v.route[1:-1] for ac in cust.additionalcust if ac.custno[0]!="b"])+1),tc.spotid,tc.ready_fs,tc.due_fs,tc.x,tc.y)

					#少ない順に振り分ける
					if abs(tc.dem)>=abs(tc.dem2):
						tc.customers.sort(key=lambda x: abs(x.dem))
					else:
						tc.customers.sort(key=lambda x: abs(x.dem2))

					for i,cust in enumerate(tc.customers):
						if i%2==0:
							tied_customer1.customers.append(cust)
							tied_customer1.servt=sum([c.servt for c in tied_customer1.customers])
							tied_customer1.dem=sum([c.dem for c in tied_customer1.customers])
							tied_customer1.dem2=sum([c.dem2 for c in tied_customer1.customers])
							tied_customer1.reje_ve=list(set([v for c in tied_customer1.customers for v in c.reje_ve])) #重複削除
							tied_customer1.spotno=cust.spotno
							tied_customer1.parkt_open=cust.parkt_open
							tied_customer1.parkt_arrive=cust.parkt_arrive
							tied_customer1.depotservt=sum([c.depotservt for c in tied_customer1.customers])
							tied_customer1.additionalcust=[tied_customer1]
							tied_customer1.demdivideunit=cust.demdivideunit
							tied_customer1.requestType=cust.requestType
							tied_customer1.deny_unass=cust.deny_unass #未割り当て荷物
						else:
							tied_customer2.customers.append(cust)
							tied_customer2.servt=sum([c.servt for c in tied_customer2.customers])
							tied_customer2.dem=sum([c.dem for c in tied_customer2.customers])
							tied_customer2.dem2=sum([c.dem2 for c in tied_customer2.customers])
							tied_customer2.reje_ve=list(set([v for c in tied_customer2.customers for v in c.reje_ve])) #重複削除
							tied_customer2.spotno=cust.spotno
							tied_customer2.parkt_open=cust.parkt_open
							tied_customer2.parkt_arrive=cust.parkt_arrive
							tied_customer2.depotservt=sum([c.depotservt for c in tied_customer2.customers])
							tied_customer2.additionalcust=[tied_customer2]
							tied_customer2.demdivideunit=cust.demdivideunit
							tied_customer2.requestType=cust.requestType
							tied_customer2.deny_unass=cust.deny_unass #未割り当て荷物

						#半数を振り分けたら終了
						if (abs(tc.dem)>=abs(tc.dem2) and abs(tied_customer1.dem)>=abs(tc.dem)/2) or (abs(tc.dem)<abs(tc.dem2) and abs(tied_customer1.dem2)>=abs(tc.dem2)/2):
							for j in range(i+1,len(tc.customers)):
								tied_customer2.customers.append(tc.customers[j])
								tied_customer2.servt=sum([c.servt for c in tied_customer2.customers])
								tied_customer2.dem=sum([c.dem for c in tied_customer2.customers])
								tied_customer2.dem2=sum([c.dem2 for c in tied_customer2.customers])
								tied_customer2.reje_ve=list(set([v for c in tied_customer2.customers for v in c.reje_ve])) #重複削除
								tied_customer2.spotno=cust.spotno
								tied_customer2.parkt_open=cust.parkt_open
								tied_customer2.parkt_arrive=cust.parkt_arrive
								tied_customer2.depotservt=sum([c.depotservt for c in tied_customer2.customers])
								tied_customer2.additionalcust=[tied_customer2]
								tied_customer2.demdivideunit=cust.demdivideunit
								tied_customer2.requestType=cust.requestType
								tied_customer2.deny_unass=cust.deny_unass #未割り当て荷物

							break
						elif (abs(tc.dem)>=abs(tc.dem2) and abs(tied_customer2.dem)>=abs(tc.dem)/2) or (abs(tc.dem)<abs(tc.dem2) and abs(tied_customer2.dem2)>=abs(tc.dem2)/2):
							for j in range(i+1,len(tc.customers)):
								tied_customer1.customers.append(tc.customers[j])
								tied_customer1.servt=sum([c.servt for c in tied_customer1.customers])
								tied_customer1.dem=sum([c.dem for c in tied_customer1.customers])
								tied_customer1.dem2=sum([c.dem2 for c in tied_customer1.customers])
								tied_customer1.reje_ve=list(set([v for c in tied_customer1.customers for v in c.reje_ve])) #重複削除
								tied_customer1.spotno=cust.spotno
								tied_customer1.parkt_open=cust.parkt_open
								tied_customer1.parkt_arrive=cust.parkt_arrive
								tied_customer1.depotservt=sum([c.depotservt for c in tied_customer1.customers])
								tied_customer1.additionalcust=[tied_customer1]
								tied_customer1.demdivideunit=cust.demdivideunit
								tied_customer1.requestType=cust.requestType
								tied_customer1.deny_unass=cust.deny_unass #未割り当て荷物


							break

					customers.remove(tc)
					customers.append(tied_customer1)
					customers.append(tied_customer2)

					#全ての解を破棄
					for v in vehicles:
						if v.direct_flag==False:
							v.route.clear()

					divided_flag=True
					break
				else: #これ以上分解できなければ終了
					spots=[]
					for c in customers:
						if not c.custno=="0":
							spots.append(int(c.custno))

					for v in vehicles:
						for c in v.route[1:-1]:
							if c.custno[0]!="b":
								if int(c.custno) in spots:
									for ac in c.additionalcust:
										if int(ac.custno) in spots:
											spots.remove(int(ac.custno))

					if spots!=[]:
						if vehicles_sorted.index(sorted_idx)==len(vehicles_sorted[:sample_num])-1:
							sErrMes = "failed to create initial solution due to cost of -1 or unvisitable vehicles or max visits or fixed vehicles"
							raise ValueError(sErrMes)
						else:
							for v in vehicles:
								v.route.clear()
								insert_flag=False
							break
					else:
						cap_feas=True #これ以上分割できないのでTrueにする

			if (cap_feas==False or insert_flag==False) and argvs.bulkShipping_flag==True:
				continue

			if insert_direct_flag==False:
				for v in vehicles:
					v.direct_flag=False
					v.route.clear()
					v.update_arrtime_tw(argvs)
				
				customers+=direct_customers
				direct_customers.clear()

				direct_vehicles_flag=False

				continue

			if [v for v in vehicles if v.direct_flag==True]==[] and argvs.bulkShipping_flag==False and (insert_direct_flag==False or insert_flag==False) and argvs.opt_unassigned_flag==False:
				if vehicles_sorted.index(sorted_idx)==len(vehicles_sorted[:sample_num])-1:
					sErrMes = "failed to create initial solution due to cost of -1 or unvisitable vehicles or max visits or fixed vehicles"
					raise ValueError(sErrMes)
				else:
					break
			

			if decr_vnum==False or len([v for v in vehicles if v.rmpriority==0])!=0:
				#vnum_cnt=0
				empv=[]
				vidx=0
				for v in vehicles:
					if argvs.opt_unassigned_flag==False or v.reserved_v_flag==False:
						if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
							empv+=[vidx]
						vidx=vidx+1
			
				empv_cnt=len(empv)
				if (len(vehicles)-empv_cnt)==int(ivnum):
					tnbflag.mergeflag=False
					break
				elif (len(vehicles)-empv_cnt)<int(ivnum):
					#for i in range(empv_cnt-1): ##20200929水増しをやめたため修正
					for i in range(empv_cnt):
						vidx,vidx_max,rtlen_max=0,[idx for idx in range(len(vehicles))],-1
						
						vidx_max.sort(key=lambda x:len(vehicles[x].route),reverse=True)

						for j in vidx_max:
							if decr_vnum==True and vehicles[empv[i]].rmpriority!=0:
								continue
							num=int( (len([c for c in vehicles[j].route[1:-1] if c.custno!="0" and c.custno[0]!="b"]))/2 )
							if vehicles[j].direct_flag==False and len(vehicles[j].route)>3 and vehicles[j].reserved_v_flag==False: #len(vehicles[j].route)=3だとvehicles[j].routeが空になるため
								halve_route(customers,vehicles[j],vehicles[empv[i]],num,vehicles,argvs)

							if len(vehicles[empv[i]].route)>2:
								break

					empv=[]
					for v in vehicles:
						if (decr_vnum ==False or v.rmpriority==0) and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
							empv+=[v.vehno]
					
					if len(empv)==len(vehicles):
						continue

					#空車両と直送便がある場合、直送便をやめる
					if empv != [] and [v for v in vehicles if v.direct_flag==True]!=[]:
						for v in vehicles:
							v.direct_flag=False
							v.route.clear()
							v.update_arrtime_tw(argvs)
						
						customers+=direct_customers
						direct_customers.clear()

						direct_vehicles_flag=False

						continue

					#空車両がある場合、tie-upされた配送先を分割する
					if empv != [] and argvs.bulkShipping_flag==True:
						#2つのtie-up荷物に分ける
						for tc in sorted(customers,key=lambda x: max(abs(x.dem),abs(x.dem2)),reverse=True):
							#分割できなければ次の荷物量のスポットにする
							if len(tc.customers)==1:
								continue

							tied_customer1=TiedCustomer(tc.custno,tc.spotid,tc.ready_fs,tc.due_fs,tc.x,tc.y)
							if argvs.break_flag==False:
								tied_customer2=TiedCustomer(str(tcnum+max([0]+[int(ac.custno) for v in vehicles for cust in v.route[1:-1] for ac in cust.additionalcust])+1),tc.spotid,tc.ready_fs,tc.due_fs,tc.x,tc.y)
							else:
								tied_customer2=TiedCustomer(str(tcnum+max([0]+[int(ac.custno) for v in vehicles for cust in v.route[1:-1] for ac in cust.additionalcust if ac.custno[0]!="b"])+1),tc.spotid,tc.ready_fs,tc.due_fs,tc.x,tc.y)
							#少ない順に振り分ける
							if abs(tc.dem)>=abs(tc.dem2):
								tc.customers.sort(key=lambda x: abs(x.dem))
							else:
								tc.customers.sort(key=lambda x: abs(x.dem2))

							for i,cust in enumerate(tc.customers):
								if i%2==0:
									tied_customer1.customers.append(cust)
									tied_customer1.servt=sum([c.servt for c in tied_customer1.customers])
									tied_customer1.dem=sum([c.dem for c in tied_customer1.customers])
									tied_customer1.dem2=sum([c.dem2 for c in tied_customer1.customers])
									tied_customer1.reje_ve=list(set([v for c in tied_customer1.customers for v in c.reje_ve])) #重複削除
									tied_customer1.spotno=cust.spotno
									tied_customer1.parkt_open=cust.parkt_open
									tied_customer1.parkt_arrive=cust.parkt_arrive
									tied_customer1.depotservt=sum([c.depotservt for c in tied_customer1.customers])
									tied_customer1.additionalcust=[tied_customer1]
									tied_customer1.demdivideunit=cust.demdivideunit
									tied_customer1.requestType=cust.requestType
									tied_customer1.deny_unass=cust.deny_unass #未割り当て荷物
								else:
									tied_customer2.customers.append(cust)
									tied_customer2.servt=sum([c.servt for c in tied_customer2.customers])
									tied_customer2.dem=sum([c.dem for c in tied_customer2.customers])
									tied_customer2.dem2=sum([c.dem2 for c in tied_customer2.customers])
									tied_customer2.reje_ve=list(set([v for c in tied_customer2.customers for v in c.reje_ve])) #重複削除
									tied_customer2.spotno=cust.spotno
									tied_customer2.parkt_open=cust.parkt_open
									tied_customer2.parkt_arrive=cust.parkt_arrive
									tied_customer2.depotservt=sum([c.depotservt for c in tied_customer2.customers])
									tied_customer2.additionalcust=[tied_customer2]
									tied_customer2.demdivideunit=cust.demdivideunit
									tied_customer2.requestType=cust.requestType
									tied_customer2.deny_unass=cust.deny_unass #未割り当て荷物

								#半数を振り分けたら終了
								if (abs(tc.dem)>=abs(tc.dem2) and abs(tied_customer1.dem)>=abs(tc.dem)/2) or (abs(tc.dem)<abs(tc.dem2) and abs(tied_customer1.dem2)>=abs(tc.dem2)/2):
									for j in range(i+1,len(tc.customers)):
										tied_customer2.customers.append(tc.customers[j])
										tied_customer2.servt=sum([c.servt for c in tied_customer2.customers])
										tied_customer2.dem=sum([c.dem for c in tied_customer2.customers])
										tied_customer2.dem2=sum([c.dem2 for c in tied_customer2.customers])
										tied_customer2.reje_ve=list(set([v for c in tied_customer2.customers for v in c.reje_ve])) #重複削除
										tied_customer2.spotno=cust.spotno
										tied_customer2.parkt_open=cust.parkt_open
										tied_customer2.parkt_arrive=cust.parkt_arrive
										tied_customer2.depotservt=sum([c.depotservt for c in tied_customer2.customers])
										tied_customer2.additionalcust=[tied_customer2]
										tied_customer2.demdivideunit=cust.demdivideunit
										tied_customer2.requestType=cust.requestType
										tied_customer2.deny_unass=cust.deny_unass #未割り当て荷物

									break
								elif (abs(tc.dem)>=abs(tc.dem2) and abs(tied_customer2.dem)>=abs(tc.dem)/2) or (abs(tc.dem)<abs(tc.dem2) and abs(tied_customer2.dem2)>=abs(tc.dem2)/2):
									for j in range(i+1,len(tc.customers)):
										tied_customer1.customers.append(tc.customers[j])
										tied_customer1.servt=sum([c.servt for c in tied_customer1.customers])
										tied_customer1.dem=sum([c.dem for c in tied_customer1.customers])
										tied_customer1.dem2=sum([c.dem2 for c in tied_customer1.customers])
										tied_customer1.reje_ve=list(set([v for c in tied_customer1.customers for v in c.reje_ve])) #重複削除
										tied_customer1.spotno=cust.spotno
										tied_customer1.parkt_open=cust.parkt_open
										tied_customer1.parkt_arrive=cust.parkt_arrive
										tied_customer1.depotservt=sum([c.depotservt for c in tied_customer1.customers])
										tied_customer1.additionalcust=[tied_customer1]
										tied_customer1.demdivideunit=cust.demdivideunit
										tied_customer1.requestType=cust.requestType
										tied_customer1.deny_unass=cust.deny_unass #未割り当て荷物

									break

							customers.remove(tc)
							customers.append(tied_customer1)
							customers.append(tied_customer2)

							#全ての解を破棄
							for v in vehicles:
								if v.direct_flag==False:
									v.route.clear()

							break
						else: #これ以上分解できなければエラー終了
							if len(customers+[c for v in vehicles for c in iniroutes[v.vehno] if c.custno!="0"])>len(vehicles) and vehicles_sorted.index(sorted_idx)==len(vehicles_sorted[:sample_num])-1:
								sErrMes = "failed to create initial solution due to cost of -1 or unvisitable vehicles or max visits or fixed vehicles"
								raise ValueError(sErrMes)

							tnbflag.mergeflag=False
							break

						continue

					if empv != []:
						if len(customers+[c for v in vehicles for c in iniroutes[v.vehno] if c.custno!="0"])>len(vehicles) and vehicles_sorted.index(sorted_idx)==len(vehicles_sorted[:sample_num])-1:
							sErrMes = "failed to create initial solution due to cost of -1 or unvisitable vehicles or max visits or fixed vehicles"
							raise ValueError(sErrMes)
						
					tnbflag.mergeflag=False
					break
				else:
					sLog = ["# of nonempty vehs:",len(vehicles)-empv_cnt," is greater than the # of vehicles specified:",int(ivnum),". Some vehicles should be remoted with merge"]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"

			elif insert_direct_flag==True and insert_flag==True:
				break

		if (((decr_vnum==True and len([v for v in vehicles if v.rmpriority==0 and len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0])==0) or len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0])==0) and insert_flag==True) or len(customers+[c for v in vehicles for c in iniroutes[v.vehno] if c.custno!="0" and c.custno[0]!="b"])<=len(vehicles) or timeout_flag==True:
			break
	
	if sLogBuf != "\n":
		if rank==0 and logout:
			logging.log(logging.INFO,sLogBuf)

	# #デポデポになったら削除する
	# for v in vehicles:
	# 	i=1
	# 	while True:
	# 		if i>len(v.route)-2:
	# 			break

	# 		if v.route[i].custno=="0" and v.route[i-1].custno=="0":
	# 			remove_customers_specified([v.route[i]],v,argvs)
	# 			i=1
	# 			continue

	# 		i+=1

	# 	if v.route[-2].custno=="0" :
	# 		remove_customers_specified([v.route[-2]],v,argvs)

	#集荷最適化
	if argvs.pickup_flag==True:
		for v in vehicles:
			pick_opt_status, pick_opt_idx = get_pick_opt_status(v, argvs)
			if argvs.bulkShipping_flag==False:
				if v.route[-1].custno=="0" or pick_opt_status: #enddepot!=DEPOTかつDEPOTが直前にない場合 #集荷最適化
					continue

				depo_idx=[]
				for i,c in enumerate(v.route):
					if c.custno=="0":
						depo_idx.append(i)

				if argvs.break_flag:
					management_ttable = t_dcopy(argvs.management_ttable)
					management_dtable = t_dcopy(argvs.management_dtable)
					management_xtable = t_dcopy(argvs.management_xtable)
					management_etable = t_dcopy(argvs.management_etable)
					t_route = r_backup(vehicles)

				for i in range(depo_idx[-1]+1,len(v.route)-1):
					if v.route[i].requestType=="PICKUP":
						ttable13 = get_ttable(v.vtype, v.lv[-2], argvs.management_ttable)
						if ttable13[v.route[-2].spotno][customers[0].spotno]==-1:
							break

						dtable11 = get_dtable(v.vtype,v.lv[-2], argvs.management_dtable)
						if dtable11[v.route[-2].spotno][customers[0].spotno]==-1:
							break

						if argvs.management_etable:
							etable10 = get_etable(v.vtype, v.etype, v.lv[-2], argvs.management_etable)
							if etable10[v.route[-2].spotno][customers[0].spotno]==-1:
								break

						if argvs.management_xtable:
							xtable10 = get_xtable(v.vtype, v.lv[-2], argvs.management_xtable)
							if xtable10[v.route[-2].spotno][customers[0].spotno]==-1:
								break

						depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
						servt_dict={}
						for k in range(len(depo_idx)-1):
							servt_dict[v.route[depo_idx[k]]]=0
							servt=0
							for j in range(depo_idx[k]+1,depo_idx[k+1]):
								if v.route[j].requestType=="DELIVERY" and v.route[j].custno[0]!='b':
									servt+=v.route[j].depotservt
							if v.route[depo_idx[k]+1].custno!="0":
								servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
							else:
								servt_dict[v.route[depo_idx[k]]]+=servt
						#集荷時間
						servt_dict[v.route[len(v.route)-1]]=0
						for k in range(1,len(depo_idx)):
							servt=0
							for j in range(depo_idx[k-1]+1,depo_idx[k]):
								if v.route[j].requestType=="PICKUP":
									servt+=v.route[j].depotservt
							servt_dict[v.route[depo_idx[k]]]+=servt

						arr_t=v.lv[-2]+ttable13[v.route[-2].spotno][customers[0].spotno]*v.drskill
						st_t = max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
						if v.direct_flag==True and compare_time(st_t,customers[0].due_fs)>0:
							break
						lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[v.route[-1]]+v.depotservt)*v.opskill
						lv_t+=customers[0].parkt_open

						ttable14 = get_ttable(v.vtype, lv_t, argvs.management_ttable)
						if ttable14[customers[0].spotno][v.route[-1].spotno]==-1:
							break

						dtable12 = get_dtable(v.vtype,lv_t, argvs.management_dtable)
						if dtable12[customers[0].spotno][v.route[-1].spotno]==-1:
							break

						if argvs.management_etable:
							etable11 = get_etable(v.vtype, v.etype, lv_t, argvs.management_etable)
							if etable11[customers[0].spotno][v.route[-1].spotno]==-1:
								break

						if argvs.management_xtable:
							xtable11 = get_xtable(v.vtype, lv_t, argvs.management_xtable)
							if xtable11[customers[0].spotno][v.route[-1].spotno]==-1:
								break

						arr_t=lv_t+ttable14[customers[0].spotno][v.route[-1].spotno]*v.drskill
						st_t = max(arr_t,v.route[-1].ready_fs)
						if v.direct_flag==True and compare_time(st_t,v.route[-1].due_fs)>0:
							break
						lv_t=max(arr_t,v.route[-1].ready_fs)
						if v.direct_flag==True and argvs.lastc_flag==False and compare_time(lv_t,v.endhour)>0:
							break

						if argvs.break_flag == False:
							v.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs) #DEPOを挿入
						else:
							_t_route = r_backup(vehicles)
							tv = dcopy(v)
							tv.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs) #DEPOを挿入
							tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
							if tv != None:
								v = dcopy(tv)
								vehnos=[v.vehno for v in vehicles]
								vehicles[vehnos.index(v.vehno)] = dcopy(v)
								management_ttable = t_dcopy(argvs.management_ttable)
								management_dtable = t_dcopy(argvs.management_dtable)
								management_xtable = t_dcopy(argvs.management_xtable)
								management_etable = t_dcopy(argvs.management_etable)
								t_route = r_backup(vehicles)
							else:
								argvs.management_ttable = t_dcopy(management_ttable)
								argvs.management_dtable = t_dcopy(management_dtable)
								argvs.management_xtable = t_dcopy(management_xtable)
								argvs.management_etable = t_dcopy(management_etable)
								vehicles = r_restore(vehicles, t_route, argvs)

						break
			else:
				if len(v.route)==0 or v.route[-1].customers[0].custno=="0" or pick_opt_status: #enddepot!=DEPOTかつDEPOTが直前にない場合
					continue

				depo_idx=[]
				for i,c in enumerate(v.route):
					if c.customers[0].custno=="0":
						depo_idx.append(i)

				if argvs.break_flag:
					management_ttable = t_dcopy(argvs.management_ttable)
					management_dtable = t_dcopy(argvs.management_dtable)
					management_xtable = t_dcopy(argvs.management_xtable)
					management_etable = t_dcopy(argvs.management_etable)
					t_route = r_backup(vehicles)

				for i in range(depo_idx[-1]+1,len(v.route)-1):
					if v.route[i].requestType=="PICKUP":
						ttable13 = get_ttable(v.vtype, v.lv[-2], argvs.management_ttable)
						if ttable13[v.route[-2].spotno][customers[0].spotno]==-1:
							break

						dtable11 = get_dtable(v.vtype,v.lv[-2], argvs.management_dtable)
						if dtable11[v.route[-2].spotno][customers[0].spotno]==-1:
							break

						if argvs.management_etable:
							etable10 = get_etable(v.vtype, v.etype, v.lv[-2], argvs.management_etable)
							if etable10[v.route[-2].spotno][customers[0].spotno]==-1:
								break

						if argvs.management_xtable:
							xtable10 = get_xtable(v.vtype, v.lv[-2], argvs.management_xtable)
							if xtable10[v.route[-2].spotno][customers[0].spotno]==-1:
								break

						depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
						servt_dict={}
						for k in range(len(depo_idx)-1):
							servt_dict[v.route[depo_idx[k]]]=0
							servt=0
							for j in range(depo_idx[k]+1,depo_idx[k+1]):
								if v.route[j].requestType=="DELIVERY" and v.route[j].custno[0]!='b':
									servt+=v.route[j].depotservt
							if v.route[depo_idx[k]+1].custno!="0":
								servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
							else:
								servt_dict[v.route[depo_idx[k]]]+=servt
						#集荷時間
						servt_dict[v.route[len(v.route)-1]]=0
						for k in range(1,len(depo_idx)):
							servt=0
							for j in range(depo_idx[k-1]+1,depo_idx[k]):
								if v.route[j].requestType=="PICKUP":
									servt+=v.route[j].depotservt
							servt_dict[v.route[depo_idx[k]]]+=servt

						arr_t=v.lv[-2]+ttable13[v.route[-2].spotno][customers[0].spotno]*v.drskill
						st_t = max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
						if v.direct_flag==True and compare_time(st_t,customers[0].due_fs)>0:
							break
						lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[v.route[-1]]+v.depotservt)*v.opskill
						lv_t+=customers[0].parkt_open

						ttable14 = get_ttable(v.vtype, lv_t, argvs.management_ttable)
						if ttable14[customers[0].spotno][v.route[-1].spotno]==-1:
							break

						dtable12 = get_dtable(v.vtype,lv_t, argvs.management_dtable)
						if dtable12[customers[0].spotno][v.route[-1].spotno]==-1:
							break

						if argvs.management_etable:
							etable11 = get_etable(v.vtype, v.etype, lv_t, argvs.management_etable)
							if etable11[customers[0].spotno][v.route[-1].spotno]==-1:
								break

						if argvs.management_xtable:
							xtable11 = get_xtable(v.vtype, lv_t, argvs.management_xtable)
							if xtable11[customers[0].spotno][v.route[-1].spotno]==-1:
								break

						arr_t=lv_t+ttable14[customers[0].spotno][v.route[-1].spotno]*v.drskill
						st_t=max(arr_t,v.route[-1].ready_fs)
						if v.direct_flag==True and compare_time(st_t,v.route[-1].due_fs)>0:
							break
						lv_t=max(arr_t,v.route[-1].ready_fs)
						if v.direct_flag==True and argvs.lastc_flag==False and compare_time(lv_t,v.endhour)>0:
							break

						depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
						depo.customers.append(copy.deepcopy(customers[0].customers[0]))
						depo.servt=customers[0].servt
						depo.dem=customers[0].dem
						depo.dem2=customers[0].dem2
						depo.reje_ve=customers[0].reje_ve
						depo.parkt_open=customers[0].parkt_open
						depo.parkt_arrive=customers[0].parkt_arrive
						depo.depotservt=customers[0].depotservt
						depo.additionalcust=[depo]
						depo.demdivideunit=customers[0].demdivideunit
						depo.requestType=customers[0].requestType
						depo.deny_unass=customers[0].deny_unass #未割り当て荷物
						if argvs.break_flag == False:
							v.insert_customer_at(-1,depo,argvs) #DEPOを挿入
						else:
							_t_route = r_backup(vehicles)
							tv = dcopy(v)
							tv.insert_customer_at(-1,depo,argvs) #DEPOを挿入
							tv = insert_breakspot(tv.takebreak, None, customers, tv, vehicles, argvs)
							if tv != None:
								v = dcopy(tv)
								vehnos=[v.vehno for v in vehicles]
								vehicles[vehnos.index(v.vehno)] = dcopy(v)
								management_ttable = t_dcopy(argvs.management_ttable)
								management_dtable = t_dcopy(argvs.management_dtable)
								management_xtable = t_dcopy(argvs.management_xtable)
								management_etable = t_dcopy(argvs.management_etable)
								t_route = r_backup(vehicles)
							else:
								argvs.management_ttable = t_dcopy(management_ttable)
								argvs.management_dtable = t_dcopy(management_dtable)
								argvs.management_xtable = t_dcopy(management_xtable)
								argvs.management_etable = t_dcopy(management_etable)
								vehicles = r_restore(vehicles, t_route, argvs)

						break

	# 休憩スポットのCUST IDのふりなおし(パターン３のみ)
	if get_breakspot_pattern(vehicles, argvs)==3:
		bcnt = 0
		for bv in vehicles:
			for r in bv.route:
				if r.custno[0] == 'b':
					r.custno = 'b' + str(bcnt)
					bcnt += 1

	# 休憩スポット挿入エラーのチェック
	err_vehno = check_break_createroute(vehicles, argvs)
	if err_vehno > -1:
		sErrMes = "failed to create initial solution due to break-time (vehno = " + str(err_vehno) + ")"
		raise ValueError(sErrMes)

	return customers+direct_customers


def solve_knapsack(vehicle,customers,full_load=True):
	#ナップサック問題を解く


	# W=int(vehicle.cap)

	# wv=[abs(int(c.dem)) for c in customers]

	# dp=np.zeros(W+1,dtype=float)
	# choice=np.full((W+1,len(wv)),False)
	
	# for j,w in enumerate(wv):
	# 	if w!=0:
	# 		tchoice=copy.deepcopy(choice)
	# 		choice[w:]=choice[:-w]

	# 		for i in range(w,len(dp)):
	# 			if dp[i-w]+w>dp[i]:
	# 				choice[i][j]=True
	# 			else:
	# 				choice[i]=tchoice[i]
			
	# 		dp[w:]=np.vstack([dp[w:],dp[:-w]+w]).max(axis=0)
	
	# #vehicleを更新
	# if dp[-1]==W and sum([abs(int(c.dem2)) for i,c in enumerate(customers) if choice[-1][i]==True])<=vehicle.cap2:
	# 	for i,c in enumerate(customers[:]):
	# 		if choice[-1][i]==False:
	# 			customers.remove(c)
	# else:
	# 	for c in customers[:]:
	# 		customers.remove(c)

	num=len(customers)

	#dem1
	if vehicle.cap!=0:
		choices=list(product([True,False],repeat=num))
		loads=[]
		loads2=[]

		for choice in choices:
			loads.append(sum([abs(customers[i].dem) for i in range(num) if choice[i]==True]))

		if full_load==True:
			choices=[choices[i] for i,load in enumerate(loads) if load==vehicle.cap]
			loads=[load for load in loads if load==vehicle.cap]
		else:
			choices=[choices[i] for i,load in enumerate(loads) if load<=vehicle.cap]
			loads=[load for load in loads if load<=vehicle.cap]

		for choice in choices:
			loads2.append(sum([abs(customers[i].dem2) for i in range(num) if choice[i]==True]))

		choices=[choices[i] for i,load in enumerate(loads2) if load<=vehicle.cap2]

	#dem2
	if vehicle.cap2!=0:
		choices2=list(product([True,False],repeat=num))
		loads=[]
		loads2=[]

		for choice in choices2:
			loads2.append(sum([abs(customers[i].dem2) for i in range(num) if choice[i]==True]))

		if full_load==True:
			choices2=[choices2[i] for i,load in enumerate(loads2) if load==vehicle.cap2]
			loads2=[load for load in loads2 if load==vehicle.cap2]
		else:
			choices2=[choices2[i] for i,load in enumerate(loads2) if load<=vehicle.cap2]
			loads2=[load for load in loads2 if load<=vehicle.cap2]

		for choice in choices2:
			loads.append(sum([abs(customers[i].dem) for i in range(num) if choice[i]==True]))

		choices2=[choices2[i] for i,load in enumerate(loads) if load<=vehicle.cap]

	#複数ある場合は積載率の高いものを採用する
	max_load_rate=-1
	best_choice=None
	
	if vehicle.cap!=0 and vehicle.cap2!=0:
		for choice in sorted(set(choices+choices2),key=(choices+choices2).index):
			if full_load==True:
				if sum([abs(customers[i].dem) for i in range(num) if choice[i]==True])==vehicle.cap and sum([abs(customers[i].dem2) for i in range(num) if choice[i]==True])/vehicle.cap2>max_load_rate:
					best_choice=choice
					max_load_rate=sum([abs(customers[i].dem2) for i in range(num) if choice[i]==True])/vehicle.cap2
				elif sum([abs(customers[i].dem2) for i in range(num) if choice[i]==True])==vehicle.cap2 and sum([abs(customers[i].dem) for i in range(num) if choice[i]==True])/vehicle.cap>max_load_rate:
					best_choice=choice
					max_load_rate=sum([abs(customers[i].dem) for i in range(num) if choice[i]==True])/vehicle.cap
			else:
				if sum([abs(customers[i].dem) for i in range(num) if choice[i]==True])<=vehicle.cap and sum([abs(customers[i].dem2) for i in range(num) if choice[i]==True])/vehicle.cap2>max_load_rate:
					best_choice=choice
					max_load_rate=sum([abs(customers[i].dem2) for i in range(num) if choice[i]==True])/vehicle.cap2
				elif sum([abs(customers[i].dem2) for i in range(num) if choice[i]==True])<=vehicle.cap2 and sum([abs(customers[i].dem) for i in range(num) if choice[i]==True])/vehicle.cap>max_load_rate:
					best_choice=choice
					max_load_rate=sum([abs(customers[i].dem) for i in range(num) if choice[i]==True])/vehicle.cap
	elif vehicle.cap!=0:
		if choices!=[]:
			best_choice=choices[0]
	elif vehicle.cap2!=0:
		if choices2!=[]:
			best_choice=choices2[0]
	
	#customersを更新
	if best_choice:
		for i,c in enumerate(customers[:]):
			if best_choice[i]==False:
				customers.remove(c)
	else:
		for c in customers[:]:
			customers.remove(c)


##20180904
def skvcheck(vlist,vehs,v1,vopskill,vdrskill,lowertime,uppertime,customers,argvs):
	skvcheck = False
	v1.opskill = vopskill
	v1.drskill = vdrskill

	for i in range(len(vlist)):
		for v in vehs:
			if v.vehno == vlist[i][0] and v.direct_flag==False:
				v.opskill=vlist[i][1]
				v.drskill=vlist[i][2]
				v.update_arrtime_tw(argvs)
				break

	if argvs.break_flag:
		management_ttable = t_dcopy(argvs.management_ttable)
		management_dtable = t_dcopy(argvs.management_dtable)
		management_xtable = t_dcopy(argvs.management_xtable)
		management_etable = t_dcopy(argvs.management_etable)
		t_route = r_backup(vehs)

		v1 = insert_breakspot(v1.takebreak, None, customers, v1, vehs, argvs, 0)

		if v1 == None:
			argvs.management_ttable = t_dcopy(management_ttable)
			argvs.management_dtable = t_dcopy(management_dtable)
			argvs.management_xtable = t_dcopy(management_xtable)
			argvs.management_etable = t_dcopy(management_etable)
			vehs = r_restore(vehs, t_route, argvs)

			return skvcheck

	if len([c for c in v1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1:
		depo_idx=[j for j,c in enumerate(v1.route[:-1]) if c.custno=="0"]+[len(v1.route)-1]
		servt_dict={}
		for k in range(len(depo_idx)-1):
			servt_dict[v1.route[depo_idx[k]]]=0
			servt=0
			for j in range(depo_idx[k]+1,depo_idx[k+1]):
				if v1.route[j].requestType=="DELIVERY" and v1.route[j].custno[0]!='b':
					servt+=v1.route[j].depotservt
			if v1.route[depo_idx[k]+1].custno!="0":
				servt_dict[v1.route[depo_idx[k]]]+=servt+v1.depotservt
			else:
				servt_dict[v1.route[depo_idx[k]]]+=servt
		#集荷時間
		servt_dict[v1.route[len(v1.route)-1]]=0
		for k in range(1,len(depo_idx)):
			servt=0
			for j in range(depo_idx[k-1]+1,depo_idx[k]):
				if v1.route[j].requestType=="PICKUP":
					servt+=v1.route[j].depotservt
			servt_dict[v1.route[depo_idx[k]]]+=servt

		load=[0 for c in v1.route]
		load2=[0 for c in v1.route]
		for i in range(len(v1.route)-1):
			if i in depo_idx:
				for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
					if v1.route[j].requestType=="DELIVERY":
						if v1.route[j].custno[0] != "b":
							load[i]+=v1.route[j].dem
							load2[i]+=v1.route[j].dem2
			else:
				if v1.route[i].custno[0] != "b":
					if v1.route[i].requestType=="DELIVERY":
						load[i]=load[i-1]-v1.route[i].dem
						load2[i]=load2[i-1]-v1.route[i].dem2
					else:
						load[i]=load[i-1]+v1.route[i].dem
						load2[i]=load2[i-1]+v1.route[i].dem2

		for i in reversed(range(len(load))):
			if i in depo_idx and i+1 in depo_idx:
				load[i]=load[i+1]
				load2[i]=load2[i+1]

		load=[i if i>1e-9 else 0 for i in load] #誤差対策
		load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

		no_park_idx=[]
		for c in v1.route[depo_idx[0]+1:depo_idx[1]]:
			if c.requestType=="DELIVERY":
				break
		else:
			if load[0]==0 and load2[0]==0:
				no_park_idx.append(0)
		
		for i in range(1,len(depo_idx)-1):
			if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
				for c in v1.route[depo_idx[i]+1:depo_idx[i+1]]:
					if c.requestType=="DELIVERY":
						break
				else:
					if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
						no_park_idx.append(depo_idx[i])
		if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
			no_park_idx.append(depo_idx[-1])
			

		v1.arr = [0 for r in v1.route]
		v1.st = [0 for r in v1.route]
		v1.lv = [0 for r in v1.route]
		parkt_time_flag = get_parkt_time_flag(v1.route)

		if v1.delay_arr==[]:
			v1.arr[0] = v1.starthour
		else:
			v1.arr[0]=v1.delay_arr[0]
		from_c,to_c = v1.route[0],v1.route[1]
		if not 0 in no_park_idx:
			v1.st[0] = max(v1.arr[0]+v1.route[0].parkt_arrive,v1.route[0].ready_fs) 
		else:
			v1.st[0] = max(v1.arr[0],v1.route[0].ready_fs) 
		
		v1.lv[0] = v1.st[0]+servt_dict[v1.route[0]]*v1.opskill
		if not 0 in no_park_idx:
			v1.lv[0]+=v1.route[0].parkt_open
			v1.st[0]+=v1.route[0].parkt_open
		if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.st[0] , v1.route[0].due_fs)>0:
			return skvcheck

		if argvs.lastc_flag:
			for i in reversed(range(0,len(v1.route))):
				if v1.route[i].custno=="0" or v1.route[i].custno[0]=="b" or v1.route[i].custno[0]=="e" or i==len(v1.route)-1:
					last_idx=i
				else:
					break

		if argvs.lastc_flag:
			for i in range(1,last_idx):
				from_c,to_c = v1.route[i-1],v1.route[i]
				ttable = get_ttable(v1.vtype, v1.lv[i-1], argvs.management_ttable)
				if from_c.spotid != '' and to_c.spotid != '':
					v1.arr[i] = v1.lv[i-1]+travel_time(from_c,to_c,ttable)*v1.drskill #休憩スポット以外の移動
				else:
					v1.arr[i] = v1.lv[i-1]+travel_time(from_c,to_c,ttable) #休憩スポットが絡む移動はスキルは掛けない
				# v1.arr[i] = round(v1.arr[i],4)
				if not i in no_park_idx and parkt_time_flag[i]:
					v1.st[i] = max(v1.arr[i]+to_c.parkt_arrive,v1.route[i].ready_fs)
				else:
					v1.st[i] = max(v1.arr[i],v1.route[i].ready_fs)
				
				if to_c in servt_dict:
					v1.lv[i] = v1.st[i]+servt_dict[to_c]*v1.opskill #デポ
				else:
					if v1.route[i].custno[0] != 'b':
						v1.lv[i] = v1.st[i]+to_c.servt*v1.opskill #デポ以外、休憩スポット以外
					else:
						v1.lv[i] = v1.st[i]+to_c.servt #休憩スポットはスキルは掛けない
				if not i in no_park_idx and parkt_time_flag[i]:
					v1.lv[i]+=to_c.parkt_open
					v1.st[i]+=to_c.parkt_open
				if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.st[i] , v1.route[i].due_fs)>0:
					return skvcheck
			if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.lv[last_idx-1] , v1.endhour)>0:
				return skvcheck
		else:
			for i in range(1,len(v1.arr)):
				from_c,to_c = v1.route[i-1],v1.route[i]
				ttable = get_ttable(v1.vtype, v1.lv[i-1], argvs.management_ttable)
				if from_c.spotid != '' and to_c.spotid != '':
					v1.arr[i] = v1.lv[i-1]+travel_time(from_c,to_c,ttable)*v1.drskill #休憩スポット以外の移動
				else:
					v1.arr[i] = v1.lv[i-1]+travel_time(from_c,to_c,ttable) #休憩スポットが絡む移動はスキルは掛けない
				# v1.arr[i] = round(v1.arr[i],4)
				if not i in no_park_idx and parkt_time_flag[i]:
					v1.st[i] = max(v1.arr[i]+to_c.parkt_arrive,v1.route[i].ready_fs)+to_c.parkt_open
				else:
					v1.st[i] = max(v1.arr[i],v1.route[i].ready_fs)
				
				if to_c in servt_dict:
					v1.lv[i] = v1.st[i]+servt_dict[to_c]*v1.opskill #デポ
				else:
					if v1.route[i].custno[0] != 'b':
						v1.lv[i] = v1.st[i]+to_c.servt*v1.opskill #デポ以外休憩スポット以外
					else:
						v1.lv[i] = v1.st[i]+to_c.servt #休憩スポットはスキルは関係ない
				if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.st[i] , v1.route[i].due_fs)>0:
					return skvcheck
			if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.lv[-1] , v1.endhour)>0:
				return skvcheck

		if argvs.lastc_flag:
			if compare_time(lowertime)>0:
				if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.lv[last_idx-1] , lowertime)<0:
					return skvcheck
		
			if compare_time(uppertime)>0:
				if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.lv[last_idx-1] , uppertime)>0:
					return skvcheck
		else:
			if compare_time(lowertime)>0:
				if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.lv[-1] , lowertime)<0:
					return skvcheck
		
			if compare_time(uppertime)>0:
				if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v1.lv[-1] , uppertime)>0:
					return skvcheck

		#APE違反なし→違反ありになる場合は採用しない
		if argvs.avetime_ape_flag==True and argvs.time_error==0:
			time_error=calc_avetime_APE(vehs,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
			if (argvs.timeLevelingPenaltyType=="hard" or argvs.timeLevelingPenaltyWeight>0) and time_error > 0:
				return skvcheck
		elif argvs.avetime_ae_flag==True and argvs.time_error==0:
			time_error=calc_avetime_AE(vehs,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
			if (argvs.timeLevelingPenaltyType=="hard" or argvs.timeLevelingPenaltyWeight>0) and time_error > 0:
				return skvcheck

		if argvs.avevisits_ape_flag==True and argvs.visits_error==0:
			visits_error=calc_avevisits_APE(vehs,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
			if (argvs.visitsLevelingPenaltyType=="hard" or argvs.visitsLevelingPenaltyWeight>0) and visits_error > 0:
				return skvcheck
		elif argvs.avevisits_ape_flag==True and argvs.visits_error==0:
			visits_error=calc_avevisits_AE(vehs,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
			if (argvs.visitsLevelingPenaltyType=="hard" or argvs.visitsLevelingPenaltyWeight>0) and visits_error > 0:
				return skvcheck

		if argvs.avedist_ape_flag==True and argvs.dist_error==0:
			dist_error=calc_avedist_APE(vehs,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
			if (argvs.distLevelingPenaltyType=="hard" or argvs.distLevelingPenaltyWeight>0) and dist_error > 0:
				return skvcheck
		elif argvs.avedist_ae_flag==True and argvs.dist_error==0:
			dist_error=calc_avedist_AE(vehs,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
			if (argvs.distLevelingPenaltyType=="hard" or argvs.distLevelingPenaltyWeight>0) and dist_error > 0:
				return skvcheck

	skvcheck = True
	return skvcheck

def exchange_cust_dtable(customers,vehicle1,vehicle2,pos1,pos2,pick_opt_flag1,pick_opt_flag2,index1,index2,route1,route2,argvs):
	if route1!=None or route2!=None:
		#休憩機能あり
		vehicle1.route = route1
		vehicle2.route = route2
		vehicle1.update_totalcost_dtable(argvs)
		vehicle2.update_totalcost_dtable(argvs)
	else:
		#休憩機能なし
		vehicle1.route[pos1],vehicle2.route[pos2]=vehicle2.route[pos2].additionalcust[index2],vehicle1.route[pos1].additionalcust[index1]
		vehicle1.update_totalcost_dtable(argvs)
		vehicle2.update_totalcost_dtable(argvs)

		#集荷最適化
		if argvs.bulkShipping_flag==False and pick_opt_flag1==True and vehicle1.route[-2].custno!="0" and vehicle1.route[-1].custno!="0":
			vehicle1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
		elif argvs.bulkShipping_flag==True and pick_opt_flag1==True and vehicle1.route[-2].customers[0].custno!="0" and vehicle1.route[-1].customers[0].custno!="0":
			depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
			depo.customers.append(copy.deepcopy(customers[0].customers[0]))
			depo.servt=customers[0].servt
			depo.dem=customers[0].dem
			depo.dem2=customers[0].dem2
			depo.reje_ve=customers[0].reje_ve
			depo.parkt_open=customers[0].parkt_open
			depo.parkt_arrive=customers[0].parkt_arrive
			depo.depotservt=customers[0].depotservt
			depo.additionalcust=[depo]
			depo.demdivideunit=customers[0].demdivideunit
			depo.requestType=customers[0].requestType
			depo.deny_unass=customers[0].deny_unass #未割り当て荷物

			vehicle1.insert_customer_at(-1,depo,argvs)
		elif (argvs.bulkShipping_flag==False and pick_opt_flag1==False and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0") or \
			(argvs.bulkShipping_flag==True and pick_opt_flag1==False and vehicle1.route[-2].customers[0].custno=="0" and vehicle1.route[-1].customers[0].custno!="0"):
			remove_customers_specified([vehicle1.route[-2]],vehicle1,argvs)

		if argvs.bulkShipping_flag==False and pick_opt_flag2==True and vehicle2.route[-2].custno!="0" and vehicle2.route[-1].custno!="0":
			vehicle2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
		elif argvs.bulkShipping_flag==True and pick_opt_flag2==True and vehicle2.route[-2].customers[0].custno!="0" and vehicle2.route[-1].customers[0].custno!="0":
			depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
			depo.customers.append(copy.deepcopy(customers[0].customers[0]))
			depo.servt=customers[0].servt
			depo.dem=customers[0].dem
			depo.dem2=customers[0].dem2
			depo.reje_ve=customers[0].reje_ve
			depo.parkt_open=customers[0].parkt_open
			depo.parkt_arrive=customers[0].parkt_arrive
			depo.depotservt=customers[0].depotservt
			depo.additionalcust=[depo]
			depo.demdivideunit=customers[0].demdivideunit
			depo.requestType=customers[0].requestType
			depo.deny_unass=customers[0].deny_unass #未割り当て荷物

			vehicle2.insert_customer_at(-1,depo,argvs)
		elif (argvs.bulkShipping_flag==False and pick_opt_flag2==False and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0") or \
			(argvs.bulkShipping_flag==True and pick_opt_flag2==False and vehicle2.route[-2].customers[0].custno=="0" and vehicle2.route[-1].customers[0].custno!="0"):
			remove_customers_specified([vehicle2.route[-2]],vehicle2,argvs)

def exchange_dtable(customers,vehicles,lastc_flag,ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag): #20180807
	sLogBuf = "\n"
	#exists=True
	exists=False
	improved_cnt=0

	if len(vehicles)<=1:
		return improved_cnt

	if len([(v1,v2,i1,i2) for v1,v2 in combinations(vehicles,2) \
		for i1,i2 in product(range(1,len(v1.route)),range(1,len(v2.route))) \
				if len([c for c in v1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and len([c for c in v2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and v1.direct_flag==False and v2.direct_flag==False])==0:
					#exists=False
					return improved_cnt
	#while(exists):
	while True:
		exists=False
		# #平準化高速化の為のソート
		# sorted_vehicles = vehicles[:]
		# if argvs.avedist_ape_flag or argvs.avedist_ae_flag:
		# 	derrs=[0 for v in sorted_vehicles]
		# 	if argvs.avedist_ape_flag:
		# 		derrs = calc_avedist_APE_list(sorted_vehicles, argvs.avedist_ape, argvs.lastc_flag)
		# 	else:
		# 		derrs = calc_avedist_AE_list(sorted_vehicles, argvs.avedist_ae, argvs.lastc_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, derrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# if argvs.avevisits_ape_flag or argvs.avevisits_ae_flag:
		# 	verrs=[0 for v in sorted_vehicles]
		# 	if argvs.avevisits_ape_flag:
		# 		verrs = calc_avevisits_APE_list(sorted_vehicles, argvs.avevisits_ape, argvs.bulkShipping_flag)
		# 	else:
		# 		verrs = calc_avevisits_AE_list(sorted_vehicles, argvs.avevisits_ae, argvs.bulkShipping_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, verrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# if argvs.avetime_ape_flag or argvs.avetime_ae_flag:
		# 	terrs=[0 for v in sorted_vehicles]
		# 	if argvs.avetime_ape_flag:
		# 		terrs = calc_avetime_APE_list(sorted_vehicles, argvs.avetime_ape, argvs.lastc_flag)
		# 	else:
		# 		terrs = calc_avetime_AE_list(sorted_vehicles, argvs.avetime_ae, argvs.lastc_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, terrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# for v1,v2 in combinations(sorted_vehicles,2):
		for v1,v2 in combinations(vehicles,2):
			if len([c for c in v1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and len([c for c in v2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and v1.direct_flag==False and v2.direct_flag==False:
				for i1,i2 in product(range(1,len(v1.route)),range(1,len(v2.route))):
					dtable_endtime=time.time() ##20190917
					##dtable_endtime=time.clock() ##20180807
					##20190903
					if argvs.outputstime > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
						sLogBuf += "output_middle exchange\n"
						outputs_middle(customers,vehicles,argvs)
						argvs.outputs_count+=1
					while True:
						if argvs.outputstime > 0.0 and (dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
							argvs.outputs_count+=1
						else:
							break
					##20190903
					if argvs.timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.timeout):  ##20180807
						sLogBuf += "exchange timeout!\n" #20180807
						break #20180807

					if argvs.delaystart2_flag==True and argvs.break_flag==False and i1<len(v1.route) and i2<len(v2.route) and (len(v1.route[i1].additionalcust)>1 or len(v2.route[i2].additionalcust)>1):
						delay_arr_list1=[[0 for i in range(len(v2.route[i2].additionalcust))] for j in range(len(v1.route[i1].additionalcust))]
						delay_arr_list2=[[0 for i in range(len(v2.route[i2].additionalcust))] for j in range(len(v1.route[i1].additionalcust))]

						tv1_route=v1.route[:]
						tv2_route=v2.route[:]
						for j in range(len(tv2_route[i2].additionalcust)):
							for i in range(len(tv1_route[i1].additionalcust)):
								v1.route[i1],v2.route[i2]=v2.route[i2].additionalcust[j],v1.route[i1].additionalcust[i]
								v1.update_totalcost_dtable(argvs)
								v2.update_totalcost_dtable(argvs)

								delay_arr_time([v1,v2],argvs)

								delay_arr_list1[i][j]=v1.delay_arr[0]
								delay_arr_list2[i][j]=v2.delay_arr[0]

								v1.route=tv1_route[:]
								v1.update_totalcost_dtable(argvs)
								v2.route=tv2_route[:]
								v2.update_totalcost_dtable(argvs)
					else:
						delay_arr_list1=[]
						delay_arr_list2=[]
					
					if lastc_flag==True:
						exists,atpen,aload,aload2,pick_opt_flag1,pick_opt_flag2,index1,index2,delay_flag,route1,route2,ttable,dtable,etable,xtable,t_route=exchange_improved_lastc_dtable(customers,v1,v2,i1,i2,vehicles,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list1,delay_arr_list2)
					else:
						exists,atpen,aload,aload2,pick_opt_flag1,pick_opt_flag2,index1,index2,delay_flag,route1,route2,ttable,dtable,etable,xtable,t_route=exchange_improved_todepot_dtable(customers,v1,v2,i1,i2,vehicles,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list1,delay_arr_list2)
					if(exists):
						##20180904
						tv1_route=v1.route[:]
						tv2_route=v2.route[:]
						if route1!=None:
							t_ttable = t_dcopy(argvs.management_ttable)
							t_dtable = t_dcopy(argvs.management_dtable)
							t_etable = t_dcopy(argvs.management_etable)
							t_xtable = t_dcopy(argvs.management_xtable)
							argvs.management_ttable = t_dcopy(ttable)
							argvs.management_dtable = t_dcopy(dtable)
							argvs.management_etable = t_dcopy(etable)
							argvs.management_xtable = t_dcopy(xtable)
							vehicles = r_restore(vehicles, t_route, argvs)

						exchange_cust_dtable(customers,v1,v2,i1,i2,pick_opt_flag1,pick_opt_flag2,index1,index2,route1,route2,argvs)

						if argvs.delaystart2_flag==True and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
							delay_arr_time2(vehicles,[v1,v2],argvs)

						depo_idx1=[j for j,c in enumerate(v1.route[:-1]) if c.custno=="0"]+[len(v1.route)-1]
						servt_dict1={}
						for k in range(len(depo_idx1)-1):
							servt_dict1[v1.route[depo_idx1[k]]]=0
							servt=0
							for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
								if v1.route[j].requestType=="DELIVERY" and v1.route[j].custno!=v1.route[j-1].custno:
									servt+=v1.route[j].depotservt
							if v1.route[depo_idx1[k]+1].custno!="0":
								servt_dict1[v1.route[depo_idx1[k]]]+=servt+v1.depotservt
							else:
								servt_dict1[v1.route[depo_idx1[k]]]+=servt
						#集荷時間
						servt_dict1[v1.route[len(v1.route)-1]]=0
						for k in range(1,len(depo_idx1)):
							servt=0
							for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
								if (v1.route[j].requestType=="PICKUP") and v1.route[j].custno!=v1.route[j-1].custno:
									servt+=v1.route[j].depotservt
							servt_dict1[v1.route[depo_idx1[k]]]+=servt

						load=[0 for c in v1.route]
						load2=[0 for c in v1.route]
						for i in range(len(v1.route)-1):
							if i in depo_idx1:
								for j in range(i+1,depo_idx1[depo_idx1.index(i)+1]):
									if v1.route[j].requestType=="DELIVERY":
										if v1.route[j].custno[0] != "b":
											load[i]+=v1.route[j].dem
											load2[i]+=v1.route[j].dem2
							else:
								if v1.route[i].custno[0] != "b":
									if v1.route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-v1.route[i].dem
										load2[i]=load2[i-1]-v1.route[i].dem2
									else:
										load[i]=load[i-1]+v1.route[i].dem
										load2[i]=load2[i-1]+v1.route[i].dem2

						for i in reversed(range(len(load))):
							if i in depo_idx1 and i+1 in depo_idx1:
								load[i]=load[i+1]
								load2[i]=load2[i+1]
						
						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx1=[]
						for c in v1.route[depo_idx1[0]+1:depo_idx1[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx1.append(0)
						
						for i in range(1,len(depo_idx1)-1):
							if load[depo_idx1[i]-1]==0 and load2[depo_idx1[i]-1]==0:
								for c in v1.route[depo_idx1[i]+1:depo_idx1[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[depo_idx1[i]]==0 and load2[depo_idx1[i]]==0:
										no_park_idx1.append(depo_idx1[i])
						if load[depo_idx1[-1]-1]==0 and load2[depo_idx1[-1]-1]==0:
							no_park_idx1.append(depo_idx1[-1])

						pick_opt_flag1=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(v1.route)-1)):
								if argvs.bulkShipping_flag==True:
									if v1.route[i].customers[0].custno!="0":
										if v1.route[i].customers[0].custno[0]!="b":
											non_depo=True
											if v1.route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break
								else:
									if v1.route[i].custno!="0":
										if v1.route[i].custno[0]!="b":
											non_depo=True
											if v1.route[i].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break

						depo_idx2=[j for j,c in enumerate(v2.route[:-1]) if c.custno=="0"]+[len(v2.route)-1]
						servt_dict2={}
						for k in range(len(depo_idx2)-1):
							servt_dict2[v2.route[depo_idx2[k]]]=0
							servt=0
							for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
								if v2.route[j].requestType=="DELIVERY" and v2.route[j].custno!=v2.route[j-1].custno:
									servt+=v2.route[j].depotservt
							if v2.route[depo_idx2[k]+1].custno!="0":
								servt_dict2[v2.route[depo_idx2[k]]]+=servt+v2.depotservt
							else:
								servt_dict2[v2.route[depo_idx2[k]]]+=servt
						#集荷時間
						servt_dict2[v2.route[len(v2.route)-1]]=0
						for k in range(1,len(depo_idx2)):
							servt=0
							for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
								if (v2.route[j].requestType=="PICKUP") and v2.route[j].custno!=v2.route[j-1].custno:
									servt+=v2.route[j].depotservt
							servt_dict2[v2.route[depo_idx2[k]]]+=servt

						load=[0 for c in v2.route]
						load2=[0 for c in v2.route]
						for i in range(len(v2.route)-1):
							if i in depo_idx2:
								for j in range(i+1,depo_idx2[depo_idx2.index(i)+1]):
									if v2.route[j].requestType=="DELIVERY":
										if v2.route[j].custno[0] != "b":
											load[i]+=v2.route[j].dem
											load2[i]+=v2.route[j].dem2
							else:
								if v2.route[i].custno[0] != "b":
									if v2.route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-v2.route[i].dem
										load2[i]=load2[i-1]-v2.route[i].dem2
									else:
										load[i]=load[i-1]+v2.route[i].dem
										load2[i]=load2[i-1]+v2.route[i].dem2

						for i in reversed(range(len(load))):
							if i in depo_idx2 and i+1 in depo_idx2:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx2=[]
						for c in v2.route[depo_idx2[0]+1:depo_idx2[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx2.append(0)
						
						for i in range(1,len(depo_idx2)-1):
							if load[depo_idx2[i]-1]==0 and load2[depo_idx2[i]-1]==0:
								for c in v1.route[depo_idx2[i]+1:depo_idx2[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[depo_idx2[i]]==0 and load2[depo_idx2[i]]==0:
										no_park_idx2.append(depo_idx2[i])
						if load[depo_idx2[-1]-1]==0 and load2[depo_idx2[-1]-1]==0:
							no_park_idx2.append(depo_idx2[-1])

						pick_opt_flag2=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(v2.route)-1)):
								if argvs.bulkShipping_flag==True:
									if v2.route[i].customers[0].custno!="0":
										if v2.route[i].customers[0].custno[0]!="b":
											non_depo=True
											if v2.route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break
								else:
									if v2.route[i].custno!="0":
										if v2.route[i].custno[0]!="b":
											non_depo=True
											if v2.route[i].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break


						if check_impassability(customers,v1,v1.lv[0],1,servt_dict1,len(v1.route),no_park_idx1,pick_opt_flag1,argvs)[0]==False or check_impassability(customers,v2,v2.lv[0],1,servt_dict2,len(v2.route),no_park_idx2,pick_opt_flag2,argvs)[0]==False:
							argvs.management_ttable = t_ttable
							argvs.management_dtable = t_dtable
							argvs.management_etable = t_etable
							argvs.management_xtable = t_xtable
							v1.route=tv1_route[:]
							v1.update_totalcost_dtable(argvs)
							v2.route=tv2_route[:]
							v2.update_totalcost_dtable(argvs)
							continue
						improved_cnt=improved_cnt+1
						
						#現在(=最新)のatpenとaloadとAPEを保存する
						if argvs.lastc_flag:
							for i in reversed(range(0,len(v1.route))):
								if v1.route[i].custno=="0" or v1.route[i].custno[0]=="b" or v1.route[i].custno[0]=="e" or i==len(v1.route)-1:
									last_idx=i
								else:
									break
							v1.time_pen=sum([max(0.0,v1.st[i]-v1.route[i].due_fs) for i in range(1,last_idx) if v1.route[i].custno!=v1.route[i-1].custno])+max(0.0,v1.lv[last_idx-1]-v1.endhour)
						else:
							v1.time_pen=sum([max(0.0,v1.st[i]-v1.route[i].due_fs) for i in range(1,len(v1.route)) if v1.route[i].custno!=v1.route[i-1].custno])+max(0.0,v1.lv[-1]-v1.endhour)

						if argvs.pickup_flag==True:
							max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v1.route,v1)
						else:
							max_load_pen,max_load_pen2=0,0

						depo_idx1=[j for j,c in enumerate(v1.route[:-1]) if c.custno=="0"]+[len(v1.route)-1]

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx1)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
								if v1.route[k].requestType=="DELIVERY":
									if v1.route[k].custno[0] != "b":
										load_onbrd+=v1.route[k].dem
										load_onbrd2+=v1.route[k].dem2

							load_pen+=max(load_onbrd-v1.cap,0)
							load_pen2+=max(load_onbrd2-v1.cap2,0)

						v1.load_pen =load_pen+max_load_pen
						v1.load_pen2 = load_pen2+max_load_pen2
				
						if argvs.lastc_flag:
							for i in reversed(range(0,len(v2.route))):
								if v2.route[i].custno=="0" or v2.route[i].custno[0]=="b" or v2.route[i].custno[0]=="e" or i==len(v2.route)-1:
									last_idx=i
								else:
									break
							v2.time_pen=sum([max(0.0,v2.st[i]-v2.route[i].due_fs) for i in range(1,last_idx) if v2.route[i].custno!=v2.route[i-1].custno])+max(0.0,v2.lv[last_idx-1]-v2.endhour)
						else:
							v2.time_pen=sum([max(0.0,v2.st[i]-v2.route[i].due_fs) for i in range(1,len(v2.route)) if v2.route[i].custno!=v2.route[i-1].custno])+max(0.0,v2.lv[-1]-v2.endhour)

						if argvs.pickup_flag==True:
							max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v2.route,v2)
						else:
							max_load_pen,max_load_pen2=0,0

						depo_idx2=[j for j,c in enumerate(v2.route[:-1]) if c.custno=="0"]+[len(v2.route)-1]

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx2)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
								if v2.route[k].requestType=="DELIVERY":
									if v2.route[k].custno[0] != "b":
										load_onbrd+=v2.route[k].dem
										load_onbrd2+=v2.route[k].dem2

							load_pen+=max(load_onbrd-v2.cap,0)
							load_pen2+=max(load_onbrd2-v2.cap2,0)

						v2.load_pen =load_pen+max_load_pen
						v2.load_pen2 = load_pen2+max_load_pen2

						argvs.atpen=sum([v.time_pen for v in vehicles])
						argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehicles])
						if argvs.avetime_ape_flag==True:
							argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

						if argvs.avevisits_ape_flag==True:
							argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

						if argvs.avedist_ape_flag==True:
							argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

						#違反なしのrouteを保存する
						backup_route(vehicles, argvs)

						if lastc_flag==True:
							tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
						else:
							tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
						#result.output_improved_solution(customers,vehicles,tcost,lastc_flag) #daic
						break
				else:
					continue
				break
			
		if(exists==False):
			break

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return improved_cnt

# def exchange_dtable_mp(customers,vehicles,lastc_flag,ls_d_starttime,timeout,argvs): #20190917
# 	sLogBuf = "\n"
# 	#exists=True
# 	exists=False
# 	improved_cnt=0

# 	if len(vehicles)<=1:
# 		return improved_cnt,vehicles

# 	if len([(v1,v2,i1,i2) for v1 in vehicles for v2 in vehicles \
# 				for i1 in range(1,len(v1.route)) for i2 in range(1,len(v2.route))
# 				if v1.vehno!=v2.vehno and len(v1.route)>=3 and len(v2.route)>=3])==0:
# 					#exists=False
# 					return improved_cnt,vehicles
# 	#while(exists):
# 	while True:
# 		exists=False
# 		for v1,v2,i1,i2 in [(v1,v2,i1,i2) for v1 in vehicles for v2 in vehicles \
# 					for i1 in range(1,len(v1.route)) for i2 in range(1,len(v2.route)) \
# 					if v1.vehno!=v2.vehno and len(v1.route)>=3 and len(v2.route)>=3]:

# 			dtable_endtime=time.time() ##20190917
# 			##dtable_endtime=time.clock() ##20180807
# 			if timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > timeout):  ##20180807
# 				sLogBuf += "exchange_mp timeout!\n" #20180807
# 				break #20180807
			
# 			if lastc_flag==True:
# 				exists,atpen,aload,aload2=exchange_improved_lastc_dtable(customers,v1,v2,i1,i2,argvs)
# 			else:
# 				exists,atpen,aload,aload2=exchange_improved_todepot_dtable(customers,v1,v2,i1,i2,argvs)
# 			if(exists):
# 				##20180904
# 				improved_cnt=improved_cnt+1
# 				exchange_cust_dtable(v1,v2,i1,i2,argvs)

# 				#現在(=最新)のatpenとaloadとAPEを保存する
# 				argvs.atpen = atpen
# 				argvs.aload = aload
# 				v1.time_pen = atpen
# 				v1.load_pen = aload
# 				v2.time_pen = atpen
# 				v2.load_pen = aload
# 				if argvs.avetime_ape_flag==True:
# 					argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag)
# 				elif argvs.avetime_ae_flag==True:
# 					argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag)

# 				if argvs.avevisits_ape_flag==True:
# 					argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag)
# 				elif argvs.avevisits_ae_flag==True:
# 					argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag)

# 				#違反なしのrouteを保存する
# 				backup_route(vehicles, argvs)

# 				if lastc_flag==True:
# 					tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
# 				else:
# 					tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
# 				#result.output_improved_solution(customers,vehicles,tcost,lastc_flag)
# 				break
					
# 		if(exists==False):
# 			break
	
# 	if sLogBuf != "\n":
# 		if rank==0:
# 			logging.log(logging.INFO,sLogBuf)

# 	return improved_cnt,vehicles

# 顧客到着時刻(vehicles.arr)計算
# def calc_vehicle_arr_route(route, vehicle, drskill, opskill, chg_batt_dict):
# 	#vehicleの改善後arr計算
# 	if len(route)>=2:
# 		arr=[0 for r in route]
# 		st=[0 for r in route]
# 		lv=[0 for r in route]
# 		slack_t=[0 for r in route]

# 		arr[0]=0
# 		from_c,to_c=route[0],route[1]
# 		st[0]=max(arr[0],route[0].ready_fs)
# 		lv[0]=st[0]
# 		for i in range(1,len(arr)):
# 			from_c,to_c=route[i-1],route[i]
# 			ttable1 = get_ttable(vehicle.vehno, lv[i-1], argvs.management_ttable)

# 			arr[i]=lv[i-1]+ttable1[from_c.spotno][to_c.spotno]*drskill ##20180904
# 			arr[i]=round(arr[i],4)
# 			st[i]=max(arr[i],route[i].ready_fs)
# 			lv[i]=st[i]+to_c.servt*opskill ##20180904
# 			if route[i] in chg_batt_dict:
# 				lv[i]+=chg_batt_dict[route[i]]/route[i].e_rate
# 		slack_t[-1]=route[-1].due_fs-arr[-1]
# 		for i in reversed(range(0,len(arr)-1)):
# 			slack_t[i]=min(route[i].due_fs-st[i],slack_t[i+1])
# 	return arr, route


#def exchange_improved_todepot_dtable(vehicle1,vehicle2,pos1,pos2,argvs):
def exchange_improved_todepot_dtable(customers,vehicle1,vehicle2,pos1,pos2,vehicles,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list1,delay_arr_list2): #20200730
	ires=False
	index1,index2=0,0
	delay_lcnt_best=0
	pick_opt_flag1_best,pick_opt_flag2_best=False,False
	cdiff_best=0
	route1_best=None
	route2_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if vehicle1.route[pos1].custno=="0" or vehicle2.route[pos2].custno=="0": #デポが含まれるならスキップ
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	if vehicle1.route[pos1].custno[0]=="b" or vehicle2.route[pos2].custno[0]=="b": #休憩スポットが含まれるならスキップ
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	##if(pos1<=0 or pos2<=0 or pos1+1>=len(vehicle1.route)-1 or pos2+1>=len(vehicle2.route)-1): ##1st route mo taisyo ni suru
	if(pos1<=0 or pos2<=0 or pos1+1>len(vehicle1.route)-1 or pos2+1>len(vehicle2.route)-1): ##1st route mo taisyo ni suru
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	#変更後にvehnoがreje_veに含まれていたらFalseを返す
	if vehicle1.vehno in vehicle2.route[pos2].reje_ve or vehicle2.vehno in vehicle1.route[pos1].reje_ve:
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	if free_or_additive(vehicle1.route[pos1],vehicle1,vehicles,argvs)=="additive" or free_or_additive(vehicle2.route[pos2],vehicle2,vehicles,argvs)=="additive": #条件2が含まれるならスキップ
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	depo_idx1=[j for j,c in enumerate(vehicle1.route[:-1]) if c.custno=="0"]+[len(vehicle1.route)-1]
	for i in range(len(depo_idx1)-1):
		if depo_idx1[i]<pos1 and pos1<=depo_idx1[i+1]:
			start_idx1=depo_idx1[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and (delay_arr_list1==[] or delay_arr_list2==[]):
		start_idx1=pos1-1
	if (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.break_flag==True:
		start_idx1=0

	depo_idx2=[j for j,c in enumerate(vehicle2.route[:-1]) if c.custno=="0"]+[len(vehicle2.route)-1]
	for i in range(len(depo_idx2)-1):
		if depo_idx2[i]<pos2 and pos2<=depo_idx2[i+1]:
			start_idx2=depo_idx2[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and (delay_arr_list1==[] or delay_arr_list2==[]):
		start_idx2=pos2-1
	if (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.break_flag==True:
		start_idx2=0

	n1,n2=len(vehicle1.route),len(vehicle2.route)
	bdist,adist,btpen,atpen,bpower,apower,bexp,aexp,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0

	for i in range(start_idx1,n1):
		if i==0 or (argvs.bulkShipping_flag==False and (vehicle1.route[i-1].custno!=vehicle1.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (vehicle1.route[i-1].customers[0].custno!=vehicle1.route[i].customers[0].custno)):
			btpen+=max(0.0,vehicle1.st[i]-vehicle1.route[i].due_fs)
	btpen+=max(0.0,vehicle1.lv[n1-1]-vehicle1.endhour)

	for i in range(start_idx2,n2):
		if i==0 or (argvs.bulkShipping_flag==False and (vehicle2.route[i-1].custno!=vehicle2.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (vehicle2.route[i-1].customers[0].custno!=vehicle2.route[i].customers[0].custno)):
			btpen+=max(0.0,vehicle2.st[i]-vehicle2.route[i].due_fs)
	btpen+=max(0.0,vehicle2.lv[n2-1]-vehicle2.endhour)

	##kaizen mae no final arrive time
	bv1final_t=vehicle1.lv[n1-1]
	bv2final_t=vehicle2.lv[n2-1]
	##

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True:
		if vehicle1.reserved_v_flag==True:
			bunass = len([c for c in vehicle1.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
		if vehicle2.reserved_v_flag==True:
			bunass += len([c for c in vehicle2.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	#集荷最適化(簡易アルゴリズム判定)
	pick_nondepo_flag=False
	if vehicle1.route[-1].custno!="0" or vehicle2.route[-1].custno!="0":
		for c in vehicle1.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break
		for c in vehicle2.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break

	if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist1=calc_dist(vehicle1,start_idx1+1,len(vehicle1.route),argvs)
		bdist2=calc_dist(vehicle2,start_idx2+1,len(vehicle2.route),argvs)
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=calc_power(vehicle1,start_idx1+1,len(vehicle1.route),argvs) \
			+ calc_power(vehicle2,start_idx2+1,len(vehicle2.route),argvs)
		if argvs.management_xtable:
			bexp=calc_exp(vehicle1,start_idx1+1,len(vehicle1.route),argvs) \
			+ calc_exp(vehicle2,start_idx2+1,len(vehicle2.route),argvs)
	else:
		bdist1=get_dtable(vehicle1.vtype, vehicle1.lv[pos1-1], argvs.management_dtable)[vehicle1.route[pos1-1].spotno][vehicle1.route[pos1].spotno] \
			+get_dtable(vehicle1.vtype, vehicle1.lv[pos1], argvs.management_dtable)[vehicle1.route[pos1].spotno][vehicle1.route[pos1+1].spotno]
		bdist2=get_dtable(vehicle2.vtype, vehicle2.lv[pos2-1], argvs.management_dtable)[vehicle2.route[pos2-1].spotno][vehicle2.route[pos2].spotno] \
			+get_dtable(vehicle2.vtype, vehicle2.lv[pos2-1], argvs.management_dtable)[vehicle2.route[pos2].spotno][vehicle2.route[pos2+1].spotno]
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=get_etable(vehicle1.vtype, vehicle1.etype, vehicle1.lv[pos1-1], argvs.management_etable)[vehicle1.route[pos1-1].spotno][vehicle1.route[pos1].spotno] \
			+get_etable(vehicle1.vtype, vehicle1.etype, vehicle1.lv[pos1], argvs.management_etable)[vehicle1.route[pos1].spotno][vehicle1.route[pos1+1].spotno] \
			+get_etable(vehicle2.vtype, vehicle2.etype, vehicle2.lv[pos2-1], argvs.management_etable)[vehicle2.route[pos2-1].spotno][vehicle2.route[pos2].spotno] \
			+get_etable(vehicle2.vtype, vehicle2.etype, vehicle2.lv[pos2-1], argvs.management_etable)[vehicle2.route[pos2].spotno][vehicle2.route[pos2+1].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(vehicle1.vtype, vehicle1.lv[pos1-1], argvs.management_xtable)[vehicle1.route[pos1-1].spotno][vehicle1.route[pos1].spotno] \
			+get_xtable(vehicle1.vtype, vehicle1.lv[pos1], argvs.management_xtable)[vehicle1.route[pos1].spotno][vehicle1.route[pos1+1].spotno] \
			+get_xtable(vehicle2.vtype, vehicle2.lv[pos2-1], argvs.management_xtable)[vehicle2.route[pos2-1].spotno][vehicle2.route[pos2].spotno] \
			+get_xtable(vehicle2.vtype, vehicle2.lv[pos2-1], argvs.management_xtable)[vehicle2.route[pos2].spotno][vehicle2.route[pos2+1].spotno]

	bload = vehicle1.load_pen+vehicle2.load_pen
	bload2 = vehicle1.load_pen2+vehicle2.load_pen2

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = vehicle1.lv[-1] + vehicle2.lv[-1]
	else:
		btime=0.0

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error


	if delay_arr_list1!=[] and delay_arr_list2!=[]:
		delay_lcnt=2
	else:
		delay_lcnt=1

	takebreak_list1 = [[]]
	takebreak_list2 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in vehicle1.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト
		takebreak_list2 = [*map(list, product(*[[c for c in t.additionalcust] for t in vehicle2.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for i1 in range(len(vehicle1.route[pos1].additionalcust)):
		if free_or_additive(vehicle1.route[pos1],vehicle1,vehicles,argvs)=="additive" and i1!=0:
			continue
		for i2 in range(len(vehicle2.route[pos2].additionalcust)):
			if free_or_additive(vehicle2.route[pos2],vehicle2,vehicles,argvs)=="additive" and i2!=0:
				continue
			for i3 in range(len(takebreak_list1)):
				for i4 in range(len(takebreak_list2)):
					for lcnt in range(delay_lcnt):
						adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
						btpen_temp=btpen
						atpen_temp=0
						#変更後に訪問数上限を超えていたらFalseを返す
						#v1_spotid=[c.spotid for c in vehicle1.route]
						#v2_spotid=[c.spotid for c in vehicle2.route]
						#v1_spotid[pos1],v2_spotid[pos2]=vehicle2.route[pos2].additionalcust[i2].spotid,vehicle1.route[pos1].additionalcust[i1].spotid
						#visitnum1=len([len([*group]) for i,group in groupby(v1_spotid[1:-1])])-len([c for i,c in enumerate(v1_spotid[1:-1]) if c=="0" and (v1_spotid[i]!="0" or i==0)])
						#visitnum1=calc_visitnum(v1_spotid)
						#visitnum2=len([len([*group]) for i,group in groupby(v2_spotid[1:-1])])-len([c for i,c in enumerate(v2_spotid[1:-1]) if c=="0" and (v2_spotid[i]!="0" or i==0)])
						#visitnum2=calc_visitnum(v2_spotid)
						#if (vehicle1.maxvisit>0 and visitnum1>vehicle1.maxvisit) or (vehicle2.maxvisit>0 and visitnum2>vehicle2.maxvisit):
						#	continue
						
						skv1_route,skv2_route = vehicle1.route[:],vehicle2.route[:]             # ルート全体をコピー
						skv1_route[pos1],skv2_route[pos2] = skv2_route[pos2].additionalcust[i2],skv1_route[pos1].additionalcust[i1]	# ルート入替

						visitnum1=calc_visitnum(skv1_route)
						visitnum2=calc_visitnum(skv2_route)
						if (vehicle1.maxvisit>0 and visitnum1>vehicle1.maxvisit) or (vehicle2.maxvisit>0 and visitnum2>vehicle2.maxvisit):
							continue

						depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						servt_dict1={}
						for k in range(len(depo_idx1)-1):
							servt_dict1[skv1_route[depo_idx1[k]]]=0
							servt=0
							for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
								if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno:
									servt+=skv1_route[j].depotservt
							if skv1_route[depo_idx1[k]+1].custno[0]!="b":
								if skv1_route[depo_idx1[k]+1].custno!="0":
									servt_dict1[skv1_route[depo_idx1[k]]]+=servt+vehicle1.depotservt
								else:
									servt_dict1[skv1_route[depo_idx1[k]]]+=servt
						#集荷時間
						servt_dict1[skv1_route[len(skv1_route)-1]]=0
						for k in range(1,len(depo_idx1)):
							servt=0
							for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
								if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
									if skv1_route[j].custno[0]!="b":
										servt+=skv1_route[j].depotservt
							servt_dict1[skv1_route[depo_idx1[k]]]+=servt

						

						depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
						servt_dict2={}
						for k in range(len(depo_idx2)-1):
							servt_dict2[skv2_route[depo_idx2[k]]]=0
							servt=0
							for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
								if skv2_route[j].requestType=="DELIVERY" and skv2_route[j].custno!=skv2_route[j-1].custno:
									servt+=skv2_route[j].depotservt
							if skv2_route[depo_idx2[k]+1].custno[0]!="b":
								if skv2_route[depo_idx2[k]+1].custno!="0":
									servt_dict2[skv2_route[depo_idx2[k]]]+=servt+vehicle2.depotservt
								else:
									servt_dict2[skv2_route[depo_idx2[k]]]+=servt
						#集荷時間
						servt_dict2[skv2_route[len(skv2_route)-1]]=0
						for k in range(1,len(depo_idx2)):
							servt=0
							for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
								if skv2_route[j].requestType=="PICKUP" and skv2_route[j].custno!=skv2_route[j-1].custno:
									if skv2_route[j].custno[0]!="b":
										servt+=skv2_route[j].depotservt
							servt_dict2[skv2_route[depo_idx2[k]]]+=servt


						tdepo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]

						load=[0 for c in skv1_route]
						load2=[0 for c in skv1_route]
						for i in range(len(skv1_route)-1):
							if i in tdepo_idx1:
								for j in range(i+1,tdepo_idx1[tdepo_idx1.index(i)+1]):
									if skv1_route[j].requestType=="DELIVERY":
										if skv1_route[j].custno[0] != "b":
											load[i]+=skv1_route[j].dem
											load2[i]+=skv1_route[j].dem2
							else:
								if skv1_route[i].custno[0] != "b":
									if skv1_route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-skv1_route[i].dem
										load2[i]=load2[i-1]-skv1_route[i].dem2
									else:
										load[i]=load[i-1]+skv1_route[i].dem
										load2[i]=load2[i-1]+skv1_route[i].dem2

						for i in reversed(range(len(load))):
							if i in tdepo_idx1 and i+1 in tdepo_idx1:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx1=[]
						for c in skv1_route[tdepo_idx1[0]+1:tdepo_idx1[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx1.append(0)
						
						for i in range(1,len(tdepo_idx1)-1):
							if load[tdepo_idx1[i]-1]==0 and load2[tdepo_idx1[i]-1]==0:
								for c in skv1_route[tdepo_idx1[i]+1:tdepo_idx1[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[tdepo_idx1[i]]==0 and load2[tdepo_idx1[i]]==0:
										no_park_idx1.append(vehicle1.route.index(skv1_route[tdepo_idx1[i]]))
						if load[tdepo_idx1[-1]-1]==0 and load2[tdepo_idx1[-1]-1]==0:
							no_park_idx1.append(vehicle1.route.index(skv1_route[tdepo_idx1[-1]]))

						pick_opt_flag1=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(skv1_route)-1)):
								if argvs.bulkShipping_flag==True:
									if skv1_route[i].customers[0].custno!="0":
										if skv1_route[i].customers[0].custno[0]!="b":
											non_depo=True
											if skv1_route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break
								else:
									if skv1_route[i].custno!="0":
										if skv1_route[i].custno[0]!="b":
											non_depo=True
											if skv1_route[i].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break

						tdepo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]

						load=[0 for c in skv2_route]
						load2=[0 for c in skv2_route]
						for i in range(len(skv2_route)-1):
							if i in tdepo_idx2:
								for j in range(i+1,tdepo_idx2[tdepo_idx2.index(i)+1]):
									if skv2_route[j].requestType=="DELIVERY":
										if skv2_route[j].custno[0] != "b":
											load[i]+=skv2_route[j].dem
											load2[i]+=skv2_route[j].dem2
							else:
								if skv2_route[i].custno[0] != "b":
									if skv2_route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-skv2_route[i].dem
										load2[i]=load2[i-1]-skv2_route[i].dem2
									else:
										load[i]=load[i-1]+skv2_route[i].dem
										load2[i]=load2[i-1]+skv2_route[i].dem2

						for i in reversed(range(len(load))):
							if i in tdepo_idx2 and i+1 in tdepo_idx2:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx2=[]
						for c in skv2_route[tdepo_idx2[0]+1:tdepo_idx2[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx2.append(0)
						
						for i in range(1,len(tdepo_idx2)-1):
							if load[tdepo_idx2[i]-1]==0 and load2[tdepo_idx2[i]-1]==0:
								for c in skv2_route[tdepo_idx2[i]+1:tdepo_idx2[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[tdepo_idx2[i]]==0 and load2[tdepo_idx2[i]]==0:
										no_park_idx2.append(vehicle2.route.index(skv2_route[tdepo_idx2[i]]))
						if load[tdepo_idx2[-1]-1]==0 and load2[tdepo_idx2[-1]-1]==0:
							no_park_idx2.append(vehicle2.route.index(skv2_route[tdepo_idx2[-1]]))

						pick_opt_flag2=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(skv2_route)-1)):
								if argvs.bulkShipping_flag==True:
									if skv2_route[i].customers[0].custno!="0":
										if skv2_route[i].customers[0].custno[0]!="b":
											non_depo=True
											if skv2_route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break
								else:
									if skv2_route[i].custno!="0":
										if skv2_route[i].custno[0]!="b":
											non_depo=True
											if skv2_route[i].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break

						#mvehicles={vehicle1:0.0,vehicle2:0.0}

						if argvs.break_flag==False:
							#### ここから休憩機能なし用の処理 ####
							if lcnt==0:
								if vehicle1.route[start_idx1] in servt_dict1:
									if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
										lv_t=max(vehicle1.arr[start_idx1]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+servt_dict1[vehicle1.route[start_idx1]]*vehicle1.opskill
										st_t=max(vehicle1.arr[start_idx1]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].parkt_open
									else:
										lv_t=max(vehicle1.arr[start_idx1],vehicle1.route[start_idx1].ready_fs)+servt_dict1[vehicle1.route[start_idx1]]*vehicle1.opskill
										st_t=max(vehicle1.arr[start_idx1],vehicle1.route[start_idx1].ready_fs)
								else:
									if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
										lv_t=max(vehicle1.arr[start_idx1]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].servt*vehicle1.opskill
										st_t=max(vehicle1.arr[start_idx1]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].parkt_open
									else:
										lv_t=max(vehicle1.arr[start_idx1],vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].servt*vehicle1.opskill
										st_t=max(vehicle1.arr[start_idx1],vehicle1.route[start_idx1].ready_fs)
							else:
								if vehicle1.route[start_idx1] in servt_dict1:
									if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
										lv_t=max(delay_arr_list1[i1][i2]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+servt_dict1[vehicle1.route[start_idx1]]*vehicle1.opskill
										st_t=max(delay_arr_list1[i1][i2]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].parkt_open
									else:
										lv_t=max(delay_arr_list1[i1][i2],vehicle1.route[start_idx1].ready_fs)+servt_dict1[vehicle1.route[start_idx1]]*vehicle1.opskill
										st_t=max(delay_arr_list1[i1][i2],vehicle1.route[start_idx1].ready_fs)
								else:
									if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
										lv_t=max(delay_arr_list1[i1][i2]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].servt*vehicle1.opskill
										st_t=max(delay_arr_list1[i1][i2]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].parkt_open
									else:
										lv_t=max(delay_arr_list1[i1][i2],vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].servt*vehicle1.opskill
										st_t=max(delay_arr_list1[i1][i2],vehicle1.route[start_idx1].ready_fs)
							if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
								lv_t+=vehicle1.route[start_idx1].parkt_open
							arr_t=vehicle1.arr[start_idx1]
							if start_idx1==0 or vehicle1.route[start_idx1-1].custno!="0" or vehicle1.route[start_idx1].custno!="0": #デポが連続しない場合
								atpen += max(0.0, st_t-vehicle1.route[start_idx1].due_fs)

							if start_idx1!=0 and vehicle1.route[start_idx1].custno==vehicle1.route[start_idx1-1].custno and vehicle1.route[start_idx1].custno!="0":
								lv_t=vehicle1.lv[start_idx1-1]
								arr_t=vehicle1.arr[start_idx1-1]

							impassable=True
							for i in range(start_idx1,pos1-1):
								from_c,to_c=vehicle1.route[i],vehicle1.route[i+1]

								if to_c.custno==from_c.custno and to_c.custno!="0":
									continue

								dtable6 = get_dtable(vehicle1.vtype, lv_t, argvs.management_dtable)
								ttable7 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
								if argvs.management_etable:
									etable6 = get_etable(vehicle1.vtype, vehicle1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable6 = get_xtable(vehicle1.vtype, lv_t, argvs.management_xtable)

								if ttable7[from_c.spotno][to_c.spotno]==-1 or \
								dtable6[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable6[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable6[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								arr_t=lv_t+ttable7[from_c.spotno][to_c.spotno]*vehicle1.drskill
								if to_c in servt_dict1:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx1):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict1[to_c]*vehicle1.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[to_c]*vehicle1.opskill
										st_t=max(arr_t,to_c.ready_fs)
								else:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx1):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*vehicle1.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*vehicle1.opskill
										st_t=max(arr_t,to_c.ready_fs)
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx1):
									lv_t+=to_c.parkt_open

								if from_c.custno!="0" or to_c.custno!="0":
									atpen+=max(0.0,st_t-to_c.due_fs)

								adist+=dtable6[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable6[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable6[from_c.spotno][to_c.spotno]
							if impassable==False:
								continue

							if vehicle1.route[pos1-1].custno!=vehicle2.route[pos2].additionalcust[i2].custno or vehicle2.route[pos2].additionalcust[i2].custno=="0":
								dtable1 = get_dtable(vehicle1.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable1 = get_etable(vehicle1.vtype, vehicle1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable1 = get_xtable(vehicle1.vtype, lv_t, argvs.management_xtable)

								#変更後に通行不可能ならFalseを返す
								ttable1 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
								if ttable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]==-1 or \
									dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]==-1 or \
									(argvs.management_etable and etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]==-1) or \
									(argvs.management_xtable and xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]==-1):
									continue

								adist+=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]
								if argvs.management_etable:
									apower+=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]
								if argvs.management_xtable:
									aexp+=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]

								arr_t=lv_t+ttable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]*vehicle1.drskill
								if vehicle2.route[pos2].additionalcust[i2] in servt_dict1:
									if vehicle2.route[pos2].additionalcust[i2].spotid!=vehicle1.route[pos1-1].spotid:
										lv_t=max(arr_t+vehicle2.route[pos2].additionalcust[i2].parkt_arrive,vehicle2.route[pos2].additionalcust[i2].ready_fs)+servt_dict1[vehicle2.route[pos2].additionalcust[i2]]*vehicle1.opskill
										st_t=max(arr_t+vehicle2.route[pos2].additionalcust[i2].parkt_arrive,vehicle2.route[pos2].additionalcust[i2].ready_fs)+vehicle2.route[pos2].additionalcust[i2].parkt_open
									else:
										lv_t=max(arr_t,vehicle2.route[pos2].additionalcust[i2].ready_fs)+servt_dict1[vehicle2.route[pos2].additionalcust[i2]]*vehicle1.opskill
										st_t=max(arr_t,vehicle2.route[pos2].additionalcust[i2].ready_fs)
								else:
									if vehicle2.route[pos2].additionalcust[i2].spotid!=vehicle1.route[pos1-1].spotid:
										lv_t=max(arr_t+vehicle2.route[pos2].additionalcust[i2].parkt_arrive,vehicle2.route[pos2].additionalcust[i2].ready_fs)+vehicle2.route[pos2].additionalcust[i2].servt*vehicle1.opskill
										st_t=max(arr_t+vehicle2.route[pos2].additionalcust[i2].parkt_arrive,vehicle2.route[pos2].additionalcust[i2].ready_fs)+vehicle2.route[pos2].additionalcust[i2].parkt_open
									else:
										lv_t=max(arr_t,vehicle2.route[pos2].additionalcust[i2].ready_fs)+vehicle2.route[pos2].additionalcust[i2].servt*vehicle1.opskill
										st_t=max(arr_t,vehicle2.route[pos2].additionalcust[i2].ready_fs)
								if vehicle2.route[pos2].additionalcust[i2].spotid!=vehicle1.route[pos1-1].spotid:
									lv_t+=vehicle2.route[pos2].additionalcust[i2].parkt_open
								if vehicle1.route[pos1-1].custno!="0" or vehicle2.route[pos2].additionalcust[i2].custno!="0":
									atpen+=max(0.0,st_t-vehicle2.route[pos2].additionalcust[i2].due_fs)

							ttable8 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
							dtable8 = get_dtable(vehicle1.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable8 = get_etable(vehicle1.vtype, vehicle1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable8 = get_xtable(vehicle1.vtype, lv_t, argvs.management_xtable)

							if (argvs.bulkShipping_flag==False and pos1+1==len(vehicle1.route)-1 and vehicle2.route[pos2].additionalcust[i2].custno!="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==True) or \
								(argvs.bulkShipping_flag==True and pos1+1==len(vehicle1.route)-1 and vehicle2.route[pos2].additionalcust[i2].customers[0].custno!="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
								if ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]==-1 or \
								dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]==-1 or \
								(argvs.management_etable and etable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]==-1) or \
								(argvs.management_xtable and xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]==-1):
									continue

								adist+=dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]
								if argvs.management_etable:
									apower+=etable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]
								if argvs.management_xtable:
									aexp+=xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]

								arr_t=lv_t+ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]*vehicle1.drskill
								st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
								atpen+=max(0.0,st_t-customers[0].due_fs)
								lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[vehicle1.route[pos1+1]]+vehicle1.depotservt)*vehicle1.opskill
								lv_t+=customers[0].parkt_open

								ttable15 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
								dtable11 = get_dtable(vehicle1.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable11 = get_etable(vehicle1.vtype, vehicle1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable11 = get_xtable(vehicle1.vtype, lv_t, argvs.management_xtable)

								if ttable15[customers[0].spotno][vehicle1.route[pos1+1].spotno]==-1 or \
									dtable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]==-1 or \
									(argvs.management_etable and etable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]==-1) or \
									(argvs.management_xtable and xtable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]==-1):
									continue

								adist+=dtable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]
								if argvs.management_etable:
									apower+=etable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]

								arr_t=lv_t+ttable15[customers[0].spotno][vehicle1.route[pos1+1].spotno]*vehicle1.drskill
								st_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)
								atpen+=max(0.0,st_t-vehicle1.route[pos1+1].due_fs)
								lv_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)

								lv1=lv_t
								st1=st_t
							elif (argvs.bulkShipping_flag==False and pos1+1==len(vehicle1.route)-2 and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==False) or \
								(argvs.bulkShipping_flag==True and pos1+1==len(vehicle1.route)-2 and vehicle1.route[-2].customers[0].custno=="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
								if ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+2].spotno]==-1 or \
								dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+2].spotno]==-1 or \
								(argvs.management_etable and etable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+2].spotno]==-1) or \
								(argvs.management_xtable and xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+2].spotno]==-1):
									continue

								adist+=dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+2].spotno]
								if argvs.management_etable:
									apower+=etable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+2].spotno]
								if argvs.management_xtable:
									aexp+=xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+2].spotno]

								arr_t=lv_t+ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+2].spotno]*vehicle1.drskill
								st_t=max(arr_t,vehicle1.route[pos1+2].ready_fs)
								atpen+=max(0.0,st_t-vehicle1.route[pos1+2].due_fs)
								lv_t=max(arr_t,vehicle1.route[pos1+2].ready_fs)
								
								lv1=lv_t
								st1=st_t
							else:
								if vehicle2.route[pos2].additionalcust[i2].custno!=vehicle1.route[pos1+1].custno or vehicle1.route[pos1+1].custno=="0":
									if ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]==-1 or \
										dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]==-1 or \
										(argvs.management_etable and etable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]==-1) or \
										(argvs.management_xtable and xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]==-1):
										continue

									adist+=dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]
									if argvs.management_etable:
										apower+=etable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]
									if argvs.management_xtable:
										aexp+=xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]

									arr_t=lv_t+ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]*vehicle1.drskill
									if vehicle1.route[pos1+1] in servt_dict1:
										if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
											lv_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+servt_dict1[vehicle1.route[pos1+1]]*vehicle1.opskill
											st_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)+servt_dict1[vehicle1.route[pos1+1]]*vehicle1.opskill
											st_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)
									else:
										if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
											lv_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].servt*vehicle1.opskill
											st_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].servt*vehicle1.opskill
											st_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)
									if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
										lv_t+=vehicle1.route[pos1+1].parkt_open
								lv1=lv_t
								st1=st_t

								if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
									impassable,dist,power,exp,_=check_impassability(customers,vehicle1,lv_t,pos1+2,servt_dict1,len(skv1_route)-1,no_park_idx1,pick_opt_flag1,argvs)
									if impassable==False:
										continue

									adist+=dist
									if argvs.management_etable:
										apower+=power
									if argvs.management_xtable:
										aexp+=exp
							adist1=adist

							if lcnt==0:
								if vehicle2.route[start_idx2] in servt_dict2:
									if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
										lv_t=max(vehicle2.arr[start_idx2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+servt_dict2[vehicle2.route[start_idx2]]*vehicle2.opskill
										st_t=max(vehicle2.arr[start_idx2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].parkt_open
									else:
										lv_t=max(vehicle2.arr[start_idx2],vehicle2.route[start_idx2].ready_fs)+servt_dict2[vehicle2.route[start_idx2]]*vehicle2.opskill
										st_t=max(vehicle2.arr[start_idx2],vehicle2.route[start_idx2].ready_fs)
								else:
									if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
										lv_t=max(vehicle2.arr[start_idx2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
										st_t=max(vehicle2.arr[start_idx2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].parkt_open
									else:
										lv_t=max(vehicle2.arr[start_idx2],vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
										st_t=max(vehicle2.arr[start_idx2],vehicle2.route[start_idx2].ready_fs)
							else:
								if vehicle2.route[start_idx2] in servt_dict2:
									if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
										lv_t=max(delay_arr_list2[i1][i2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+servt_dict2[vehicle2.route[start_idx2]]*vehicle2.opskill
										st_t=max(delay_arr_list2[i1][i2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].parkt_open
									else:
										lv_t=max(delay_arr_list2[i1][i2],vehicle2.route[start_idx2].ready_fs)+servt_dict2[vehicle2.route[start_idx2]]*vehicle2.opskill
										st_t=max(delay_arr_list2[i1][i2],vehicle2.route[start_idx2].ready_fs)
								else:
									if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
										lv_t=max(delay_arr_list2[i1][i2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
										st_t=max(delay_arr_list2[i1][i2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].parkt_open
									else:
										lv_t=max(delay_arr_list2[i1][i2],vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
										st_t=max(delay_arr_list2[i1][i2],vehicle2.route[start_idx2].ready_fs)
							if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
								lv_t+=vehicle2.route[start_idx2].parkt_open
							if start_idx2==0 or vehicle2.route[start_idx2-1].custno!="0" or vehicle2.route[start_idx2].custno!="0": #デポが連続しない場合
								atpen += max(0.0, st_t-vehicle2.route[start_idx2].due_fs)
							arr_t=vehicle2.arr[start_idx2]

							if start_idx2!=0 and vehicle2.route[start_idx2].custno==vehicle2.route[start_idx2-1].custno and vehicle2.route[start_idx2].custno!="0":
								lv_t=vehicle2.lv[start_idx2-1]
								arr_t=vehicle2.arr[start_idx2]

							impassable=True
							for i in range(start_idx2,pos2-1):
								from_c,to_c=vehicle2.route[i],vehicle2.route[i+1]

								if to_c.custno==from_c.custno and to_c.custno!="0":
									continue

								dtable6 = get_dtable(vehicle2.vtype, lv_t, argvs.management_dtable)
								ttable7 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
								if argvs.management_etable:
									etable6 = get_etable(vehicle2.vtype, vehicle2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable6 = get_xtable(vehicle2.vtype, lv_t, argvs.management_xtable)

								if ttable7[from_c.spotno][to_c.spotno]==-1 or \
								dtable6[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable6[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable6[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								arr_t=lv_t+ttable7[from_c.spotno][to_c.spotno]*vehicle2.drskill
								if to_c in servt_dict2:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx2):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict2[to_c]*vehicle2.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+servt_dict2[to_c]*vehicle2.opskill
										st_t=max(arr_t,to_c.ready_fs)
								else:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx2):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*vehicle2.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*vehicle2.opskill
										st_t=max(arr_t,to_c.ready_fs)
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx2):
									lv_t+=to_c.parkt_open

								if from_c.custno!="0" or to_c.custno!="0":
									atpen+=max(0.0,st_t-to_c.due_fs)

								adist+=dtable6[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable6[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable6[from_c.spotno][to_c.spotno]
							if impassable==False:
								continue

							if vehicle2.route[pos2-1].custno!=vehicle1.route[pos1].additionalcust[i1].custno or vehicle1.route[pos1].additionalcust[i1].custno=="0":
								dtable5 = get_dtable(vehicle2.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable5 = get_etable(vehicle2.vtype, vehicle2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable5 = get_xtable(vehicle2.vtype, lv_t, argvs.management_xtable)

								ttable5 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
								if ttable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]==-1 or \
									dtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]==-1 or \
									(argvs.management_etable and etable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]==-1) or \
									(argvs.management_xtable and xtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]==-1):
									continue

								adist+=dtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]
								if argvs.management_etable:
									apower+=etable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]
								if argvs.management_xtable:
									aexp+=xtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]

								arr_t=lv_t+ttable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]*vehicle2.drskill
								if vehicle1.route[pos1].additionalcust[i1] in servt_dict2:
									if vehicle1.route[pos1].additionalcust[i1].spotid!=vehicle2.route[pos2-1].spotid:
										lv_t=max(arr_t+vehicle1.route[pos1].additionalcust[i1].parkt_arrive,vehicle1.route[pos1].additionalcust[i1].ready_fs)+servt_dict2[vehicle1.route[pos1].additionalcust[i1]]*vehicle2.opskill
										st_t=max(arr_t+vehicle1.route[pos1].additionalcust[i1].parkt_arrive,vehicle1.route[pos1].additionalcust[i1].ready_fs)+vehicle1.route[pos1].additionalcust[i1].parkt_open
									else:
										lv_t=max(arr_t,vehicle1.route[pos1].additionalcust[i1].ready_fs)+servt_dict2[vehicle1.route[pos1].additionalcust[i1]]*vehicle2.opskill
										st_t=max(arr_t,vehicle1.route[pos1].additionalcust[i1].ready_fs)
								else:
									if vehicle1.route[pos1].additionalcust[i1].spotid!=vehicle2.route[pos2-1].spotid:
										lv_t=max(arr_t+vehicle1.route[pos1].additionalcust[i1].parkt_arrive,vehicle1.route[pos1].additionalcust[i1].ready_fs)+vehicle1.route[pos1].additionalcust[i1].servt*vehicle2.opskill
										st_t=max(arr_t+vehicle1.route[pos1].additionalcust[i1].parkt_arrive,vehicle1.route[pos1].additionalcust[i1].ready_fs)+vehicle1.route[pos1].additionalcust[i1].parkt_open
									else:
										lv_t=max(arr_t,vehicle1.route[pos1].additionalcust[i1].ready_fs)+vehicle1.route[pos1].additionalcust[i1].servt*vehicle2.opskill
										st_t=max(arr_t,vehicle1.route[pos1].additionalcust[i1].ready_fs)
								if vehicle1.route[pos1].additionalcust[i1].spotid!=vehicle2.route[pos2-1].spotid:
									lv_t+=vehicle1.route[pos1].additionalcust[i1].parkt_open
								if vehicle2.route[pos2-1].custno!="0" or vehicle1.route[pos1].additionalcust[i1].custno!="0":
									atpen+=max(0.0,st_t-vehicle1.route[pos1].additionalcust[i1].due_fs)

							ttable10 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
							dtable10 = get_dtable(vehicle2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable10 = get_etable(vehicle2.vtype, vehicle2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable10 = get_xtable(vehicle2.vtype, lv_t, argvs.management_xtable)

							if (argvs.bulkShipping_flag==False and pos2+1==len(vehicle2.route)-1 and vehicle1.route[pos1].additionalcust[i1].custno!="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==True) or \
								(argvs.bulkShipping_flag==True and pos2+1==len(vehicle2.route)-1 and vehicle1.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
								if ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
								dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
								(argvs.management_etable and etable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1) or \
								(argvs.management_xtable and xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1):
									continue

								adist+=dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]
								if argvs.management_etable:
									apower+=etable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]
								if argvs.management_xtable:
									aexp+=xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]

								arr_t=lv_t+ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]*vehicle2.drskill
								st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
								atpen+=max(0.0,st_t-customers[0].due_fs)
								lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[vehicle2.route[pos2+1]]+vehicle2.depotservt)*vehicle2.opskill
								lv_t+=customers[0].parkt_open

								ttable16 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
								dtable12 = get_dtable(vehicle2.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable12 = get_etable(vehicle2.vtype, vehicle2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable12 = get_xtable(vehicle2.vtype, lv_t, argvs.management_xtable)

								if ttable16[customers[0].spotno][vehicle2.route[pos2+1].spotno]==-1 or \
									dtable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]==-1 or \
									(argvs.management_etable and etable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]==-1) or \
									(argvs.management_xtable and xtable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]==-1):
									continue

								adist+=dtable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]
								if argvs.management_etable:
									apower+=etable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]

								arr_t=lv_t+ttable16[customers[0].spotno][vehicle2.route[pos2+1].spotno]*vehicle2.drskill
								st_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)
								atpen+=max(0.0,st_t-vehicle2.route[pos2+1].due_fs)
								lv_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)

								lv2=lv_t
								st2=st_t
							elif (argvs.bulkShipping_flag==False and pos2+1==len(vehicle2.route)-2 and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==False) or \
								(argvs.bulkShipping_flag==True and pos2+1==len(vehicle2.route)-2 and vehicle2.route[-2].customers[0].custno=="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
								if ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+2].spotno]==-1 or \
								dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+2].spotno]==-1 or \
								(argvs.management_etable and etable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+2].spotno]==-1) or \
								(argvs.management_xtable and xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+2].spotno]==-1):
									continue

								adist+=dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+2].spotno]
								if argvs.management_etable:
									apower+=etable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+2].spotno]
								if argvs.management_xtable:
									aexp+=xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+2].spotno]

								arr_t=lv_t+ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+2].spotno]*vehicle2.drskill
								st_t=max(arr_t,vehicle2.route[pos2+2].ready_fs)
								atpen+=max(0.0,st_t-vehicle2.route[pos2+2].due_fs)
								lv_t=max(arr_t,vehicle2.route[pos2+2].ready_fs)
								
								lv2=lv_t
								st2=st_t
							else:
								if vehicle1.route[pos1].additionalcust[i1].custno!=vehicle2.route[pos2+1].custno or vehicle2.route[pos2+1].custno=="0":
									if ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]==-1 or \
										dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]==-1 or \
										(argvs.management_etable and etable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]==-1) or \
										(argvs.management_xtable and xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]==-1):
										continue

									adist+=dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]
									if argvs.management_etable:
										apower+=etable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]
									if argvs.management_xtable:
										aexp+=xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]

									arr_t=lv_t+ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]*vehicle2.drskill
									if vehicle2.route[pos2+1] in servt_dict2:
										if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
											lv_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+servt_dict2[vehicle2.route[pos2+1]]*vehicle2.opskill
											st_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)+servt_dict2[vehicle2.route[pos2+1]]*vehicle2.opskill
											st_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)
									else:
										if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
											lv_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].servt*vehicle2.opskill
											st_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].servt*vehicle2.opskill
											st_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)
									if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
										lv_t+=vehicle2.route[pos2+1].parkt_open
								lv2=lv_t
								st2=st_t

								if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
									impassable,dist,power,exp,_=check_impassability(customers,vehicle2,lv_t,pos2+2,servt_dict2,len(skv2_route)-1,no_park_idx2,pick_opt_flag2,argvs)
									if impassable==False:
										continue

									adist+=dist
									if argvs.management_etable:
										apower+=power
									if argvs.management_xtable:
										aexp+=exp
							adist2=adist-adist1


							if( (pos1+1)==(len(vehicle1.route)-1) and (pos2+1)<(len(vehicle2.route)-1) ): #case1
								#in this case, n1-1=pos1+1

								##test
								
								##

								#mvehicles[vehicle1]=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1-1)])
								#mvehicles[vehicle1]+=dist_dtable(vehicle1.route[pos1-1],vehicle2.route[pos2],dtable)
								#mvehicles[vehicle1]+=dist_dtable(vehicle2.route[pos2],vehicle1.route[pos1+1],dtable)

								#mvehicles[vehicle2]=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2-1)])
								#mvehicles[vehicle2]+=dist_dtable(vehicle2.route[pos2-1],vehicle1.route[pos1],dtable)
								#mvehicles[vehicle2]+=dist_dtable(vehicle1.route[pos1],vehicle2.route[pos2+1],dtable)
								#mvehicles[vehicle2]+=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2+1,len(vehicle2.route)-1)])

								###########
								#in this case, pos1+1=n1-1
								
								if (argvs.bulkShipping_flag==False and (vehicle2.route[pos2].additionalcust[i2].custno!="0" or vehicle1.route[pos1+1].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (vehicle2.route[pos2].additionalcust[i2].customers[0].custno!="0" or vehicle1.route[pos1+1].customers[0].custno!="0")):
									atpen+=max(0.0,st1-vehicle1.route[pos1+1].due_fs)
								atpen+=max(0.0,lv1-vehicle1.endhour)
								##20180605
								# atpen+=max(0.0,arr_t-bv1final_t)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle1,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1][i2],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								##

								if not ((argvs.bulkShipping_flag==False and pos2+1==len(vehicle2.route)-2 and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==False) or \
								(argvs.bulkShipping_flag==True and pos2+1==len(vehicle2.route)-2 and vehicle2.route[-2].customers[0].custno=="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False)) and \
								not ((argvs.bulkShipping_flag==False and pos2+1==len(vehicle2.route)-1 and vehicle1.route[pos1].additionalcust[i1].custno!="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==True) or \
								(argvs.bulkShipping_flag==True and pos2+1==len(vehicle2.route)-1 and vehicle1.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True)):
									if vehicle1.route[pos1].additionalcust[i1].custno!=vehicle2.route[pos2+1].custno:
										atpen+=max(0.0,st2-vehicle2.route[pos2+1].due_fs)
									lv_t=lv2
									st_t=st2

									#in this case, pos1+1=n1-1
									# adist=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
									# 	+ dtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
									# 	+ dtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
									# 	+ dtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno] \
									# 	+ calc_dist(vehicle2,lv2,pos2+2,len(vehicle2.route),argvs)
									# if argvs.management_etable:
									# 	apower=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
									# 	+ etable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
									# 	+ etable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
									# 	+ etable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno] 
									# if argvs.management_xtable:
									# 	aexp=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
									# 	+ xtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
									# 	+ xtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
									# 	+ xtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno] 

									
									for i in range(pos2+1,n2-1-1):
										if i+1==n2-2 and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==False:
											continue

										if vehicle2.route[i].custno==vehicle2.route[i+1].custno and vehicle2.route[i+1].custno!="0":
											continue

										if vehicle2.route[i+1] in servt_dict2:
											proc_time=servt_dict2[vehicle2.route[i+1]]
										else:
											proc_time=vehicle2.route[i+1].servt
										if i+1 in no_park_idx2:
											no_park=True
										else:
											no_park=False
										lv_t,ttime_pen=calc_time_pen(vehicle2.route[i],vehicle2.route[i+1],lv_t,proc_time,vehicle2,no_park,argvs)
										if vehicle2.route[i].custno!="0" or vehicle2.route[i+1].custno!="0":
											atpen+=ttime_pen

									
									ttable11 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
									if (argvs.bulkShipping_flag==False and vehicle2.route[-2].custno!="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==True) or \
									(argvs.bulkShipping_flag==True and vehicle2.route[-2].customers[0].custno!="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
										arr_t=lv_t+ttable11[vehicle2.route[-2].spotno][customers[0].spotno]*vehicle2.drskill
										st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
										atpen+=max(0.0,st_t-customers[0].due_fs)
										lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[vehicle2.route[-1]]+vehicle2.depotservt)*vehicle2.opskill
										lv_t+=customers[0].parkt_open

										ttable17 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
										arr_t=lv_t+ttable17[customers[0].spotno][vehicle2.route[-1].spotno]*vehicle2.drskill

										#改善前時間算出
										lv2=max(arr_t,vehicle2.route[-1].ready_fs)
										st2=max(arr_t,vehicle2.route[-1].ready_fs)
									elif (argvs.bulkShipping_flag==False and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==False) or \
									(argvs.bulkShipping_flag==True and vehicle2.route[-2].customers[0].custno=="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
										arr_t=lv_t+ttable11[vehicle2.route[-3].spotno][vehicle2.route[-1].spotno]*vehicle2.drskill

										#改善前時間算出
										lv2=max(arr_t,vehicle2.route[-1].ready_fs)
										st2=max(arr_t,vehicle2.route[-1].ready_fs)
									else:
										arr_t=lv_t+ttable11[vehicle2.route[n2-2].spotno][vehicle2.route[n2-1].spotno]*vehicle2.drskill
										# arr_t=round(arr_t,4)
										#vehicle2の改善後arr計算
										if vehicle2.route[len(vehicle2.route)-1].spotid!=vehicle2.route[len(vehicle2.route)-2].spotid and not len(vehicle2.route)-1 in no_park_idx2:
											lv2=max(arr_t+vehicle2.route[len(vehicle2.route)-1].parkt_arrive,vehicle2.route[-1].ready_fs)+servt_dict2[vehicle2.route[len(vehicle2.route)-1]]*vehicle2.opskill
											st2=max(arr_t+vehicle2.route[len(vehicle2.route)-1].parkt_arrive,vehicle2.route[-1].ready_fs)+vehicle2.route[len(vehicle2.route)-1].parkt_open
										else:
											lv2=max(arr_t,vehicle2.route[-1].ready_fs)+servt_dict2[vehicle2.route[len(vehicle2.route)-1]]*vehicle2.opskill
											st2=max(arr_t,vehicle2.route[-1].ready_fs)
										if vehicle2.route[len(vehicle2.route)-1].spotid!=vehicle2.route[len(vehicle2.route)-2].spotid and not len(vehicle2.route)-1 in no_park_idx2:
											lv2+=vehicle2.route[len(vehicle2.route)-1].parkt_open

									if (argvs.bulkShipping_flag==False and (vehicle2.route[n2-2].custno!="0" or vehicle2.route[n2-1].custno!="0")) or \
										(argvs.bulkShipping_flag==True and (vehicle2.route[n2-2].customers[0].custno!="0" or vehicle2.route[n2-1].customers[0].custno!="0")):
										atpen+=max(0.0,st2-vehicle2.route[n2-1].due_fs)
								atpen+=max(0.0,lv2-vehicle2.endhour) 
								
								
								##20180605
								# atpen+=max(0.0,arr_t-bv2final_t)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle2,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-vehicle2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1][i2],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
								##

							elif ( (pos1+1)<(len(vehicle1.route)-1) and (pos2+1)==(len(vehicle2.route)-1) ): #case2
								#in this case,n2-1=pos2+1

								

								#mvehicles[vehicle1]=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1-1)])
								#mvehicles[vehicle1]+=dist_dtable(vehicle1.route[pos1-1],vehicle2.route[pos2],dtable)
								#mvehicles[vehicle1]+=dist_dtable(vehicle2.route[pos2],vehicle1.route[pos1+1],dtable)
								#mvehicles[vehicle1]+=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1+1,len(vehicle1.route)-1)])

								#mvehicles[vehicle2]=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2-1)])
								#mvehicles[vehicle2]+=dist_dtable(vehicle2.route[pos2-1],vehicle1.route[pos1],dtable)
								#mvehicles[vehicle2]+=dist_dtable(vehicle1.route[pos1],vehicle2.route[pos2+1],dtable)

								if not ((argvs.bulkShipping_flag==False and pos1+1==len(vehicle1.route)-2 and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==False) or \
								(argvs.bulkShipping_flag==True and pos1+1==len(vehicle1.route)-2 and vehicle1.route[-2].customers[0].custno=="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False)) and \
								not ((argvs.bulkShipping_flag==False and pos1+1==len(vehicle1.route)-1 and vehicle2.route[pos2].additionalcust[i2].custno!="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==True) or \
								(argvs.bulkShipping_flag==True and pos1+1==len(vehicle1.route)-1 and vehicle2.route[pos2].additionalcust[i2].customers[0].custno!="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True)):
									#in this case,pos2+1=n2-1
									if vehicle2.route[pos2].additionalcust[i2].custno!=vehicle1.route[pos1+1].custno:
										atpen+=max(0.0,st1-vehicle1.route[pos1+1].due_fs)
									lv_t=lv1
									st_t=st1
									
									for i in range(pos1+1,n1-1-1):
										if i+1==n1-2 and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==False:
											continue

										if vehicle1.route[i].custno==vehicle1.route[i+1].custno and vehicle1.route[i+1].custno!="0":
											continue

										if vehicle1.route[i+1] in servt_dict1:
											proc_time=servt_dict1[vehicle1.route[i+1]]
										else:
											proc_time=vehicle1.route[i+1].servt
										if i+1 in no_park_idx1:
											no_park=True
										else:
											no_park=False
										lv_t,ttime_pen=calc_time_pen(vehicle1.route[i],vehicle1.route[i+1],lv_t,proc_time,vehicle1,no_park,argvs)
										if vehicle1.route[i].custno!="0" or vehicle1.route[i+1].custno!="0":
											atpen+=ttime_pen

									
									ttable12 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
									if (argvs.bulkShipping_flag==False and vehicle1.route[-2].custno!="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==True) or \
									(argvs.bulkShipping_flag==True and vehicle1.route[-2].customers[0].custno!="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
										arr_t=lv_t+ttable12[vehicle1.route[-2].spotno][customers[0].spotno]*vehicle1.drskill
										st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
										atpen+=max(0.0,st_t-customers[0].due_fs)
										lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[vehicle1.route[-1]]+vehicle1.depotservt)*vehicle1.opskill
										lv_t+=customers[0].parkt_open

										ttable17 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
										arr_t=lv_t+ttable17[customers[0].spotno][vehicle1.route[-1].spotno]*vehicle1.drskill

										#改善前時間算出
										lv1=max(arr_t,vehicle1.route[-1].ready_fs)
										st1=max(arr_t,vehicle1.route[-1].ready_fs)
									elif (argvs.bulkShipping_flag==False and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==False) or \
									(argvs.bulkShipping_flag==True and vehicle1.route[-2].customers[0].custno=="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
										arr_t=lv_t+ttable12[vehicle1.route[-3].spotno][vehicle1.route[-1].spotno]*vehicle1.drskill

										#改善前時間算出
										lv1=max(arr_t,vehicle1.route[-1].ready_fs)
										st1=max(arr_t,vehicle1.route[-1].ready_fs)
									else:
										arr_t=lv_t+ttable12[vehicle1.route[n1-2].spotno][vehicle1.route[n1-1].spotno]*vehicle1.drskill
										# arr_t=round(arr_t,4)
										
										if vehicle1.route[len(vehicle1.route)-1].spotid!=vehicle1.route[len(vehicle1.route)-2].spotid and not len(vehicle1.route)-1 in no_park_idx1:
											lv1=max(arr_t+vehicle1.route[len(vehicle1.route)-1].parkt_arrive,vehicle1.route[-1].ready_fs)+servt_dict1[vehicle1.route[len(vehicle1.route)-1]]*vehicle1.opskill
											st1=max(arr_t+vehicle1.route[len(vehicle1.route)-1].parkt_arrive,vehicle1.route[-1].ready_fs)+vehicle1.route[len(vehicle1.route)-1].parkt_open
										else:
											lv1=max(arr_t,vehicle1.route[-1].ready_fs)+servt_dict1[vehicle1.route[len(vehicle1.route)-1]]*vehicle1.opskill
											st1=max(arr_t,vehicle1.route[-1].ready_fs)
										if vehicle1.route[len(vehicle1.route)-1].spotid!=vehicle1.route[len(vehicle1.route)-2].spotid and not len(vehicle1.route)-1 in no_park_idx1:
											lv1+=vehicle1.route[len(vehicle1.route)-1].parkt_open
									if (argvs.bulkShipping_flag==False and (vehicle1.route[-2].custno!="0" or vehicle1.route[-1].custno!="0")) or \
										(argvs.bulkShipping_flag==True and (vehicle1.route[-2].customers[0].custno!="0" or vehicle1.route[-1].customers[0].custno!="0")):
										atpen+=max(0.0,st1-vehicle1.route[n1-1].due_fs)
								atpen+=max(0.0,lv1-vehicle1.endhour)

								##20180605
								# atpen+=max(0.0,arr_t-bv1final_t)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle1,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1][i2],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								##

								#in this case,pos2+1=n2-1
								#from_c,to_c=vehicle2.route[pos2-1],vehicle1.route[pos1]

								if (argvs.bulkShipping_flag==False and (vehicle1.route[pos1].additionalcust[i1].custno!="0" or vehicle2.route[pos2+1].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (vehicle1.route[pos1].additionalcust[i1].customers[0].custno!="0" or vehicle2.route[pos2+1].customers[0].custno!="0")):
									atpen+=max(0.0,st2-vehicle2.route[pos2+1].due_fs)
								atpen+=max(0.0,lv2-vehicle2.endhour)
								##20180605
								# atpen+=max(0.0,arr_t-bv2final_t)

								#in this case, pos2+1=n2-1
								# adist=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ dtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ calc_dist(vehicle1,lv1,pos1+2,len(vehicle1.route),argvs) \
								# 	+ dtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ dtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno] 
								# if argvs.management_etable:
								# 	apower=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ etable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ etable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ etable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno] 
								# if argvs.management_xtable:
								# 	aexp=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ xtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ xtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ xtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno]  

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle2,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-vehicle2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1][i2],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
								##

							elif ( (pos1+1)==(len(vehicle1.route)-1) and (pos2+1)==(len(vehicle2.route)-1) ): #case3
								#mvehicles[vehicle1]=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1-1)])
								#mvehicles[vehicle1]+=dist_dtable(vehicle1.route[pos1-1],vehicle2.route[pos2],dtable)
								#mvehicles[vehicle1]+=dist_dtable(vehicle2.route[pos2],vehicle1.route[pos1+1],dtable)
								#mvehicles[vehicle2]=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2-1)])
								#mvehicles[vehicle2]+=dist_dtable(vehicle2.route[pos2-1],vehicle1.route[pos1],dtable)
								#mvehicles[vehicle2]+=dist_dtable(vehicle1.route[pos1],vehicle2.route[pos2+1],dtable)

								
								if (argvs.bulkShipping_flag==False and (vehicle2.route[pos2].additionalcust[i2].custno!="0" or vehicle1.route[pos1+1].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (vehicle2.route[pos2].additionalcust[i2].customers[0].custno!="0" or vehicle1.route[pos1+1].customers[0].custno!="0")):
									atpen+=max(0.0,st1-vehicle1.route[pos1+1].due_fs)
								atpen+=max(0.0,lv1-vehicle1.endhour)
								##20180605
								# atpen+=max(0.0,arr_t-bv1final_t)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle1,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1][i2],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								##

								if (argvs.bulkShipping_flag==False and (vehicle1.route[pos1].additionalcust[i1].custno!="0" or vehicle2.route[pos2+1].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (vehicle1.route[pos1].additionalcust[i1].customers[0].custno!="0" or vehicle2.route[pos2+1].customers[0].custno!="0")):
									atpen+=max(0.0,st2-vehicle2.route[pos2+1].due_fs)
								atpen+=max(0.0,lv2-vehicle2.endhour)
								##20180605
								# atpen+=max(0.0,arr_t-bv2final_t)

								# adist=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ dtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ dtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ dtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno]
								# if argvs.management_etable:
								# 	apower=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ etable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ etable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ etable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno]
								# if argvs.management_xtable:
								# 	aexp=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ xtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ xtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ xtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno]

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle2,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-vehicle2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1][i2],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
								##

							else: #case4
								if not ((argvs.bulkShipping_flag==False and pos1+1==len(vehicle1.route)-2 and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==False) or \
								(argvs.bulkShipping_flag==True and pos1+1==len(vehicle1.route)-2 and vehicle1.route[-2].customers[0].custno=="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False)) and \
								not ((argvs.bulkShipping_flag==False and pos1+1==len(vehicle1.route)-1 and vehicle2.route[pos2].additionalcust[i2].custno!="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==True) or \
								(argvs.bulkShipping_flag==True and pos1+1==len(vehicle1.route)-1 and vehicle2.route[pos2].additionalcust[i2].customers[0].custno!="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True)):
									if vehicle2.route[pos2].additionalcust[i2].custno!=vehicle1.route[pos1+1].custno:
										atpen+=max(0.0,st1-vehicle1.route[pos1+1].due_fs)
									lv_t=lv1
									st_t=st1

									
									for i in range(pos1+1,n1-1-1):
										if i+1==n1-2 and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==False:
											continue

										if vehicle1.route[i].custno==vehicle1.route[i+1].custno and vehicle1.route[i+1].custno!="0":
											continue

										if vehicle1.route[i+1] in servt_dict1:
											proc_time=servt_dict1[vehicle1.route[i+1]]
										else:
											proc_time=vehicle1.route[i+1].servt
										if i+1 in no_park_idx1:
											no_park=True
										else:
											no_park=False
										lv_t,ttime_pen=calc_time_pen(vehicle1.route[i],vehicle1.route[i+1],lv_t,proc_time,vehicle1,no_park,argvs)
										if vehicle1.route[i].custno!="0" or vehicle1.route[i+1].custno!="0":
											atpen+=ttime_pen

									
									ttable12 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
									if (argvs.bulkShipping_flag==False and vehicle1.route[-2].custno!="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==True) or \
									(argvs.bulkShipping_flag==True and vehicle1.route[-2].customers[0].custno!="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
										arr_t=lv_t+ttable12[vehicle1.route[-2].spotno][customers[0].spotno]*vehicle1.drskill
										st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
										atpen+=max(0.0,st_t-customers[0].due_fs)
										lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[vehicle1.route[-1]]+vehicle1.depotservt)*vehicle1.opskill
										lv_t+=customers[0].parkt_open

										ttable17 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
										arr_t=lv_t+ttable17[customers[0].spotno][vehicle1.route[-1].spotno]*vehicle1.drskill

										#改善前時間算出
										lv1=max(arr_t,vehicle1.route[-1].ready_fs)
										st1=max(arr_t,vehicle1.route[-1].ready_fs)
									elif (argvs.bulkShipping_flag==False and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==False) or \
									(argvs.bulkShipping_flag==True and vehicle1.route[-2].customers[0].custno=="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
										arr_t=lv_t+ttable12[vehicle1.route[-3].spotno][vehicle1.route[-1].spotno]*vehicle1.drskill

										#改善前時間算出
										lv1=max(arr_t,vehicle1.route[-1].ready_fs)
										st1=max(arr_t,vehicle1.route[-1].ready_fs)
									else:
										arr_t=lv_t+ttable12[vehicle1.route[n1-2].spotno][vehicle1.route[n1-1].spotno]*vehicle1.drskill
										# arr_t=round(arr_t,4)
										
										if vehicle1.route[len(vehicle1.route)-1].spotid!=vehicle1.route[len(vehicle1.route)-2].spotid and not len(vehicle1.route)-1 in no_park_idx1:
											lv1=max(arr_t+vehicle1.route[len(vehicle1.route)-1].parkt_arrive,vehicle1.route[-1].ready_fs)+servt_dict1[vehicle1.route[len(vehicle1.route)-1]]*vehicle1.opskill
											st1=max(arr_t+vehicle1.route[len(vehicle1.route)-1].parkt_arrive,vehicle1.route[-1].ready_fs)+vehicle1.route[len(vehicle1.route)-1].parkt_open
										else:
											lv1=max(arr_t,vehicle1.route[-1].ready_fs)+servt_dict1[vehicle1.route[len(vehicle1.route)-1]]*vehicle1.opskill
											st1=max(arr_t,vehicle1.route[-1].ready_fs)
										if vehicle1.route[len(vehicle1.route)-1].spotid!=vehicle1.route[len(vehicle1.route)-2].spotid and not len(vehicle1.route)-1 in no_park_idx1:
											lv1+=vehicle1.route[len(vehicle1.route)-1].parkt_open
								
									if (argvs.bulkShipping_flag==False and (vehicle1.route[n1-2].custno!="0" or vehicle1.route[n1-1].custno!="0")) or \
										(argvs.bulkShipping_flag==True and (vehicle1.route[n1-2].customers[0].custno!="0" or vehicle1.route[n1-1].customers[0].custno!="0")):
										atpen+=max(0.0,st1-vehicle1.route[n1-1].due_fs)
								atpen+=max(0.0,lv1-vehicle1.endhour)

								##20180605
								# atpen+=max(0.0,arr_t-bv1final_t)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle1,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1][i2],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								##

								if not ((argvs.bulkShipping_flag==False and pos2+1==len(vehicle2.route)-2 and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==False) or \
								(argvs.bulkShipping_flag==True and pos2+1==len(vehicle2.route)-2 and vehicle2.route[-2].customers[0].custno=="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False)) and \
								not ((argvs.bulkShipping_flag==False and pos2+1==len(vehicle2.route)-1 and vehicle1.route[pos1].additionalcust[i1].custno!="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==True) or \
								(argvs.bulkShipping_flag==True and pos2+1==len(vehicle2.route)-1 and vehicle1.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True)):
									if vehicle1.route[pos1].additionalcust[i1].custno!=vehicle2.route[pos2+1].custno:
										atpen+=max(0.0,st2-vehicle2.route[pos2+1].due_fs)
									lv_t=lv2
									st_t=st2

								
									for i in range(pos2+1,n2-1-1):
										if i+1==n2-2 and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==False:
											continue

										if vehicle2.route[i].custno==vehicle2.route[i+1].custno and vehicle2.route[i+1].custno!="0":
											continue

										if vehicle2.route[i+1] in servt_dict2:
											proc_time=servt_dict2[vehicle2.route[i+1]]
										else:
											proc_time=vehicle2.route[i+1].servt
										if i+1 in no_park_idx2:
											no_park=True
										else:
											no_park=False
										lv_t,ttime_pen=calc_time_pen(vehicle2.route[i],vehicle2.route[i+1],lv_t,proc_time,vehicle2,no_park,argvs)
										if vehicle2.route[i].custno!="0" or vehicle2.route[i+1].custno!="0":
											atpen+=ttime_pen

									
									ttable14 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
									if (argvs.bulkShipping_flag==False and vehicle2.route[-2].custno!="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==True) or \
									(argvs.bulkShipping_flag==True and vehicle2.route[-2].customers[0].custno!="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
										arr_t=lv_t+ttable14[vehicle2.route[-2].spotno][customers[0].spotno]*vehicle2.drskill
										st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
										atpen+=max(0.0,st_t-customers[0].due_fs)
										lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[vehicle2.route[-1]]+vehicle2.depotservt)*vehicle2.opskill
										lv_t+=customers[0].parkt_open

										ttable17 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
										arr_t=lv_t+ttable17[customers[0].spotno][vehicle2.route[-1].spotno]*vehicle2.drskill

										#改善前時間算出
										lv2=max(arr_t,vehicle2.route[-1].ready_fs)
										st2=max(arr_t,vehicle2.route[-1].ready_fs)
									elif (argvs.bulkShipping_flag==False and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==False) or \
									(argvs.bulkShipping_flag==True and vehicle2.route[-2].customers[0].custno=="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
										arr_t=lv_t+ttable14[vehicle2.route[-3].spotno][vehicle2.route[-1].spotno]*vehicle2.drskill

										#改善前時間算出
										lv2=max(arr_t,vehicle2.route[-1].ready_fs)
										st2=max(arr_t,vehicle2.route[-1].ready_fs)
									else:
										arr_t=lv_t+ttable14[vehicle2.route[n2-2].spotno][vehicle2.route[n2-1].spotno]*vehicle2.drskill
										# arr_t=round(arr_t,4)
										#vehicle2の改善後arr計算
										if vehicle2.route[len(vehicle2.route)-1].spotid!=vehicle2.route[len(vehicle2.route)-2].spotid and not len(vehicle2.route)-1 in no_park_idx2:
											lv2=max(arr_t+vehicle2.route[len(vehicle2.route)-1].parkt_arrive,vehicle2.route[-1].ready_fs)+servt_dict2[vehicle2.route[len(vehicle2.route)-1]]*vehicle2.opskill
											st2=max(arr_t+vehicle2.route[len(vehicle2.route)-1].parkt_arrive,vehicle2.route[-1].ready_fs)+vehicle2.route[len(vehicle2.route)-1].parkt_open
										else:
											lv2=max(arr_t,vehicle2.route[-1].ready_fs)+servt_dict2[vehicle2.route[len(vehicle2.route)-1]]*vehicle2.opskill
											st2=max(arr_t,vehicle2.route[-1].ready_fs)
										if vehicle2.route[len(vehicle2.route)-1].spotid!=vehicle2.route[len(vehicle2.route)-2].spotid and not len(vehicle2.route)-1 in no_park_idx2:
											lv2+=vehicle2.route[len(vehicle2.route)-1].parkt_open

									if (argvs.bulkShipping_flag==False and (vehicle2.route[n2-2].custno!="0" or vehicle2.route[n2-1].custno!="0")) or \
										(argvs.bulkShipping_flag==True and (vehicle2.route[n2-2].customers[0].custno!="0" or vehicle2.route[n2-1].customers[0].custno!="0")):
										atpen+=max(0.0,st2-vehicle2.route[n2-1].due_fs)
								atpen+=max(0.0,lv2-vehicle2.endhour)

								##20180605
								# atpen+=max(0.0,arr_t-bv2final_t)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle2,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-vehicle2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1][i2],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
								##
							#### ここまで休憩機能なし用の処理 ####
						else:
							#### ここから休憩機能あり用の処理 ####
							veh1 = dcopy(vehicle1)
							veh1.route = skv1_route
							veh2 = dcopy(vehicle2)
							veh2.route = skv2_route
							if argvs.pickup_flag==True:
								#集荷最適化
								if pick_opt_flag1:
									if not get_pick_opt_status(veh1, argvs)[0]:
										veh1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
								else:
									pick_opt_rest(veh1, pick_opt_flag1, argvs)
								if pick_opt_flag2:
									if not get_pick_opt_status(veh2, argvs)[0]:
										veh2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
								else:
									pick_opt_rest(veh2, pick_opt_flag2, argvs)
							veh1, veh2 = insert_breakspot(takebreak_list1[i3], takebreak_list2[i4], customers, veh1, vehicles, argvs, 0, veh2)
							if veh1==None or veh2==None:
								argvs.management_ttable = t_dcopy(t_ttable)
								argvs.management_dtable = t_dcopy(t_dtable)
								argvs.management_etable = t_dcopy(t_etable)
								argvs.management_xtable = t_dcopy(t_xtable)
								vehicles = r_restore(vehicles, t_route, argvs)
								continue

							lv1 = veh1.lv[-1]
							lv2 = veh2.lv[-1]

							depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
							veh1.update_totalcost_dtable(argvs)
							adist1 = veh1.totalcost
							nn1 = len(veh1.route)
							for i in range(start_idx1,nn1):
								if i==0 or (argvs.bulkShipping_flag==False and (veh1.route[i-1].custno!=veh1.route[i].custno)) or \
									(argvs.bulkShipping_flag==True and (veh1.route[i-1].customers[0].custno!=veh1.route[i].customers[0].custno)):
									atpen+=max(0.0,veh1.st[i]-veh1.route[i].due_fs)
							atpen+=max(0.0,lv1-veh1.endhour)

							depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
							veh2.update_totalcost_dtable(argvs)
							adist2 = veh2.totalcost
							nn2 = len(veh2.route)
							for i in range(start_idx2,nn2):
								if i==0 or (argvs.bulkShipping_flag==False and (veh2.route[i-1].custno!=veh2.route[i].custno)) or \
									(argvs.bulkShipping_flag==True and (veh2.route[i-1].customers[0].custno!=veh2.route[i].customers[0].custno)):
									atpen+=max(0.0,veh2.st[i]-veh2.route[i].due_fs)
							atpen+=max(0.0,lv2-veh2.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
								if is_reserved(veh1,argvs)==False:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								if is_reserved(veh2,argvs)==False:
									atpen_temp,btpen_temp=return_lutime_penalty(lv2-veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
							#### 
							if argvs.management_etable:
								apower1=calc_power(veh1,start_idx1+1,len(veh1.route),argvs)
								apower2=calc_power(veh2,start_idx2+1,len(veh2.route),argvs)
								apower = apower1 + apower2
							if argvs.management_xtable:
								aexp1=calc_exp(veh1,start_idx1+1,len(veh1.route),argvs)
								aexp2=calc_exp(veh2,start_idx2+1,len(veh2.route),argvs)
								aexp = aexp1 + aexp2

							adist = adist1 + adist2
							#### ここまで休憩機能あり用の処理 ####

						#集荷違反量を計算
						if argvs.pickup_flag==True:
							max_load_pen1_1,max_load_pen1_2=calc_vehicle_loadpickup_penalty(skv1_route,vehicle1)
							max_load_pen2_1,max_load_pen2_2=calc_vehicle_loadpickup_penalty(skv2_route,vehicle2)
						else:
							max_load_pen1_1,max_load_pen1_2,max_load_pen2_1,max_load_pen2_2=0,0,0,0

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx1)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
								if skv1_route[k].requestType=="DELIVERY":
									if skv1_route[k].custno[0] != "b":
										load_onbrd+=skv1_route[k].dem
										load_onbrd2+=skv1_route[k].dem2

							load_pen+=max(load_onbrd-vehicle1.cap,0)
							load_pen2+=max(load_onbrd2-vehicle1.cap2,0)
						for j in range(len(depo_idx2)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
								if skv2_route[k].requestType=="DELIVERY":
									if skv2_route[k].custno[0] != "b":
										load_onbrd+=skv2_route[k].dem
										load_onbrd2+=skv2_route[k].dem2

							load_pen+=max(load_onbrd-vehicle2.cap,0)
							load_pen2+=max(load_onbrd2-vehicle2.cap2,0)

						aload =load_pen+max_load_pen1_1+max_load_pen2_1
						aload2 = load_pen2+max_load_pen1_2+max_load_pen2_2
						
						#改善前後の到着時間算出(拠点を出発し最後の配送先での配送を終えて拠点に戻るまで(-l なしの場合))
						if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
							atime=0.0
							time_error = 0.0
						else:
							# #vehicle1の改善後arr計算
							# arr1, _ = calc_vehicle_arr_route(skv1_route, vehicle1, vehicle1.drskill, vehicle1.opskill, vehicle1.chg_batt_dict)
							# #vehicle2の改善後arr計算
							# arr2, _ = calc_vehicle_arr_route(skv2_route, vehicle2, vehicle2.drskill, vehicle2.opskill, vehicle2.chg_batt_dict)
							
							if argvs.opt_t_weight!=0:
								#改善後時間算出
								if lcnt==0:
									atime = lv1 + lv2
								else:
									atime = lv1-delay_arr_list1[i1][i2]+vehicle1.arr[0]+lv2-delay_arr_list2[i1][i2]+vehicle2.arr[0]
							else:
								atime=btime=0.0

							mvehicles={vehicle1:0.0,vehicle2:0.0}
							if lcnt==0:
								mvehicles[vehicle1] = lv1-vehicle1.arr[0]
								mvehicles[vehicle2] = lv2-vehicle2.arr[0]
							else:
								mvehicles[vehicle1] = lv1-delay_arr_list1[i1][i2]
								mvehicles[vehicle2] = lv2-delay_arr_list2[i1][i2]

							if argvs.avetime_ape_flag==True:
								time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avetime_ae_flag==True:
								time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
							else:
								time_error=0.0
						
						if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
							visits_error = 0.0
						else:
							mvehicles={vehicle1:0.0,vehicle2:0.0}
							if argvs.bulkShipping_flag:
								mvehicles[vehicle1] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
								mvehicles[vehicle2] = len([c for r in skv2_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
							else:
								mvehicles[vehicle1] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])
								mvehicles[vehicle2] = len([i for i in range(1,len(skv2_route)-1) if skv2_route[i].custno!="0" and not skv2_route[i].custno.startswith("e") and not skv2_route[i].custno.startswith("b") and skv2_route[i].custno!=skv2_route[i-1].custno])

							if argvs.avevisits_ape_flag==True:
								visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
							elif argvs.avevisits_ae_flag==True:
								visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
							else:
								visits_error=0.0

						if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
							dist_error = 0.0
						else:
							mvehicles={vehicle1:0.0,vehicle2:0.0}
							if lcnt==0:
								mvehicles[vehicle1] = adist1+vehicle1.remdist[0]-vehicle1.remdist[start_idx1]
								mvehicles[vehicle2] = adist2+vehicle2.remdist[0]-vehicle2.remdist[start_idx2]
							else:
								mvehicles[vehicle1] = adist1+vehicle1.delay_remdist[0]-vehicle1.delay_remdist[start_idx1]
								mvehicles[vehicle2] = adist2+vehicle2.delay_remdist[0]-vehicle2.delay_remdist[start_idx2]

							if argvs.avedist_ape_flag==True:
								dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avedist_ae_flag==True:
								dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
							else:
								dist_error=0.0
						
						#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
						if argvs.opt_unassigned_flag==True:
							if vehicle1.reserved_v_flag==True:
								aunass = len([c for c in skv1_route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
							if vehicle2.reserved_v_flag==True:
								aunass += len([c for c in skv2_route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

						ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907

						if ires_temp and cdiff<cdiff_best:
							ires=True
							cdiff_best=cdiff
							pick_opt_flag1_best,pick_opt_flag2_best=pick_opt_flag1,pick_opt_flag2
							index1,index2=i1,i2
							delay_lcnt_best=lcnt
							if argvs.break_flag:
								route1_best = skv1_route
								route2_best = skv2_route
								ttable_best = argvs.management_ttable
								dtable_best = argvs.management_dtable
								etable_best = argvs.management_etable
								xtable_best = argvs.management_xtable
								vehnos=[v.vehno for v in vehicles]
								vehicles[vehnos.index(vehicle1.vehno)].route = skv1_route
								vehicles[vehnos.index(vehicle2.vehno)].route = skv2_route
								t_route_best = r_backup(vehicles)

						if argvs.break_flag:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
			
	return ires,btpen,bload,bload2,pick_opt_flag1_best,pick_opt_flag2_best,index1,index2,delay_lcnt_best,route1_best,route2_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best

#def exchange_improved_lastc_dtable(vehicle1,vehicle2,pos1,pos2,argvs):
def exchange_improved_lastc_dtable(customers,vehicle1,vehicle2,pos1,pos2,vehicles,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list1,delay_arr_list2): #20200730
	ires=False
	index1,index2=0,0
	delay_lcnt_best=0
	pick_opt_flag1_best,pick_opt_flag2_best=False,False
	cdiff_best=0
	route1_best=None
	route2_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if vehicle1.route[pos1].custno=="0" or vehicle2.route[pos2].custno=="0": #デポが含まれるならスキップ
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	if vehicle1.route[pos1].custno[0]=="b" or vehicle2.route[pos2].custno[0]=="b": #休憩スポットが含まれるならスキップ
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	##if(pos1<=0 or pos2<=0 or pos1+1>=len(vehicle1.route)-1 or pos2+1>=len(vehicle2.route)-1): ##1st route mo taisyo ni suru
	if(pos1<=0 or pos2<=0 or pos1+1>len(vehicle1.route)-1 or pos2+1>len(vehicle2.route)-1): ##1st route mo taisyo ni suru
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None
		
	#変更後にvehnoがreje_veに含まれていたらFalseを返す
	if vehicle1.vehno in vehicle2.route[pos2].reje_ve or vehicle2.vehno in vehicle1.route[pos1].reje_ve:
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	if free_or_additive(vehicle1.route[pos1],vehicle1,vehicles,argvs)=="additive" or free_or_additive(vehicle2.route[pos2],vehicle2,vehicles,argvs)=="additive": #条件2が含まれるならスキップ
		return False,0.0,0.0,0.0,False,False,0,0,0,None,None,None,None,None,None,None

	depo_idx1=[j for j,c in enumerate(vehicle1.route[:-1]) if c.custno=="0"]+[len(vehicle1.route)-1]
	for i in range(len(depo_idx1)-1):
		if depo_idx1[i]<pos1 and pos1<=depo_idx1[i+1]:
			start_idx1=depo_idx1[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and (delay_arr_list1==[] or delay_arr_list2==[]):
		start_idx1=pos1-1
	if delay_arr_list1!=[] and delay_arr_list2!=[] or argvs.break_flag==True:
		start_idx1=0

	depo_idx2=[j for j,c in enumerate(vehicle2.route[:-1]) if c.custno=="0"]+[len(vehicle2.route)-1]
	for i in range(len(depo_idx2)-1):
		if depo_idx2[i]<pos2 and pos2<=depo_idx2[i+1]:
			start_idx2=depo_idx2[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and (delay_arr_list1==[] or delay_arr_list2==[]):
		start_idx2=pos2-1
	if delay_arr_list1!=[] and delay_arr_list2!=[] or argvs.break_flag==True:
		start_idx2=0

	n1,n2=len(vehicle1.route),len(vehicle2.route)
	bdist,adist,btpen,atpen,bpower,apower,bexp,aexp,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0

	blast_idx1=n1
	for i in reversed(range(0,n1)):
		if vehicle1.route[i].custno!="0" and vehicle1.route[i].custno[0]!="b" and vehicle1.route[i].custno[0]!="e" and i!=len(vehicle1.route)-1:
			break
		else:
			blast_idx1=i

	blast_idx2=n2
	for i in reversed(range(0,n2)):
		if vehicle2.route[i].custno!="0" and vehicle2.route[i].custno[0]!="b" and vehicle2.route[i].custno[0]!="e" and i!=len(vehicle2.route)-1:
			break
		else:
			blast_idx2=i

	for i in range(start_idx1,blast_idx1):
		if i==0 or vehicle1.route[i-1].custno!=vehicle1.route[i].custno:
			btpen+=max(0.0,vehicle1.st[i]-vehicle1.route[i].due_fs)
	btpen+=max(0.0,vehicle1.lv[blast_idx1-1]-vehicle1.endhour)

	for i in range(start_idx2,blast_idx2):
		if i==0 or vehicle2.route[i-1].custno!=vehicle2.route[i].custno:
			btpen+=max(0.0,vehicle2.st[i]-vehicle2.route[i].due_fs)
	btpen+=max(0.0,vehicle2.lv[blast_idx2-1]-vehicle2.endhour)

	#mvehicles={vehicle1:0.0,vehicle2:0.0}
	##kaizen mae no final arrive time
	bv1final_t=vehicle1.lv[blast_idx1-1]
	bv2final_t=vehicle2.lv[blast_idx2-1]
	##

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True:
		if vehicle1.reserved_v_flag==True:
			bunass = len([c for c in vehicle1.route[1:blast_idx1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
		if vehicle2.reserved_v_flag==True:
			bunass += len([c for c in vehicle2.route[1:blast_idx2] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	#集荷最適化(簡易アルゴリズム判定)
	pick_nondepo_flag=False
	if vehicle1.route[-1].custno!="0" or vehicle2.route[-1].custno!="0":
		for c in vehicle1.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break
		for c in vehicle2.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break

	if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist1=calc_dist(vehicle1,start_idx1+1,blast_idx1,argvs)
		bdist2=calc_dist(vehicle2,start_idx2+1,blast_idx2,argvs)
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=calc_power(vehicle1,start_idx1+1,blast_idx1,argvs) \
			+ calc_power(vehicle2,start_idx2+1,blast_idx2,argvs)
		if argvs.management_xtable:
			bexp=calc_exp(vehicle1,start_idx1+1,blast_idx1,argvs) \
			+ calc_exp(vehicle2,start_idx2+1,blast_idx2,argvs)
	else:
		bdist1=get_dtable(vehicle1.vtype, vehicle1.lv[pos1-1], argvs.management_dtable)[vehicle1.route[pos1-1].spotno][vehicle1.route[pos1].spotno]
		bdist2=get_dtable(vehicle2.vtype, vehicle2.lv[pos2-1], argvs.management_dtable)[vehicle2.route[pos2-1].spotno][vehicle2.route[pos2].spotno]
		
		if (pos1+1)<blast_idx1:
			bdist1+=get_dtable(vehicle1.vtype, vehicle1.lv[pos1], argvs.management_dtable)[vehicle1.route[pos1].spotno][vehicle1.route[pos1+1].spotno]
		if (pos2+1)<blast_idx2:
			bdist2+=get_dtable(vehicle2.vtype, vehicle2.lv[pos2], argvs.management_dtable)[vehicle2.route[pos2].spotno][vehicle2.route[pos2+1].spotno]
		bdist=bdist1+bdist2
		
		if argvs.management_etable:
			bpower=get_etable(vehicle1.vtype, vehicle1.etype, vehicle1.lv[pos1-1], argvs.management_etable)[vehicle1.route[pos1-1].spotno][vehicle1.route[pos1].spotno] \
			+get_etable(vehicle2.vtype, vehicle2.etype, vehicle2.lv[pos2-1], argvs.management_etable)[vehicle2.route[pos2-1].spotno][vehicle2.route[pos2].spotno]
			if (pos1+1)<blast_idx1:
				bpower+=get_etable(vehicle1.vtype, vehicle1.etype, vehicle1.lv[pos1], argvs.management_etable)[vehicle1.route[pos1].spotno][vehicle1.route[pos1+1].spotno]
			if (pos2+1)<blast_idx2:
				bpower+=get_etable(vehicle2.vtype, vehicle2.etype, vehicle2.lv[pos2], argvs.management_etable)[vehicle2.route[pos2].spotno][vehicle2.route[pos2+1].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(vehicle1.vtype, vehicle1.lv[pos1-1], argvs.management_xtable)[vehicle1.route[pos1-1].spotno][vehicle1.route[pos1].spotno] \
			+get_xtable(vehicle2.vtype, vehicle2.lv[pos2-1], argvs.management_xtable)[vehicle2.route[pos2-1].spotno][vehicle2.route[pos2].spotno]
			if (pos1+1)<blast_idx1:
				bexp+=get_xtable(vehicle1.vtype, vehicle1.lv[pos1], argvs.management_xtable)[vehicle1.route[pos1].spotno][vehicle1.route[pos1+1].spotno]
			if (pos2+1)<blast_idx2:
				bexp+=get_xtable(vehicle2.vtype, vehicle2.lv[pos2], argvs.management_xtable)[vehicle2.route[pos2].spotno][vehicle2.route[pos2+1].spotno]

	bload = vehicle1.load_pen+vehicle2.load_pen
	bload2 = vehicle1.load_pen2+vehicle2.load_pen2

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = vehicle1.lv[blast_idx1-1]+vehicle2.lv[blast_idx2-1]
	else:
		btime=0.0

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error

	
	if delay_arr_list1!=[] and delay_arr_list2!=[]:
		delay_lcnt=2
	else:
		delay_lcnt=1

	takebreak_list1 = [[]]
	takebreak_list2 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in vehicle1.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト
		takebreak_list2 = [*map(list, product(*[[c for c in t.additionalcust] for t in vehicle2.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for i1 in range(len(vehicle1.route[pos1].additionalcust)):
		if free_or_additive(vehicle1.route[pos1],vehicle1,vehicles,argvs)=="additive" and i1!=0:
			continue
		for i2 in range(len(vehicle2.route[pos2].additionalcust)):
			if free_or_additive(vehicle2.route[pos2],vehicle2,vehicles,argvs)=="additive" and i2!=0:
				continue
			for i3 in range(len(takebreak_list1)):
				for i4 in range(len(takebreak_list2)):
					for lcnt in range(delay_lcnt):
						adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
						btpen_temp=btpen
						atpen_temp=0
						#変更後に訪問数上限を超えていたらFalseを返す
						v1_spotid=[c.spotid for c in vehicle1.route]
						v2_spotid=[c.spotid for c in vehicle2.route]
						v1_spotid[pos1],v2_spotid[pos2]=vehicle2.route[pos2].additionalcust[i2].spotid,vehicle1.route[pos1].additionalcust[i1].spotid
						# #visitnum1=len([len([*group]) for i,group in groupby(v1_spotid[1:-1])])-len([c for i,c in enumerate(v1_spotid[1:-1]) if c=="0" and (v1_spotid[i]!="0" or i==0)])
						# visitnum1=calc_visitnum(vehicle1)
						# #visitnum2=len([len([*group]) for i,group in groupby(v2_spotid[1:-1])])-len([c for i,c in enumerate(v2_spotid[1:-1]) if c=="0" and (v2_spotid[i]!="0" or i==0)])
						# visitnum2=calc_visitnum(vehicle2)
						# if (vehicle1.maxvisit>0 and visitnum1>vehicle1.maxvisit) or (vehicle2.maxvisit>0 and visitnum2>vehicle2.maxvisit):
						# 	continue

						skv1_route,skv2_route = vehicle1.route[:],vehicle2.route[:]             # ルート全体をコピー
						skv1_route[pos1],skv2_route[pos2] = skv2_route[pos2].additionalcust[i2],skv1_route[pos1].additionalcust[i1]	# ルート入替

						visitnum1=calc_visitnum(skv1_route)
						visitnum2=calc_visitnum(skv2_route)
						if (vehicle1.maxvisit>0 and visitnum1>vehicle1.maxvisit) or (vehicle2.maxvisit>0 and visitnum2>vehicle2.maxvisit):
							continue

						alast_idx1=len(skv1_route)
						for i in reversed(range(0,len(skv1_route))):
							if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
								break
							else:
								alast_idx1=i

						alast_idx2=len(skv2_route)
						for i in reversed(range(0,len(skv2_route))):
							if skv2_route[i].custno!="0" and skv2_route[i].custno[0]!="b" and skv2_route[i].custno[0]!="e" and i!=len(skv2_route)-1:
								break
							else:
								alast_idx2=i

						depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						servt_dict1={}
						for k in range(len(depo_idx1)-1):
							servt_dict1[skv1_route[depo_idx1[k]]]=0
							servt=0
							for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
								if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno:
									servt+=skv1_route[j].depotservt
							if skv1_route[depo_idx1[k]+1].custno[0]!="b":
								if skv1_route[depo_idx1[k]+1].custno!="0":
									servt_dict1[skv1_route[depo_idx1[k]]]+=servt+vehicle1.depotservt
								else:
									servt_dict1[skv1_route[depo_idx1[k]]]+=servt
						#集荷時間
						servt_dict1[skv1_route[len(skv1_route)-1]]=0
						for k in range(1,len(depo_idx1)):
							servt=0
							for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
								if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
									if skv1_route[j].custno[0]!="b":
										servt+=skv1_route[j].depotservt
							servt_dict1[skv1_route[depo_idx1[k]]]+=servt

						depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
						servt_dict2={}
						for k in range(len(depo_idx2)-1):
							servt_dict2[skv2_route[depo_idx2[k]]]=0
							servt=0
							for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
								if skv2_route[j].requestType=="DELIVERY" and skv2_route[j].custno!=skv2_route[j-1].custno:
									servt+=skv2_route[j].depotservt
							if skv2_route[depo_idx2[k]+1].custno[0]!="b":
								if skv2_route[depo_idx2[k]+1].custno!="0":
									servt_dict2[skv2_route[depo_idx2[k]]]+=servt+vehicle2.depotservt
								else:
									servt_dict2[skv2_route[depo_idx2[k]]]+=servt
						#集荷時間
						servt_dict2[skv2_route[len(skv2_route)-1]]=0
						for k in range(1,len(depo_idx2)):
							servt=0
							for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
								if skv2_route[j].requestType=="PICKUP" and skv2_route[j].custno!=skv2_route[j-1].custno:
									if skv2_route[j].custno[0]!="b":
										servt+=skv2_route[j].depotservt
							servt_dict2[skv2_route[depo_idx2[k]]]+=servt
						
						tdepo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]

						load=[0 for c in skv1_route]
						load2=[0 for c in skv1_route]
						for i in range(len(skv1_route)-1):
							if i in tdepo_idx1:
								for j in range(i+1,tdepo_idx1[tdepo_idx1.index(i)+1]):
									if skv1_route[j].requestType=="DELIVERY":
										if skv1_route[j].custno[0] != "b":
											load[i]+=skv1_route[j].dem
											load2[i]+=skv1_route[j].dem2
							else:
								if skv1_route[i].custno[0] != "0":
									if skv1_route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-skv1_route[i].dem
										load2[i]=load2[i-1]-skv1_route[i].dem2
									else:
										load[i]=load[i-1]+skv1_route[i].dem
										load2[i]=load2[i-1]+skv1_route[i].dem2

						for i in reversed(range(len(load))):
							if i in tdepo_idx1 and i+1 in tdepo_idx1:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx1=[]
						for c in skv1_route[tdepo_idx1[0]+1:tdepo_idx1[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx1.append(0)
						
						for i in range(1,len(tdepo_idx1)-1):
							if load[tdepo_idx1[i]-1]==0 and load2[tdepo_idx1[i]-1]==0:
								for c in skv1_route[tdepo_idx1[i]+1:tdepo_idx1[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[tdepo_idx1[i]]==0 and load2[tdepo_idx1[i]]==0:
										no_park_idx1.append(vehicle1.route.index(skv1_route[tdepo_idx1[i]]))
						if load[tdepo_idx1[-1]-1]==0 and load2[tdepo_idx1[-1]-1]==0:
							no_park_idx1.append(vehicle1.route.index(skv1_route[tdepo_idx1[-1]]))

						pick_opt_flag1=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(skv1_route)-1)):
								if argvs.bulkShipping_flag==True:
									if skv1_route[i].customers[0].custno!="0":
										if skv1_route[i].customers[0].custno[0]!="b":
											non_depo=True
											if skv1_route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break
								else:
									if skv1_route[i].custno!="0":
										if skv1_route[i].custno[0]!="b":
											non_depo=True
											if skv1_route[i].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break

						tdepo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]

						load=[0 for c in skv2_route]
						load2=[0 for c in skv2_route]
						for i in range(len(skv2_route)-1):
							if i in tdepo_idx2:
								for j in range(i+1,tdepo_idx2[tdepo_idx2.index(i)+1]):
									if skv2_route[j].requestType=="DELIVERY":
										if skv2_route[j].custno[0] != "b":
											load[i]+=skv2_route[j].dem
											load2[i]+=skv2_route[j].dem2
							else:
								if skv2_route[i].custno[0] != "b":
									if skv2_route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-skv2_route[i].dem
										load2[i]=load2[i-1]-skv2_route[i].dem2
									else:
										load[i]=load[i-1]+skv2_route[i].dem
										load2[i]=load2[i-1]+skv2_route[i].dem2

						for i in reversed(range(len(load))):
							if i in tdepo_idx2 and i+1 in tdepo_idx2:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx2=[]
						for c in skv2_route[tdepo_idx2[0]+1:tdepo_idx2[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx2.append(0)
						
						for i in range(1,len(tdepo_idx2)-1):
							if load[tdepo_idx2[i]-1]==0 and load2[tdepo_idx2[i]-1]==0:
								for c in skv2_route[tdepo_idx2[i]+1:tdepo_idx2[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[tdepo_idx2[i]]==0 and load2[tdepo_idx2[i]]==0:
										no_park_idx2.append(vehicle2.route.index(skv2_route[tdepo_idx2[i]]))
						if load[tdepo_idx2[-1]-1]==0 and load2[tdepo_idx2[-1]-1]==0:
							no_park_idx2.append(vehicle2.route.index(skv2_route[tdepo_idx2[-1]]))

						pick_opt_flag2=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(skv2_route)-1)):
								if argvs.bulkShipping_flag==True:
									if skv2_route[i].customers[0].custno!="0":
										if skv2_route[i].customers[0].custno[0]!="b":
											non_depo=True
											if skv2_route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break
								else:
									if skv2_route[i].custno!="0":
										if skv2_route[i].custno[0]!="b":
											non_depo=True
											if skv2_route[i].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break

						if argvs.break_flag==False:
							#### ここから休憩機能なし用の処理 ####
							if lcnt==0:
								if vehicle1.route[start_idx1] in servt_dict1:
									if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
										lv_t=max(vehicle1.arr[start_idx1]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+servt_dict1[vehicle1.route[start_idx1]]*vehicle1.opskill
										st_t=max(vehicle1.arr[start_idx1]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].parkt_open
									else:
										lv_t=max(vehicle1.arr[start_idx1],vehicle1.route[start_idx1].ready_fs)+servt_dict1[vehicle1.route[start_idx1]]*vehicle1.opskill
										st_t=max(vehicle1.arr[start_idx1],vehicle1.route[start_idx1].ready_fs)
								else:
									if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
										lv_t=max(vehicle1.arr[start_idx1]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].servt*vehicle1.opskill
										st_t=max(vehicle1.arr[start_idx1]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].parkt_open
									else:
										lv_t=max(vehicle1.arr[start_idx1],vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].servt*vehicle1.opskill
										st_t=max(vehicle1.arr[start_idx1],vehicle1.route[start_idx1].ready_fs)
							else:
								if vehicle1.route[start_idx1] in servt_dict1:
									if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
										lv_t=max(delay_arr_list1[i1][i2]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+servt_dict1[vehicle1.route[start_idx1]]*vehicle1.opskill
										st_t=max(delay_arr_list1[i1][i2]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].parkt_open
									else:
										lv_t=max(delay_arr_list1[i1][i2],vehicle1.route[start_idx1].ready_fs)+servt_dict1[vehicle1.route[start_idx1]]*vehicle1.opskill
										st_t=max(delay_arr_list1[i1][i2],vehicle1.route[start_idx1].ready_fs)
								else:
									if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
										lv_t=max(delay_arr_list1[i1][i2]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].servt*vehicle1.opskill
										st_t=max(delay_arr_list1[i1][i2]+vehicle1.route[start_idx1].parkt_arrive,vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].parkt_open
									else:
										lv_t=max(delay_arr_list1[i1][i2],vehicle1.route[start_idx1].ready_fs)+vehicle1.route[start_idx1].servt*vehicle1.opskill
										st_t=max(delay_arr_list1[i1][i2],vehicle1.route[start_idx1].ready_fs)
							if (start_idx1==0 or vehicle1.route[start_idx1].spotid!=vehicle1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
								lv_t+=vehicle1.route[start_idx1].parkt_open
							if start_idx1==0 or vehicle1.route[start_idx1-1].custno!="0" or vehicle1.route[start_idx1].custno!="0": #デポが連続しない場合
								atpen += max(0.0, st_t-vehicle1.route[start_idx1].due_fs)
							arr_t=vehicle1.arr[start_idx1]

							if start_idx1!=0 and vehicle1.route[start_idx1].custno==vehicle1.route[start_idx1-1].custno and vehicle1.route[start_idx1].custno!="0":
								lv_t=vehicle1.lv[start_idx1-1]
								arr_t=vehicle1.arr[start_idx1-1]

							impassable=True
							for i in range(start_idx1,pos1-1):
								from_c,to_c=vehicle1.route[i],vehicle1.route[i+1]

								if to_c.custno==from_c.custno and to_c.custno!="0":
									continue

								dtable6 = get_dtable(vehicle1.vtype, lv_t, argvs.management_dtable)
								ttable7 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
								if argvs.management_etable:
									etable6 = get_etable(vehicle1.vtype, vehicle1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable6 = get_xtable(vehicle1.vtype, lv_t, argvs.management_xtable)

								if ttable7[from_c.spotno][to_c.spotno]==-1 or \
								dtable6[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable6[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable6[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								arr_t=lv_t+ttable7[from_c.spotno][to_c.spotno]*vehicle1.drskill
								if to_c in servt_dict1:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx1):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict1[to_c]*vehicle1.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[to_c]*vehicle1.opskill
										st_t=max(arr_t,to_c.ready_fs)
								else:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx1):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*vehicle1.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*vehicle1.opskill
										st_t=max(arr_t,to_c.ready_fs)
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx1):
									lv_t+=to_c.parkt_open

								if from_c.custno!="0" or to_c.custno!="0":
									atpen+=max(0.0,st_t-to_c.due_fs)

								adist+=dtable6[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable6[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable6[from_c.spotno][to_c.spotno]
							if impassable==False:
								continue

							if vehicle1.route[pos1-1].custno!=vehicle2.route[pos2].additionalcust[i2].custno or vehicle2.route[pos2].additionalcust[i2].custno=="0":
								dtable1 = get_dtable(vehicle1.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable1 = get_etable(vehicle1.vtype, vehicle1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable1 = get_xtable(vehicle1.vtype, lv_t, argvs.management_xtable)

								#変更後に通行不可能ならFalseを返す
								ttable1 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
								if ttable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]==-1 or \
									dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]==-1 or \
									(argvs.management_etable and etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]==-1) or \
									(argvs.management_xtable and xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]==-1):
									continue

								adist+=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]
								if argvs.management_etable:
									apower+=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]
								if argvs.management_xtable:
									aexp+=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]

								arr_t=lv_t+ttable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].additionalcust[i2].spotno]*vehicle1.drskill
								if vehicle2.route[pos2].additionalcust[i2] in servt_dict1:
									if vehicle2.route[pos2].additionalcust[i2].spotid!=vehicle1.route[pos1-1].spotid:
										lv_t=max(arr_t+vehicle2.route[pos2].additionalcust[i2].parkt_arrive,vehicle2.route[pos2].additionalcust[i2].ready_fs)+servt_dict1[vehicle2.route[pos2].additionalcust[i2]]*vehicle1.opskill
										st_t=max(arr_t+vehicle2.route[pos2].additionalcust[i2].parkt_arrive,vehicle2.route[pos2].additionalcust[i2].ready_fs)+vehicle2.route[pos2].additionalcust[i2].parkt_open
									else:
										lv_t=max(arr_t,vehicle2.route[pos2].additionalcust[i2].ready_fs)+servt_dict1[vehicle2.route[pos2].additionalcust[i2]]*vehicle1.opskill
										st_t=max(arr_t,vehicle2.route[pos2].additionalcust[i2].ready_fs)
								else:
									if vehicle2.route[pos2].additionalcust[i2].spotid!=vehicle1.route[pos1-1].spotid:
										lv_t=max(arr_t+vehicle2.route[pos2].additionalcust[i2].parkt_arrive,vehicle2.route[pos2].additionalcust[i2].ready_fs)+vehicle2.route[pos2].additionalcust[i2].servt*vehicle1.opskill
										st_t=max(arr_t+vehicle2.route[pos2].additionalcust[i2].parkt_arrive,vehicle2.route[pos2].additionalcust[i2].ready_fs)+vehicle2.route[pos2].additionalcust[i2].parkt_open
									else:
										lv_t=max(arr_t,vehicle2.route[pos2].additionalcust[i2].ready_fs)+vehicle2.route[pos2].additionalcust[i2].servt*vehicle1.opskill
										st_t=max(arr_t,vehicle2.route[pos2].additionalcust[i2].ready_fs)
								if vehicle2.route[pos2].additionalcust[i2].spotid!=vehicle1.route[pos1-1].spotid:
									lv_t+=vehicle2.route[pos2].additionalcust[i2].parkt_open
								if vehicle1.route[pos1-1].custno!="0" or vehicle2.route[pos2].additionalcust[i2].custno!="0":
									atpen+=max(0.0,st_t-vehicle2.route[pos2].additionalcust[i2].due_fs)

							ttable8 = get_ttable(vehicle1.vtype, lv_t, argvs.management_ttable)
							dtable8 = get_dtable(vehicle1.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable8 = get_etable(vehicle1.vtype, vehicle1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable8 = get_xtable(vehicle1.vtype, lv_t, argvs.management_xtable)

							if (argvs.bulkShipping_flag==False and pos1+1==len(vehicle1.route)-1 and vehicle2.route[pos2].additionalcust[i2].custno!="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==True) or \
								(argvs.bulkShipping_flag==True and pos1+1==len(vehicle1.route)-1 and vehicle2.route[pos2].additionalcust[i2].customers[0].custno!="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
								if ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]==-1 or \
								dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]==-1 or \
								(argvs.management_etable and etable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]==-1) or \
								(argvs.management_xtable and xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]==-1):
									continue

								arr=lv_t+ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][customers[0].spotno]*vehicle1.drskill
								lv=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[vehicle1.route[pos1+1]]+vehicle1.depotservt)*vehicle1.opskill
								lv+=customers[0].parkt_open

								ttable15 = get_ttable(vehicle1.vtype, lv, argvs.management_ttable)
								dtable11 = get_dtable(vehicle1.vtype, lv, argvs.management_dtable)
								if argvs.management_etable:
									etable11 = get_etable(vehicle1.vtype, vehicle1.etype, lv, argvs.management_etable)
								if argvs.management_xtable:
									xtable11 = get_xtable(vehicle1.vtype, lv, argvs.management_xtable)

								if ttable15[customers[0].spotno][vehicle1.route[pos1+1].spotno]==-1 or \
									dtable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]==-1 or \
									(argvs.management_etable and etable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]==-1) or \
									(argvs.management_xtable and xtable11[customers[0].spotno][vehicle1.route[pos1+1].spotno]==-1):
									continue
							elif (argvs.bulkShipping_flag==False and pos1+1==len(vehicle1.route)-2 and vehicle1.route[-2].custno=="0" and vehicle1.route[-1].custno!="0" and pick_opt_flag1==False) or \
								(argvs.bulkShipping_flag==True and pos1+1==len(vehicle1.route)-2 and vehicle1.route[-2].customers[0].custno=="0" and vehicle1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
								if ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[-1].spotno]==-1 or \
									dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[-1].spotno]==-1 or \
									(argvs.management_etable and etable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[-1].spotno]==-1) or \
									(argvs.management_xtable and xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[-1].spotno]==-1):
									continue
							else:
								if ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]==-1 or \
								dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]==-1 or \
								(argvs.management_etable and etable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]==-1) or \
								(argvs.management_xtable and xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]==-1):
									continue

							if pos1+1<blast_idx1:
								adist+=dtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]
								if argvs.management_etable:
									apower+=etable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]

							arr1=arr_t
							lv1=lv_t
							st1=st_t

							if vehicle2.route[pos2].additionalcust[i2].custno!=vehicle1.route[pos1+1].custno or vehicle1.route[pos1+1].custno=="0":
								arr=lv_t+ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]*vehicle1.drskill
								if vehicle1.route[pos1+1] in servt_dict1:
									if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
										lv=max(arr+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+servt_dict1[vehicle1.route[pos1+1]]*vehicle1.opskill
									else:
										lv=max(arr,vehicle1.route[pos1+1].ready_fs)+servt_dict1[vehicle1.route[pos1+1]]*vehicle1.opskill
								else:
									if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
										lv=max(arr+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].servt*vehicle1.opskill
									else:
										lv=max(arr,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].servt*vehicle1.opskill
								if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
									lv+=vehicle1.route[pos1+1].parkt_open
							else:
								arr=arr_t
								lv=lv_t

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,vehicle1,lv,pos1+2,servt_dict1,blast_idx1,no_park_idx1,pick_opt_flag1,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
							adist1=adist


							if lcnt==0:
								if vehicle2.route[start_idx2] in servt_dict2:
									if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
										lv_t=max(vehicle2.arr[start_idx2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+servt_dict2[vehicle2.route[start_idx2]]*vehicle2.opskill
										st_t=max(vehicle2.arr[start_idx2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].parkt_open
									else:
										lv_t=max(vehicle2.arr[start_idx2],vehicle2.route[start_idx2].ready_fs)+servt_dict2[vehicle2.route[start_idx2]]*vehicle2.opskill
										st_t=max(vehicle2.arr[start_idx2],vehicle2.route[start_idx2].ready_fs)
								else:
									if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
										lv_t=max(vehicle2.arr[start_idx2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
										st_t=max(vehicle2.arr[start_idx2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].parkt_open
									else:
										lv_t=max(vehicle2.arr[start_idx2],vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
										st_t=max(vehicle2.arr[start_idx2],vehicle2.route[start_idx2].ready_fs)
							else:
								if vehicle2.route[start_idx2] in servt_dict2:
									if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
										lv_t=max(delay_arr_list2[i1][i2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+servt_dict2[vehicle2.route[start_idx2]]*vehicle2.opskill
										st_t=max(delay_arr_list2[i1][i2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].parkt_open
									else:
										lv_t=max(delay_arr_list2[i1][i2],vehicle2.route[start_idx2].ready_fs)+servt_dict2[vehicle2.route[start_idx2]]*vehicle2.opskill
										st_t=max(delay_arr_list2[i1][i2],vehicle2.route[start_idx2].ready_fs)
								else:
									if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
										lv_t=max(delay_arr_list2[i1][i2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
										st_t=max(delay_arr_list2[i1][i2]+vehicle2.route[start_idx2].parkt_arrive,vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
									else:
										lv_t=max(delay_arr_list2[i1][i2],vehicle2.route[start_idx2].ready_fs)+vehicle2.route[start_idx2].servt*vehicle2.opskill
										st_t=max(delay_arr_list2[i1][i2],vehicle2.route[start_idx2].ready_fs)
							if (start_idx2==0 or vehicle2.route[start_idx2].spotid!=vehicle2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
								lv_t+=vehicle2.route[start_idx2].parkt_open
							if start_idx2==0 or vehicle2.route[start_idx2-1].custno!="0" or vehicle2.route[start_idx2].custno!="0": #デポが連続しない場合
								atpen += max(0.0, st_t-vehicle2.route[start_idx2].due_fs)
							arr_t=vehicle2.arr[start_idx2]

							if start_idx2!=0 and vehicle2.route[start_idx2].custno==vehicle2.route[start_idx2-1].custno and vehicle2.route[start_idx2].custno!="0":
								lv_t=vehicle2.lv[start_idx2-1]
								arr_t=vehicle2.arr[start_idx2-1]
								st_t=vehicle2.st[start_idx2-1]

							impassable=True
							for i in range(start_idx2,pos2-1):
								from_c,to_c=vehicle2.route[i],vehicle2.route[i+1]

								if to_c.custno==from_c.custno and to_c.custno!="0":
									continue

								dtable6 = get_dtable(vehicle2.vtype, lv_t, argvs.management_dtable)
								ttable7 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
								if argvs.management_etable:
									etable6 = get_etable(vehicle2.vtype, vehicle2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable6 = get_xtable(vehicle2.vtype, lv_t, argvs.management_xtable)

								if ttable7[from_c.spotno][to_c.spotno]==-1 or \
								dtable6[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable6[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable6[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								arr_t=lv_t+ttable7[from_c.spotno][to_c.spotno]*vehicle2.drskill
								if to_c in servt_dict2:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx2):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict2[to_c]*vehicle2.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+servt_dict2[to_c]*vehicle2.opskill
										st_t=max(arr_t,to_c.ready_fs)
								else:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx2):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*vehicle2.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*vehicle2.opskill
										st_t=max(arr_t,to_c.ready_fs)
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx2):
									lv_t+=to_c.parkt_open

								if from_c.custno!="0" or to_c.custno!="0":
									atpen+=max(0.0,st_t-to_c.due_fs)

								adist+=dtable6[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable6[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable6[from_c.spotno][to_c.spotno]
							if impassable==False:
								continue

							if vehicle2.route[pos2-1].custno!=vehicle1.route[pos1].additionalcust[i1].custno or vehicle1.route[pos1].additionalcust[i1].custno=="0":
								dtable5 = get_dtable(vehicle2.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable5 = get_etable(vehicle2.vtype, vehicle2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable5 = get_xtable(vehicle2.vtype, lv_t, argvs.management_xtable)

								ttable5 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
								if ttable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]==-1 or \
									dtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]==-1 or \
									(argvs.management_etable and etable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]==-1) or \
									(argvs.management_xtable and xtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]==-1):
									continue

								adist+=dtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]
								if argvs.management_etable:
									apower+=etable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]
								if argvs.management_xtable:
									aexp+=xtable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]

								arr_t=lv_t+ttable5[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].additionalcust[i1].spotno]*vehicle2.drskill
								if vehicle1.route[pos1].additionalcust[i1] in servt_dict2:
									if vehicle1.route[pos1].additionalcust[i1].spotid!=vehicle2.route[pos2-1].spotid:
										lv_t=max(arr_t+vehicle1.route[pos1].additionalcust[i1].parkt_arrive,vehicle1.route[pos1].additionalcust[i1].ready_fs)+servt_dict2[vehicle1.route[pos1].additionalcust[i1]]*vehicle2.opskill
										st_t=max(arr_t+vehicle1.route[pos1].additionalcust[i1].parkt_arrive,vehicle1.route[pos1].additionalcust[i1].ready_fs)+vehicle1.route[pos1].additionalcust[i1].parkt_open
									else:
										lv_t=max(arr_t,vehicle1.route[pos1].additionalcust[i1].ready_fs)+servt_dict2[vehicle1.route[pos1].additionalcust[i1]]*vehicle2.opskill
										st_t=max(arr_t,vehicle1.route[pos1].additionalcust[i1].ready_fs)
								else:
									if vehicle1.route[pos1].additionalcust[i1].spotid!=vehicle2.route[pos2-1].spotid:
										lv_t=max(arr_t+vehicle1.route[pos1].additionalcust[i1].parkt_arrive,vehicle1.route[pos1].additionalcust[i1].ready_fs)+vehicle1.route[pos1].additionalcust[i1].servt*vehicle2.opskill
										st_t=max(arr_t+vehicle1.route[pos1].additionalcust[i1].parkt_arrive,vehicle1.route[pos1].additionalcust[i1].ready_fs)+vehicle1.route[pos1].additionalcust[i1].parkt_open
									else:
										lv_t=max(arr_t,vehicle1.route[pos1].additionalcust[i1].ready_fs)+vehicle1.route[pos1].additionalcust[i1].servt*vehicle2.opskill
										st_t=max(arr_t,vehicle1.route[pos1].additionalcust[i1].ready_fs)
								if vehicle1.route[pos1].additionalcust[i1].spotid!=vehicle2.route[pos2-1].spotid:
									lv_t+=vehicle1.route[pos1].additionalcust[i1].parkt_open
								if vehicle2.route[pos2-1].custno!="0" or vehicle1.route[pos1].additionalcust[i1].custno!="0":
									atpen+=max(0.0,st_t-vehicle1.route[pos1].additionalcust[i1].due_fs)

							ttable10 = get_ttable(vehicle2.vtype, lv_t, argvs.management_ttable)
							dtable10 = get_dtable(vehicle2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable10 = get_etable(vehicle2.vtype, vehicle2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable10 = get_xtable(vehicle2.vtype, lv_t, argvs.management_xtable)

							if (argvs.bulkShipping_flag==False and pos2+1==len(vehicle2.route)-1 and vehicle1.route[pos1].additionalcust[i1].custno!="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==True) or \
								(argvs.bulkShipping_flag==True and pos2+1==len(vehicle2.route)-1 and vehicle1.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
								if ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
								dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
								(argvs.management_etable and etable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1) or \
								(argvs.management_xtable and xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1):
									continue

								arr=lv_t+ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][customers[0].spotno]*vehicle2.drskill
								lv=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[vehicle2.route[pos2+1]]+vehicle2.depotservt)*vehicle2.opskill
								lv+=customers[0].parkt_open

								ttable16 = get_ttable(vehicle2.vtype, lv, argvs.management_ttable)
								dtable12 = get_dtable(vehicle2.vtype, lv, argvs.management_dtable)
								if argvs.management_etable:
									etable12 = get_etable(vehicle2.vtype, vehicle2.etype, lv, argvs.management_etable)
								if argvs.management_xtable:
									xtable12 = get_xtable(vehicle2.vtype, lv, argvs.management_xtable)

								if ttable16[customers[0].spotno][vehicle2.route[pos2+1].spotno]==-1 or \
									dtable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]==-1 or \
									(argvs.management_etable and etable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]==-1) or \
									(argvs.management_xtable and xtable12[customers[0].spotno][vehicle2.route[pos2+1].spotno]==-1):
									continue
							elif (argvs.bulkShipping_flag==False and pos2+1==len(vehicle2.route)-2 and vehicle2.route[-2].custno=="0" and vehicle2.route[-1].custno!="0" and pick_opt_flag2==False) or \
								(argvs.bulkShipping_flag==True and pos2+1==len(vehicle2.route)-2 and vehicle2.route[-2].customers[0].custno=="0" and vehicle2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
								if ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[-1].spotno]==-1 or \
									dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[-1].spotno]==-1 or \
									(argvs.management_etable and etable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[-1].spotno]==-1) or \
									(argvs.management_xtable and xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[-1].spotno]==-1):
									continue
							else:
								if ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]==-1 or \
								dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]==-1 or \
								(argvs.management_etable and etable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]==-1) or \
								(argvs.management_xtable and xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]==-1):
									continue

							if pos2+1<blast_idx2:
								adist+=dtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]
								if argvs.management_etable:
									apower+=etable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]

							arr2=arr_t
							lv2=lv_t
							st2=st_t

							if vehicle1.route[pos1].additionalcust[i1].custno!=vehicle2.route[pos2+1].custno or vehicle2.route[pos2+1].custno=="0":
								arr=lv_t+ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]*vehicle2.drskill
								if vehicle2.route[pos2+1] in servt_dict2:
									if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
										lv=max(arr+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+servt_dict2[vehicle2.route[pos2+1]]*vehicle2.opskill
									else:
										lv=max(arr,vehicle2.route[pos2+1].ready_fs)+servt_dict2[vehicle2.route[pos2+1]]*vehicle2.opskill
								else:
									if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
										lv=max(arr+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].servt*vehicle2.opskill
									else:
										lv=max(arr,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].servt*vehicle2.opskill
								if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
									lv+=vehicle2.route[pos2+1].parkt_open
							else:
								arr=arr_t
								lv=lv_t
							
							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,vehicle2,lv,pos2+2,servt_dict2,blast_idx2,no_park_idx2,pick_opt_flag2,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
							adist2=adist-adist1


							if( (pos1+1)>=blast_idx1 and (pos2+1)<blast_idx2 ): #case1				
								##test
								
								#mvehicles[vehicle1]=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1-1)])
								#mvehicles[vehicle1]+=dist_dtable(vehicle1.route[pos1-1],vehicle2.route[pos2],dtable)
								##mvehicles[vehicle1]+=dist_dtable(vehicle2.route[pos2],vehicle1.route[pos1+1],dtable)
								#mvehicles[vehicle2]=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2-1)])
								#mvehicles[vehicle2]+=dist_dtable(vehicle2.route[pos2-1],vehicle1.route[pos1],dtable)
								#mvehicles[vehicle2]+=dist_dtable(vehicle1.route[pos1],vehicle2.route[pos2+1],dtable)
								#mvehicles[vehicle2]+=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2+1,len(vehicle2.route)-2)])

								##
								##original
								##adist=dist_dtable(vehicle1.route[pos1-1],vehicle2.route[pos2],dtable) \
									##+ dist_dtable(vehicle2.route[pos2],vehicle1.route[pos1+1],dtable) \
									##+ dist_dtable(vehicle2.route[pos2-1],vehicle1.route[pos1],dtable) \
									##+ dist_dtable(vehicle1.route[pos1],vehicle2.route[pos2+1],dtable)
								##

								
								atpen+=max(0.0,lv1-vehicle1.endhour)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle1,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1][i2],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								##

								arr_t=arr2
								lv_t=lv2
								st_t=st2
								if vehicle1.route[pos1].additionalcust[i1].custno!=vehicle2.route[pos2+1].custno or vehicle2.route[pos2+1].custno=="0":
									arr_t=lv2+ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]*vehicle2.drskill
									if vehicle2.route[pos2+1] in servt_dict2:
										if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
											lv_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+servt_dict2[vehicle2.route[pos2+1]]*vehicle2.opskill
											st_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)+servt_dict2[vehicle2.route[pos2+1]]*vehicle2.opskill
											st_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)
									else:
										if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
											lv_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].servt*vehicle2.opskill
											st_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].servt*vehicle2.opskill
											st_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)
									if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
										lv_t+=vehicle2.route[pos2+1].parkt_open
									
									if vehicle1.route[pos1].additionalcust[i1].custno!="0" or vehicle2.route[pos2+1].custno!="0":
										atpen+=max(0.0,st_t-vehicle2.route[pos2+1].due_fs)

								
								for i in range(pos2+1,blast_idx2-1):
									if vehicle2.route[i].custno==vehicle2.route[i+1].custno and vehicle2.route[i+1].custno!="0":
										continue
									
									ttable11=get_ttable(vehicle2.vtype,lv_t,argvs.management_ttable)
									arr_t=lv_t+ttable11[vehicle2.route[i].spotno][vehicle2.route[i+1].spotno]*vehicle2.drskill


									if vehicle2.route[i+1] in servt_dict2:
										proc_time=servt_dict2[vehicle2.route[i+1]]
									else:
										proc_time=vehicle2.route[i+1].servt
										# arr_t=round(arr_t,4)
									if i+1 in no_park_idx2:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(vehicle2.route[i],vehicle2.route[i+1],lv_t,proc_time,vehicle2,no_park,argvs)
									if vehicle2.route[i].custno!="0" or vehicle2.route[i+1].custno!="0":
										atpen+=ttime_pen
								#vehicle2の改善後arr計算
								arr2=arr_t

								atpen+=max(0.0,lv_t-vehicle2.endhour) ##bug no younanode tsuika

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle2,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv_t-vehicle2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list2[i1][i2],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
								##

								# adist=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ dtable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ dtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno] \
								# 	+ calc_dist(vehicle2,lv,pos2+2,len(vehicle2.route)-1,argvs)
								# if argvs.management_etable:
								# 	apower=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ etable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ etable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno]
								# if argvs.management_xtable:
								# 	aexp=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ xtable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ xtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno]

							elif ( (pos1+1)<blast_idx1 and (pos2+1)>=blast_idx2 ): #case2
								#mvehicles[vehicle1]=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1-1)])
								#mvehicles[vehicle1]+=dist_dtable(vehicle1.route[pos1-1],vehicle2.route[pos2],dtable)
								#mvehicles[vehicle1]+=dist_dtable(vehicle2.route[pos2],vehicle1.route[pos1+1],dtable)
								#mvehicles[vehicle1]+=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1+1,len(vehicle1.route)-2)])

								#mvehicles[vehicle2]=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2-1)])
								#mvehicles[vehicle2]+=dist_dtable(vehicle2.route[pos2-1],vehicle1.route[pos1],dtable)

								arr_t=arr1
								lv_t=lv1
								st_t=st1
								if vehicle2.route[pos2].additionalcust[i2].custno!=vehicle1.route[pos1+1].custno or vehicle1.route[pos1+1].custno=="0":
									arr_t=lv1+ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]*vehicle1.drskill
									if vehicle1.route[pos1+1] in servt_dict1:
										if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
											lv_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+servt_dict1[vehicle1.route[pos1+1]]*vehicle1.opskill
											st_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)+servt_dict1[vehicle1.route[pos1+1]]*vehicle1.opskill
											st_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)
									else:
										if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
											lv_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].servt*vehicle1.opskill
											st_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].servt*vehicle1.opskill
											st_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)
									if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
										lv_t+=vehicle1.route[pos1+1].parkt_open
									
									if vehicle2.route[pos2].additionalcust[i2].custno!="0" or vehicle1.route[pos1+1].custno!="0":
										atpen+=max(0.0,st_t-vehicle1.route[pos1+1].due_fs)

								# adist=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ dtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ calc_dist(vehicle1,lv_t,pos1+2,len(vehicle1.route)-1,argvs) \
								# 	+ dtable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno]
								# if argvs.management_etable:
								# 	apower=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ etable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ calc_dist(vehicle1,lv1,pos1+2,len(vehicle1.route)-1,argvs) \
								# 	+ etable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno]
								# if argvs.management_xtable:
								# 	aexp=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ xtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ xtable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno]

								for i in range(pos1+1,blast_idx1-1):
									if vehicle1.route[i].custno==vehicle1.route[i+1].custno and vehicle1.route[i+1].custno!="0":
										continue
									
									ttable12=get_ttable(vehicle1.vtype,lv_t,argvs.management_ttable)
									arr_t=lv_t+ttable12[vehicle1.route[i].spotno][vehicle1.route[i+1].spotno]*vehicle1.drskill
									# arr_t=round(arr_t,4)

									if vehicle1.route[i+1] in servt_dict1:
										proc_time=servt_dict1[vehicle1.route[i+1]]
									else:
										proc_time=vehicle1.route[i+1].servt
									if i+1 in no_park_idx1:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(vehicle1.route[i],vehicle1.route[i+1],lv_t,proc_time,vehicle1,no_park,argvs)
									if vehicle1.route[i].custno!="0" or vehicle1.route[i+1].custno!="0":
										atpen+=ttime_pen

								atpen+=max(0.0,lv_t-vehicle1.endhour) ##bug no younanode tsuika
								#vehicle1の改善後arr計算
								arr1=arr_t

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle1,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv_t-vehicle1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list1[i1][i2],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								##

								atpen+=max(0.0,lv2-vehicle2.endhour)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle2,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-vehicle2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1][i2],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
								##

							elif ( (pos1+1)>=blast_idx1 and (pos2+1)>=blast_idx2 ): #case3
								# adist=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ dtable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno]
								# if argvs.management_etable:
								# 	apower=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ etable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno]
								# if argvs.management_xtable:
								# 	aexp=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ xtable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno]

								#mvehicles[vehicle1]=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1-1)])
								#mvehicles[vehicle1]+=dist_dtable(vehicle1.route[pos1-1],vehicle2.route[pos2],dtable)
								#mvehicles[vehicle2]=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2-1)])
								#mvehicles[vehicle2]+=dist_dtable(vehicle2.route[pos2-1],vehicle1.route[pos1],dtable)

								atpen+=max(0.0,lv1-vehicle1.endhour)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle1,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1][i2],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								##

								atpen+=max(0.0,lv2-vehicle2.endhour)

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle2,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-vehicle2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1][i2],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
								##

							else: #case4
								arr_t=arr1
								lv_t=lv1
								st_t=st1
								if vehicle2.route[pos2].additionalcust[i2].custno!=vehicle1.route[pos1+1].custno or vehicle1.route[pos1+1].custno=="0":
									arr_t=lv1+ttable8[vehicle2.route[pos2].additionalcust[i2].spotno][vehicle1.route[pos1+1].spotno]*vehicle1.drskill
									if vehicle1.route[pos1+1] in servt_dict1:
										if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
											lv_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+servt_dict1[vehicle1.route[pos1+1]]*vehicle1.opskill
											st_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)+servt_dict1[vehicle1.route[pos1+1]]*vehicle1.opskill
											st_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)
									else:
										if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
											lv_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].servt*vehicle1.opskill
											st_t=max(arr_t+vehicle1.route[pos1+1].parkt_arrive,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)+vehicle1.route[pos1+1].servt*vehicle1.opskill
											st_t=max(arr_t,vehicle1.route[pos1+1].ready_fs)
									if vehicle1.route[pos1+1].spotid!=vehicle2.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx1:
										lv_t+=vehicle1.route[pos1+1].parkt_open
								lv1=lv_t
								st1=st_t
								if vehicle2.route[pos2].additionalcust[i2].custno!=vehicle1.route[pos1+1].custno:
									atpen+=max(0.0,st_t-vehicle1.route[pos1+1].due_fs)

								for i in range(pos1+1,blast_idx1-1):
									if vehicle1.route[i].custno==vehicle1.route[i+1].custno and vehicle1.route[i+1].custno!="0":
										continue
									
									ttable12=get_ttable(vehicle1.vtype,lv_t,argvs.management_ttable)
									arr_t=lv_t+ttable12[vehicle1.route[i].spotno][vehicle1.route[i+1].spotno]*vehicle1.drskill
									# arr_t=round(arr_t,4)

									if vehicle1.route[i+1] in servt_dict1:
										proc_time=servt_dict1[vehicle1.route[i+1]]
									else:
										proc_time=vehicle1.route[i+1].servt
									if i+1 in no_park_idx1:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(vehicle1.route[i],vehicle1.route[i+1],lv_t,proc_time,vehicle1,no_park,argvs)
									if vehicle1.route[i].custno!="0" or vehicle1.route[i+1].custno!="0":
										atpen+=ttime_pen
								#vehicle1の改善後arr計算
								arr1=arr_t

								atpen+=max(0.0,lv_t-vehicle1.endhour) ##bug no younanode tsuika

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle1,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv_t-vehicle1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list1[i1][i2],argvs.lowertime,argvs.uppertime,bv1final_t-vehicle1.arr[0],0,btpen_temp)
								##

								arr_t=arr2
								lv_t=lv2
								st_t=st2
								if vehicle1.route[pos1].additionalcust[i1].custno!=vehicle2.route[pos2+1].custno or vehicle2.route[pos2+1].custno=="0":
									arr_t=lv2+ttable10[vehicle1.route[pos1].additionalcust[i1].spotno][vehicle2.route[pos2+1].spotno]*vehicle2.drskill
									if vehicle2.route[pos2+1] in servt_dict2:
										if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
											lv_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+servt_dict2[vehicle2.route[pos2+1]]*vehicle2.opskill
											st_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)+servt_dict2[vehicle2.route[pos2+1]]*vehicle2.opskill
											st_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)
									else:
										if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
											lv_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].servt*vehicle2.opskill
											st_t=max(arr_t+vehicle2.route[pos2+1].parkt_arrive,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].parkt_open
										else:
											lv_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)+vehicle2.route[pos2+1].servt*vehicle2.opskill
											st_t=max(arr_t,vehicle2.route[pos2+1].ready_fs)
									if vehicle2.route[pos2+1].spotid!=vehicle1.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx2:
										lv_t+=vehicle2.route[pos2+1].parkt_open
								lv2=lv_t
								st2=st_t
								if vehicle1.route[pos1].additionalcust[i1].custno!=vehicle2.route[pos2+1].custno:
									atpen+=max(0.0,st_t-vehicle2.route[pos2+1].due_fs)

								for i in range(pos2+1,blast_idx2-1):
									if vehicle2.route[i].custno==vehicle2.route[i+1].custno and vehicle2.route[i+1].custno!="0":
										continue
									
									ttable11=get_ttable(vehicle2.vtype,lv_t,argvs.management_ttable)
									arr_t=lv_t+ttable11[vehicle2.route[i].spotno][vehicle2.route[i+1].spotno]*vehicle2.drskill
									# arr_t=round(arr_t,4)				

									if vehicle2.route[i+1] in servt_dict2:
										proc_time=servt_dict2[vehicle2.route[i+1]]
									else:
										proc_time=vehicle2.route[i+1].servt
									if i+1 in no_park_idx2:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(vehicle2.route[i],vehicle2.route[i+1],lv_t,proc_time,vehicle2,no_park,argvs)
									if vehicle2.route[i].custno!="0" or vehicle2.route[i+1].custno!="0":
										atpen+=ttime_pen
								#vehicle2の改善後arr計算
								arr2=arr_t

								atpen+=max(0.0,lv_t-vehicle2.endhour) ##bug no younanode tsuika

								##kaizen go no arrive time wo ltime,utime to hikaku
								if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle2,argvs)==False:
									if lcnt==0:
										atpen_temp,btpen_temp=return_lutime_penalty(lv_t-vehicle2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
									else:
										atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list2[i1][i2],argvs.lowertime,argvs.uppertime,bv2final_t-vehicle2.arr[0],atpen_temp,btpen_temp)
								##
								
								# adist=dtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ dtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ calc_dist(vehicle1,lv1,pos1+2,len(vehicle1.route)-1,argvs) \
								# 	+ dtable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ dtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno] \
								# 	+ calc_dist(vehicle2,lv2,pos2+2,len(vehicle2.route)-1,argvs)
								# if argvs.management_etable:
								# 	apower=etable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ etable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ etable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ etable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno]
								# if argvs.management_xtable:
								# 	aexp=xtable1[vehicle1.route[pos1-1].spotno][vehicle2.route[pos2].spotno] \
								# 	+ xtable8[vehicle2.route[pos2].spotno][vehicle1.route[pos1+1].spotno] \
								# 	+ xtable4[vehicle2.route[pos2-1].spotno][vehicle1.route[pos1].spotno] \
								# 	+ xtable10[vehicle1.route[pos1].spotno][vehicle2.route[pos2+1].spotno]

								#mvehicles[vehicle1]=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1-1)])
								#mvehicles[vehicle1]+=dist_dtable(vehicle1.route[pos1-1],vehicle2.route[pos2],dtable)
								#mvehicles[vehicle1]+=dist_dtable(vehicle2.route[pos2],vehicle1.route[pos1+1],dtable)
								#mvehicles[vehicle1]+=sum([dist_dtable(vehicle1.route[i],vehicle1.route[i+1],dtable) for i in range(pos1+1,len(vehicle1)-2)])

								#mvehicles[vehicle2]=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2-1)])
								#mvehicles[vehicle2]+=dist_dtable(vehicle2.route[pos2-1],vehicle1.route[pos1],dtable)
								#mvehicles[vehicle2]+=dist_dtable(vehicle1.route[pos1],vehicle2.route[pos2+1],dtable)
								#mvehicles[vehicle2]+=sum([dist_dtable(vehicle2.route[i],vehicle2.route[i+1],dtable) for i in range(pos2+1,len(vehicle2)-2)])

							#### ここまで休憩機能なし用の処理 ####
						else:
							#### ここから休憩機能あり用の処理 ####
							veh1 = dcopy(vehicle1)
							veh1.route = skv1_route
							veh2 = dcopy(vehicle2)
							veh2.route = skv2_route
							if argvs.pickup_flag==True:
								#集荷最適化
								if pick_opt_flag1:
									if not get_pick_opt_status(veh1, argvs)[0]:
										veh1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
								else:
									pick_opt_rest(veh1, pick_opt_flag1, argvs)
								if pick_opt_flag2:
									if not get_pick_opt_status(veh2, argvs)[0]:
										veh2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
								else:
									pick_opt_rest(veh2, pick_opt_flag2, argvs)
							veh1, veh2 = insert_breakspot(takebreak_list1[i3], takebreak_list2[i4], customers, veh1, vehicles, argvs, 0, veh2)
							if veh1==None or veh2==None:
								argvs.management_ttable = t_dcopy(t_ttable)
								argvs.management_dtable = t_dcopy(t_dtable)
								argvs.management_etable = t_dcopy(t_etable)
								argvs.management_xtable = t_dcopy(t_xtable)
								vehicles = r_restore(vehicles, t_route, argvs)
								continue

							skv1_route = veh1.route
							alast_idx1=len(skv1_route)
							for i in reversed(range(0,len(skv1_route))):
								if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
									break
								else:
									alast_idx1=i
							arr1 = veh1.arr[alast_idx1-1]
							lv1 = veh1.lv[alast_idx1-1]
							depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
							veh1.update_totalcost_dtable(argvs)
							adist1 = veh1.totalcost_wolast
							for i in range(start_idx1,alast_idx1):
								if i==0 or veh1.route[i-1].custno!=veh1.route[i].custno:
									atpen+=max(0.0,veh1.st[i]-veh1.route[i].due_fs)
							atpen+=max(0.0,lv1-veh1.endhour)

							skv2_route = veh2.route
							alast_idx2=len(skv2_route)
							for i in reversed(range(0,len(skv2_route))):
								if skv2_route[i].custno!="0" and skv2_route[i].custno[0]!="b" and skv2_route[i].custno[0]!="e" and i!=len(skv2_route)-1:
									break
								else:
									alast_idx2=i
							arr2 = veh2.arr[alast_idx2-1]
							lv2 = veh2.lv[alast_idx2-1]
							depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
							veh2.update_totalcost_dtable(argvs)
							adist2 = veh2.totalcost_wolast
							for i in range(start_idx2,alast_idx2):
								if i==0 or veh2.route[i-1].custno!=veh2.route[i].custno:
									atpen+=max(0.0,veh2.st[i]-veh2.route[i].due_fs)
							atpen+=max(0.0,lv2-veh2.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
								if is_reserved(veh1,argvs)==False:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
								if is_reserved(veh2,argvs)==False:
									atpen_temp,btpen_temp=return_lutime_penalty(lv2-veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
							#### 
							if argvs.management_etable:
								apower1=calc_power(veh1,start_idx1+1,alast_idx1,argvs)
								apower2=calc_power(veh2,start_idx2+1,alast_idx2,argvs)
								apower = apower1 + apower2
							if argvs.management_xtable:
								aexp1=calc_exp(veh1,start_idx1+1,alast_idx1,argvs)
								aexp2=calc_exp(veh2,start_idx2+1,alast_idx2,argvs)
								aexp = aexp1 + aexp2

							adist = adist1 + adist2
							#### ここまで休憩機能あり用の処理 ####

						#集荷違反量を計算
						if argvs.pickup_flag==True:
							max_load_pen1_1,max_load_pen1_2=calc_vehicle_loadpickup_penalty(skv1_route,vehicle1)
							max_load_pen2_1,max_load_pen2_2=calc_vehicle_loadpickup_penalty(skv2_route,vehicle2)
						else:
							max_load_pen1_1,max_load_pen1_2,max_load_pen2_1,max_load_pen2_2=0,0,0,0

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx1)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
								if skv1_route[k].requestType=="DELIVERY":
									if skv1_route[k].custno[0] != "b":
										load_onbrd+=skv1_route[k].dem
										load_onbrd2+=skv1_route[k].dem2

							load_pen+=max(load_onbrd-vehicle1.cap,0)
							load_pen2+=max(load_onbrd2-vehicle1.cap2,0)
						for j in range(len(depo_idx2)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
								if skv2_route[k].requestType=="DELIVERY":
									if skv2_route[k].custno[0] != "b":
										load_onbrd+=skv2_route[k].dem
										load_onbrd2+=skv2_route[k].dem2

							load_pen+=max(load_onbrd-vehicle2.cap,0)
							load_pen2+=max(load_onbrd2-vehicle2.cap2,0)

						aload =load_pen+max_load_pen1_1+max_load_pen2_1
						aload2 = load_pen2+max_load_pen1_2+max_load_pen2_2

						#改善前後の到着時間算出(拠点を出発し最後の配送先まで(-l ありの場合))
						if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
							atime=0.0
							time_error = 0.0
						else:
							# #vehicle1の改善後arr計算
							# arr1, route1 = calc_vehicle_arr_route(skv1_route, vehicle1, vehicle1.drskill, vehicle1.opskill, vehicle1.chg_batt_dict)
							# #vehicle2の改善後arr計算
							# arr2, route2 = calc_vehicle_arr_route(skv2_route, vehicle2, vehicle2.drskill, vehicle2.opskill, vehicle2.chg_batt_dict)

							if argvs.opt_t_weight!=0:
								#改善後時間算出
								if lcnt==0:
									if skv1_route[alast_idx1-1] in servt_dict1:
										if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
											atime = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * vehicle1.opskill
										else:
											atime = max(arr1, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * vehicle1.opskill
									else:
										if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
											atime = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * vehicle1.opskill
										else:
											atime = max(arr1, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * vehicle1.opskill
								else:
									if skv1_route[alast_idx1-1] in servt_dict1:
										if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
											atime = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * vehicle1.opskill-delay_arr_list1[i1][i2]+vehicle1.arr[0]
										else:
											atime = max(arr1, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * vehicle1.opskill-delay_arr_list1[i1][i2]+vehicle1.arr[0]
									else:
										if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
											atime = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * vehicle1.opskill-delay_arr_list1[i1][i2]+vehicle1.arr[0]	
										else:
											atime = max(arr1, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * vehicle1.opskill-delay_arr_list1[i1][i2]+vehicle1.arr[0]	
								if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
									atime+=skv1_route[alast_idx1-1].parkt_open

								if lcnt==0:
									if skv2_route[alast_idx2-1] in servt_dict2:
										if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
											atime += max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * vehicle2.opskill
										else:
											atime += max(arr2, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * vehicle2.opskill
									else:
										if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
											atime += max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * vehicle2.opskill
										else:
											atime += max(arr2, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * vehicle2.opskill
								else:
									if skv2_route[alast_idx2-1] in servt_dict2:
										if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
											atime += max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * vehicle2.opskill-delay_arr_list2[i1][i2]+vehicle2.arr[0]
										else:
											atime += max(arr2, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * vehicle2.opskill-delay_arr_list2[i1][i2]+vehicle2.arr[0]
									else:
										if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
											atime += max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * vehicle2.opskill-delay_arr_list2[i1][i2]+vehicle2.arr[0]
										else:
											atime += max(arr2, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * vehicle2.opskill-delay_arr_list2[i1][i2]+vehicle2.arr[0]
								if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
									atime+=skv2_route[alast_idx2-1].parkt_open
							else:
								atime=0.0

							mvehicles={vehicle1:0.0,vehicle2:0.0}
							if lcnt==0:
								if skv1_route[alast_idx1-1] in servt_dict1:
									if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
										mvehicles[vehicle1] = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * vehicle1.opskill - vehicle1.arr[0]
									else:
										mvehicles[vehicle1] = max(arr1, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * vehicle1.opskill - vehicle1.arr[0]
								else:
									if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
										mvehicles[vehicle1] = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * vehicle1.opskill - vehicle1.arr[0]
									else:
										mvehicles[vehicle1] = max(arr1, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * vehicle1.opskill - vehicle1.arr[0]
							else:
								if skv1_route[alast_idx1-1] in servt_dict1:
									if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
										mvehicles[vehicle1] = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * vehicle1.opskill - delay_arr_list1[i1][i2]
									else:
										mvehicles[vehicle1] = max(arr1, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * vehicle1.opskill - delay_arr_list1[i1][i2]
								else:
									if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
										mvehicles[vehicle1] = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * vehicle1.opskill - delay_arr_list1[i1][i2]
									else:
										mvehicles[vehicle1] = max(arr1, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * vehicle1.opskill - delay_arr_list1[i1][i2]
							if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
								mvehicles[vehicle1]+=skv1_route[alast_idx1-1].parkt_open

							if lcnt==0:
								if skv2_route[alast_idx2-1] in servt_dict2:
									if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
										mvehicles[vehicle2] = max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * vehicle2.opskill - vehicle2.arr[0]
									else:
										mvehicles[vehicle2] = max(arr2, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * vehicle2.opskill - vehicle2.arr[0]
								else:
									if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
										mvehicles[vehicle2] = max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * vehicle2.opskill - vehicle2.arr[0]
									else:
										mvehicles[vehicle2] = max(arr2, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * vehicle2.opskill - vehicle2.arr[0]
							else:
								if skv2_route[alast_idx2-1] in servt_dict2:
									if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
										mvehicles[vehicle2] = max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * vehicle2.opskill - delay_arr_list2[i1][i2]
									else:
										mvehicles[vehicle2] = max(arr2, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * vehicle2.opskill - delay_arr_list2[i1][i2]
								else:
									if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
										mvehicles[vehicle2] = max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * vehicle2.opskill - delay_arr_list2[i1][i2]
									else:
										mvehicles[vehicle2] = max(arr2, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * vehicle2.opskill - delay_arr_list2[i1][i2]
							if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
								mvehicles[vehicle2]+=skv2_route[alast_idx2-1].parkt_open

							if argvs.avetime_ape_flag==True:
								time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avetime_ae_flag==True:
								time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
							else:
								time_error=0.0
						
						if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
							visits_error = 0.0
						else:
							mvehicles={vehicle1:0.0,vehicle2:0.0}
							if argvs.bulkShipping_flag:
								mvehicles[vehicle1] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
								mvehicles[vehicle2] = len([c for r in skv2_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
							else:
								mvehicles[vehicle1] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])
								mvehicles[vehicle2] = len([i for i in range(1,len(skv2_route)-1) if skv2_route[i].custno!="0" and not skv2_route[i].custno.startswith("e") and not skv2_route[i].custno.startswith("b") and skv2_route[i].custno!=skv2_route[i-1].custno])

							if argvs.avevisits_ape_flag==True:
								visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
							elif argvs.avevisits_ae_flag==True:
								visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
							else:
								visits_error=0.0

						if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
							dist_error = 0.0
						else:
							mvehicles={vehicle1:0.0,vehicle2:0.0}
							if lcnt==0:
								mvehicles[vehicle1] = adist1+vehicle1.remdist[0]-vehicle1.remdist[start_idx1]
								mvehicles[vehicle2] = adist2+vehicle2.remdist[0]-vehicle2.remdist[start_idx2]
							else:
								mvehicles[vehicle1] = adist1+vehicle1.delay_remdist[0]-vehicle1.delay_remdist[start_idx1]
								mvehicles[vehicle2] = adist2+vehicle2.delay_remdist[0]-vehicle2.delay_remdist[start_idx2]

							if argvs.avedist_ape_flag==True:
								dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avedist_ae_flag==True:
								dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
							else:
								dist_error=0.0

						#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
						if argvs.opt_unassigned_flag==True:
							if vehicle1.reserved_v_flag==True:
								aunass = len([c for c in skv1_route[1:alast_idx1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
							if vehicle2.reserved_v_flag==True:
								aunass += len([c for c in skv2_route[1:alast_idx2] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

						ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907

						if ires_temp and cdiff<cdiff_best:
							ires=True
							cdiff_best=cdiff
							pick_opt_flag1_best,pick_opt_flag2_best=pick_opt_flag1,pick_opt_flag2
							index1,index2=i1,i2
							delay_lcnt_best=lcnt
							if argvs.break_flag:
								route1_best = skv1_route
								route2_best = skv2_route
								ttable_best = argvs.management_ttable
								dtable_best = argvs.management_dtable
								etable_best = argvs.management_etable
								xtable_best = argvs.management_xtable
								vehnos=[v.vehno for v in vehicles]
								vehicles[vehnos.index(vehicle1.vehno)].route = skv1_route
								vehicles[vehnos.index(vehicle2.vehno)].route = skv2_route
								t_route_best = r_backup(vehicles)

						if argvs.break_flag:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
			
	return ires,btpen,bload,bload2,pick_opt_flag1_best,pick_opt_flag2_best,index1,index2,delay_lcnt_best,route1_best,route2_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best

def return_lutime_penalty(arr_time,lowertime,uppertime,bvfinal_time,atpenalty,btpenalty):
	##kaizenkai ga ltime,utime no hanni ka check, hazuretara atpen ni tsuika
	if compare_time(lowertime)>0 and compare_time(uppertime)>0:
		if compare_time(bvfinal_time , lowertime)<0:
			if compare_time(arr_time , bvfinal_time)<0:
				atpenalty+=bvfinal_time-arr_time
			else:
				if compare_time(arr_time , uppertime)>0:
					atpenalty+=arr_time-uppertime
				elif compare_time(arr_time , bvfinal_time)>0:
					if compare_time(arr_time , lowertime)>=0:
						btpenalty+=lowertime-bvfinal_time
					else:
						btpenalty+=arr_time-bvfinal_time
		elif compare_time(bvfinal_time , uppertime)<=0:
			if compare_time(arr_time , lowertime)<0:
				atpenalty+=lowertime-arr_time
			elif compare_time(arr_time , uppertime)>0:
				atpenalty+=arr_time-uppertime
		else:
			if compare_time(arr_time , lowertime)<0:
				atpenalty+=lowertime-arr_time
			elif compare_time(arr_time , bvfinal_time)>0:
				atpenalty+=arr_time-bvfinal_time
			elif compare_time(arr_time , uppertime)<=0:
				btpenalty+=bvfinal_time-uppertime
			else:
				btpenalty+=bvfinal_time-arr_time
	elif compare_time(lowertime)>0:
		if compare_time(bvfinal_time , lowertime)<0:
			if compare_time(arr_time , bvfinal_time)<0:
				atpenalty+=bvfinal_time-arr_time
			else:
				if compare_time(arr_time,lowertime)<0:
					btpenalty+=arr_time-bvfinal_time
				else:
					btpenalty+=lowertime-bvfinal_time
		else:
			if compare_time(arr_time , lowertime)<0:
				atpenalty+=lowertime-arr_time
	elif compare_time(uppertime)>0:
		if compare_time(bvfinal_time , uppertime)<0:
			if compare_time(arr_time , uppertime)>0:
				atpenalty+=arr_time-uppertime
		else:
			if compare_time(arr_time , bvfinal_time)>0:
				atpenalty+=arr_time-bvfinal_time
			else:
				if compare_time(arr_time,uppertime)>0:
					btpenalty+=bvfinal_time-arr_time
				else:
					btpenalty+=bvfinal_time-uppertime
	return atpenalty,btpenalty

def improved_or_not(atpen,btpen,adist,bdist,aload,bload,aload2,bload2,aTIME,bTIME,aVISITS,bVISITS,aDIST,bDIST,argvs,atime, btime,apower,bpower,aexp,bexp,aunass,bunass):
	#tp_weight=1e+3
	tp_weight=argvs.timePenaltyWeight
	lp_weight=argvs.loadPenaltyWeight
	l2p_weight=argvs.load2PenaltyWeight
	tlp_weight=argvs.timeLevelingPenaltyWeight
	vlp_weight=argvs.visitsLevelingPenaltyWeight
	dlp_weight=argvs.distLevelingPenaltyWeight
	sp_weight=argvs.sparePenaltyWeight #未割り当て荷物最適化重み
	max_weight=max(tp_weight,lp_weight,l2p_weight,tlp_weight,vlp_weight,dlp_weight,sp_weight)
	if argvs.timePenaltyType=="hard":
		tp_weight=max(max_weight,1e12)
	if argvs.loadPenaltyType=="hard":
		lp_weight=max(max_weight,1e12)
	if argvs.load2PenaltyType=="hard":
		l2p_weight=max(max_weight,1e12)
	if argvs.timeLevelingPenaltyType=="hard":
		tlp_weight=max(max_weight,1e12)
	if argvs.visitsLevelingPenaltyType=="hard":
		vlp_weight=max(max_weight,1e12)
	if argvs.distLevelingPenaltyType=="hard":
		dlp_weight=max(max_weight,1e12)
	##if aload>1e-2:
	##	return False,0.0
	##if atpen-btpen>-1e-2 and adist-bdist>-1e-2 and aload-bload>-1e-2: ##20190507
	##if atpen-btpen>0 and adist-bdist>0 and aload-bload>0: ##20190507
	##	return False,0.0
	##else:
	
	#平均誤差の大きさが設定値より大きければペナルティとみなす
	# cdiff=tp_weight*(round(atpen-btpen,3))+lp_weight*(aload-bload)+argvs.opt_t_weight*(atime-btime)+argvs.opt_d_weight*(adist-bdist)+argvs.opt_e_weight*(apower-bpower)+argvs.opt_x_weight*(aexp-bexp)+avep_weight*APE #arr[]は4で丸めているためatpen-btpenを3で丸める
	# 同一spotid、servt で交換が起こった場合に無限ループとなることがあったのでaTIME-bTIMEは小数点以下5桁で丸めるように変更した
	cdiff=tp_weight*round(atpen-btpen,5)+lp_weight*(round(aload-bload,9))+l2p_weight*(round(aload2-bload2,9))+argvs.opt_t_weight*round(atime-btime,5)+argvs.opt_d_weight*(adist-bdist)+argvs.opt_e_weight*(apower-bpower)+argvs.opt_x_weight*(aexp-bexp)+tlp_weight*(round(aTIME-bTIME,5))+vlp_weight*(aVISITS-bVISITS)+dlp_weight*(aDIST-bDIST)+sp_weight*(aunass-bunass)

	if cdiff<-1e-3:
		#if atpen-btpen<=0 and adist-bdist<-1e-3 and aload-bload<=0: ##20190507 距離の改善が採用条件、時間、積載は同一も採用
		return True,cdiff
	else:
		return False,cdiff

def time_pen(arr_time,at_cust):
	##return max(0.0,arr_time-at_cust.due_fs) + max(0.0,at_cust.ready_fs-arr_time)
	##sotyaku penalty nashi ni suru
	return max(0.0,arr_time-at_cust.due_fs)

def calc_time_pen(from_c,to_c,prev_lv,proc_time,vehicle,no_park,argvs):
	ttable1 = get_ttable(vehicle.vtype, prev_lv, argvs.management_ttable)

	arr_t=prev_lv+ttable1[from_c.spotno][to_c.spotno]*vehicle.drskill
	#arr_t=round(arr_t,4)
	if to_c.spotid!=from_c.spotid and not no_park:
		if compare_time(arr_t+to_c.parkt_arrive, to_c.ready_fs)>0:
			st_t=arr_t+to_c.parkt_arrive+to_c.parkt_open
		else:
			st_t=to_c.ready_fs+to_c.parkt_open
	else:
		if compare_time(arr_t, to_c.ready_fs)>0:
			st_t=arr_t
		else:
			st_t=to_c.ready_fs
	lv_t=st_t+proc_time*vehicle.opskill
	if compare_time(st_t-to_c.due_fs)>0:
		return lv_t,max(0.0,st_t-to_c.due_fs)
	else:
		return lv_t,0.0

def merge_cust_dtable(customers,veh1,veh2,pos1,pos2,pos3,pick_opt_flag1,pick_opt_flag2,index,route1,route2,argvs):
	if argvs.break_flag:
		#休憩機能あり
		veh1.route = route1
		veh2.route = route2
		veh1.update_totalcost_dtable(argvs)
		veh2.update_totalcost_dtable(argvs)
	else:
		#休憩機能なし
		cust_list=[c for c in veh1.route[pos1:pos2] if c.custno!="0"]
		depo_list=[c for c in veh1.route[pos1:pos2] if c.custno=="0"]
		veh2.route[pos3:pos3]=[cust_list[0].additionalcust[index]]+[c for c in cust_list[1:]]
		del veh1.route[pos1:pos2]
		veh1.route[pos1:pos1]=[c for c in depo_list]
		veh1.update_totalcost_dtable(argvs)
		veh2.update_totalcost_dtable(argvs)

		#集荷最適化
		if argvs.bulkShipping_flag==False and pick_opt_flag1==True and veh1.route[-2].custno!="0" and veh1.route[-1].custno!="0":
			veh1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
		elif argvs.bulkShipping_flag==True and pick_opt_flag1==True and veh1.route[-2].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0":
			depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
			depo.customers.append(copy.deepcopy(customers[0].customers[0]))
			depo.servt=customers[0].servt
			depo.dem=customers[0].dem
			depo.dem2=customers[0].dem2
			depo.reje_ve=customers[0].reje_ve
			depo.parkt_open=customers[0].parkt_open
			depo.parkt_arrive=customers[0].parkt_arrive
			depo.depotservt=customers[0].depotservt
			depo.additionalcust=[depo]
			depo.demdivideunit=customers[0].demdivideunit
			depo.requestType=customers[0].requestType
			depo.deny_unass=customers[0].deny_unass #未割り当て荷物

			veh1.insert_customer_at(-1,depo,argvs)
		elif (argvs.bulkShipping_flag==False and pick_opt_flag1==False and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0") or \
			(argvs.bulkShipping_flag==True and pick_opt_flag1==False and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0"):
			if len([c for c in veh1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>0:
				remove_customers_specified([veh1.route[-2]],veh1,argvs)

		if argvs.bulkShipping_flag==False and pick_opt_flag2==True and veh2.route[-2].custno!="0" and veh2.route[-1].custno!="0":
			veh2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
		elif argvs.bulkShipping_flag==True and pick_opt_flag2==True and veh2.route[-2].customers[0].custno!="0" and veh2.route[-1].customers[0].custno!="0":
			depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
			depo.customers.append(copy.deepcopy(customers[0].customers[0]))
			depo.servt=customers[0].servt
			depo.dem=customers[0].dem
			depo.dem2=customers[0].dem2
			depo.reje_ve=customers[0].reje_ve
			depo.parkt_open=customers[0].parkt_open
			depo.parkt_arrive=customers[0].parkt_arrive
			depo.depotservt=customers[0].depotservt
			depo.additionalcust=[depo]
			depo.demdivideunit=customers[0].demdivideunit
			depo.requestType=customers[0].requestType
			depo.deny_unass=customers[0].deny_unass #未割り当て荷物

			veh2.insert_customer_at(-1,depo,argvs)
		elif (argvs.bulkShipping_flag==False and pick_opt_flag2==False and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0") or \
			(argvs.bulkShipping_flag==True and pick_opt_flag2==False and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0"):
			if len([c for c in veh2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>0:
				remove_customers_specified([veh2.route[-2]],veh2,argvs)


def merge_dtable(customers,vehicles,lastc_flg,ivnum,decr_vnum,ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag): #20180807
	sLogBuf = "\n"
	#exists=True
	exists=False
	improved_cnt=0
	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)

	dtable_endtime=time.time() ##20190917
	##dtable_endtime=time.clock() ##20190903
	if argvs.timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.timeout):  ##20190903
		sLogBuf += "merge timeout!" #20190903
		if rank==0:
			logging.log(logging.INFO,sLogBuf)
		return improved_cnt #20190903
	
	##merge if len(vehicles)<=1:
	if count_nonempty_vehicles(vehicles)<=1:
		return improved_cnt
	##merge if count_nonempty_vehicles(vehicles)<=ivnum:
	##merge 	return improved_cnt
	if len([(v1,v2,p1,p2,p3) for v1,v2 in permutations(vehicles,2) \
		for (p1,p2),p3 in product(combinations(range(1,len(v1.route)),2),range(1,len(v2.route))) \
		if len([c for c in v1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and len([c for c in v2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 \
		and v1.direct_flag==False and v2.direct_flag==False])==0:
		#exists=False
		return improved_cnt

	# #平準化高速化の為のソート
	# sorted_vehicles = vehicles[:]
	# if argvs.avedist_ape_flag or argvs.avedist_ae_flag:
	# 	derrs = [0 for v in sorted_vehicles]
	# 	if argvs.avedist_ape_flag:
	# 		derrs = calc_avedist_APE_list(sorted_vehicles, argvs.avedist_ape, argvs.lastc_flag)
	# 	else:
	# 		derrs = calc_avedist_AE_list(sorted_vehicles, argvs.avedist_ae, argvs.lastc_flag)
	# 	sorted_vehicles_temp = []
	# 	for i,v in enumerate(sorted_vehicles):
	# 		sorted_vehicles_temp.append([v, derrs[i]])
	# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
	# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

	# if argvs.avevisits_ape_flag or argvs.avevisits_ae_flag:
	# 	verrs = [0 for v in sorted_vehicles]
	# 	if argvs.avevisits_ape_flag:
	# 		verrs = calc_avevisits_APE_list(sorted_vehicles, argvs.avevisits_ape, argvs.bulkShipping_flag)
	# 	else:
	# 		verrs = calc_avevisits_AE_list(sorted_vehicles, argvs.avevisits_ae, argvs.bulkShipping_flag)
	# 	sorted_vehicles_temp = []
	# 	for i,v in enumerate(sorted_vehicles):
	# 		sorted_vehicles_temp.append([v, verrs[i]])
	# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
	# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

	# if argvs.avetime_ape_flag or argvs.avetime_ae_flag:
	# 	terrs = [0 for v in sorted_vehicles]
	# 	if argvs.avetime_ape_flag:
	# 		terrs = calc_avetime_APE_list(sorted_vehicles, argvs.avetime_ape, argvs.lastc_flag)
	# 	else:
	# 		terrs = calc_avetime_AE_list(sorted_vehicles, argvs.avetime_ae, argvs.lastc_flag)
	# 	sorted_vehicles_temp = []
	# 	for i,v in enumerate(sorted_vehicles):
	# 		sorted_vehicles_temp.append([v, terrs[i]])
	# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
	# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

	# #台数削減優先度に従って車両抽出ルール変更
	# vlist=list(permutations(sorted_vehicles,2))
	#台数削減優先度に従って車両抽出ルール変更
	vlist=list(permutations(vehicles,2))
	if argvs.decr_vnum==True:
		vlist_temp=[]
		for v in vlist:
			if argvs.opt_unassigned_flag==False:
				if v[0].rmpriority==2 and v[1].rmpriority==0:
					vlist_temp.append([v,1])
				elif v[0].rmpriority==2 and v[1].rmpriority==1:
					vlist_temp.append([v,2])
				elif v[0].rmpriority==1 and v[1].rmpriority==0:
					vlist_temp.append([v,3])
				elif v[0].rmpriority==2 and v[1].rmpriority==2:
					vlist_temp.append([v,4])
				elif v[0].rmpriority==1 and v[1].rmpriority==1:
					vlist_temp.append([v,5])
				elif v[0].rmpriority==0 and v[1].rmpriority==0:
					vlist_temp.append([v,6])
				elif v[0].rmpriority==0 and v[1].rmpriority==1:
					vlist_temp.append([v,7])
				elif v[0].rmpriority==1 and v[1].rmpriority==2:
					vlist_temp.append([v,8])
				elif v[0].rmpriority==0 and v[1].rmpriority==2:
					vlist_temp.append([v,9])
			else:
				#未割り当て荷物の予約車両の削減優先順位
				if v[0].reserved_v_flag==True and v[1].reserved_v_flag==False:
					vlist_temp.append([v,1])
				elif v[0].reserved_v_flag==True and v[1].reserved_v_flag==True:
					vlist_temp.append([v,4])
				elif v[0].reserved_v_flag==False and v[1].reserved_v_flag==True:
					vlist_temp.append([v,9])
				elif v[0].rmpriority==2 and v[1].rmpriority==0:
					vlist_temp.append([v,1])
				elif v[0].rmpriority==2 and v[1].rmpriority==1:
					vlist_temp.append([v,2])
				elif v[0].rmpriority==1 and v[1].rmpriority==0:
					vlist_temp.append([v,3])
				elif v[0].rmpriority==2 and v[1].rmpriority==2:
					vlist_temp.append([v,4])
				elif v[0].rmpriority==1 and v[1].rmpriority==1:
					vlist_temp.append([v,5])
				elif v[0].rmpriority==0 and v[1].rmpriority==0:
					vlist_temp.append([v,6])
				elif v[0].rmpriority==0 and v[1].rmpriority==1:
					vlist_temp.append([v,7])
				elif v[0].rmpriority==1 and v[1].rmpriority==2:
					vlist_temp.append([v,8])
				elif v[0].rmpriority==0 and v[1].rmpriority==2:
					vlist_temp.append([v,9])

		vlist_temp.sort(key=lambda x:x[1])
		vlist=[v[0] for v in vlist_temp]
			

	cnt=0
	#while(exists):
	while True:
		cnt+=1
		exists=False
		#	for v2 in vehicles \
		#	for p1 in range(1,len(v1.route)) \
		#	for p2 in range(1,len(v1.route)) \
		#	for p3 in range(1,len(v2.route)) \
		#	if v1!=v2 and p1<=p2-1 and len(v1.route)>=3 and len(v2.route)>=3 \
		#	]))
		for v1,v2 in vlist:
			if len([c for c in v1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and len([c for c in v2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 \
				and v1.direct_flag==False and v2.direct_flag==False:
				for (p1,p2),p3 in product(combinations(range(1,len(v1.route)),2),range(1,len(v2.route))):

					dtable_endtime=time.time() ##20190917
					##dtable_endtime=time.clock() ##20180807
					##20190903
					if argvs.outputstime > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
						sLogBuf += "output_middle merge\n"
						outputs_middle(customers,vehicles,argvs)
						argvs.outputs_count+=1
					while True:
						if argvs.outputstime > 0.0 and (dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
							argvs.outputs_count+=1
						else:
							break
					##20190903
					if argvs.timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.timeout):  ##20180807
						sLogBuf += "merge timeout!\n" #20180807
						break #20180807

					if argvs.delaystart2_flag==True and argvs.break_flag==False and p2<len(v1.route) and p3<len(v2.route) and len(v1.route[p1].additionalcust)>1 and len([c for c in v1.route[p1:p2] if c.custno!="0" and c.custno[0]!="b"])==1:
						delay_arr_list1=[0 for i in range(len(v1.route[p1].additionalcust))]
						delay_arr_list2=[0 for i in range(len(v1.route[p1].additionalcust))]

						tv1_route=v1.route[:]
						tv2_route=v2.route[:]
						for i in range(len(tv1_route[p1].additionalcust)):
							v2.route[p3:p3]=[v1.route[p1].additionalcust[i]]+[c for c in v1.route[p1+1:p2] if c.custno!="0"]
							for c in v1.route[p1:p2] :
								if c.custno!="0":
									v1.route.remove(c)
							v1.update_totalcost_dtable(argvs)
							v2.update_totalcost_dtable(argvs)

							delay_arr_time([v1,v2],argvs)

							delay_arr_list1[i]=v1.delay_arr[0]
							delay_arr_list2[i]=v2.delay_arr[0]

							v1.route=tv1_route[:]
							v1.update_totalcost_dtable(argvs)
							v2.route=tv2_route[:]
							v2.update_totalcost_dtable(argvs)
					else:
						delay_arr_list1=[]
						delay_arr_list2=[]

					if lastc_flg==True:
						exists,atpen,aload,aload2,pick_opt_flag1,pick_opt_flag2,index,delay_flag,route1,route2,ttable,dtable,etable,xtable,t_route=merge_improved_lastc_dtable(customers,v1,v2,p1,p2,p3,decr_vnum,argvs.lowertime,argvs.uppertime,vehicles,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list1,delay_arr_list2)
					else:
						exists,atpen,aload,aload2,pick_opt_flag1,pick_opt_flag2,index,delay_flag,route1,route2,ttable,dtable,etable,xtable,t_route=merge_improved_dtable(customers,v1,v2,p1,p2,p3,decr_vnum,argvs.lowertime,argvs.uppertime,vehicles,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list1,delay_arr_list2)
					if(exists):
						##20180904
						tv1_route=v1.route[:]
						tv2_route=v2.route[:]
						if argvs.break_flag:
							t_ttable = t_dcopy(argvs.management_ttable)
							t_dtable = t_dcopy(argvs.management_dtable)
							t_etable = t_dcopy(argvs.management_etable)
							t_xtable = t_dcopy(argvs.management_xtable)
							argvs.management_ttable = t_dcopy(ttable)
							argvs.management_dtable = t_dcopy(dtable)
							argvs.management_etable = t_dcopy(etable)
							argvs.management_xtable = t_dcopy(xtable)
							vehicles = r_restore(vehicles, t_route, argvs)

						merge_cust_dtable(customers,v1,v2,p1,p2,p3,pick_opt_flag1,pick_opt_flag2,index,route1,route2,argvs)

						if argvs.delaystart2_flag==True and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
							delay_arr_time2(vehicles,[v1,v2],argvs)

						depo_idx1=[j for j,c in enumerate(v1.route[:-1]) if c.custno=="0"]+[len(v1.route)-1]
						servt_dict1={}
						for k in range(len(depo_idx1)-1):
							servt_dict1[v1.route[depo_idx1[k]]]=0
							servt=0
							for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
								if v1.route[j].requestType=="DELIVERY" and v1.route[j].custno!=v1.route[j-1].custno:
									servt+=v1.route[j].depotservt
							if v1.route[depo_idx1[k]+1].custno!="0":
								servt_dict1[v1.route[depo_idx1[k]]]+=servt+v1.depotservt
							else:
								servt_dict1[v1.route[depo_idx1[k]]]+=servt
						#集荷時間
						servt_dict1[v1.route[len(v1.route)-1]]=0
						for k in range(1,len(depo_idx1)):
							servt=0
							for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
								if v1.route[j].requestType=="PICKUP" and v1.route[j].custno!=v1.route[j-1].custno:
									servt+=v1.route[j].depotservt
							servt_dict1[v1.route[depo_idx1[k]]]+=servt

						load=[0 for c in v1.route]
						load2=[0 for c in v1.route]
						for i in range(len(v1.route)-1):
							if i in depo_idx1:
								for j in range(i+1,depo_idx1[depo_idx1.index(i)+1]):
									if v1.route[j].requestType=="DELIVERY":
										if v1.route[j].custno[0] != "b":
											load[i]+=v1.route[j].dem
											load2[i]+=v1.route[j].dem2
							else:
								if v1.route[i].custno[0] != "b":
									if v1.route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-v1.route[i].dem
										load2[i]=load2[i-1]-v1.route[i].dem2
									else:
										load[i]=load[i-1]+v1.route[i].dem
										load2[i]=load2[i-1]+v1.route[i].dem2

						for i in reversed(range(len(load))):
							if i in depo_idx1 and i+1 in depo_idx1:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx1=[]
						for c in v1.route[depo_idx1[0]+1:depo_idx1[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx1.append(0)
						
						for i in range(1,len(depo_idx1)-1):
							if load[depo_idx1[i]-1]==0 and load2[depo_idx1[i]-1]==0:
								for c in v1.route[depo_idx1[i]+1:depo_idx1[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[depo_idx1[i]]==0 and load2[depo_idx1[i]]==0:
										no_park_idx1.append(depo_idx1[i])
						if load[depo_idx1[-1]-1]==0 and load2[depo_idx1[-1]-1]==0:
							no_park_idx1.append(depo_idx1[-1])

						pick_opt_flag1=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(v1.route)-1)):
								if argvs.bulkShipping_flag==True:
									if v1.route[i].customers[0].custno!="0":
										if v1.route[i].customers[0].custno[0]!="b":
											non_depo=True
											if v1.route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break
								else:
									if v1.route[i].custno!="0":
										if v1.route[i].custno[0]!="b":
											non_depo=True
											if v1.route[i].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break

						depo_idx2=[j for j,c in enumerate(v2.route[:-1]) if c.custno=="0"]+[len(v2.route)-1]
						servt_dict2={}
						for k in range(len(depo_idx2)-1):
							servt_dict2[v2.route[depo_idx2[k]]]=0
							servt=0
							for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
								if v2.route[j].requestType=="DELIVERY" and v2.route[j].custno!=v2.route[j-1].custno:
									servt+=v2.route[j].depotservt
							if v2.route[depo_idx2[k]+1].custno!="0":
								servt_dict2[v2.route[depo_idx2[k]]]+=servt+v2.depotservt
							else:
								servt_dict2[v2.route[depo_idx2[k]]]+=servt
						#集荷時間
						servt_dict2[v2.route[len(v2.route)-1]]=0
						for k in range(1,len(depo_idx2)):
							servt=0
							for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
								if v2.route[j].requestType=="PICKUP" and v2.route[j].custno!=v2.route[j-1].custno:
									servt+=v2.route[j].depotservt
							servt_dict2[v2.route[depo_idx2[k]]]+=servt

						load=[0 for c in v2.route]
						load2=[0 for c in v2.route]
						for i in range(len(v2.route)-1):
							if i in depo_idx2:
								for j in range(i+1,depo_idx2[depo_idx2.index(i)+1]):
									if v2.route[j].requestType=="DELIVERY":
										if v2.route[j].custno[0] != "b":
											load[i]+=v2.route[j].dem
											load2[i]+=v2.route[j].dem2
							else:
								if v2.route[i].custno[0] != "b":
									if v2.route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-v2.route[i].dem
										load2[i]=load2[i-1]-v2.route[i].dem2
									else:
										load[i]=load[i-1]+v2.route[i].dem
										load2[i]=load2[i-1]+v2.route[i].dem2

						for i in reversed(range(len(load))):
							if i in depo_idx2 and i+1 in depo_idx2:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx2=[]
						for c in v2.route[depo_idx2[0]+1:depo_idx2[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx2.append(0)
						
						for i in range(1,len(depo_idx2)-1):
							if load[depo_idx2[i]-1]==0 and load2[depo_idx2[i]-1]==0:
								for c in v2.route[depo_idx2[i]+1:depo_idx2[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[depo_idx2[i]]==0 and load2[depo_idx2[i]]==0:
										no_park_idx2.append(depo_idx2[i])
						if load[depo_idx2[-1]-1]==0 and load2[depo_idx2[-1]-1]==0:
							no_park_idx2.append(depo_idx2[-1])

						pick_opt_flag2=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(v2.route)-1)):
								if argvs.bulkShipping_flag==True:
									if v2.route[i].customers[0].custno!="0":
										if v2.route[i].customers[0].custno[0]!="b":
											non_depo=True
											if v2.route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break
								else:
									if v2.route[i].custno!="0":
										non_depo=True
										if v2.route[i].requestType=="PICKUP":
											pick_opt_flag2=True
											break
									elif non_depo==True:
										break

						if check_impassability(customers,v1,v1.lv[0],1,servt_dict1,len(v1.route),no_park_idx1,pick_opt_flag1,argvs)[0]==False or check_impassability(customers,v2,v2.lv[0],1,servt_dict2,len(v2.route),no_park_idx2,pick_opt_flag2,argvs)[0]==False:
							if argvs.break_flag:
								argvs.management_ttable = t_ttable
								argvs.management_dtable = t_dtable
								argvs.management_etable = t_etable
								argvs.management_xtable = t_xtable
							v1.route=tv1_route[:]
							v1.update_totalcost_dtable(argvs)
							v2.route=tv2_route[:]
							v2.update_totalcost_dtable(argvs)
							continue
						improved_cnt=improved_cnt+1
						
						#現在(=最新)のatpenとaloadとAPEを保存する
						if argvs.lastc_flag:
							for i in reversed(range(0,len(v1.route))):
								if v1.route[i].custno=="0" or v1.route[i].custno[0]=="b" or v1.route[i].custno[0]=="e" or i==len(v1.route)-1:
									last_idx=i
								else:
									break
							v1.time_pen=sum([max(0.0,v1.st[i]-v1.route[i].due_fs) for i in range(1,last_idx) if v1.route[i].custno!=v1.route[i-1].custno])+max(0.0,v1.lv[last_idx-1]-v1.endhour)
						else:
							v1.time_pen=sum([max(0.0,v1.st[i]-v1.route[i].due_fs) for i in range(1,len(v1.route)) if v1.route[i].custno!=v1.route[i-1].custno])+max(0.0,v1.lv[-1]-v1.endhour)

						if argvs.pickup_flag==True:
							max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v1.route,v1)
						else:
							max_load_pen,max_load_pen2=0,0

						depo_idx1=[j for j,c in enumerate(v1.route[:-1]) if c.custno=="0"]+[len(v1.route)-1]

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx1)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
								if v1.route[k].requestType=="DELIVERY":
									if v1.route[k].custno[0] != "b":
										load_onbrd+=v1.route[k].dem
										load_onbrd2+=v1.route[k].dem2

							load_pen+=max(load_onbrd-v1.cap,0)
							load_pen2+=max(load_onbrd2-v1.cap2,0)

						v1.load_pen =load_pen+max_load_pen
						v1.load_pen2 = load_pen2+max_load_pen2
				
						if argvs.lastc_flag:
							for i in reversed(range(0,len(v2.route))):
								if v2.route[i].custno=="0" or v2.route[i].custno[0]=="b" or v2.route[i].custno[0]=="e" or i==len(v2.route)-1:
									last_idx=i
								else:
									break
							v2.time_pen=sum([max(0.0,v2.st[i]-v2.route[i].due_fs) for i in range(1,last_idx) if v2.route[i].custno!=v2.route[i-1].custno])+max(0.0,v2.lv[last_idx-1]-v2.endhour)
						else:
							v2.time_pen=sum([max(0.0,v2.st[i]-v2.route[i].due_fs) for i in range(1,len(v2.route)) if v2.route[i].custno!=v2.route[i-1].custno])+max(0.0,v2.lv[-1]-v2.endhour)

						if argvs.pickup_flag==True:
							max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v2.route,v2)
						else:
							max_load_pen,max_load_pen2=0,0

						depo_idx2=[j for j,c in enumerate(v2.route[:-1]) if c.custno=="0"]+[len(v2.route)-1]

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx2)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
								if v2.route[k].requestType=="DELIVERY":
									if v2.route[k].custno[0] != "b":
										load_onbrd+=v2.route[k].dem
										load_onbrd2+=v2.route[k].dem2

							load_pen+=max(load_onbrd-v2.cap,0)
							load_pen2+=max(load_onbrd2-v2.cap2,0)

						v2.load_pen =load_pen+max_load_pen
						v2.load_pen2 = load_pen2+max_load_pen2

						argvs.atpen=sum([v.time_pen for v in vehicles])
						argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehicles])
						if argvs.avetime_ape_flag==True:
							argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

						if argvs.avevisits_ape_flag==True:
							argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

						if argvs.avedist_ape_flag==True:
							argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

						#違反なしのrouteを保存する
						backup_route(vehicles, argvs)


						if lastc_flg==True:
							tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
						else:
							tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
						#result.output_improved_solution(customers,vehicles,tcost,lastc_flg) daic
						if count_nonempty_vehicles(vehicles)==ivnum:	
							return improved_cnt
						break
				else:
					continue
				break

		if(exists==False):
			break

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return improved_cnt

# def merge_dtable_mp(customers,vehicles,lastc_flg,ivnum,decr_vnum,ls_d_starttime,timeout,lowertime,uppertime,argvs): #20190917
# 	sLogBuf = "\n"
# 	#exists=True
# 	exists=False
# 	improved_cnt=0
# 	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)

# 	dtable_endtime=time.time() ##20190917
# 	##dtable_endtime=time.clock() ##20190903
# 	if timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > timeout):  ##20190903
# 		sLogBuf += "merge_mp timeout!" #20190903
# 		if rank==0:
# 			logging.log(logging.INFO,sLogBuf)
# 		return improved_cnt,vehicles #20190903
	
# 	##merge if len(vehicles)<=1:
# 	if count_nonempty_vehicles(vehicles)<=1:
# 		return improved_cnt,vehicles
# 	##merge if count_nonempty_vehicles(vehicles)<=ivnum:
# 	##merge 	return improved_cnt
# 	if len([(v1,v2,p1,p2,p3) for v1 in vehicles \
# 		for v2 in vehicles \
# 		for p1 in range(1,len(v1.route)) \
# 		for p2 in range(1,len(v1.route)) \
# 		for p3 in range(1,len(v2.route)) \
# 		if v1!=v2 and p1<=p2-1 \
# 		])==0:
# 		#exists=False
# 		return improved_cnt,vehicles
# 	cnt=0
# 	#while(exists):
# 	while True:
# 		cnt+=1
# 		exists=False
# 		#	for v2 in vehicles \
# 		#	for p1 in range(1,len(v1.route)) \
# 		#	for p2 in range(1,len(v1.route)) \
# 		#	for p3 in range(1,len(v2.route)) \
# 		#	if v1!=v2 and p1<=p2-1 and len(v1.route)>=3 and len(v2.route)>=3 \
# 		#	]))
# 		for v1,v2,p1,p2,p3 in [(v1,v2,p1,p2,p3) for v1 in vehicles \
# 			for v2 in vehicles \
# 			for p1 in range(1,len(v1.route)) \
# 			for p2 in range(1,len(v1.route)) \
# 			for p3 in range(1,len(v2.route)) \
# 			if v1!=v2 and p1<=p2-1 and len(v1.route)>=3 and len(v2.route)>=3 \
# 			]:

# 			dtable_endtime=time.time() ##20190917
# 			##dtable_endtime=time.clock() ##20180807
# 			if timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > timeout):  ##20180807
# 				sLogBuf += "merge_mp timeout!\n" #20180807
# 				break #20180807

# 			if lastc_flg==True:
# 				exists,atpen,aload,aload2=merge_improved_lastc_dtable(customers,v1,v2,p1,p2,p3,decr_vnum,lowertime,uppertime,vehicles,argvs)
# 			else:
# 				exists,atpen,aload,aload2=merge_improved_dtable(customers,v1,v2,p1,p2,p3,decr_vnum,lowertime,uppertime,vehicles,argvs)
# 			if(exists):
# 				##20180904
# 				improved_cnt=improved_cnt+1
# 				merge_cust_dtable(v1,v2,p1,p2,p3,argvs)

# 				#現在(=最新)のatpenとaloadとAPEを保存する
# 				argvs.atpen = atpen
# 				argvs.aload = aload
# 				v1.time_pen = atpen
# 				v1.load_pen = aload
# 				v2.time_pen = atpen
# 				v2.load_pen = aload
# 				if argvs.avetime_ape_flag==True:
# 					argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag)
# 				elif argvs.avetime_ae_flag==True:
# 					argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag)

# 				if argvs.avevisits_ape_flag==True:
# 					argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag)
# 				elif argvs.avevisits_ae_flag==True:
# 					argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag)

# 				#違反なしのrouteを保存する
# 				backup_route(vehicles, argvs)

# 				if lastc_flg==True:
# 					tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
# 				else:
# 					tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
# 				#result.output_improved_solution(customers,vehicles,tcost,lastc_flg) #daic
# 				if count_nonempty_vehicles(vehicles)==ivnum:
# 					return improved_cnt,vehicles
# 				break
					
# 		if(exists==False):
# 			break

# 	if sLogBuf != "\n":
# 		if rank==0:
# 			logging.log(logging.INFO,sLogBuf)

# 	return improved_cnt,vehicles

def merge_improved_lastc_dtable(customers,veh1,veh2,pos1,pos2,pos3,decr_vnum,lowertime,uppertime,vehicles,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list1,delay_arr_list2):
	ires=False
	index=0
	delay_lcnt_best=0
	pick_opt_flag1_best,pick_opt_flag2_best=False,False
	cdiff_best=0
	route1_best=None
	route2_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if not(pos2<=len(veh1.route)-1) or not(pos3<=len(veh2.route)-1) or \
		not(pos1<=pos2-1) or not(pos1-1>=0) or not(pos3-1>=0):
		return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

	for i in range(pos1,pos2):
		if veh1.route[i].custno[0] =='b':
			return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None


	#集荷最適化の場合DEPOは改善対象外
	if argvs.break_flag:
		pick_opt_flag1, pick_opt_idx1 = get_pick_opt_status(veh1, argvs)
		pick_opt_flag2, pick_opt_idx2 = get_pick_opt_status(veh2, argvs)
		if (pick_opt_flag1==True and pos2>=pick_opt_idx1) or \
			(pick_opt_flag2==True and pos3>=pick_opt_idx2):
			return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None
	else:
		pick_opt_flag1=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(veh1.route)-2)):
						if veh1.route[i].customers[0].custno=="0" and veh1.route[i+1].customers[0].custno!="0":
							break
						if veh1.route[i].customers[0].custno!="0" and veh1.route[i].requestType=="PICKUP":
							pick_opt_flag1=True
							break
			else:
				if veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0":
					for i in reversed(range(1,len(veh1.route)-2)):
						if veh1.route[i].custno=="0" and veh1.route[i+1].custno!="0":
							break
						if veh1.route[i].custno!="0" and veh1.route[i].requestType=="PICKUP":
							pick_opt_flag1=True
							break
		pick_opt_flag2=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if veh2.route[-2].customers[0].custno=="0":
					for i in reversed(range(1,len(veh2.route)-2)):
						if veh2.route[i].customers[0].custno=="0" and veh2.route[i+1].customers[0].custno!="0":
							break
						if veh2.route[i].customers[0].custno!="0" and veh2.route[i].requestType=="PICKUP":
							pick_opt_flag2=True
							break
			else:
				if veh2.route[-2].custno=="0":
					for i in reversed(range(1,len(veh2.route)-2)):
						if veh2.route[i].custno=="0" and veh2.route[i+1].custno!="0":
							break
						if veh2.route[i].custno!="0" and veh2.route[i].requestType=="PICKUP":
							pick_opt_flag2=True
							break
	
		if (pick_opt_flag1==True and pos2==len(veh1.route)-1) or \
			(pick_opt_flag2==True and pos3==len(veh2.route)-1):
			return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

	cust_list=[c for c in veh1.route[pos1:pos2] if c.custno!="0" and c.custno[0]!="b"]
	depo_list=[c for c in veh1.route[pos1:pos2] if c.custno=="0"]
	br_list=[c for c in veh1.route[pos1:pos2] if c.custno[0]=='b']

	if cust_list==[]:
		return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None #マージ対象がデポのみならFalseを返す

	#変更後にvehnoがreje_veに含まれていたらFalseを返す
	for i in range(pos1,pos2):
		if veh2.vehno in veh1.route[i].reje_ve:
			return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化で予約車両
		if argvs.init_changecust=="additive": #条件2が含まれるならスキップ
			for c in veh1.route[pos1:pos2]:
				if free_or_additive(c,veh1,vehicles,argvs)=="additive" and c.custno!="0" and c.custno[0]!="b":
					return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" or argvs.opt_unassigned_flag==True: #条件2が他の便に移るならスキップ
			skv1_route_temp,skv2_route_temp = veh1.route[:],veh2.route[:]             # ルート全体をコピー
			skv2_route_temp[pos3:pos3]=[c for c in cust_list]  # ルート入替
			skv2_route_temp[pos3:pos3]=[c for c in br_list]
			del skv1_route_temp[pos1:pos2]
			skv1_route_temp[pos1:pos1]=[c for c in depo_list] 

			for i in range(len(skv1_route_temp)-1):
				if in_additive(skv1_route_temp[i],veh1,skv1_route_temp,vehicles,argvs)==False:
					return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

			for i in range(len(skv2_route_temp)-1):
				if in_additive(skv2_route_temp[i],veh2,skv2_route_temp,vehicles,argvs)==False:
					return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None
	else:
		#未割り当て荷物最適化無し、あるいは、予約車両以外
		if argvs.init_changecust=="additive": #条件2が含まれるならスキップ
			for c in veh1.route[pos1:pos2]:
				if c.changecust=="additive" and c.custno!="0" and c.custno[0]!="b":
					return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive": #条件2が他の便に移るならスキップ
			rotate_idx1={}
			idx=0
			for i in range(len(veh1.route)-1):
				if veh1.route[i].custno=="0" and veh1.route[i+1].custno!="0":
					idx+=1
				elif veh1.route[i].changecust=="additive" and veh1.route[i].custno!="0" and veh1.route[i].custno[0]!="b":
					rotate_idx1[veh1.route[i]]=idx

			rotate_idx2={}
			idx=0
			for i in range(len(veh2.route)-1):
				if veh2.route[i].custno=="0" and veh2.route[i+1].custno!="0":
					idx+=1
				elif veh2.route[i].changecust=="additive" and veh2.route[i].custno!="0" and veh2.route[i].custno[0]!="b":
					rotate_idx2[veh2.route[i]]=idx

			skv1_route_temp,skv2_route_temp = veh1.route[:],veh2.route[:]             # ルート全体をコピー
			skv2_route_temp[pos3:pos3]=[c for c in cust_list]  # ルート入替
			skv2_route_temp[pos3:pos3]=[c for c in br_list]
			del skv1_route_temp[pos1:pos2]
			skv1_route_temp[pos1:pos1]=[c for c in depo_list] 

			idx=0
			for i in range(len(skv1_route_temp)-1):
				if skv1_route_temp[i].custno=="0" and skv1_route_temp[i+1].custno!="0":
					idx+=1
				elif skv1_route_temp[i].changecust=="additive" and skv1_route_temp[i].custno!="0" and skv1_route_temp[i].custno[0]!="b":
					if rotate_idx1[skv1_route_temp[i]]!=idx:
						return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

			idx=0
			for i in range(len(skv2_route_temp)-1):
				if skv2_route_temp[i].custno=="0" and skv2_route_temp[i+1].custno!="0":
					idx+=1
				elif skv2_route_temp[i].changecust=="additive" and skv2_route_temp[i].custno!="0" and skv2_route_temp[i].custno[0]!="b":
					if rotate_idx2[skv2_route_temp[i]]!=idx:
						return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

	start_idx1=0
	start_idx2=0

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and (delay_arr_list1==[] or delay_arr_list2==[]) and argvs.break_flag==False:
		start_idx1=pos1-1
	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and (delay_arr_list1==[] or delay_arr_list2==[]) and argvs.break_flag==False:
		start_idx2=pos3-1

	#集荷最適化(簡易アルゴリズム判定)
	pick_nondepo_flag=False
	if veh1.route[-1].custno!="0" or veh2.route[-1].custno!="0":
		for c in veh1.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break
		for c in veh2.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break

	n1,n2=len(veh1.route),len(veh2.route)
	adist,bdist,atpen,btpen,apower,bpower,aexp,bexp,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
	bvnum=0
	if len([c for c in veh1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
		bvnum=bvnum+1
	if len([c for c in veh2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
		bvnum=bvnum+1
	avnum=0
	if len([c for c in veh1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])-len(cust_list)>=1:
		avnum=avnum+1
	if len([c for c in veh2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])+len(cust_list)>=1:
		avnum=avnum+1

	blast_idx1=n1
	for i in reversed(range(0,n1)):
		if veh1.route[i].custno!="0" and veh1.route[i].custno[0]!="b" and veh1.route[i].custno[0]!="e" and i!=len(veh1.route)-1:
			break
		else:
			blast_idx1=i

	blast_idx2=n2
	for i in reversed(range(0,n2)):
		if veh2.route[i].custno!="0" and veh2.route[i].custno[0]!="b" and veh2.route[i].custno[0]!="e" and  i!=len(veh2.route)-1:
			break
		else:
			blast_idx2=i

	for i in range(start_idx1,blast_idx1):
		if i==0 or veh1.route[i-1].custno!=veh1.route[i].custno:
			btpen+=max(0.0,veh1.st[i]-veh1.route[i].due_fs)
	btpen+=max(0.0,veh1.lv[blast_idx1-1]-veh1.endhour)

	for i in range(start_idx2,blast_idx2):
		if i==0 or veh2.route[i-1].custno!=veh2.route[i].custno:
			btpen+=max(0.0,veh2.st[i]-veh2.route[i].due_fs)
	btpen+=max(0.0,veh2.lv[blast_idx2-1]-veh2.endhour)


	##kaizen mae no final arrive time
	bv1final_t=veh1.lv[blast_idx1-1]
	bv2final_t=veh2.lv[blast_idx2-1]

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True:
		if veh1.reserved_v_flag==True:
			bunass = len([c for c in veh1.route[1:blast_idx1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
		if veh2.reserved_v_flag==True:
			bunass += len([c for c in veh2.route[1:blast_idx2] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist1=calc_dist(veh1,start_idx1+1,blast_idx1,argvs)
		bdist2=calc_dist(veh2,start_idx2+1,blast_idx2,argvs)
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=calc_power(veh1,start_idx1+1,blast_idx1,argvs) \
			+ calc_power(veh2,start_idx2+1,blast_idx2,argvs)
		if argvs.management_xtable:
			bexp=calc_exp(veh1,start_idx1+1,blast_idx1,argvs) \
			+ calc_exp(veh2,start_idx2+1,blast_idx2,argvs)
	else:
		bdist1=get_dtable(veh1.vtype, veh1.lv[pos1-1], argvs.management_dtable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno]
	
		if pos2<blast_idx1:
			bdist1+=get_dtable(veh1.vtype, veh1.lv[pos2-1], argvs.management_dtable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno]
		if pos3<blast_idx2:
			bdist2=get_dtable(veh2.vtype, veh2.lv[pos3-1], argvs.management_dtable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]
		else:
			bdist2=0
		bdist=bdist1+bdist2
		
		if argvs.management_etable:
			bpower=get_etable(veh1.vtype, veh1.etype, veh1.lv[pos1-1], argvs.management_etable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno]
			if pos2<blast_idx1:
				bpower+=get_etable(veh1.vtype, veh1.etype, veh1.lv[pos2-1], argvs.management_etable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno]
			if pos3<blast_idx2:
				bpower+=get_etable(veh2.vtype, veh2.etype, veh2.lv[pos3-1], argvs.management_etable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(veh1.vtype, veh1.lv[pos1-1], argvs.management_xtable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno]
			if pos2<blast_idx1:
				bexp+=get_xtable(veh1.vtype, veh1.lv[pos2-1], argvs.management_xtable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno]
			if pos3<blast_idx2:
				bexp+=get_xtable(veh2.vtype, veh2.lv[pos3-1], argvs.management_xtable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]

	bload = veh1.load_pen+veh2.load_pen
	bload2 = veh1.load_pen2+veh2.load_pen2

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = veh1.lv[blast_idx1-1] + veh2.lv[blast_idx2-1]
	else:
		btime=0.0

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error


	if delay_arr_list1!=[] and delay_arr_list2!=[]:
		delay_lcnt=2
	else:
		delay_lcnt=1

	takebreak_list1 = [[]]
	takebreak_list2 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in veh1.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト
		takebreak_list2 = [*map(list, product(*[[c for c in t.additionalcust] for t in veh2.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for i1 in range(len(veh1.route[pos1].additionalcust)):
		if len(cust_list)+len(depo_list)!=1 and i1>0: #配送先が１つの場合のみ飛び地をチェック
			break
		if free_or_additive(veh1.route[pos1],veh1,vehicles,argvs)=="additive" and i1!=0:
			continue
		for i2 in range(len(takebreak_list1)):
			for i3 in range(len(takebreak_list2)):
				for lcnt in range(delay_lcnt):
					adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
					btpen_temp=btpen
					atpen_temp=0
					#変更後に訪問数上限を超えていたらFalseを返す
					# v1_spotid=[c.spotid for c in veh1.route]
					# v2_spotid=[c.spotid for c in veh2.route]
					# v2_spotid[pos3:pos3]=[cust_list[0].additionalcust[i1].spotid]+[c.spotid for c in cust_list[1:]]
					# del v1_spotid[pos1:pos2]
					# v1_spotid[pos1:pos1]=[c.spotid for c in depo_list]
					# #visitnum1=len([len([*group]) for i,group in groupby(v1_spotid[1:-1])])-len([c for i,c in enumerate(v1_spotid[1:-1]) if c=="0" and (v1_spotid[i]!="0" or i==0)])
					# visitnum1=calc_visitnum(v1_spotid)
					# #visitnum2=len([len([*group]) for i,group in groupby(v2_spotid[1:-1])])-len([c for i,c in enumerate(v2_spotid[1:-1]) if c=="0" and (v2_spotid[i]!="0" or i==0)])
					# visitnum2=calc_visitnum(v2_spotid)
					# if (veh1.maxvisit>0 and visitnum1>veh1.maxvisit) or (veh2.maxvisit>0 and visitnum2>veh2.maxvisit):
					# 	continue

					skv1_route,skv2_route = veh1.route[:],veh2.route[:]             # ルート全体をコピー
					skv2_route[pos3:pos3]=[cust_list[0].additionalcust[i1]]+[c for c in cust_list[1:]]  # ルート入替
					del skv1_route[pos1:pos2]
					skv1_route[pos1:pos1]=[c for c in depo_list] 

					visitnum1=calc_visitnum(skv1_route)
					visitnum2=calc_visitnum(skv2_route)
					if (veh1.maxvisit>0 and visitnum1>veh1.maxvisit) or (veh2.maxvisit>0 and visitnum2>veh2.maxvisit):
						continue

					depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
					servt_dict1={}
					for k in range(len(depo_idx1)-1):
						servt_dict1[skv1_route[depo_idx1[k]]]=0
						servt=0
						for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
							if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno:
								servt+=skv1_route[j].depotservt
						if skv1_route[depo_idx1[k]+1].custno[0]!="b":
							if skv1_route[depo_idx1[k]+1].custno!="0":
								servt_dict1[skv1_route[depo_idx1[k]]]+=servt+veh1.depotservt
							else:
								servt_dict1[skv1_route[depo_idx1[k]]]+=servt
					#集荷時間
					servt_dict1[skv1_route[len(skv1_route)-1]]=0
					for k in range(1,len(depo_idx1)):
						servt=0
						for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
							if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv1_route[j].depotservt
						servt_dict1[skv1_route[depo_idx1[k]]]+=servt

					# for i in range(len(depo_idx1)-1):
					# 	if depo_idx1[i]<pos1 and pos1<=depo_idx1[i+1]:
					# 		start_idx1=depo_idx1[i]
					# 		break

					depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
					servt_dict2={}
					for k in range(len(depo_idx2)-1):
						servt_dict2[skv2_route[depo_idx2[k]]]=0
						servt=0
						for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
							if skv2_route[j].requestType=="DELIVERY" and skv2_route[j].custno!=skv2_route[j-1].custno:
								servt+=skv2_route[j].depotservt
						if skv2_route[depo_idx2[k]+1].custno[0]!="b":
							if skv2_route[depo_idx2[k]+1].custno!="0":
								servt_dict2[skv2_route[depo_idx2[k]]]+=servt+veh2.depotservt
							else:
								servt_dict2[skv2_route[depo_idx2[k]]]+=servt
					#集荷時間
					servt_dict2[skv2_route[len(skv2_route)-1]]=0
					for k in range(1,len(depo_idx2)):
						servt=0
						for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
							if skv2_route[j].requestType=="PICKUP" and skv2_route[j].custno!=skv2_route[j-1].custno:
								if skv2_route[j].custno[0]!="b":
									servt+=skv2_route[j].depotservt
						servt_dict2[skv2_route[depo_idx2[k]]]+=servt

					# for i in range(len(depo_idx2)-1):
					# 	if depo_idx2[i]<pos3 and pos3<=depo_idx2[i+1]:
					# 		start_idx2=depo_idx2[i]
					# 		break

					tdepo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]

					load=[0 for c in skv1_route]
					load2=[0 for c in skv1_route]
					for i in range(len(skv1_route)-1):
						if i in tdepo_idx1:
							for j in range(i+1,tdepo_idx1[tdepo_idx1.index(i)+1]):
								if skv1_route[j].requestType=="DELIVERY":
									if skv1_route[j].custno[0] != "b":
										load[i]+=skv1_route[j].dem
										load2[i]+=skv1_route[j].dem2
						else:
							if skv1_route[i].custno[0] != "b":
								if skv1_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv1_route[i].dem
									load2[i]=load2[i-1]-skv1_route[i].dem2
								else:
									load[i]=load[i-1]+skv1_route[i].dem
									load2[i]=load2[i-1]+skv1_route[i].dem2

					for i in reversed(range(len(load))):
						if i in tdepo_idx1 and i+1 in tdepo_idx1:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx1=[]
					for c in skv1_route[tdepo_idx1[0]+1:tdepo_idx1[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx1.append(0)
					
					for i in range(1,len(tdepo_idx1)-1):
						if load[tdepo_idx1[i]-1]==0 and load2[tdepo_idx1[i]-1]==0:
							for c in skv1_route[tdepo_idx1[i]+1:tdepo_idx1[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[tdepo_idx1[i]]==0 and load2[tdepo_idx1[i]]==0:
									no_park_idx1.append(veh1.route.index(skv1_route[tdepo_idx1[i]]))
					if load[tdepo_idx1[-1]-1]==0 and load2[tdepo_idx1[-1]-1]==0:
						no_park_idx1.append(veh1.route.index(skv1_route[tdepo_idx1[-1]]))

					pick_opt_flag1=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv1_route)-1)):
							if argvs.bulkShipping_flag==True:
								if skv1_route[i].customers[0].custno!="0":
									if skv1_route[i].customers[0].custno[0]!="b":
										non_depo=True
										if skv1_route[i].customers[0].requestType=="PICKUP":
											pick_opt_flag1=True
											break
								elif non_depo==True:
									break
							else:
								if skv1_route[i].custno!="0":
									if skv1_route[i].custno[0]!="b":
										non_depo=True
										if skv1_route[i].requestType=="PICKUP":
											pick_opt_flag1=True
											break
								elif non_depo==True:
									break

					tdepo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]

					load=[0 for c in skv2_route]
					load2=[0 for c in skv2_route]
					for i in range(len(skv2_route)-1):
						if i in tdepo_idx2:
							for j in range(i+1,tdepo_idx2[tdepo_idx2.index(i)+1]):
								if skv2_route[j].requestType=="DELIVERY":
									if skv2_route[j].custno[0] != "b":
										load[i]+=skv2_route[j].dem
										load2[i]+=skv2_route[j].dem2
						else:
							if skv2_route[i].custno[0] != "b":
								if skv2_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv2_route[i].dem
									load2[i]=load2[i-1]-skv2_route[i].dem2
								else:
									load[i]=load[i-1]+skv2_route[i].dem
									load2[i]=load2[i-1]+skv2_route[i].dem2

					for i in reversed(range(len(load))):
						if i in tdepo_idx2 and i+1 in tdepo_idx2:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx2=[]
					for c in skv2_route[tdepo_idx2[0]+1:tdepo_idx2[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx2.append(0)
					
					for i in range(1,len(tdepo_idx2)-1):
						if load[tdepo_idx2[i]-1]==0 and load2[tdepo_idx2[i]-1]==0:
							for c in skv2_route[tdepo_idx2[i]+1:tdepo_idx2[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[tdepo_idx2[i]]==0 and load2[tdepo_idx2[i]]==0:
									no_park_idx2.append(veh2.route.index(skv2_route[tdepo_idx2[i]]))
					if load[tdepo_idx2[-1]-1]==0 and load2[tdepo_idx2[-1]-1]==0:
						no_park_idx2.append(veh2.route.index(skv2_route[tdepo_idx2[-1]]))

					pick_opt_flag2=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv2_route)-1)):
							if argvs.bulkShipping_flag==True:
								if skv2_route[i].customers[0].custno!="0":
									if skv2_route[i].customers[0].custno[0]!="b":
										non_depo=True
										if skv2_route[i].customers[0].requestType=="PICKUP":
											pick_opt_flag2=True
											break
								elif non_depo==True:
									break
							else:
								if skv2_route[i].custno!="0":
									if skv2_route[i].custno[0]!="b":
										non_depo=True
										if skv2_route[i].requestType=="PICKUP":
											pick_opt_flag2=True
											break
								elif non_depo==True:
									break

					
					alast_idx1=len(skv1_route)
					for i in reversed(range(0,len(skv1_route))):
						if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
							break
						else:
							alast_idx1=i

					
					alast_idx2=len(skv2_route)
					for i in reversed(range(0,len(skv2_route))):
						if skv2_route[i].custno!="0" and skv2_route[i].custno[0]!="b" and skv2_route[i].custno[0]!="e" and i!=len(skv2_route)-1:
							break
						else:
							alast_idx2=i

					##
					if argvs.break_flag==False:
						#### ここから休憩機能なし用の処理 ####
						if lcnt==0:
							if veh1.route[start_idx1] in servt_dict1:
								if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
									lv_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
									st_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].parkt_open
								else:
									lv_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
									st_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)
							else:
								if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
									lv_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
									st_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].parkt_open
								else:
									lv_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
									st_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)
						else:
							if veh1.route[start_idx1] in servt_dict1:
								if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
									lv_t=max(delay_arr_list1[i1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
									st_t=max(delay_arr_list1[i1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].parkt_open
								else:
									lv_t=max(delay_arr_list1[i1],veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
									st_t=max(delay_arr_list1[i1],veh1.route[start_idx1].ready_fs)
							else:
								if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
									lv_t=max(delay_arr_list1[i1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
									st_t=max(delay_arr_list1[i1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].parkt_open
								else:
									lv_t=max(delay_arr_list1[i1],veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
									st_t=max(delay_arr_list1[i1],veh1.route[start_idx1].ready_fs)
						if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
							lv_t+=veh1.route[start_idx1].parkt_open
						if start_idx1==0 or veh1.route[start_idx1-1].custno!="0" or veh1.route[start_idx1].custno!="0": #デポが連続しない場合
							atpen += max(0.0, st_t-veh1.route[start_idx1].due_fs)
						arr_t=veh1.arr[start_idx1]

						if start_idx1!=0 and veh1.route[start_idx1].custno==veh1.route[start_idx1-1].custno and veh1.route[start_idx1].custno!="0":
							lv_t=veh1.lv[start_idx1-1]
							st_t=veh1.st[start_idx1-1]
							arr_t=veh1.arr[start_idx1-1]

						impassable=True
						for i in range(start_idx1,pos1-1):
							from_c,to_c=veh1.route[i],veh1.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable3 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable3 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or \
							dtable3[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break
							
							if i+1<alast_idx1:
								arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
								if to_c in servt_dict1:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
										st_t=max(arr_t,to_c.ready_fs)
								else:
									if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
										lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh1.opskill
										st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
									else:
										lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh1.opskill
										st_t=max(arr_t,to_c.ready_fs)
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t+=to_c.parkt_open

								if from_c.custno!="0" or to_c.custno!="0":
									atpen+=max(0.0,st_t-to_c.due_fs)

								adist+=dtable3[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable3[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable3[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						dtable1 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable1 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable1 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

						lv1=lv_t
						arr1=arr_t
						st1=st_t

						#変更後に通行不可能ならFalseを返す
						ttable1 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
						if depo_list==[]:
							if (argvs.bulkShipping_flag==False and pos2==len(veh1.route)-1 and veh1.route[pos1-1].custno!="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==True) or \
							(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-1 and veh1.route[pos1-1].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
								if ttable1[veh1.route[pos1-1].spotno][customers[0].spotno]==-1 or \
								dtable1[veh1.route[pos1-1].spotno][customers[0].spotno]==-1 or \
								(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][customers[0].spotno]==-1) or \
								(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][customers[0].spotno]==-1):
									continue

								arr=lv_t+ttable1[veh1.route[pos1-1].spotno][customers[0].spotno]*veh1.drskill
								lv=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[veh1.route[-1]]+veh1.depotservt)*veh1.opskill
								lv+=customers[0].parkt_open

								ttable10 = get_ttable(veh1.vtype, lv, argvs.management_ttable)
								dtable10 = get_dtable(veh1.vtype, lv, argvs.management_dtable)
								if argvs.management_etable:
									etable10 = get_etable(veh1.vtype, veh1.etype, lv, argvs.management_etable)
								if argvs.management_xtable:
									xtable10 = get_xtable(veh1.vtype, lv, argvs.management_xtable)

								if ttable10[customers[0].spotno][veh1.route[-1].spotno]==-1 or \
									dtable10[customers[0].spotno][veh1.route[-1].spotno]==-1 or \
									(argvs.management_etable and etable10[customers[0].spotno][veh1.route[-1].spotno]==-1) or \
									(argvs.management_xtable and xtable10[customers[0].spotno][veh1.route[-1].spotno]==-1):
									continue
							elif (argvs.bulkShipping_flag==False and pos2==len(veh1.route)-2 and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False) or \
							(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-2 and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
								if ttable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]==-1 or \
								dtable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]==-1):
									continue
							else:
								if veh1.route[pos1-1].custno!=veh1.route[pos2].custno or veh1.route[pos2].custno=="0":
									if ttable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]==-1 or \
										dtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]==-1 or \
										(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]==-1) or \
										(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]==-1):
										continue

									if pos2!=blast_idx1:
										arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
										if veh1.route[pos2] in servt_dict1:
											if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
												lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
											else:
												lv_t=max(arr_t,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										else:
											if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
												lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
											else:
												lv_t=max(arr_t,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
											lv_t+=veh1.route[pos2].parkt_open

										adist+=dtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]
										if argvs.management_etable:
											apower+=etable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]
										if argvs.management_xtable:
											aexp+=xtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]

								if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
									impassable,dist,power,exp,_=check_impassability(customers,veh1,lv_t,pos2+1,servt_dict1,blast_idx1,no_park_idx1,pick_opt_flag1,argvs)
									if impassable==False:
										continue
									adist+=dist
									if argvs.management_etable:
										apower+=power
									if argvs.management_xtable:
										aexp+=exp



						else:
							if ttable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]==-1 or \
								dtable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]==-1 or \
								(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]==-1) or \
								(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]==-1):
								continue

							if pos1<alast_idx1:
								adist+=dtable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]
								if argvs.management_etable:
									apower+=etable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]
								if argvs.management_xtable:
									aexp+=xtable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]

								arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]*veh1.drskill
								if depo_list[0].spotid!=veh1.route[pos1-1].spotid and not veh1.route.index(depo_list[0]) in no_park_idx1:
									lv_t=max(arr_t+depo_list[0].parkt_arrive,depo_list[0].ready_fs)+servt_dict1[depo_list[0]]*veh1.opskill
									st_t=max(arr_t+depo_list[0].parkt_arrive,depo_list[0].ready_fs)+depo_list[0].parkt_open
								else:
									lv_t=max(arr_t,depo_list[0].ready_fs)+servt_dict1[depo_list[0]]*veh1.opskill
									st_t=max(arr_t,depo_list[0].ready_fs)
								if depo_list[0].spotid!=veh1.route[pos1-1].spotid and not veh1.route.index(depo_list[0]) in no_park_idx1:
									lv_t+=depo_list[0].parkt_open

								if veh1.route[pos1-1].custno!="0":
									atpen+=max(0.0,st_t-depo_list[0].due_fs)

								impassable=True
								for i in range(len(depo_list)-1):
									from_c,to_c=depo_list[i],depo_list[i+1]

									dtable3 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
									ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
									if argvs.management_etable:
										etable3 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
									if argvs.management_xtable:
										xtable3 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

									if ttable3[from_c.spotno][to_c.spotno]==-1 or \
									dtable3[from_c.spotno][to_c.spotno]==-1 or \
									(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
									(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
										impassable=False
										break

									arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[depo_list[i+1]]*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)

									# atpen+=max(0.0,arr_t-to_c.due_fs)

									adist+=dtable3[from_c.spotno][to_c.spotno]
									if argvs.management_etable:
										apower+=etable3[from_c.spotno][to_c.spotno]
									if argvs.management_xtable:
										aexp+=xtable3[from_c.spotno][to_c.spotno]
							if impassable==False:
								continue
							
							dtable9 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable9 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable9 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)
							ttable9 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

							if ttable9[depo_list[-1].spotno][veh1.route[pos2].spotno]==-1 or \
							dtable9[depo_list[-1].spotno][veh1.route[pos2].spotno]==-1 or \
							(argvs.management_etable and etable9[depo_list[-1].spotno][veh1.route[pos2].spotno]==-1) or \
							(argvs.management_xtable and xtable9[depo_list[-1].spotno][veh1.route[pos2].spotno]==-1):
								continue

							if pos2<blast_idx1:
								adist+=dtable9[depo_list[-1].spotno][veh1.route[pos2].spotno]
								if argvs.management_etable:
									apower+=etable9[depo_list[-1].spotno][veh1.route[pos2].spotno]
								if argvs.management_xtable:
									aexp+=xtable9[depo_list[-1].spotno][veh1.route[pos2].spotno]

								
							arr=lv_t+ttable9[depo_list[-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
							if veh1.route[pos2] in servt_dict1:
								if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
									lv=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
								else:
									lv=max(arr,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
							else:
								if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
									lv=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
								else:
									lv=max(arr,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
							if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
								lv+=veh1.route[pos2].parkt_open

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,veh1,lv,pos2+1,servt_dict1,blast_idx1,no_park_idx1,pick_opt_flag1,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
						adist1=adist


						if lcnt==0:
							if veh2.route[start_idx2] in servt_dict2:
								if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
									lv_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
									st_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].parkt_open
								else:
									lv_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
									st_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)
							else:
								if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
									lv_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
									st_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].parkt_open
								else:
									lv_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
									st_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)
						else:
							if veh2.route[start_idx2] in servt_dict2:
								if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
									lv_t=max(delay_arr_list2[i1]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
									st_t=max(delay_arr_list2[i1]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].parkt_open
								else:
									lv_t=max(delay_arr_list2[i1],veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
									st_t=max(delay_arr_list2[i1],veh2.route[start_idx2].ready_fs)
							else:
								if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
									lv_t=max(delay_arr_list2[i1]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
									st_t=max(delay_arr_list2[i1]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].parkt_open
								else:
									lv_t=max(delay_arr_list2[i1],veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
									st_t=max(delay_arr_list2[i1],veh2.route[start_idx2].ready_fs)
						if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
							lv_t+=veh2.route[start_idx2].parkt_open
						if start_idx2==0 or veh2.route[start_idx2-1].custno!="0" or veh2.route[start_idx2].custno!="0": #デポが連続しない場合
							atpen += max(0.0, st_t-veh2.route[start_idx2].due_fs)
						arr_t=veh2.arr[start_idx2]

						if start_idx2!=0 and veh2.route[start_idx2].custno==veh2.route[start_idx2-1].custno and veh2.route[start_idx2].custno!="0":
							lv_t=veh2.lv[start_idx2-1]
							arr_t=veh2.arr[start_idx2-1]
							st_t=veh2.st[start_idx2-1]

						impassable=True
						for i in range(start_idx2,pos3-1):
							from_c,to_c=veh2.route[i],veh2.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable3 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							ttable3 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable3 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or \
							dtable3[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh2.drskill
							if to_c in servt_dict2:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable3[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable3[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable3[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if veh2.route[pos3-1].custno!=cust_list[0].additionalcust[i1].custno:
							dtable2 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable2 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable2 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)


							ttable2 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							if ttable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]==-1 or \
								dtable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]==-1 or \
								(argvs.management_etable and etable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]==-1) or \
								(argvs.management_xtable and xtable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]==-1):
								continue

							arr_t=lv_t+ttable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]*veh2.drskill
							if cust_list[0].additionalcust[i1].spotid!=veh2.route[pos3-1].spotid:
								lv_t=max(arr_t+cust_list[0].additionalcust[i1].parkt_arrive,cust_list[0].additionalcust[i1].ready_fs)+cust_list[0].additionalcust[i1].servt*veh2.opskill
								st_t=max(arr_t+cust_list[0].additionalcust[i1].parkt_arrive,cust_list[0].additionalcust[i1].ready_fs)+cust_list[0].additionalcust[i1].parkt_open
							else:
								lv_t=max(arr_t,cust_list[0].additionalcust[i1].ready_fs)+cust_list[0].additionalcust[i1].servt*veh2.opskill
								st_t=max(arr_t,cust_list[0].additionalcust[i1].ready_fs)+cust_list[0].additionalcust[i1].servt*veh2.opskill
							if cust_list[0].additionalcust[i1].spotid!=veh2.route[pos3-1].spotid:
								lv_t+=cust_list[0].additionalcust[i1].parkt_open
							atpen+=max(0.0,st_t-cust_list[0].additionalcust[i1].due_fs)

							adist+=dtable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]
							if argvs.management_etable:
								apower+=etable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]
							if argvs.management_xtable:
								aexp+=xtable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]

						impassable=True
						for i in range(len(cust_list)-1):
							from_c,to_c=cust_list[i],cust_list[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue
							
							ttable8 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								dtable8 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable8 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable8 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

								if ttable8[from_c.spotno][to_c.spotno]==-1 or \
								dtable8[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable8[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable8[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								adist+=dtable8[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable8[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable8[from_c.spotno][to_c.spotno]

							arr_t=lv_t+ttable8[from_c.spotno][to_c.spotno]*veh2.drskill
							if to_c.spotid!=from_c.spotid:
								lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
								st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
							else:
								lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
								st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid:
								lv_t+=to_c.parkt_open
							atpen+=max(0.0,st_t-to_c.due_fs)
						if impassable==False:
							continue

						

						ttable4 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
						dtable4 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable4 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable4 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

						if (argvs.bulkShipping_flag==False and pos3==len(veh2.route)-1 and veh2.route[-1].custno!="0" and pick_opt_flag2==True) or \
							(argvs.bulkShipping_flag==True and pos3==len(veh2.route)-1 and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
							if ttable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
							dtable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
							(argvs.management_etable and etable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]==-1) or \
							(argvs.management_xtable and xtable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]==-1):
								continue

							arr=lv_t+ttable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]*veh2.drskill
							lv=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[veh2.route[-1]]+veh2.depotservt)*veh2.opskill
							lv+=customers[0].parkt_open

							ttable11 = get_ttable(veh2.vtype, lv, argvs.management_ttable)
							dtable11 = get_dtable(veh2.vtype, lv, argvs.management_dtable)
							if argvs.management_etable:
								etable11 = get_etable(veh2.vtype, veh2.etype, lv, argvs.management_etable)
							if argvs.management_xtable:
								xtable11 = get_xtable(veh2.vtype, lv, argvs.management_xtable)

							if ttable11[customers[0].spotno][veh2.route[-1].spotno]==-1 or \
								dtable11[customers[0].spotno][veh2.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable11[customers[0].spotno][veh2.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable11[customers[0].spotno][veh2.route[-1].spotno]==-1):
								continue
						elif (argvs.bulkShipping_flag==False and pos3==len(veh2.route)-2 and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False) or \
							(argvs.bulkShipping_flag==True and pos3==len(veh2.route)-2 and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
							if ttable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]==-1 or \
							dtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]==-1 or \
							(argvs.management_etable and etable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]==-1) or \
							(argvs.management_xtable and xtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]==-1):
								continue
						else:
							if cust_list[-1].additionalcust[i1].custno!=veh2.route[pos3].custno or veh2.route[pos3].custno=="0":
								if ttable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]==-1 or \
									dtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]==-1 or \
									(argvs.management_etable and etable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]==-1) or \
									(argvs.management_xtable and xtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]==-1):
									continue	

								if pos3<blast_idx2:
									adist+=dtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]
									if argvs.management_etable:
										apower+=etable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]
									if argvs.management_xtable:
										aexp+=xtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]

								arr=lv_t+ttable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]*veh2.drskill
								if veh2.route[pos3] in servt_dict2:
									if veh2.route[pos3].spotid!=cust_list[-1].additionalcust[i1].spotid and not pos3 in no_park_idx2:
										lv=max(arr+veh2.route[pos3].parkt_arrive,veh2.route[pos3].ready_fs)+servt_dict2[veh2.route[pos3]]*veh2.opskill
									else:
										lv=max(arr,veh2.route[pos3].ready_fs)+servt_dict2[veh2.route[pos3]]*veh2.opskill
								else:
									if veh2.route[pos3].spotid!=cust_list[-1].additionalcust[i1].spotid and not pos3 in no_park_idx2:
										lv=max(arr+veh2.route[pos3].parkt_arrive,veh2.route[pos3].ready_fs)+veh2.route[pos3].servt*veh2.opskill
									else:
										lv=max(arr,veh2.route[pos3].ready_fs)+veh2.route[pos3].servt*veh2.opskill
								if veh2.route[pos3].spotid!=cust_list[-1].additionalcust[i1].spotid and not pos3 in no_park_idx2:
									lv+=veh2.route[pos3].parkt_open
							else:
								arr=arr_t
								lv=lv_t

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,veh2,lv,pos3+1,servt_dict2,blast_idx2,no_park_idx2,pick_opt_flag2,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
						adist2=adist-adist1


						lv2=lv_t
						arr2=arr_t
						st2=st_t


						if ( pos2>=blast_idx1 and pos3<blast_idx2 ): #case1
							#mvehicles[veh1]=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[veh2]=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3-1)])
							#mvehicles[veh2]+=dist_dtable(veh2.route[pos3-1],veh1.route[pos1],dtable)
							#mvehicles[veh2]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1,pos2-1)])
							#mvehicles[veh2]+=dist_dtable(veh1.route[pos2-1],veh2.route[pos3],dtable)
							#mvehicles[veh2]+=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3,len(veh2.route)-2)])


							atpen+=max(0.0,lv1-veh1.endhour)

							lv_t=lv2
							arr_t=arr2
							st_t=st2

							if cust_list[-1].additionalcust[i1].custno!=veh2.route[pos3].custno or veh2.route[pos3].custno=="0":
								if pos3==blast_idx2-1:
									ttable5=get_ttable(veh2.vtype,lv_t,argvs.management_ttable)
									arr_t=lv_t+ttable5[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]*veh2.drskill
									# arr_t=round(arr_t,4)

								if veh2.route[pos3] in servt_dict2:
									proc_time=servt_dict2[veh2.route[pos3]]
								else:
									proc_time=veh2.route[pos3].servt
								if pos3 in no_park_idx2:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(cust_list[-1].additionalcust[i1],veh2.route[pos3],lv_t,proc_time,veh2,no_park,argvs)
								if cust_list[-1].additionalcust[i1].custno!=veh2.route[pos3].custno:
									atpen+=ttime_pen

							for i in range(pos3,blast_idx2-1):
								if veh2.route[i].custno==veh2.route[i+1].custno and veh2.route[i+1].custno!="0":
									continue
								
								ttable6=get_ttable(veh2.vtype,lv_t,argvs.management_ttable)
								arr_t=lv_t+ttable6[veh2.route[i].spotno][veh2.route[i+1].spotno]*veh2.drskill
								# arr_t=round(arr_t,4)

								if veh2.route[i+1] in servt_dict2:
									proc_time=servt_dict2[veh2.route[i+1]]
								else:
									proc_time=veh2.route[i+1].servt
								if i+1 in no_park_idx2:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(veh2.route[i],veh2.route[i+1],lv_t,proc_time,veh2,no_park,argvs)
								if veh2.route[i].custno!="0" or veh2.route[i+1].custno!="0":
									atpen+=ttime_pen
							#vehicle2の改善後arr計算
							arr2=arr_t
							
							atpen+=max(0.0,lv_t-veh2.endhour) ##bug no younanode tsuika

							
							# adist=dtable2[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
							# 	+ dtable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]
							# if argvs.management_etable:
							# 	apower=etable2[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
							# 	+ etable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]
							# if argvs.management_xtable:
							# 	aexp=xtable2[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
							# 	+ xtable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-veh2.arr[0],lowertime,uppertime,bv2final_t-veh2.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list2[i1],lowertime,uppertime,bv2final_t-veh2.arr[0],0,btpen_temp)
							##

							##kaizen go no arrive time wo ltime,utime to hikaku pos2=pos1 nanode pos1-1 ga saigo

							if (compare_time(lowertime)>0 or compare_time(uppertime)>0) and avnum==bvnum:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh1.arr[0],lowertime,uppertime,bv1final_t-veh1.arr[0],atpen_temp,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1],lowertime,uppertime,bv1final_t-veh1.arr[0],atpen_temp,btpen_temp)
							##

						elif ( pos2<blast_idx1 and pos3>=blast_idx2 ): #case2
							#mvehicles[veh1]=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[veh1]+=dist_dtable(veh1.route[pos1-1],veh1.route[pos2],dtable)
							#mvehicles[veh1]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos2,len(veh1.route)-2)])
							#mvehicles[veh2]=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3-1)])
							#mvehicles[veh2]+=dist_dtable(veh2.route[pos3-1],veh1.route[pos1],dtable)
							#mvehicles[veh2]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1,pos2-1)])

							lv_t=lv1
							arr_t=arr1
							st_t=st1

							if depo_list==[]:
								if veh1.route[pos1-1].custno!=veh1.route[pos2].custno or veh1.route[pos2].custno=="0":
									arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
									if veh1.route[pos2] in servt_dict1:
										if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
											lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
											st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
										else:
											lv_t=max(arr_t,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
											st_t=max(arr_t,veh1.route[pos2].ready_fs)
									else:
										if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
											lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
											st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
										else:
											lv_t=max(arr_t,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
											st_t=max(arr_t,veh1.route[pos2].ready_fs)
									if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
										lv_t+=veh1.route[pos2].parkt_open

									if veh1.route[pos1-1].custno!="0" or veh1.route[pos2].custno!="0":
										atpen+=max(0.0,st_t-veh1.route[pos2].due_fs)
							else:
								arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]*veh1.drskill
								if depo_list[0].spotid!=veh1.route[pos1-1].spotid and not veh1.route.index(depo_list[0]) in no_park_idx1:
									lv_t=max(arr_t+depo_list[0].parkt_arrive,depo_list[0].ready_fs)+servt_dict1[depo_list[0]]*veh1.opskill
									st_t=max(arr_t+depo_list[0].parkt_arrive,depo_list[0].ready_fs)+depo_list[0].parkt_open
								else:
									lv_t=max(arr_t,depo_list[0].ready_fs)+servt_dict1[depo_list[0]]*veh1.opskill
									st_t=max(arr_t,depo_list[0].ready_fs)
								if depo_list[0].spotid!=veh1.route[pos1-1].spotid and not veh1.route.index(depo_list[0]) in no_park_idx1:
									lv_t+=depo_list[0].parkt_open

								for i in range(len(depo_list)-1):
									from_c,to_c=depo_list[i],depo_list[i+1]

									ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

									arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[depo_list[i+1]]*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
									
								arr_t=lv_t+ttable9[depo_list[-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
								if veh1.route[pos2] in servt_dict1:
									if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
										lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
									else:
										lv_t=max(arr_t,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										st_t=max(arr_t,veh1.route[pos2].ready_fs)
								else:
									if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
										lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
									else:
										lv_t=max(arr_t,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										st_t=max(arr_t,veh1.route[pos2].ready_fs)
								if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
									lv_t+=veh1.route[pos2].parkt_open

								if veh1.route[pos2].custno!="0":
									atpen+=max(0.0,st_t-veh1.route[pos2].due_fs)
							
							
							
							
							for i in range(pos2,blast_idx1-1):
								if veh1.route[i].custno==veh1.route[i+1].custno and veh1.route[i+1].custno!="0":
									continue
								
								ttable7=get_ttable(veh1.vtype,lv_t,argvs.management_ttable)
								arr_t=lv_t+ttable7[veh1.route[i].spotno][veh1.route[i+1].spotno]*veh1.drskill
								# arr_t=round(arr_t,4)

								if veh1.route[i+1] in servt_dict1:
									proc_time=servt_dict1[veh1.route[i+1]]
								else:
									proc_time=veh1.route[i+1].servt
								if i+1 in no_park_idx1:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(veh1.route[i],veh1.route[i+1],lv_t,proc_time,veh1,no_park,argvs)
								if veh1.route[i].custno!="0" or veh1.route[i+1].custno!="0":
									atpen+=ttime_pen
							#vehicle1の改善後arr計算
							arr1=arr_t
							
							atpen+=max(0.0,lv_t-veh1.endhour) ##bug no younanode tsuika

							##kaizen go no arrive time wo ltime,utime to hikaku
							if (compare_time(lowertime)>0 or compare_time(uppertime)>0) and avnum==bvnum:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-veh1.arr[0],lowertime,uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list1[i1],lowertime,uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
							##

							##atpen+=time_pen(arr_t,to_c)+max(0.0,arr_t+to_c.servt-veh2.endhour) ##bug to omou
							atpen+=max(0.0,lv2-veh2.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv2-veh2.arr[0],lowertime,uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1],lowertime,uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
							##

						elif ( pos2>=blast_idx1 and pos3>=blast_idx2 ): #case3
							#mvehicles[veh1]=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[veh2]=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3-1)])
							#mvehicles[veh2]+=dist_dtable(veh2.route[pos3-1],veh1.route[pos1],dtable)
							#mvehicles[veh2]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1,pos2-1)])


							atpen+=max(0.0,lv1-veh1.endhour)

							##atpen+=time_pen(arr_t,to_c)+max(0.0,arr_t+to_c.servt-veh1.endhour) ##bug to omou
							atpen+=max(0.0,lv2-veh2.endhour)

							
							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv2-veh2.arr[0],lowertime,uppertime,bv2final_t-veh2.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1],lowertime,uppertime,bv2final_t-veh2.arr[0],0,btpen_temp)
							##

							##kaizen go no arrive time wo ltime,utime to hikaku pos2=pos1 nanode pos1-1 ga saigo

							if (compare_time(lowertime)>0 or compare_time(uppertime)>0) and avnum==bvnum:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh1.arr[0],lowertime,uppertime,bv1final_t-veh1.arr[0],atpen_temp,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1],lowertime,uppertime,bv1final_t-veh1.arr[0],atpen_temp,btpen_temp)
							##

						else: #case4
							lv_t=lv1
							arr_t=arr1
							st_t=st1

							if depo_list==[]:
								if veh1.route[pos1-1].custno!=veh1.route[pos2].custno or veh1.route[pos2].custno=="0":
									arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
									if veh1.route[pos2] in servt_dict1:
										if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
											lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
											st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
										else:
											lv_t=max(arr_t,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
											st_t=max(arr_t,veh1.route[pos2].ready_fs)
									else:
										if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
											lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
											st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
										else:
											lv_t=max(arr_t,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
											st_t=max(arr_t,veh1.route[pos2].ready_fs)
									if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
										lv_t+=veh1.route[pos2].parkt_open

									if veh1.route[pos1-1].custno!="0" or veh1.route[pos2].custno!="0":
										atpen+=max(0.0,st_t-veh1.route[pos2].due_fs)
							else:
								arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]*veh1.drskill
								if depo_list[0].spotid!=veh1.route[pos1-1].spotid and not veh1.route.index(depo_list[0]) in no_park_idx1:
									lv_t=max(arr_t+depo_list[0].parkt_arrive,depo_list[0].ready_fs)+servt_dict1[depo_list[0]]*veh1.opskill
									st_t=max(arr_t+depo_list[0].parkt_arrive,depo_list[0].ready_fs)+depo_list[0].parkt_open
								else:
									lv_t=max(arr_t,depo_list[0].ready_fs)+servt_dict1[depo_list[0]]*veh1.opskill
									st_t=max(arr_t,depo_list[0].ready_fs)
								if depo_list[0].spotid!=veh1.route[pos1-1].spotid and not veh1.route.index(depo_list[0]) in no_park_idx1:
									lv_t+=depo_list[0].parkt_open

								for i in range(len(depo_list)-1):
									from_c,to_c=depo_list[i],depo_list[i+1]

									ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

									arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[depo_list[i+1]]*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
									
								arr_t=lv_t+ttable9[depo_list[-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
								if veh1.route[pos2] in servt_dict1:
									if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
										lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
									else:
										lv_t=max(arr_t,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										st_t=max(arr_t,veh1.route[pos2].ready_fs)
								else:
									if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
										lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
									else:
										lv_t=max(arr_t,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										st_t=max(arr_t,veh1.route[pos2].ready_fs)
								if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
									lv_t+=veh1.route[pos2].parkt_open

								if veh1.route[pos2].custno!="0":
									atpen+=max(0.0,st_t-veh1.route[pos2].due_fs)


							
							
							for i in range(pos2,blast_idx1-1):
								if veh1.route[i].custno==veh1.route[i+1].custno and veh1.route[i+1].custno!="0":
									continue
								
								ttable7=get_ttable(veh1.vtype,lv_t,argvs.management_ttable)
								arr_t=lv_t+ttable7[veh1.route[i].spotno][veh1.route[i+1].spotno]*veh1.drskill
								# arr_t=round(arr_t,4)

								if veh1.route[i+1] in servt_dict1:
									proc_time=servt_dict1[veh1.route[i+1]]
								else:
									proc_time=veh1.route[i+1].servt
								if i+1 in no_park_idx1:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(veh1.route[i],veh1.route[i+1],lv_t,proc_time,veh1,no_park,argvs)
								if veh1.route[i].custno!="0" or veh1.route[i+1].custno!="0":
									atpen+=ttime_pen
							#vehicle1の改善後arr計算
							arr1=arr_t
							st1=st_t
							
							atpen+=max(0.0,lv_t-veh1.endhour) ##bug no younanode tsuika

							##kaizen go no arrive time wo ltime,utime to hikaku
							if (compare_time(lowertime)>0 or compare_time(uppertime)>0) and avnum==bvnum:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-veh1.arr[0],lowertime,uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list1[i1],lowertime,uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
							##

							lv_t=lv2
							arr_t=arr2
							st_t=st2

							if cust_list[-1].additionalcust[i1].custno!=veh2.route[pos3].custno or veh2.route[pos3].custno=="0":
								if pos3==blast_idx2-1:
									ttable5=get_ttable(veh2.vtype,lv_t,argvs.management_ttable)
									arr_t=lv_t+ttable5[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]*veh2.drskill
									# arr_t=round(arr_t,4)

								if veh2.route[pos3] in servt_dict2:
									proc_time=servt_dict2[veh2.route[pos3]]
								else:
									proc_time=veh2.route[pos3].servt
								if pos3 in no_park_idx2:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(cust_list[-1].additionalcust[i1],veh2.route[pos3],lv_t,proc_time,veh2,no_park,argvs)
								if cust_list[-1].additionalcust[i1].custno!=veh2.route[pos3].custno:
									atpen+=ttime_pen

							for i in range(pos3,blast_idx2-1):
								if veh2.route[i].custno==veh2.route[i+1].custno and veh2.route[i+1].custno!="0":
									continue
								
								ttable6=get_ttable(veh2.vtype,lv_t,argvs.management_ttable)
								arr_t=lv_t+ttable6[veh2.route[i].spotno][veh2.route[i+1].spotno]*veh2.drskill
								# arr_t=round(arr_t,4)

								if veh2.route[i+1] in servt_dict2:
									proc_time=servt_dict2[veh2.route[i+1]]
								else:
									proc_time=veh2.route[i+1].servt
								if i+1 in no_park_idx2:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(veh2.route[i],veh2.route[i+1],lv_t,proc_time,veh2,no_park,argvs)
								if veh2.route[i].custno!="0" or veh2.route[i+1].custno!="0":
									atpen+=ttime_pen
							#vehicle2の改善後arr計算
							arr2=arr_t
							
							atpen+=max(0.0,lv_t-veh2.endhour) ##bug no younanode tsuika

							
							# adist=dtable2[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
							# 	+ dtable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]
							# if argvs.management_etable:
							# 	apower=etable2[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
							# 	+ etable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]
							# if argvs.management_xtable:
							# 	aexp=xtable2[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
							# 	+ xtable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-veh2.arr[0],lowertime,uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list2[i1],lowertime,uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
							##
						#### ここまで休憩機能なし用の処理 ####
					else:
						#### ここから休憩機能あり用の処理 ####
						br_veh1 = dcopy(veh1)
						br_veh1.route = skv1_route
						br_veh2 = dcopy(veh2)
						br_veh2.route = skv2_route
						if argvs.pickup_flag==True:
							#集荷最適化
							if pick_opt_flag1:
								if not get_pick_opt_status(br_veh1, argvs)[0]:
									br_veh1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(br_veh1, pick_opt_flag1, argvs)
							if pick_opt_flag2:
								if not get_pick_opt_status(br_veh2, argvs)[0]:
									br_veh2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(br_veh2, pick_opt_flag2, argvs)
						br_veh1, br_veh2 = insert_breakspot(takebreak_list1[i2], takebreak_list2[i3], customers, br_veh1, vehicles, argvs, 0, br_veh2)
						if br_veh1==None or br_veh2==None:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
							continue

						skv1_route = br_veh1.route
						alast_idx1=len(skv1_route)
						for i in reversed(range(0,len(skv1_route))):
							if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and i!=len(skv1_route)-1:
								break
							else:
								alast_idx1=i
						arr1 = br_veh1.arr[alast_idx1-1]
						lv1 = br_veh1.lv[alast_idx1-1]
						depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						br_veh1.update_totalcost_dtable(argvs)
						adist1 = br_veh1.totalcost_wolast
						for i in range(start_idx1,alast_idx1):
							if i==0 or br_veh1.route[i-1].custno!=br_veh1.route[i].custno:
								atpen+=max(0.0,br_veh1.st[i]-br_veh1.route[i].due_fs)
						atpen+=max(0.0,lv1-br_veh1.endhour)

						skv2_route = br_veh2.route
						alast_idx2=len(skv2_route)
						for i in reversed(range(0,len(skv2_route))):
							if skv2_route[i].custno!="0" and skv2_route[i].custno[0]!="b" and i!=len(skv2_route)-1:
								break
							else:
								alast_idx2=i
						arr2 = br_veh2.arr[alast_idx2-1]
						lv2 = br_veh2.lv[alast_idx2-1]
						depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
						br_veh2.update_totalcost_dtable(argvs)
						adist2 = br_veh2.totalcost_wolast
						for i in range(start_idx2,alast_idx2):
							if i==0 or br_veh2.route[i-1].custno!=br_veh2.route[i].custno:
								atpen+=max(0.0,br_veh2.st[i]-br_veh2.route[i].due_fs)
						atpen+=max(0.0,lv2-br_veh2.endhour)

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
							if is_reserved(br_veh1,argvs)==False:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-br_veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-br_veh1.arr[0],0,btpen_temp)
							if is_reserved(br_veh2,argvs)==False:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-br_veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-br_veh2.arr[0],atpen_temp,btpen_temp)
						#### 
						if argvs.management_etable:
							apower1=calc_power(br_veh1,start_idx1+1,alast_idx1,argvs)
							apower2=calc_power(br_veh2,start_idx2+1,alast_idx2,argvs)
							apower = apower1 + apower2
						if argvs.management_xtable:
							aexp1=calc_exp(br_veh1,start_idx1+1,alast_idx1,argvs)
							aexp2=calc_exp(br_veh2,start_idx2+1,alast_idx2,argvs)
							aexp = aexp1 + aexp2

						adist = adist1 + adist2
						#### ここまで休憩機能あり用の処理 ####
					#集荷違反量を計算
					if argvs.pickup_flag==True:
						max_load_pen1_1,max_load_pen1_2=calc_vehicle_loadpickup_penalty(skv1_route,veh1)
						max_load_pen2_1,max_load_pen2_2=calc_vehicle_loadpickup_penalty(skv2_route,veh2)
					else:
						max_load_pen1_1,max_load_pen1_2,max_load_pen2_1,max_load_pen2_2=0,0,0,0

					load_pen,load_pen2=0,0
					for j in range(len(depo_idx1)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
							if skv1_route[k].requestType=="DELIVERY":
								if skv1_route[k].custno[0] != "b":
									load_onbrd+=skv1_route[k].dem
									load_onbrd2+=skv1_route[k].dem2

						load_pen+=max(load_onbrd-veh1.cap,0)
						load_pen2+=max(load_onbrd2-veh1.cap2,0)
					for j in range(len(depo_idx2)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
							if skv2_route[k].requestType=="DELIVERY":
								if skv2_route[k].custno[0] != "b":
									load_onbrd+=skv2_route[k].dem
									load_onbrd2+=skv2_route[k].dem2

						load_pen+=max(load_onbrd-veh2.cap,0)
						load_pen2+=max(load_onbrd2-veh2.cap2,0)

					aload =load_pen+max_load_pen1_1+max_load_pen2_1
					aload2 = load_pen2+max_load_pen1_2+max_load_pen2_2

					#改善前後の到着時間算出(拠点を出発し最後の配送先まで(-l ありの場合))
					if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
						atime=0.0
						time_error = 0.0
					else:
						# #vehicle1の改善後arr計算
						# arr1, route1 = calc_vehicle_arr_route(skv1_route, veh1, veh1.drskill, veh1.opskill, veh1.chg_batt_dict)
						# #vehicle2の改善後arr計算
						# arr2, route2 = calc_vehicle_arr_route(skv2_route, veh2, veh2.drskill, veh2.opskill, veh2.chg_batt_dict)

						if argvs.opt_t_weight!=0:
							#改善後時間算出
							if lcnt==0:
								if skv1_route[alast_idx1-1] in servt_dict1:
									if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * veh1.opskill
									else:
										atime = max(arr1, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * veh1.opskill
								else:
									if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * veh1.opskill
									else:
										atime = max(arr1, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * veh1.opskill
							else:
								if skv1_route[alast_idx1-1] in servt_dict1:
									if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * veh1.opskill-delay_arr_list1[i1]+veh1.arr[0]
									else:
										atime = max(arr1, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * veh1.opskill-delay_arr_list1[i1]+veh1.arr[0]
								else:
									if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * veh1.opskill-delay_arr_list1[i1]+veh1.arr[0]
									else:
										atime = max(arr1, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * veh1.opskill-delay_arr_list1[i1]+veh1.arr[0]
							if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
								atime+=skv1_route[alast_idx1-1].parkt_open

							if lcnt==0:
								if skv2_route[alast_idx2-1] in servt_dict2:
									if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
										atime += max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * veh2.opskill
									else:
										atime += max(arr2, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * veh2.opskill
								else:
									if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
										atime += max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * veh2.opskill
									else:
										atime += max(arr2, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * veh2.opskill
							else:
								if skv2_route[alast_idx2-1] in servt_dict2:
									if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
										atime += max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * veh2.opskill-delay_arr_list2[i1]+veh2.arr[0]
									else:
										atime += max(arr2, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * veh2.opskill-delay_arr_list2[i1]+veh2.arr[0]
								else:
									if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
										atime += max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * veh2.opskill-delay_arr_list2[i1]+veh2.arr[0]
									else:
										atime += max(arr2, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * veh2.opskill-delay_arr_list2[i1]+veh2.arr[0]
							if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
								atime+=skv2_route[alast_idx2-1].parkt_open
						else:
							atime=btime=0.0

						mvehicles={veh1:0.0,veh2:0.0}
						if lcnt==0:
							if skv1_route[alast_idx1-1] in servt_dict1:
								if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
									mvehicles[veh1] = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * veh1.opskill - veh1.arr[0]
								else:
									mvehicles[veh1] = max(arr1, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * veh1.opskill - veh1.arr[0]
							else:
								if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
									mvehicles[veh1] = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * veh1.opskill - veh1.arr[0]
								else:
									mvehicles[veh1] = max(arr1, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * veh1.opskill - veh1.arr[0]
						else:
							if skv1_route[alast_idx1-1] in servt_dict1:
								if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
									mvehicles[veh1] = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * veh1.opskill - delay_arr_list1[i1]
								else:
									mvehicles[veh1] = max(arr1, skv1_route[alast_idx1-1].ready_fs) + servt_dict1[skv1_route[alast_idx1-1]] * veh1.opskill - delay_arr_list1[i1]
							else:
								if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
									mvehicles[veh1] = max(arr1+skv1_route[alast_idx1-1].parkt_arrive, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * veh1.opskill - delay_arr_list1[i1]
								else:
									mvehicles[veh1] = max(arr1, skv1_route[alast_idx1-1].ready_fs) + skv1_route[alast_idx1-1].servt * veh1.opskill - delay_arr_list1[i1]
						if skv1_route[alast_idx1-1].spotid!=skv1_route[alast_idx1-2].spotid or (skv1_route[alast_idx1-1].custno==skv1_route[alast_idx1-2].custno and skv1_route[alast_idx1-1].custno!="0"):
							mvehicles[veh1]+=skv1_route[alast_idx1-1].parkt_open

						if lcnt==0:
							if skv2_route[alast_idx2-1] in servt_dict2:
								if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
									mvehicles[veh2] = max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * veh2.opskill - veh2.arr[0]
								else:
									mvehicles[veh2] = max(arr2, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * veh2.opskill - veh2.arr[0]
							else:
								if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
									mvehicles[veh2] = max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * veh2.opskill - veh2.arr[0]
								else:
									mvehicles[veh2] = max(arr2, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * veh2.opskill - veh2.arr[0]
						else:
							if skv2_route[alast_idx2-1] in servt_dict2:
								if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
									mvehicles[veh2] = max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * veh2.opskill - delay_arr_list2[i1]
								else:
									mvehicles[veh2] = max(arr2, skv2_route[alast_idx2-1].ready_fs) + servt_dict2[skv2_route[alast_idx2-1]] * veh2.opskill - delay_arr_list2[i1]
							else:
								if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
									mvehicles[veh2] = max(arr2+skv2_route[alast_idx2-1].parkt_arrive, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * veh2.opskill - delay_arr_list2[i1]
								else:
									mvehicles[veh2] = max(arr2, skv2_route[alast_idx2-1].ready_fs) + skv2_route[alast_idx2-1].servt * veh2.opskill - delay_arr_list2[i1]
						if skv2_route[alast_idx2-1].spotid!=skv2_route[alast_idx2-2].spotid or (skv2_route[alast_idx2-1].custno==skv2_route[alast_idx2-2].custno and skv2_route[alast_idx2-1].custno!="0"):
							mvehicles[veh2]+=skv2_route[alast_idx2-1].parkt_open

						if len([c for c in skv1_route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1 :
							decr_veh=veh1
						elif len([c for c in skv2_route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1 :
							decr_veh=veh2
						else:
							decr_veh=None

						if argvs.avetime_ape_flag==True:
							time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs,decr_veh)
						elif argvs.avetime_ae_flag==True:
							time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs,decr_veh)
						else:
							time_error=0.0
					
					if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
						visits_error = 0.0
					else:
						mvehicles={veh1:0.0,veh2:0.0}
						if argvs.bulkShipping_flag:
							mvehicles[veh1] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
							mvehicles[veh2] = len([c for r in skv2_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
						else:
							mvehicles[veh1] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])
							mvehicles[veh2] = len([i for i in range(1,len(skv2_route)-1) if skv2_route[i].custno!="0" and not skv2_route[i].custno.startswith("e") and not skv2_route[i].custno.startswith("b") and skv2_route[i].custno!=skv2_route[i-1].custno])

						if mvehicles[veh1]<1:
							decr_veh=veh1
						elif mvehicles[veh2]<1:
							decr_veh=veh2
						else:
							decr_veh=None

						if argvs.avevisits_ape_flag==True:
							visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs,decr_veh)
						elif argvs.avevisits_ae_flag==True:
							visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs,decr_veh)
						else:
							visits_error=0.0

					if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
						dist_error = 0.0
					else:
						mvehicles={veh1:0.0,veh2:0.0}
						if lcnt==0:
							mvehicles[veh1] = adist1+veh1.remdist[0]-veh1.remdist[start_idx1]
							mvehicles[veh2] = adist2+veh2.remdist[0]-veh2.remdist[start_idx2]
						else:
							mvehicles[veh1] = adist1+veh1.delay_remdist[0]-veh1.delay_remdist[start_idx1]
							mvehicles[veh2] = adist2+veh2.delay_remdist[0]-veh2.delay_remdist[start_idx2]

						if len([c for c in skv1_route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1 :
							decr_veh=veh1
						elif len([c for c in skv2_route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1 :
							decr_veh=veh2
						else:
							decr_veh=None

						if argvs.avedist_ape_flag==True:
							dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs,decr_veh)
						elif argvs.avedist_ae_flag==True:
							dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs,decr_veh)
						else:
							dist_error=0.0

					#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
					if argvs.opt_unassigned_flag==True:
						if veh1.reserved_v_flag==True:
							aunass = len([c for c in skv1_route[1:alast_idx1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
						if veh2.reserved_v_flag==True:
							aunass += len([c for c in skv2_route[1:alast_idx2] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

					ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907

					if avnum-bvnum<0 and decr_vnum == True:
						if (argvs.loadPenaltyWeight==0 or aload<1e-7) and (argvs.load2PenaltyWeight==0 or aload2<1e-7) and (argvs.timePenaltyWeight==0 or compare_time(atpen+atpen_temp)<=0) and\
						(argvs.timeLevelingPenaltyWeight==0 or argvs.avetime_ape_flag==False or time_error<1e-7) and (argvs.timeLevelingPenaltyWeight==0 or argvs.avetime_ae_flag==False or time_error<1e-7) and\
						(argvs.visitsLevelingPenaltyWeight==0 or argvs.avevisits_ape_flag==False or visits_error<1e-7) and (argvs.visitsLevelingPenaltyWeight==0 or argvs.avevisits_ae_flag==False or visits_error<1e-7) and\
						(argvs.distLevelingPenaltyWeight==0 or argvs.avedist_ape_flag==False or dist_error<1e-7) and (argvs.distLevelingPenaltyWeight==0 or argvs.avedist_ae_flag==False or dist_error<1e-7):
							ires=True
							cdiff_best=cdiff
							pick_opt_flag1_best,pick_opt_flag2_best=pick_opt_flag1,pick_opt_flag2
							index=i1
							delay_lcnt_best=lcnt
							if argvs.break_flag:
								route1_best = skv1_route
								route2_best = skv2_route
								ttable_best = argvs.management_ttable
								dtable_best = argvs.management_dtable
								etable_best = argvs.management_etable
								xtable_best = argvs.management_xtable
								vehnos=[v.vehno for v in vehicles]
								vehicles[vehnos.index(veh1.vehno)].route = skv1_route
								vehicles[vehnos.index(veh2.vehno)].route = skv2_route
								t_route_best = r_backup(vehicles)
					else:
						if ires_temp and cdiff<cdiff_best:
							ires=True
							cdiff_best=cdiff
							pick_opt_flag1_best,pick_opt_flag2_best=pick_opt_flag1,pick_opt_flag2
							index=i1
							delay_lcnt_best=lcnt
							if argvs.break_flag:
								route1_best = skv1_route
								route2_best = skv2_route
								ttable_best = argvs.management_ttable
								dtable_best = argvs.management_dtable
								etable_best = argvs.management_etable
								xtable_best = argvs.management_xtable
								vehnos=[v.vehno for v in vehicles]
								vehicles[vehnos.index(veh1.vehno)].route = skv1_route
								vehicles[vehnos.index(veh2.vehno)].route = skv2_route
								t_route_best = r_backup(vehicles)

					if argvs.break_flag:
						argvs.management_ttable = t_dcopy(t_ttable)
						argvs.management_dtable = t_dcopy(t_dtable)
						argvs.management_etable = t_dcopy(t_etable)
						argvs.management_xtable = t_dcopy(t_xtable)
						vehicles = r_restore(vehicles, t_route, argvs)

	if pos1-1==0 and pos2==1:
		return False,btpen,bload,bload2,False,False,0,0,None,None,None,None,None,None
	##merge elif math.fabs(atpen)>1e-3 or math.fabs(btpen)>1e-3:
	##merge 	return False
	##merge elif avnum-bvnum<0:
	##merge 	return True
	##merge else:
	##merge 	return False
	elif avnum-bvnum<0: ##merge daisuu ga hettabaai
		if (decr_vnum == False or veh1.rmpriority==0) and (veh1.reserved_v_flag==False or argvs.opt_unassigned_flag==False): #予約車両削は削減可なのでif文に入れない
			return False,btpen,bload,bload2,False,False,0,0,None,None,None,None,None,None,None ##merge
		else:
		#if aload<1e-7 and bload<1e-7 and atpen<1e-7:
			return ires,btpen,bload,bload2,pick_opt_flag1_best,pick_opt_flag2_best,index,delay_lcnt_best,route1_best,route2_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best ##merge
	else: ##merge daisuu ga onaji nara
		return ires,btpen,bload,bload2,pick_opt_flag1_best,pick_opt_flag2_best,index,delay_lcnt_best,route1_best,route2_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best ##merge hantei kekka
		#return False

def merge_improved_dtable(customers,veh1,veh2,pos1,pos2,pos3,decr_vnum,lowertime,uppertime,vehicles,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list1,delay_arr_list2):
	ires=False
	index=0
	delay_lcnt_best=0
	pick_opt_flag1_best,pick_opt_flag2_best=False,False
	cdiff_best=0
	route1_best=None
	route2_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if not(pos2<=len(veh1.route)-1) or not(pos3<=len(veh2.route)-1) or \
		not(pos1<=pos2-1) or not(pos1-1>=0) or not(pos3-1>=0):
		return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

	for i in range(pos1,pos2):
		if veh1.route[i].custno[0] =='b':
			return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None


	#集荷最適化の場合DEPOは改善対象外
	if argvs.break_flag:
		pick_opt_flag1, pick_opt_idx1 = get_pick_opt_status(veh1, argvs)
		pick_opt_flag2, pick_opt_idx2 = get_pick_opt_status(veh2, argvs)
		if (pick_opt_flag1==True and pos2>=pick_opt_idx1) or \
			(pick_opt_flag2==True and pos3>=pick_opt_idx2):
			return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None
	else:
		pick_opt_flag1=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(veh1.route)-2)):
						if veh1.route[i].customers[0].custno=="0" and veh1.route[i+1].customers[0].custno!="0":
							break
						if veh1.route[i].customers[0].custno!="0" and veh1.route[i].requestType=="PICKUP":
							pick_opt_flag1=True
							break
			else:
				if veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0":
					for i in reversed(range(1,len(veh1.route)-2)):
						if veh1.route[i].custno=="0" and veh1.route[i+1].custno!="0":
							break
						if veh1.route[i].custno!="0" and veh1.route[i].requestType=="PICKUP":
							pick_opt_flag1=True
							break
		pick_opt_flag2=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if veh2.route[-2].customers[0].custno=="0":
					for i in reversed(range(1,len(veh2.route)-2)):
						if veh2.route[i].customers[0].custno=="0" and veh2.route[i+1].customers[0].custno!="0":
							break
						if veh2.route[i].customers[0].custno!="0" and veh2.route[i].requestType=="PICKUP":
							pick_opt_flag2=True
							break
			else:
				if veh2.route[-2].custno=="0":
					for i in reversed(range(1,len(veh2.route)-2)):
						if veh2.route[i].custno=="0" and veh2.route[i+1].custno!="0":
							break
						if veh2.route[i].custno!="0" and veh2.route[i].requestType=="PICKUP":
							pick_opt_flag2=True
							break
		if (pick_opt_flag1==True and pos2==len(veh1.route)-1) or \
			(pick_opt_flag2==True and pos3==len(veh2.route)-1):
			return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None
	
	cust_list=[c for c in veh1.route[pos1:pos2] if c.custno!="0" and c.custno[0]!="b"]
	depo_list=[c for c in veh1.route[pos1:pos2] if c.custno=="0"]
	br_list=[c for c in veh1.route[pos1:pos2] if c.custno[0]=="b"]

	if cust_list==[]:
		return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None #マージ対象がデポのみならFalseを返す

	#変更後にvehnoがreje_veに含まれていたらFalseを返す
	for i in range(pos1,pos2):
		if veh2.vehno in veh1.route[i].reje_ve:
			return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化
		if argvs.init_changecust=="additive": #条件2が含まれるならスキップ
			for c in veh1.route[pos1:pos2]:
				if free_or_additive(c,veh1,vehicles,argvs)=="additive" and c.custno!="0" and c.custno[0]!="b":
					return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive": #条件2が他の便に移るならスキップ
			skv1_route_temp,skv2_route_temp = veh1.route[:],veh2.route[:]             # ルート全体をコピー
			skv2_route_temp[pos3:pos3]=[c for c in cust_list]  # ルート入替
			skv2_route_temp[pos3:pos3]=[c for c in br_list]
			del skv1_route_temp[pos1:pos2]
			skv1_route_temp[pos1:pos1]=[c for c in depo_list] 

			for i in range(len(skv1_route_temp)-1):
				if in_additive(skv1_route_temp[i],veh1,skv1_route_temp,vehicles,argvs)==False:
					return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

			for i in range(len(skv2_route_temp)-1):
				if in_additive(skv2_route_temp[i],veh2,skv2_route_temp,vehicles,argvs)==False:
					return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None
	else:
		#未割り当て荷物最適化無し
		if argvs.init_changecust=="additive": #条件2が含まれるならスキップ
			for c in veh1.route[pos1:pos2]:
				if c.changecust=="additive" and c.custno!="0" and c.custno[0]!="b":
					return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive": #条件2が他の便に移るならスキップ
			rotate_idx1={}
			idx=0
			for i in range(len(veh1.route)-1):
				if veh1.route[i].custno=="0" and veh1.route[i+1].custno!="0":
					idx+=1
				elif veh1.route[i].changecust=="additive" and veh1.route[i].custno!="0" and veh1.route[i].custno[0]!="b":
					rotate_idx1[veh1.route[i]]=idx

			rotate_idx2={}
			idx=0
			for i in range(len(veh2.route)-1):
				if veh2.route[i].custno=="0" and veh2.route[i+1].custno!="0":
					idx+=1
				elif veh2.route[i].changecust=="additive" and veh2.route[i].custno!="0" and veh2.route[i].custno[0]!="b":
					rotate_idx2[veh2.route[i]]=idx

			skv1_route_temp,skv2_route_temp = veh1.route[:],veh2.route[:]             # ルート全体をコピー
			skv2_route_temp[pos3:pos3]=[c for c in cust_list]  # ルート入替
			skv2_route_temp[pos3:pos3]=[c for c in br_list]
			del skv1_route_temp[pos1:pos2]
			skv1_route_temp[pos1:pos1]=[c for c in depo_list] 

			idx=0
			for i in range(len(skv1_route_temp)-1):
				if skv1_route_temp[i].custno=="0" and skv1_route_temp[i+1].custno!="0":
					idx+=1
				elif skv1_route_temp[i].changecust=="additive" and skv1_route_temp[i].custno!="0" and skv1_route_temp[i].custno[0]!="b":
					if rotate_idx1[skv1_route_temp[i]]!=idx:
						return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

			idx=0
			for i in range(len(skv2_route_temp)-1):
				if skv2_route_temp[i].custno=="0" and skv2_route_temp[i+1].custno!="0":
					idx+=1
				elif skv2_route_temp[i].changecust=="additive" and skv2_route_temp[i].custno!="0" and skv2_route_temp[i].custno[0]!="b":
					if rotate_idx2[skv2_route_temp[i]]!=idx:
						return False,0.0,0.0,0.0,False,False,0,0,None,None,None,None,None,None,None

	depo_idx1=[j for j,c in enumerate(veh1.route[:-1]) if c.custno=="0"]+[len(veh1.route)-1]
	for i in range(len(depo_idx1)-1):
		if depo_idx1[i]<pos1 and pos1<=depo_idx1[i+1]:
			start_idx1=depo_idx1[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and (delay_arr_list1==[] or delay_arr_list2==[]) and argvs.break_flag==False:
		start_idx1=pos1-1
	if delay_arr_list1!=[] and delay_arr_list2!=[]:
		start_idx1=0

	depo_idx2=[j for j,c in enumerate(veh2.route[:-1]) if c.custno=="0"]+[len(veh2.route)-1]
	for i in range(len(depo_idx2)-1):
		if depo_idx2[i]<pos3 and pos3<=depo_idx2[i+1]:
			start_idx2=depo_idx2[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and (delay_arr_list1==[] or delay_arr_list2==[]) and argvs.break_flag==False:
		start_idx2=pos3-1
	if delay_arr_list1!=[] and delay_arr_list2!=[]:
		start_idx2=0

	bdist,adist,btpen,atpen,bpower,apower,bexp,aexp,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0

	n1,n2=len(veh1.route),len(veh2.route)
	bvnum=0
	if len([c for c in veh1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
		bvnum=bvnum+1
	if len([c for c in veh2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
		bvnum=bvnum+1
	avnum=0
	if len([c for c in veh1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])-len(cust_list)>=1:
		avnum=avnum+1
	if len([c for c in veh2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])+len(cust_list)>=1:
		avnum=avnum+1

	for i in range(start_idx1,n1):
		if i==0 or (argvs.bulkShipping_flag==False and (veh1.route[i-1].custno!=veh1.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (veh1.route[i-1].customers[0].custno!=veh1.route[i].customers[0].custno)):
			btpen+=max(0.0,veh1.st[i]-veh1.route[i].due_fs)
	btpen+=max(0.0,veh1.lv[n1-1]-veh1.endhour)

	for i in range(start_idx2,n2):
		if i==0 or(argvs.bulkShipping_flag==False and (veh2.route[i-1].custno!=veh2.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (veh2.route[i-1].customers[0].custno!=veh2.route[i].customers[0].custno)):
			btpen+=max(0.0,veh2.st[i]-veh2.route[i].due_fs)
	btpen+=max(0.0,veh2.lv[n2-1]-veh2.endhour)

	bv1final_t=veh1.lv[n1-1]
	bv2final_t=veh2.lv[n2-1]

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True:
		if veh1.reserved_v_flag==True:
			bunass = len([c for c in veh1.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
		if veh2.reserved_v_flag==True:
			bunass += len([c for c in veh2.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	#集荷最適化(簡易アルゴリズム判定)
	pick_nondepo_flag=False
	if veh1.route[-1].custno!="0" or veh2.route[-1].custno!="0":
		for c in veh1.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break
		for c in veh2.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break

	#mvehicles={veh1:0.0,veh2:0.0}
	if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist1=calc_dist(veh1,start_idx1+1,len(veh1.route),argvs)
		bdist2=calc_dist(veh2,start_idx2+1,len(veh2.route),argvs)
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=calc_power(veh1,start_idx1+1,len(veh1.route),argvs) \
			+ calc_power(veh2,start_idx2+1,len(veh2.route),argvs)
		if argvs.management_xtable:
			bexp=calc_exp(veh1,start_idx1+1,len(veh1.route),argvs) \
			+ calc_exp(veh2,start_idx2+1,len(veh2.route),argvs)
	else:
		bdist1=get_dtable(veh1.vtype, veh1.lv[pos1-1], argvs.management_dtable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno] \
			+get_dtable(veh1.vtype, veh1.lv[pos2-1], argvs.management_dtable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno]
		bdist2=get_dtable(veh2.vtype, veh2.lv[pos3-1], argvs.management_dtable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=get_etable(veh1.vtype, veh1.etype, veh1.lv[pos1-1], argvs.management_etable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno] \
			+get_etable(veh1.vtype, veh1.etype, veh1.lv[pos2-1], argvs.management_etable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno] \
			+get_etable(veh2.vtype, veh2.etype, veh2.lv[pos3-1], argvs.management_etable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(veh1.vtype, veh1.lv[pos1-1], argvs.management_xtable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno] \
			+get_xtable(veh1.vtype, veh1.lv[pos2-1], argvs.management_xtable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno] \
			+get_xtable(veh2.vtype, veh2.lv[pos3-1], argvs.management_xtable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]

	bload = veh1.load_pen+veh2.load_pen
	bload2 = veh1.load_pen2+veh2.load_pen2

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = veh1.lv[-1] + veh2.lv[-1]
	else:
		btime=0.0

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error


	if delay_arr_list1!=[] and delay_arr_list2!=[]:
		delay_lcnt=2
	else:
		delay_lcnt=1

	takebreak_list1 = [[]]
	takebreak_list2 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in veh1.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト
		takebreak_list2 = [*map(list, product(*[[c for c in t.additionalcust] for t in veh2.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for i1 in range(len(veh1.route[pos1].additionalcust)):
		if len(cust_list)+len(depo_list)!=1 and i1>0: #配送先が１つの場合のみ飛び地をチェック
			break
		if free_or_additive(veh1.route[pos1],veh1,vehicles,argvs)=="additive" and i1!=0:
			continue
		for i2 in range(len(takebreak_list1)):
			for i3 in range(len(takebreak_list2)):
				for lcnt in range(delay_lcnt):
					adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
					btpen_temp=btpen
					atpen_temp=0
					#変更後に訪問数上限を超えていたらFalseを返す
					v1_spotid=[c.spotid for c in veh1.route]
					v2_spotid=[c.spotid for c in veh2.route]
					v2_spotid[pos3:pos3]=[cust_list[0].additionalcust[i1].spotid]+[c.spotid for c in cust_list[1:]]
					del v1_spotid[pos1:pos2]
					v1_spotid[pos1:pos1]=[c.spotid for c in depo_list]
					# #visitnum1=len([len([*group]) for i,group in groupby(v1_spotid[1:-1])])-len([c for i,c in enumerate(v1_spotid[1:-1]) if c=="0" and (v1_spotid[i]!="0" or i==0)])
					# visitnum1=calc_visitnum(v1_spotid)
					# #visitnum2=len([len([*group]) for i,group in groupby(v2_spotid[1:-1])])-len([c for i,c in enumerate(v2_spotid[1:-1]) if c=="0" and (v2_spotid[i]!="0" or i==0)])
					# visitnum2=calc_visitnum(v2_spotid)
					# if (veh1.maxvisit>0 and visitnum1>veh1.maxvisit) or (veh2.maxvisit>0 and visitnum2>veh2.maxvisit):
					# 	continue

					skv1_route,skv2_route = veh1.route[:],veh2.route[:]             # ルート全体をコピー
					skv2_route[pos3:pos3]=[cust_list[0].additionalcust[i1]]+[c for c in cust_list[1:]]  # ルート入替
					del skv1_route[pos1:pos2]
					skv1_route[pos1:pos1]=[c for c in depo_list] 

					visitnum1=calc_visitnum(skv1_route)
					visitnum2=calc_visitnum(skv2_route)
					if (veh1.maxvisit>0 and visitnum1>veh1.maxvisit) or (veh2.maxvisit>0 and visitnum2>veh2.maxvisit):
						continue

					depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
					servt_dict1={}
					for k in range(len(depo_idx1)-1):
						servt_dict1[skv1_route[depo_idx1[k]]]=0
						servt=0
						for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
							if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno:
								servt+=skv1_route[j].depotservt
						if skv1_route[depo_idx1[k]+1].custno[0]!="b":
							if skv1_route[depo_idx1[k]+1].custno!="0":
								servt_dict1[skv1_route[depo_idx1[k]]]+=servt+veh1.depotservt
							else:
								servt_dict1[skv1_route[depo_idx1[k]]]+=servt
					#集荷時間
					servt_dict1[skv1_route[len(skv1_route)-1]]=0
					for k in range(1,len(depo_idx1)):
						servt=0
						for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
							if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv1_route[j].depotservt
						servt_dict1[skv1_route[depo_idx1[k]]]+=servt

					depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
					servt_dict2={}
					for k in range(len(depo_idx2)-1):
						servt_dict2[skv2_route[depo_idx2[k]]]=0
						servt=0
						for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
							if skv2_route[j].requestType=="DELIVERY" and skv2_route[j].custno!=skv2_route[j-1].custno:
								servt+=skv2_route[j].depotservt
						if skv2_route[depo_idx2[k]+1].custno[0]!="b":
							if skv2_route[depo_idx2[k]+1].custno!="0":
								servt_dict2[skv2_route[depo_idx2[k]]]+=servt+veh2.depotservt
							else:
								servt_dict2[skv2_route[depo_idx2[k]]]+=servt
					#集荷時間
					servt_dict2[skv2_route[len(skv2_route)-1]]=0
					for k in range(1,len(depo_idx2)):
						servt=0
						for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
							if skv2_route[j].requestType=="PICKUP" and skv2_route[j].custno!=skv2_route[j-1].custno:
								if skv2_route[j].custno[0]!="b":
									servt+=skv2_route[j].depotservt
						servt_dict2[skv2_route[depo_idx2[k]]]+=servt

					tdepo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]

					load=[0 for c in skv1_route]
					load2=[0 for c in skv1_route]
					for i in range(len(skv1_route)-1):
						if i in tdepo_idx1:
							for j in range(i+1,tdepo_idx1[tdepo_idx1.index(i)+1]):
								if skv1_route[j].requestType=="DELIVERY":
									if skv1_route[j].custno[0] != "b":
										load[i]+=skv1_route[j].dem
										load2[i]+=skv1_route[j].dem2
						else:
							if skv1_route[i].custno[0] != "b":
								if skv1_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv1_route[i].dem
									load2[i]=load2[i-1]-skv1_route[i].dem2
								else:
									load[i]=load[i-1]+skv1_route[i].dem
									load2[i]=load2[i-1]+skv1_route[i].dem2

					for i in reversed(range(len(load))):
						if i in tdepo_idx1 and i+1 in tdepo_idx1:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx1=[]
					for c in skv1_route[tdepo_idx1[0]+1:tdepo_idx1[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx1.append(0)
					
					for i in range(1,len(tdepo_idx1)-1):
						if load[tdepo_idx1[i]-1]==0 and load2[tdepo_idx1[i]-1]==0:
							for c in skv1_route[tdepo_idx1[i]+1:tdepo_idx1[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[tdepo_idx1[i]]==0 and load2[tdepo_idx1[i]]==0:
									no_park_idx1.append(veh1.route.index(skv1_route[tdepo_idx1[i]]))
					if load[tdepo_idx1[-1]-1]==0 and load2[tdepo_idx1[-1]-1]==0:
						no_park_idx1.append(veh1.route.index(skv1_route[tdepo_idx1[-1]]))

					pick_opt_flag1=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv1_route)-1)):
							if argvs.bulkShipping_flag==True:
								if skv1_route[i].customers[0].custno!="0":
									if skv1_route[i].customers[0].custno[0]!="b":
										non_depo=True
										if skv1_route[i].customers[0].requestType=="PICKUP":
											pick_opt_flag1=True
											break
								elif non_depo==True:
									break
							else:
								if skv1_route[i].custno!="0":
									if skv1_route[i].custno[0]!="b":
										non_depo=True
										if skv1_route[i].requestType=="PICKUP":
											pick_opt_flag1=True
											break
								elif non_depo==True:
									break

					tdepo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]

					load=[0 for c in skv2_route]
					load2=[0 for c in skv2_route]
					for i in range(len(skv2_route)-1):
						if i in tdepo_idx2:
							for j in range(i+1,tdepo_idx2[tdepo_idx2.index(i)+1]):
								if skv2_route[j].requestType=="DELIVERY":
									if skv2_route[j].custno[0] != "b":
										load[i]+=skv2_route[j].dem
										load2[i]+=skv2_route[j].dem2
						else:
							if skv2_route[i].custno[0] != "b":
								if skv2_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv2_route[i].dem
									load2[i]=load2[i-1]-skv2_route[i].dem2
								else:
									load[i]=load[i-1]+skv2_route[i].dem
									load2[i]=load2[i-1]+skv2_route[i].dem2

					for i in reversed(range(len(load))):
						if i in tdepo_idx2 and i+1 in tdepo_idx2:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx2=[]
					for c in skv2_route[tdepo_idx2[0]+1:tdepo_idx2[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx2.append(0)
					
					for i in range(1,len(tdepo_idx2)-1):
						if load[tdepo_idx2[i]-1]==0 and load2[tdepo_idx2[i]-1]==0:
							for c in skv2_route[tdepo_idx2[i]+1:tdepo_idx2[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[tdepo_idx2[i]]==0 and load2[tdepo_idx2[i]]==0:
									no_park_idx2.append(veh2.route.index(skv2_route[tdepo_idx2[i]]))
					if load[tdepo_idx2[-1]-1]==0 and load2[tdepo_idx2[-1]-1]==0:
						no_park_idx2.append(veh2.route.index(skv2_route[tdepo_idx2[-1]]))

					pick_opt_flag2=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv2_route)-1)):
							if argvs.bulkShipping_flag==True:
								if skv2_route[i].customers[0].custno!="0":
									if skv2_route[i].customers[0].custno[0]!="b":
										non_depo=True
										if skv2_route[i].customers[0].requestType=="PICKUP":
											pick_opt_flag2=True
											break
								elif non_depo==True:
									break
							else:
								if skv2_route[i].custno!="0":
									if skv2_route[i].custno[0]!="b":
										non_depo=True
										if skv2_route[i].requestType=="PICKUP":
											pick_opt_flag2=True
											break
								elif non_depo==True:
									break

					
					##kaizen mae no final arrive time
					##bv1final_t=veh1.arr[n1-2]+veh1.route[n1-2].servt ##20180605 bug
					##bv2final_t=veh2.arr[n2-2]+veh2.route[n2-2].servt ##20180605 bug
					##

					'''
					if (pos2==(n1-1) and pos3<(n2-1)) :
						mvehicles[veh1]=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1-1)])
						mvehicles[veh1]+=dist_dtable(veh1.route[pos1-1],veh1.route[pos2],dtable)
						mvehicles[veh2]=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3-1)])
						mvehicles[veh2]+=dist_dtable(veh2.route[pos3-1],veh1.route[pos1],dtable)
						mvehicles[veh2]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1,pos2-1)])
						mvehicles[veh2]+=dist_dtable(veh1.route[pos2-1],veh2.route[pos3],dtable)
						mvehicles[veh2]+=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3,len(veh2.route)-1)])
					elif (pos2<(n1-1) and pos3==(n2-1)):
						mvehicles[veh1]=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1-1)])
						mvehicles[veh1]+=dist_dtable(veh1.route[pos1-1],veh1.route[pos2],dtable)
						mvehicles[veh1]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos2,len(veh1.route)-1)])
						mvehicles[veh2]=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3-1)])
						mvehicles[veh2]+=dist_dtable(veh2.route[pos3-1],veh1.route[pos1],dtable)
						mvehicles[veh2]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1,pos2-1)])
						mvehicles[veh2]+=dist_dtable(veh1.route[pos2-1],veh2.route[pos3],dtable)
					elif (pos2==(n1-1) and pos3==(n2-1)):
						mvehicles[veh1]=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1-1)])
						mvehicles[veh1]+=dist_dtable(veh1.route[pos1-1],veh1.route[pos2],dtable)
						mvehicles[veh2]=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3-1)])
						mvehicles[veh2]+=dist_dtable(veh2.route[pos3-1],veh1.route[pos1],dtable)
						mvehicles[veh2]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1,pos2-1)])
						mvehicles[veh2]+=dist_dtable(veh1.route[pos2-1],veh2.route[pos3],dtable)
					else:
						mvehicles[veh1]=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1-1)])
						mvehicles[veh1]+=dist_dtable(veh1.route[pos1-1],veh1.route[pos2],dtable)
						mvehicles[veh1]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos2,len(veh1.route)-1)])
						mvehicles[veh2]=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3-1)])
						mvehicles[veh2]+=dist_dtable(veh2.route[pos3-1],veh1.route[pos1],dtable)
						mvehicles[veh2]+=sum([dist_dtable(veh1.route[i],veh1.route[i+1],dtable) for i in range(pos1,pos2-1)])
						mvehicles[veh2]+=dist_dtable(veh1.route[pos2-1],veh2.route[pos3],dtable)
						mvehicles[veh2]+=sum([dist_dtable(veh2.route[i],veh2.route[i+1],dtable) for i in range(pos3,len(veh2.route)-1)])
					'''

					if argvs.break_flag==False:
						#### ここから休憩機能なし用の処理 ####
						if lcnt==0:
							if veh1.route[start_idx1] in servt_dict1:
								if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
									lv_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
									st_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].parkt_open
								else:
									lv_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
									st_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)
							else:
								if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
									lv_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
									st_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].parkt_open
								else:
									lv_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
									st_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)
						else:
							if veh1.route[start_idx1] in servt_dict1:
								if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
									lv_t=max(delay_arr_list1[i1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
									st_t=max(delay_arr_list1[i1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].parkt_open
								else:
									lv_t=max(delay_arr_list1[i1],veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
									st_t=max(delay_arr_list1[i1],veh1.route[start_idx1].ready_fs)
							else:
								if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
									lv_t=max(delay_arr_list1[i1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
									st_t=max(delay_arr_list1[i1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].parkt_open
								else:
									lv_t=max(delay_arr_list1[i1],veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
									st_t=max(delay_arr_list1[i1],veh1.route[start_idx1].ready_fs)
						if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
							lv_t+=veh1.route[start_idx1].parkt_open
						if start_idx1==0 or veh1.route[start_idx1-1].custno!="0" or veh1.route[start_idx1].custno!="0": #デポが連続しない場合
							atpen += max(0.0, st_t-veh1.route[start_idx1].due_fs)
						arr_t=veh1.arr[start_idx1]

						if start_idx1!=0 and veh1.route[start_idx1].custno==veh1.route[start_idx1-1].custno and veh1.route[start_idx1].custno!="0":
								lv_t=veh1.lv[start_idx1-1]
								arr_t=veh1.arr[start_idx1-1]

						impassable=True
						for i in range(start_idx1,pos1-1):
							from_c,to_c=veh1.route[i],veh1.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable3 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable3 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or \
							dtable3[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
							if to_c in servt_dict1:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable3[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable3[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable3[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						dtable1 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable1 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable1 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

						#変更後に通行不可能ならFalseを返す
						ttable1 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

						if depo_list==[]:
							if (argvs.bulkShipping_flag==False and pos2==len(veh1.route)-1 and veh1.route[pos1-1].custno!="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==True) or \
							(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-1 and veh1.route[pos1-1].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
								if ttable1[veh1.route[pos1-1].spotno][customers[0].spotno]==-1 or \
								dtable1[veh1.route[pos1-1].spotno][customers[0].spotno]==-1 or \
								(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][customers[0].spotno]==-1) or \
								(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][customers[0].spotno]==-1):
									continue

								adist+=dtable1[veh1.route[pos1-1].spotno][customers[0].spotno]
								if argvs.management_etable:
									apower+=etable1[veh1.route[pos1-1].spotno][customers[0].spotno]
								if argvs.management_xtable:
									aexp+=xtable1[veh1.route[pos1-1].spotno][customers[0].spotno]

								arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][customers[0].spotno]*veh1.drskill
								st_t = max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
								atpen+=max(0.0,st_t-customers[0].due_fs)
								lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[veh1.route[-1]]+veh1.depotservt)*veh1.opskill
								lv_t+=customers[0].parkt_open

								ttable10 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
								dtable10 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable10 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable10 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

								if ttable10[customers[0].spotno][veh1.route[-1].spotno]==-1 or \
									dtable10[customers[0].spotno][veh1.route[-1].spotno]==-1 or \
									(argvs.management_etable and etable10[customers[0].spotno][veh1.route[-1].spotno]==-1) or \
									(argvs.management_xtable and xtable10[customers[0].spotno][veh1.route[-1].spotno]==-1):
									continue

								adist+=dtable10[customers[0].spotno][veh1.route[-1].spotno]
								if argvs.management_etable:
									apower+=etable10[customers[0].spotno][veh1.route[-1].spotno]
								if argvs.management_xtable:
									aexp+=xtable10[customers[0].spotno][veh1.route[-1].spotno]

								arr_t=lv_t+ttable10[customers[0].spotno][veh1.route[-1].spotno]*veh1.drskill
								st_t = max(arr_t,veh1.route[-1].ready_fs)
								atpen+=max(0.0,st_t-veh1.route[-1].due_fs)
								lv_t=max(arr_t,veh1.route[-1].ready_fs)
							elif (argvs.bulkShipping_flag==False and pos2==len(veh1.route)-2 and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False) or \
							(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-2 and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
								if ttable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]==-1 or \
								dtable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]==-1):
									continue

								arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]*veh1.drskill
								st_t=max(arr_t,veh1.route[-1].ready_fs)
								atpen+=max(0.0,st_t-veh1.route[-1].due_fs)
								lv_t=max(arr_t,veh1.route[-1].ready_fs)
								
								adist+=dtable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]
								if argvs.management_etable:
									apower+=etable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]
								if argvs.management_xtable:
									aexp+=xtable1[veh1.route[pos1-1].spotno][veh1.route[-1].spotno]
							else:
								if veh1.route[pos1-1].custno!=veh1.route[pos2].custno or veh1.route[pos2].custno=="0":
									if ttable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]==-1 or \
										dtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]==-1 or \
										(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]==-1) or \
										(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]==-1):
										continue

									arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
									if veh1.route[pos2] in servt_dict1:
										if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
											lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
											st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
										else:
											lv_t=max(arr_t,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
											st_t=max(arr_t,veh1.route[pos2].ready_fs)
									else:
										if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
											lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
											st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
										else:
											lv_t=max(arr_t,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
											st_t=max(arr_t,veh1.route[pos2].ready_fs)
									if veh1.route[pos2].spotid!=veh1.route[pos1-1].spotid and not pos2 in no_park_idx1:
										lv_t+=veh1.route[pos2].parkt_open

									adist+=dtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]
									if argvs.management_etable:
										apower+=etable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]
									if argvs.management_xtable:
										aexp+=xtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno]


								if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
									impassable,dist,power,exp,_=check_impassability(customers,veh1,lv_t,pos2+1,servt_dict1,len(skv1_route)-1,no_park_idx1,pick_opt_flag1,argvs)
									if impassable==False:
										continue

									adist+=dist
									if argvs.management_etable:
										apower+=power
									if argvs.management_xtable:
										aexp+=exp

						else:
							if ttable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]==-1 or \
								dtable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]==-1 or \
								(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]==-1) or \
								(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]==-1):
								continue

							adist+=dtable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]
							if argvs.management_etable:
								apower+=etable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]

							arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][depo_list[0].spotno]*veh1.drskill
							if depo_list[0].spotid!=veh1.route[pos1-1].spotid and not veh1.route.index(depo_list[0]) in no_park_idx1:
								lv_t=max(arr_t+depo_list[0].parkt_arrive,depo_list[0].ready_fs)+servt_dict1[depo_list[0]]*veh1.opskill
								st_t=max(arr_t+depo_list[0].parkt_arrive,depo_list[0].ready_fs)+depo_list[0].parkt_open
							else:
								lv_t=max(arr_t,depo_list[0].ready_fs)+servt_dict1[depo_list[0]]*veh1.opskill
								st_t=max(arr_t,depo_list[0].ready_fs)
							if depo_list[0].spotid!=veh1.route[pos1-1].spotid and not veh1.route.index(depo_list[0]) in no_park_idx1:
								lv_t+=depo_list[0].parkt_open

							if veh1.route[pos1-1].custno!="0":
								atpen+=max(0.0,st_t-depo_list[0].due_fs)

							impassable=True
							for i in range(len(depo_list)-1):
								from_c,to_c=depo_list[i],depo_list[i+1]

								dtable3 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
								ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
								if argvs.management_etable:
									etable3 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable3 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

								if ttable3[from_c.spotno][to_c.spotno]==-1 or \
								dtable3[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
								lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[depo_list[i+1]]*veh1.opskill

								# atpen+=max(0.0,arr_t-to_c.due_fs)

								adist+=dtable3[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable3[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable3[from_c.spotno][to_c.spotno]
							if impassable==False:
								continue
							
							dtable9 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable9 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable9 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)
							ttable9 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

							if ttable9[depo_list[-1].spotno][veh1.route[pos2].spotno]==-1 or \
							dtable9[depo_list[-1].spotno][veh1.route[pos2].spotno]==-1 or \
							(argvs.management_etable and etable9[depo_list[-1].spotno][veh1.route[pos2].spotno]==-1) or \
							(argvs.management_xtable and xtable9[depo_list[-1].spotno][veh1.route[pos2].spotno]==-1):
								continue

							adist+=dtable9[depo_list[-1].spotno][veh1.route[pos2].spotno]
							if argvs.management_etable:
								apower+=etable9[depo_list[-1].spotno][veh1.route[pos2].spotno]
							if argvs.management_xtable:
								aexp+=xtable9[depo_list[-1].spotno][veh1.route[pos2].spotno]

								
							arr_t=lv_t+ttable9[depo_list[-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
							if veh1.route[pos2] in servt_dict1:
								if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
									lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
									st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
								else:
									lv_t=max(arr_t,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
									st_t=max(arr_t,veh1.route[pos2].ready_fs)
							else:
								if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
									lv_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
									st_t=max(arr_t+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
								else:
									lv_t=max(arr_t,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
									st_t=max(arr_t,veh1.route[pos2].ready_fs)
							if veh1.route[pos2].spotid!=depo_list[-1].spotid and not pos2 in no_park_idx1:
								lv_t+=veh1.route[pos2].parkt_open

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,veh1,lv_t,pos2+1,servt_dict1,len(skv1_route)-1,no_park_idx1,pick_opt_flag1,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
						adist1=adist

						lv1=lv_t
						st1=st_t

						if lcnt==0:
							if veh2.route[start_idx2] in servt_dict2:
								if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
									lv_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
									st_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].parkt_open
								else:
									lv_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
									st_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)
							else:
								if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
									lv_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
									st_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].parkt_open
								else:
									lv_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
									st_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)
						else:
							if veh2.route[start_idx2] in servt_dict2:
								if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
									lv_t=max(delay_arr_list2[i1]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
									st_t=max(delay_arr_list2[i1]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].parkt_open
								else:
									lv_t=max(delay_arr_list2[i1],veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
									st_t=max(delay_arr_list2[i1],veh2.route[start_idx2].ready_fs)
							else:
								if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
									lv_t=max(delay_arr_list2[i1]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
									st_t=max(delay_arr_list2[i1]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].parkt_open
								else:
									lv_t=max(delay_arr_list2[i1],veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
									st_t=max(delay_arr_list2[i1],veh2.route[start_idx2].ready_fs)
						if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
							lv_t+=veh2.route[start_idx2].parkt_open
						if start_idx2==0 or veh2.route[start_idx2-1].custno!="0" or veh2.route[start_idx2].custno!="0": #デポが連続しない場合
							atpen += max(0.0, st_t-veh2.route[start_idx2].due_fs)
						arr_t=veh2.arr[start_idx2]

						if start_idx2!=0 and veh2.route[start_idx2].custno==veh2.route[start_idx2-1].custno and veh2.route[start_idx2].custno!="0":
							lv_t=veh2.lv[start_idx2-1]
							arr_t=veh2.arr[start_idx2-1]

						impassable=True
						for i in range(start_idx2,pos3-1):
							from_c,to_c=veh2.route[i],veh2.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable3 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							ttable3 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable3 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or \
							dtable3[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh2.drskill
							if to_c in servt_dict2:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable3[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable3[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable3[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if veh2.route[pos3-1].custno!=cust_list[0].additionalcust[i1].custno:
							dtable2 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable2 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable2 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							ttable2 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							if ttable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]==-1 or \
								dtable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]==-1 or \
								(argvs.management_etable and etable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]==-1) or \
								(argvs.management_xtable and xtable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]==-1):
								continue

							arr_t=lv_t+ttable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]*veh2.drskill
							if cust_list[0].additionalcust[i1].spotid!=veh2.route[pos3-1].spotid:
								lv_t=max(arr_t+cust_list[0].additionalcust[i1].parkt_arrive,cust_list[0].additionalcust[i1].ready_fs)+cust_list[0].additionalcust[i1].servt*veh2.opskill
								st_t=max(arr_t+cust_list[0].additionalcust[i1].parkt_arrive,cust_list[0].additionalcust[i1].ready_fs)+cust_list[0].additionalcust[i1].parkt_open
							else:
								lv_t=max(arr_t,cust_list[0].additionalcust[i1].ready_fs)+cust_list[0].additionalcust[i1].servt*veh2.opskill
								st_t=max(arr_t,cust_list[0].additionalcust[i1].ready_fs)
							if cust_list[0].additionalcust[i1].spotid!=veh2.route[pos3-1].spotid:
								lv_t+=cust_list[0].additionalcust[i1].parkt_open
							atpen+=max(0.0,st_t-cust_list[0].additionalcust[i1].due_fs)

							adist+=dtable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]
							if argvs.management_etable:
								apower+=etable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]
							if argvs.management_xtable:
								aexp+=xtable2[veh2.route[pos3-1].spotno][cust_list[0].additionalcust[i1].spotno]

						impassable=True
						for i in range(len(cust_list)-1):
							from_c,to_c=cust_list[i],cust_list[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue
							
							ttable8 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								dtable8 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable8 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable8 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

								if ttable8[from_c.spotno][to_c.spotno]==-1 or \
								dtable8[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable8[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable8[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								adist+=dtable8[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable8[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable8[from_c.spotno][to_c.spotno]

							arr_t=lv_t+ttable8[from_c.spotno][to_c.spotno]*veh2.drskill
							if to_c.spotid!=from_c.spotid:
								lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
								st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
							else:
								lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
								st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid:
								lv_t+=to_c.parkt_open
							atpen+=max(0.0,st_t-to_c.due_fs)
						if impassable==False:
							continue
						

						ttable4 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
						dtable4 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable4 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable4 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

						if (argvs.bulkShipping_flag==False and pos3==len(veh2.route)-1 and veh2.route[-1].custno!="0" and pick_opt_flag2==True) or \
							(argvs.bulkShipping_flag==True and pos3==len(veh2.route)-1 and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
							if ttable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
							dtable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
							(argvs.management_etable and etable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]==-1) or \
							(argvs.management_xtable and xtable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]==-1):
								continue

							adist+=dtable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]
							if argvs.management_etable:
								apower+=etable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]

							arr_t=lv_t+ttable4[cust_list[-1].additionalcust[i1].spotno][customers[0].spotno]*veh2.drskill
							st_t = max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
							atpen+=max(0.0,st_t-customers[0].due_fs)
							lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[veh2.route[-1]]+veh2.depotservt)*veh2.opskill
							lv_t+=customers[0].parkt_open

							ttable11 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							dtable11 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable11 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable11 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							if ttable11[customers[0].spotno][veh2.route[-1].spotno]==-1 or \
								dtable11[customers[0].spotno][veh2.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable11[customers[0].spotno][veh2.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable11[customers[0].spotno][veh2.route[-1].spotno]==-1):
								continue

							adist+=dtable11[customers[0].spotno][veh2.route[-1].spotno]
							if argvs.management_etable:
								apower+=etable11[customers[0].spotno][veh2.route[-1].spotno]
							if argvs.management_xtable:
								aexp+=xtable11[customers[0].spotno][veh2.route[-1].spotno]

							arr_t=lv_t+ttable11[customers[0].spotno][veh2.route[-1].spotno]*veh2.drskill
							st_t = max(arr_t,veh2.route[-1].ready_fs)
							atpen+=max(0.0,st_t-veh2.route[-1].due_fs)
							lv_t=max(arr_t,veh2.route[-1].ready_fs)
						elif (argvs.bulkShipping_flag==False and pos3==len(veh2.route)-2 and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False) or \
							(argvs.bulkShipping_flag==True and pos3==len(veh2.route)-2 and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
							if ttable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]==-1 or \
							dtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]==-1 or \
							(argvs.management_etable and etable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]==-1) or \
							(argvs.management_xtable and xtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]==-1):
								continue

							arr_t=lv_t+ttable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]*veh2.drskill
							st_t = max(arr_t,veh2.route[-1].ready_fs)
							atpen+=max(0.0,st_t-veh2.route[-1].due_fs)
							lv_t=max(arr_t,veh2.route[-1].ready_fs)
							
							adist+=dtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]
							if argvs.management_etable:
								apower+=etable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]
							if argvs.management_xtable:
								aexp+=xtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[-1].spotno]
						else:
							if cust_list[-1].additionalcust[i1].custno!=veh2.route[pos3].custno or veh2.route[pos3].custno=="0":
								if ttable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]==-1 or \
									dtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]==-1 or \
									(argvs.management_etable and etable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]==-1) or \
									(argvs.management_xtable and xtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]==-1):
									continue
								
								adist+=dtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]
								if argvs.management_etable:
									apower+=etable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]
								if argvs.management_xtable:
									aexp+=xtable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]

								arr_t=lv_t+ttable4[cust_list[-1].additionalcust[i1].spotno][veh2.route[pos3].spotno]*veh2.drskill
								if veh2.route[pos3] in servt_dict2:
									if veh2.route[pos3].spotid!=cust_list[-1].additionalcust[i1].spotid and not pos3 in no_park_idx2:
										lv_t=max(arr_t+veh2.route[pos3].parkt_arrive,veh2.route[pos3].ready_fs)+servt_dict2[veh2.route[pos3]]*veh2.opskill
										st_t=max(arr_t+veh2.route[pos3].parkt_arrive,veh2.route[pos3].ready_fs)+veh2.route[pos3].parkt_open
									else:
										lv_t=max(arr_t,veh2.route[pos3].ready_fs)+servt_dict2[veh2.route[pos3]]*veh2.opskill
										st_t=max(arr_t,veh2.route[pos3].ready_fs)
								else:
									if veh2.route[pos3].spotid!=cust_list[-1].additionalcust[i1].spotid and not pos3 in no_park_idx2:
										lv_t=max(arr_t+veh2.route[pos3].parkt_arrive,veh2.route[pos3].ready_fs)+veh2.route[pos3].servt*veh2.opskill
										st_t=max(arr_t+veh2.route[pos3].parkt_arrive,veh2.route[pos3].ready_fs)+veh2.route[pos3].parkt_open
									else:
										lv_t=max(arr_t,veh2.route[pos3].ready_fs)+veh2.route[pos3].servt*veh2.opskill
										st_t=max(arr_t,veh2.route[pos3].ready_fs)
								if veh2.route[pos3].spotid!=cust_list[-1].additionalcust[i1].spotid and not pos3 in no_park_idx2:
									lv_t+=veh2.route[pos3].parkt_open

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or (delay_arr_list1!=[] and delay_arr_list2!=[]) or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,veh2,lv_t,pos3+1,servt_dict2,len(skv2_route)-1,no_park_idx2,pick_opt_flag2,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
						adist2=adist-adist1

						lv2=lv_t
						st2=st_t
						
						
						##20180605 for lutime check
						if pos2 == n1-1:
							if depo_list==[]:
								if (argvs.bulkShipping_flag==False and (veh1.route[pos1-1].custno!="0" or veh1.route[pos2].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (veh1.route[pos1-1].customers[0].custno!="0" or veh1.route[pos2].customers[0].custno!="0")):
									atpen+=max(0.0,st1-veh1.route[pos2].due_fs)
								atpen+=max(0.0,lv1-veh1.endhour)
							else:
								if (argvs.bulkShipping_flag==False and veh1.route[pos2].custno!="0") or (argvs.bulkShipping_flag==True and veh1.route[pos2].customers[0].custno!="0"):
									atpen+=max(0.0,st1-veh1.route[pos2].due_fs)
								atpen+=max(0.0,lv1-veh1.endhour)
							# atpen+=max(0.0,arr_t-bv1final_t)     
						else:
						##20180605
							if not ((argvs.bulkShipping_flag==False and pos2==len(veh1.route)-2 and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False) or \
							(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-2 and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False)) and \
							not ((argvs.bulkShipping_flag==False and pos2==len(veh1.route)-1 and veh1.route[pos1-1].custno!="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==True) or \
							(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-1 and veh1.route[pos1-1].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True)):
								lv_t=lv1
								if depo_list==[]:
									if veh1.route[pos1-1].custno!=veh1.route[pos2].custno:
										atpen+=max(0.0,st1-veh1.route[pos2].due_fs)
								else:
									if veh1.route[pos2].custno!="0":
										atpen+=max(0.0,st1-veh1.route[pos2].due_fs)
									
								for i in range(pos2,n1-1-1):
									if i+1==n1-2 and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False:
										continue

									if veh1.route[i].custno==veh1.route[i+1].custno and veh1.route[i+1].custno!="0":
										continue

									if veh1.route[i+1] in servt_dict1:
										proc_time=servt_dict1[veh1.route[i+1]]
									else:
										proc_time=veh1.route[i+1].servt
									if i+1 in no_park_idx1:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(veh1.route[i],veh1.route[i+1],lv_t,proc_time,veh1,no_park,argvs)
									if veh1.route[i].custno!="0" or veh1.route[i+1].custno!="0":
										atpen+=ttime_pen

								##20180605
								ttable5 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
								if (argvs.bulkShipping_flag==False and veh1.route[-2].custno!="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==True) or \
								(argvs.bulkShipping_flag==True and veh1.route[-2].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
									arr_t=lv_t+ttable5[veh1.route[-2].spotno][customers[0].spotno]*veh1.drskill
									st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
									atpen+=max(0.0,st_t-customers[0].due_fs)
									lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[veh1.route[-1]]+veh1.depotservt)*veh1.opskill
									lv_t+=customers[0].parkt_open

									ttable12 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
									arr_t=lv_t+ttable12[customers[0].spotno][veh1.route[-1].spotno]*veh1.drskill

									#改善前時間算出
									lv1=max(arr_t,veh1.route[-1].ready_fs)
									st1=max(arr_t,veh1.route[-1].ready_fs)
								elif (argvs.bulkShipping_flag==False and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False) or \
								(argvs.bulkShipping_flag==True and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
									arr_t=lv_t+ttable5[veh1.route[-3].spotno][veh1.route[-1].spotno]*veh1.drskill

									#改善前時間算出
									lv1=max(arr_t,veh1.route[-1].ready_fs)
									st1=max(arr_t,veh1.route[-1].ready_fs)
								else:
									arr_t=lv_t+ttable5[veh1.route[-2].spotno][veh1.route[-1].spotno]*veh1.drskill
									# arr_t=round(arr_t,4)
									
									if veh1.route[len(veh1.route)-1].spotid!=veh1.route[len(veh1.route)-2].spotid and not len(veh1.route)-1 in no_park_idx1:
										lv1=max(arr_t+veh1.route[len(veh1.route)-1].parkt_arrive,veh1.route[-1].ready_fs)+servt_dict1[veh1.route[len(veh1.route)-1]]*veh1.opskill
										st1=max(arr_t+veh1.route[len(veh1.route)-1].parkt_arrive,veh1.route[-1].ready_fs)+veh1.route[len(veh1.route)-1].parkt_open
									else:
										lv1=max(arr_t,veh1.route[-1].ready_fs)+servt_dict1[veh1.route[len(veh1.route)-1]]*veh1.opskill
										st1=max(arr_t,veh1.route[-1].ready_fs)
									if veh1.route[len(veh1.route)-1].spotid!=veh1.route[len(veh1.route)-2].spotid and not len(veh1.route)-1 in no_park_idx1:
										lv1+=veh1.route[len(veh1.route)-1].parkt_open

								if (argvs.bulkShipping_flag==False and (veh1.route[n1-2].custno!="0" or veh1.route[n1-1].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (veh1.route[n1-2].customers[0].custno!="0" or veh1.route[n1-1].customers[0].custno!="0")):
									atpen+=max(0.0,st1-veh1.route[n1-1].due_fs)
							atpen+=max(0.0,lv1-veh1.endhour)
							# atpen+=max(0.0,arr_t-bv1final_t)     
						
						##kaizen go no arrive time wo ltime,utime to hikaku
						if (compare_time(lowertime)>0 or compare_time(uppertime)>0) and avnum==bvnum:
							if lcnt==0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh1.arr[0],lowertime,uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
							else:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list1[i1],lowertime,uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
						##

						##20180605 for lutime check
						if pos3 == n2-1:
							atpen+=max(0.0,st2-veh2.route[n2-1].due_fs)+max(0.0,lv2-veh2.endhour)
							# atpen+=max(0.0,arr_t-bv2final_t)      
						else:
						##20180605
							if not ((argvs.bulkShipping_flag==False and pos3==len(veh2.route)-2 and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False) or \
							(argvs.bulkShipping_flag==True and pos3==len(veh2.route)-2 and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False)) and \
							not ((argvs.bulkShipping_flag==False and pos3==len(veh2.route)-1 and veh2.route[-1].custno!="0" and pick_opt_flag2==True) or \
							(argvs.bulkShipping_flag==True and pos3==len(veh2.route)-1 and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True)):
								lv_t=lv2
								if cust_list[-1].additionalcust[i1].custno!=veh2.route[pos3].custno:
									atpen+=max(0.0,st2-veh2.route[pos3].due_fs)
								for i in range(pos3,n2-1-1):
									if i+1==n2-2 and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False:
										continue

									if veh2.route[i].custno==veh2.route[i+1].custno and veh2.route[i+1].custno!="0":
										continue

									if veh2.route[i+1] in servt_dict2:
										proc_time=servt_dict2[veh2.route[i+1]]
									else:
										proc_time=veh2.route[i+1].servt
									if i+1 in no_park_idx2:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(veh2.route[i],veh2.route[i+1],lv_t,proc_time,veh2,no_park,argvs)
									if veh2.route[i].custno!="0" or veh2.route[i+1].custno!="0":
										atpen+=ttime_pen

								##20180605
								ttable6 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
								if (argvs.bulkShipping_flag==False and veh2.route[-2].custno!="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==True) or \
								(argvs.bulkShipping_flag==True and veh2.route[-2].customers[0].custno!="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
									arr_t=lv_t+ttable6[veh2.route[-2].spotno][customers[0].spotno]*veh2.drskill
									st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
									atpen+=max(0.0,st_t-customers[0].due_fs)
									lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[veh2.route[-1]]+veh2.depotservt)*veh2.opskill
									lv_t+=customers[0].parkt_open

									ttable12 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
									arr_t=lv_t+ttable12[customers[0].spotno][veh2.route[-1].spotno]*veh2.drskill

									#改善前時間算出
									lv2=max(arr_t,veh2.route[-1].ready_fs)
									st2=max(arr_t,veh2.route[-1].ready_fs)
								elif (argvs.bulkShipping_flag==False and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False) or \
								(argvs.bulkShipping_flag==True and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
									arr_t=lv_t+ttable6[veh2.route[-3].spotno][veh2.route[-1].spotno]*veh2.drskill

									#改善前時間算出
									lv2=max(arr_t,veh2.route[-1].ready_fs)
									st2=max(arr_t,veh2.route[-1].ready_fs)
								else:
									arr_t=lv_t+ttable6[veh2.route[-2].spotno][veh2.route[-1].spotno]*veh2.drskill
									# arr_t=round(arr_t,4)
									
									if veh2.route[len(veh2.route)-1].spotid!=veh2.route[len(veh2.route)-2].spotid and not len(veh2.route)-1 in no_park_idx2:
										lv2=max(arr_t+veh2.route[len(veh2.route)-1].parkt_arrive,veh2.route[-1].ready_fs)+servt_dict2[veh2.route[len(veh2.route)-1]]*veh2.opskill
										st2=max(arr_t+veh2.route[len(veh2.route)-1].parkt_arrive,veh2.route[-1].ready_fs)+veh2.route[len(veh2.route)-1].parkt_open
									else:
										lv2=max(arr_t,veh2.route[-1].ready_fs)+servt_dict2[veh2.route[len(veh2.route)-1]]*veh2.opskill
										st2=max(arr_t,veh2.route[-1].ready_fs)
									if veh2.route[len(veh2.route)-1].spotid!=veh2.route[len(veh2.route)-2].spotid and not len(veh2.route)-1 in no_park_idx2:
										lv2+=veh2.route[len(veh2.route)-1].parkt_open

								if (argvs.bulkShipping_flag==False and (veh2.route[n2-2].custno!="0" or veh2.route[n2-1].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (veh2.route[n2-2].customers[0].custno!="0" or veh2.route[n2-1].customers[0].custno!="0")):
									atpen+=max(0.0,st2-veh2.route[n2-1].due_fs)
							atpen+=max(0.0,lv2-veh2.endhour)	
							# atpen+=max(0.0,arr_t-bv2final_t)     

						# adist=dtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno] \
						# 	+ dtable3[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
						# 	+ dtable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]
						# if argvs.management_etable:
						# 	apower=etable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno] \
						# 	+ etable3[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
						# 	+ etable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]
						# if argvs.management_xtable:
						# 	aexp=xtable1[veh1.route[pos1-1].spotno][veh1.route[pos2].spotno] \
						# 	+ xtable3[veh2.route[pos3-1].spotno][veh1.route[pos1].spotno] \
						# 	+ xtable4[veh1.route[pos2-1].spotno][veh2.route[pos3].spotno]

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(lowertime)>0 or compare_time(uppertime)>0:
							if lcnt==0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-veh2.arr[0],lowertime,uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
							else:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-delay_arr_list2[i1],lowertime,uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
						##
						#### ここまで休憩機能なし用の処理 ####
					else:
						#### ここから休憩機能あり用の処理 ####
						br_veh1 = dcopy(veh1)
						br_veh1.route = skv1_route
						br_veh2 = dcopy(veh2)
						br_veh2.route = skv2_route
						if argvs.pickup_flag==True:
							#集荷最適化
							if pick_opt_flag1:
								if not get_pick_opt_status(br_veh1, argvs)[0]:
									br_veh1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(br_veh1, pick_opt_flag1, argvs)
							if pick_opt_flag2:
								if not get_pick_opt_status(br_veh2, argvs)[0]:
									br_veh2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(br_veh2, pick_opt_flag2, argvs)
						br_veh1, br_veh2 = insert_breakspot(takebreak_list1[i2], takebreak_list2[i3], customers, br_veh1, vehicles, argvs, 0, br_veh2)
						if br_veh1==None or br_veh2==None:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
							continue

						lv1 = br_veh1.lv[-1]
						skv1_route = br_veh1.route
						lv2 = br_veh2.lv[-1]
						skv2_route = br_veh2.route

						depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						br_veh1.update_totalcost_dtable(argvs)
						adist1 = br_veh1.totalcost
						nn1 = len(br_veh1.route)
						for i in range(start_idx1,nn1):
							if i==0 or (argvs.bulkShipping_flag==False and (br_veh1.route[i-1].custno!=br_veh1.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (br_veh1.route[i-1].customers[0].custno!=br_veh1.route[i].customers[0].custno)):
								atpen+=max(0.0,br_veh1.st[i]-br_veh1.route[i].due_fs)
						atpen+=max(0.0,lv1-br_veh1.endhour)

						depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
						br_veh2.update_totalcost_dtable(argvs)
						adist2 = br_veh2.totalcost
						nn2 = len(br_veh2.route)
						for i in range(start_idx2,nn2):
							if i==0 or(argvs.bulkShipping_flag==False and (br_veh2.route[i-1].custno!=br_veh2.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (br_veh2.route[i-1].customers[0].custno!=br_veh2.route[i].customers[0].custno)):
								atpen+=max(0.0,br_veh2.st[i]-br_veh2.route[i].due_fs)
						atpen+=max(0.0,lv2-br_veh2.endhour)

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
							if is_reserved(br_veh1,argvs)==False:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-br_veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-br_veh1.arr[0],0,btpen_temp)
							if is_reserved(br_veh2,argvs)==False:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-br_veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-br_veh2.arr[0],atpen_temp,btpen_temp)
						#### 
						if argvs.management_etable:
							apower1=calc_power(br_veh1,start_idx1+1,len(br_veh1.route),argvs)
							apower2=calc_power(br_veh2,start_idx2+1,len(br_veh2.route),argvs)
							apower = apower1 + apower2
						if argvs.management_xtable:
							aexp1=calc_exp(br_veh1,start_idx1+1,len(br_veh1.route),argvs)
							aexp2=calc_exp(br_veh2,start_idx2+1,len(br_veh2.route),argvs)
							aexp = aexp1 + aexp2

						adist = adist1 + adist2
						#### ここまで休憩機能あり用の処理 ####

					#集荷違反量を計算
					if argvs.pickup_flag==True:
						max_load_pen1_1,max_load_pen1_2=calc_vehicle_loadpickup_penalty(skv1_route,veh1)
						max_load_pen2_1,max_load_pen2_2=calc_vehicle_loadpickup_penalty(skv2_route,veh2)
					else:
						max_load_pen1_1,max_load_pen1_2,max_load_pen2_1,max_load_pen2_2=0,0,0,0

					load_pen,load_pen2=0,0
					for j in range(len(depo_idx1)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
							if skv1_route[k].requestType=="DELIVERY":
								if skv1_route[k].custno[0] != "b":
									load_onbrd+=skv1_route[k].dem
									load_onbrd2+=skv1_route[k].dem2

						load_pen+=max(load_onbrd-veh1.cap,0)
						load_pen2+=max(load_onbrd2-veh1.cap2,0)
					for j in range(len(depo_idx2)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
							if skv2_route[k].requestType=="DELIVERY":
								if skv2_route[k].custno[0] != "b":
									load_onbrd+=skv2_route[k].dem
									load_onbrd2+=skv2_route[k].dem2

						load_pen+=max(load_onbrd-veh2.cap,0)
						load_pen2+=max(load_onbrd2-veh2.cap2,0)

					aload =load_pen+max_load_pen1_1+max_load_pen2_1
					aload2 = load_pen2+max_load_pen1_2+max_load_pen2_2
					
					#改善前後の到着時間算出(拠点を出発し最後の配送先での配送を終えて拠点に戻るまで(-l なしの場合))
					if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
						atime=0.0
						time_error = 0.0
					else:
						# #vehicle1の改善後arr計算
						# arr1, _ = calc_vehicle_arr_route(skv1_route, veh1, veh1.drskill, veh1.opskill, veh1.chg_batt_dict)
						# #vehicle2の改善後arr計算
						# arr2, _ = calc_vehicle_arr_route(skv2_route, veh2, veh2.drskill, veh2.opskill, veh2.chg_batt_dict)
						
						if argvs.opt_t_weight!=0:
							#改善後時間算出
							if lcnt==0:
								atime = lv1 + lv2
							else:
								atime = lv1-delay_arr_list1[i1]+veh1.arr[0] + lv2-delay_arr_list2[i1]+veh2.arr[0]
						else:
							atime=btime=0.0

						mvehicles={veh1:0.0,veh2:0.0}
						if lcnt==0:
							mvehicles[veh1] = lv1-veh1.arr[0]
							mvehicles[veh2] = lv2-veh2.arr[0]
						else:
							mvehicles[veh1] = lv1-delay_arr_list1[i1]
							mvehicles[veh2] = lv2-delay_arr_list1[i1]

						if len([c for c in skv1_route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1 :
							decr_veh=veh1
						elif len([c for c in skv2_route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1 :
							decr_veh=veh2
						else:
							decr_veh=None

						if argvs.avetime_ape_flag==True:
							time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs,decr_veh)
						elif argvs.avetime_ae_flag==True:
							time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs,decr_veh)
						else:
							time_error=0.0
					
					if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
						visits_error = 0.0
					else:
						mvehicles={veh1:0.0,veh2:0.0}
						if argvs.bulkShipping_flag:
							mvehicles[veh1] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
							mvehicles[veh2] = len([c for r in skv2_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
						else:
							mvehicles[veh1] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])
							mvehicles[veh2] = len([i for i in range(1,len(skv2_route)-1) if skv2_route[i].custno!="0" and not skv2_route[i].custno.startswith("e") and not skv2_route[i].custno.startswith("b") and skv2_route[i].custno!=skv2_route[i-1].custno])

						if mvehicles[veh1]<1:
							decr_veh=veh1
						elif mvehicles[veh2]<1:
							decr_veh=veh2
						else:
							decr_veh=None

						if argvs.avevisits_ape_flag==True:
							visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs,decr_veh)
						elif argvs.avevisits_ae_flag==True:
							visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs,decr_veh)
						else:
							visits_error=0.0

					if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
						dist_error = 0.0
					else:
						mvehicles={veh1:0.0,veh2:0.0}
						if lcnt==0:
							mvehicles[veh1] = adist1+veh1.remdist[0]-veh1.remdist[start_idx1]
							mvehicles[veh2] = adist2+veh2.remdist[0]-veh2.remdist[start_idx2]
						else:
							mvehicles[veh1] = adist1+veh1.delay_remdist[0]-veh1.delay_remdist[start_idx1]
							mvehicles[veh2] = adist2+veh2.delay_remdist[0]-veh2.delay_remdist[start_idx2]

						if len([c for c in skv1_route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1 :
							decr_veh=veh1
						elif len([c for c in skv2_route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1 :
							decr_veh=veh2
						else:
							decr_veh=None

						if argvs.avedist_ape_flag==True:
							dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs,decr_veh)
						elif argvs.avedist_ae_flag==True:
							dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs,decr_veh)
						else:
							dist_error=0.0

					#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
					if argvs.opt_unassigned_flag==True:
						if veh1.reserved_v_flag==True:
							aunass = len([c for c in skv1_route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
						if veh2.reserved_v_flag==True:
							aunass += len([c for c in skv2_route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

					ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907

					if avnum-bvnum<0 and decr_vnum == True:
						if (argvs.loadPenaltyWeight==0 or aload<1e-7) and (argvs.load2PenaltyWeight==0 or aload2<1e-7) and (argvs.timePenaltyWeight==0 or compare_time(atpen+atpen_temp)<=0) and\
						(argvs.timeLevelingPenaltyWeight==0 or argvs.avetime_ape_flag==False or time_error<1e-7) and (argvs.timeLevelingPenaltyWeight==0 or argvs.avetime_ae_flag==False or time_error<1e-7) and\
						(argvs.visitsLevelingPenaltyWeight==0 or argvs.avevisits_ape_flag==False or visits_error<1e-7) and (argvs.visitsLevelingPenaltyWeight==0 or argvs.avevisits_ae_flag==False or visits_error<1e-7) and\
						(argvs.distLevelingPenaltyWeight==0 or argvs.avedist_ape_flag==False or dist_error<1e-7) and (argvs.distLevelingPenaltyWeight==0 or argvs.avedist_ae_flag==False or dist_error<1e-7):
							ires=True
							cdiff_best=cdiff
							pick_opt_flag1_best,pick_opt_flag2_best=pick_opt_flag1,pick_opt_flag2
							index=i1
							delay_lcnt_best=lcnt
							if argvs.break_flag:
								route1_best = skv1_route
								route2_best = skv2_route
								ttable_best = argvs.management_ttable
								dtable_best = argvs.management_dtable
								etable_best = argvs.management_etable
								xtable_best = argvs.management_xtable
								vehnos=[v.vehno for v in vehicles]
								vehicles[vehnos.index(veh1.vehno)].route = skv1_route
								vehicles[vehnos.index(veh2.vehno)].route = skv2_route
								t_route_best = r_backup(vehicles)
					else:
						if ires_temp and cdiff<cdiff_best:
							ires=True
							cdiff_best=cdiff
							pick_opt_flag1_best,pick_opt_flag2_best=pick_opt_flag1,pick_opt_flag2
							index=i1
							delay_lcnt_best=lcnt
							if argvs.break_flag:
								route1_best = skv1_route
								route2_best = skv2_route
								ttable_best = argvs.management_ttable
								dtable_best = argvs.management_dtable
								etable_best = argvs.management_etable
								xtable_best = argvs.management_xtable
								vehnos=[v.vehno for v in vehicles]
								vehicles[vehnos.index(veh1.vehno)].route = skv1_route
								vehicles[vehnos.index(veh2.vehno)].route = skv2_route
								t_route_best = r_backup(vehicles)

					if argvs.break_flag:
						argvs.management_ttable = t_dcopy(t_ttable)
						argvs.management_dtable = t_dcopy(t_dtable)
						argvs.management_etable = t_dcopy(t_etable)
						argvs.management_xtable = t_dcopy(t_xtable)
						vehicles = r_restore(vehicles, t_route, argvs)


	if pos1-1==0 and pos2==1:
		return False,btpen,bload,bload2,False,False,0,0,None,None,None,None,None,None,None
	##merge elif math.fabs(atpen)>1e-3 or math.fabs(btpen)>1e-3:
	##merge 	return False
	##merge elif avnum-bvnum<0:
	##merge 	return True
	##merge else:
	##merge 	return False
	elif avnum-bvnum<0: ##merge daisuu ga hettabaai
		if (decr_vnum == False or veh1.rmpriority==0) and (veh1.reserved_v_flag==False or argvs.opt_unassigned_flag==False): #予約車両削は削減可なのでif文に入れない
			return False,btpen,bload,bload2,False,False,0,0,None,None,None,None,None,None,None ##merge
		else:
		#if aload<1e-7 and bload<1e-7 and atpen<1e-7:
			return ires,btpen,bload,bload2,pick_opt_flag1_best,pick_opt_flag2_best,index,delay_lcnt_best,route1_best,route2_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best ##merge
	else: ##merge daisuu ga onaji nara
		return ires,btpen,bload,bload2,pick_opt_flag1_best,pick_opt_flag2_best,index,delay_lcnt_best,route1_best,route2_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best ##merge hantei kekka
		
#######cross opt ########
def cross_cust_dtable(customers,veh1,veh2,pos1,pos2,pos3,pos4,custs1,custs2,pick_opt_flag1,pick_opt_flag2,route1,route2,argvs):
	#[0,1,...pos1-1,pos1,pos1+1,....,pos2-1,pos2,pos+1,...]
	#vehicle.route[pos1],vehicle.route[pos2]=vehicle.route[pos2],vehicle.route[pos1]
	if route1!=None or route2!=None:
		#休憩機能あり
		veh1.route = route1
		veh2.route = route2
		veh1.update_totalcost_dtable(argvs)
		veh2.update_totalcost_dtable(argvs)
	else:
		#休憩機能なし
		veh1.route[pos1:pos2],veh2.route[pos3:pos4]=custs1[:],custs2[:]
		veh1.update_totalcost_dtable(argvs)
		veh2.update_totalcost_dtable(argvs)

		#集荷最適化
		if argvs.bulkShipping_flag==False and pick_opt_flag1==True and veh1.route[-2].custno!="0" and veh1.route[-1].custno!="0":
			veh1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
		elif argvs.bulkShipping_flag==True and pick_opt_flag1==True and veh1.route[-2].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0":
			depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
			depo.customers.append(copy.deepcopy(customers[0].customers[0]))
			depo.servt=customers[0].servt
			depo.dem=customers[0].dem
			depo.dem2=customers[0].dem2
			depo.reje_ve=customers[0].reje_ve
			depo.parkt_open=customers[0].parkt_open
			depo.parkt_arrive=customers[0].parkt_arrive
			depo.depotservt=customers[0].depotservt
			depo.additionalcust=[depo]
			depo.demdivideunit=customers[0].demdivideunit
			depo.requestType=customers[0].requestType
			depo.deny_unass=customers[0].deny_unass #未割り当て荷物

			veh1.insert_customer_at(-1,depo,argvs)
		elif (argvs.bulkShipping_flag==False and pick_opt_flag1==False and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0") or \
			(argvs.bulkShipping_flag==True and pick_opt_flag1==False and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0"):
			remove_customers_specified([veh1.route[-2]],veh1,argvs)

		if argvs.bulkShipping_flag==False and pick_opt_flag2==True and veh2.route[-2].custno!="0" and veh2.route[-1].custno!="0":
			veh2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
		elif argvs.bulkShipping_flag==True and pick_opt_flag2==True and veh2.route[-2].customers[0].custno!="0" and veh2.route[-1].customers[0].custno!="0":
			depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
			depo.customers.append(copy.deepcopy(customers[0].customers[0]))
			depo.servt=customers[0].servt
			depo.dem=customers[0].dem
			depo.dem2=customers[0].dem2
			depo.reje_ve=customers[0].reje_ve
			depo.parkt_open=customers[0].parkt_open
			depo.parkt_arrive=customers[0].parkt_arrive
			depo.depotservt=customers[0].depotservt
			depo.additionalcust=[depo]
			depo.demdivideunit=customers[0].demdivideunit
			depo.requestType=customers[0].requestType
			depo.deny_unass=customers[0].deny_unass #未割り当て荷物

			veh2.insert_customer_at(-1,depo,argvs)
		elif (argvs.bulkShipping_flag==False and pick_opt_flag2==False and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0") or \
			(argvs.bulkShipping_flag==True and pick_opt_flag2==False and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0"):
			remove_customers_specified([veh2.route[-2]],veh2,argvs)

def cross_dtable(customers,vehicles,lastc_flg,ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag): #20180807
	sLogBuf = "\n"
	#exists=True
	exists=False
	improved_cnt=0

	dtable_endtime=time.time() ##20190917
	##dtable_endtime=time.clock() ##20190903
	if argvs.timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.timeout):  ##20190903
		sLogBuf += "cross timeout!" #20190903
		if rank==0:
			logging.log(logging.INFO,sLogBuf)
		return improved_cnt #20190903

	bmax_len,bmin_len=-1,100000
	for v in [v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and v.direct_flag==False]:
		if bmax_len<len(v.route):
			bmax_len=len(v.route)
		if bmin_len>len(v.route):
			bmin_len=len(v.route)
	
	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
	if len(vehicles)<=1:
		return improved_cnt
	if len([(v1,v2,p1,p2,p3,p4) for v1,v2 in combinations(vehicles,2) \
		for (p1,p2),(p3,p4) in product(combinations(range(1,len(v1.route)),2),combinations(range(1,len(v2.route)),2)) \
		if len([c for c in v1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and len([c for c in v2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 \
		and v1.direct_flag==False and v2.direct_flag==False])==0:
		#exists=False
		return improved_cnt

	#while(exists):
	v1_imp,v2_imp = -10000,-10000 ### 改善があった場合のみ探索する車両の初期値
	v_imp = [] ### 改善があった車両を格納する
	v_init =[] ### 初回の探索を全ての車両で行うためのチェック用リスト
	for v1,v2 in [(v1,v2) for v1 in vehicles for v2 in vehicles \
		if v1.vehno<v2.vehno and len([c for c in v1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and len([c for c in v2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and v1.direct_flag==False and v2.direct_flag==False]: ### 全車両を格納し、1回探索したら除外
		v_init.append([v1.vehno,v2.vehno]) ###
	
	while True:
		exists=False
		#tresult.logprint("cross_dtable for loop start icnt:"+str(improved_cnt)+"\n")
		v1_tmp,v2_tmp=None,None
		cnt = 0 ###for文の最初は無条件で実行するため

		# #平準化高速化の為のソート
		# sorted_vehicles = vehicles[:]
		# if argvs.avedist_ape_flag or argvs.avedist_ae_flag:
		# 	derrs = [0 for v in sorted_vehicles]
		# 	if argvs.avedist_ape_flag:
		# 		derrs = calc_avedist_APE_list(sorted_vehicles, argvs.avedist_ape, argvs.lastc_flag)
		# 	else:
		# 		derrs = calc_avedist_AE_list(sorted_vehicles, argvs.avedist_ae, argvs.lastc_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, derrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# if argvs.avevisits_ape_flag or argvs.avevisits_ae_flag:
		# 	verrs = [0 for v in sorted_vehicles]
		# 	if argvs.avevisits_ape_flag:
		# 		verrs = calc_avevisits_APE_list(sorted_vehicles, argvs.avevisits_ape, argvs.bulkShipping_flag)
		# 	else:
		# 		verrs = calc_avevisits_AE_list(sorted_vehicles, argvs.avevisits_ae, argvs.bulkShipping_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, verrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# if argvs.avetime_ape_flag or argvs.avetime_ae_flag:
		# 	terrs = [0 for v in sorted_vehicles]
		# 	if argvs.avetime_ape_flag:
		# 		terrs = calc_avetime_APE_list(sorted_vehicles, argvs.avetime_ape, argvs.lastc_flag)
		# 	else:
		# 		terrs = calc_avetime_AE_list(sorted_vehicles, argvs.avetime_ae, argvs.lastc_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, terrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# for v1,v2 in combinations(sorted_vehicles,2):
		for v1,v2 in combinations(vehicles,2):
			if len([c for c in v1.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 and len([c for c in v2.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1 \
				and v1.direct_flag==False and v2.direct_flag==False:
				for (p1,p2),(p3,p4) in product(combinations(range(1,len(v1.route)),2),combinations(range(1,len(v2.route)),2)):
					dtable_endtime=time.time() ##20190917
					##dtable_endtime=time.clock() ##20180807
					##20190903
					if argvs.outputstime > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
						sLogBuf += "output_middle cross\n"
						outputs_middle(customers,vehicles,argvs)
						argvs.outputs_count+=1
					while True:
						if argvs.outputstime > 0.0 and (dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
							argvs.outputs_count+=1
						else:
							break
					##20190903
					if argvs.timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.timeout):  ##20180807
						sLogBuf += "cross timeout!\n" #20180807
						break #20180807
					
					if cnt > 0 and [v1.vehno,v2.vehno] != [v1_tmp,v2_tmp]:### 組み合わせループが終わったら初回チェック用リストから除外
						if [v1_tmp,v2_tmp] in v_init: ###
							v_init.remove([v1_tmp,v2_tmp])  ###
					
					if [v1.vehno,v2.vehno] in v_init or v1.vehno in v_imp or v2.vehno in v_imp: ###初回か改善があった車両のみ探索
						if lastc_flg==True:
							###exists=cross_improved_lastc_dtable(v1,v2,p1,p2,p3,p4,dtable,ttable,argvs.lowertime,argvs.uppertime,argvs)
							exists,atpen,aload,aload2,v1_imp,v2_imp,custs1,custs2,pick_opt_flag1,pick_opt_flag2,route1,route2,ttable,dtable,etable,xtable,t_route=cross_improved_lastc_dtable(customers,v1,v2,p1,p2,p3,p4,argvs.lowertime,argvs.uppertime,vehicles,argvs,no_depo_parkt_flag,one_table_flag)
						else:
							###exists=cross_improved_todepot_dtable(v1,v2,p1,p2,p3,p4,dtable,ttable,argvs.lowertime,argvs.uppertime,argvs)
							exists,atpen,aload,aload2,v1_imp,v2_imp,custs1,custs2,pick_opt_flag1,pick_opt_flag2,route1,route2,ttable,dtable,etable,xtable,t_route=cross_improved_todepot_dtable(customers,v1,v2,p1,p2,p3,p4,argvs.lowertime,argvs.uppertime,vehicles,argvs,no_depo_parkt_flag,one_table_flag)
					if(exists):
						##20180904
						tv1_route=v1.route[:]
						tv2_route=v2.route[:]
						if route1!=None:
							t_ttable = t_dcopy(argvs.management_ttable)
							t_dtable = t_dcopy(argvs.management_dtable)
							t_etable = t_dcopy(argvs.management_etable)
							t_xtable = t_dcopy(argvs.management_xtable)
							argvs.management_ttable = t_dcopy(ttable)
							argvs.management_dtable = t_dcopy(dtable)
							argvs.management_etable = t_dcopy(etable)
							argvs.management_xtable = t_dcopy(xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
						cross_cust_dtable(customers,v1,v2,p1,p2,p3,p4,custs1,custs2,pick_opt_flag1,pick_opt_flag2,route1,route2,argvs)

						if argvs.delaystart2_flag==True and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
							delay_arr_time2(vehicles,[v1,v2],argvs)

						depo_idx1=[j for j,c in enumerate(v1.route[:-1]) if c.custno=="0"]+[len(v1.route)-1]
						servt_dict1={}
						for k in range(len(depo_idx1)-1):
							servt_dict1[v1.route[depo_idx1[k]]]=0
							servt=0
							for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
								if v1.route[j].requestType=="DELIVERY" and v1.route[j].custno!=v1.route[j-1].custno:
									servt+=v1.route[j].depotservt
							if v1.route[depo_idx1[k]+1].custno!="0":
								servt_dict1[v1.route[depo_idx1[k]]]+=servt+v1.depotservt
							else:
								servt_dict1[v1.route[depo_idx1[k]]]+=servt
						#集荷時間
						servt_dict1[v1.route[len(v1.route)-1]]=0
						for k in range(1,len(depo_idx1)):
							servt=0
							for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
								if v1.route[j].requestType=="PICKUP" and v1.route[j].custno!=v1.route[j-1].custno:
									servt+=v1.route[j].depotservt
							servt_dict1[v1.route[depo_idx1[k]]]+=servt

						load=[0 for c in v1.route]
						load2=[0 for c in v1.route]
						for i in range(len(v1.route)-1):
							if i in depo_idx1:
								for j in range(i+1,depo_idx1[depo_idx1.index(i)+1]):
									if v1.route[j].requestType=="DELIVERY":
										if v1.route[j].custno[0] != "b":
											load[i]+=v1.route[j].dem
											load2[i]+=v1.route[j].dem2
							else:
								if v1.route[i].custno[0] != "b":
									if v1.route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-v1.route[i].dem
										load2[i]=load2[i-1]-v1.route[i].dem2
									else:
										load[i]=load[i-1]+v1.route[i].dem
										load2[i]=load2[i-1]+v1.route[i].dem2

						for i in reversed(range(len(load))):
							if i in depo_idx1 and i+1 in depo_idx1:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx1=[]
						for c in v1.route[depo_idx1[0]+1:depo_idx1[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx1.append(0)
						
						for i in range(1,len(depo_idx1)-1):
							if load[depo_idx1[i]-1]==0 and load2[depo_idx1[i]-1]==0:
								for c in v1.route[depo_idx1[i]+1:depo_idx1[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[depo_idx1[i]]==0 and load2[depo_idx1[i]]==0:
										no_park_idx1.append(depo_idx1[i])
						if load[depo_idx1[-1]-1]==0 and load2[depo_idx1[-1]-1]==0:
							no_park_idx1.append(depo_idx1[-1])

						pick_opt_flag1=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(v1.route)-1)):
								if argvs.bulkShipping_flag==True:
									if v1.route[i].customers[0].custno!="0":
										if v1.route[i].customers[0].custno[0]!="b":
											non_depo=True
											if v1.route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break
								else:
									if v1.route[i].custno!="0":
										if v1.route[i].custno[0]!="b":
											non_depo=True
											if v1.route[i].requestType=="PICKUP":
												pick_opt_flag1=True
												break
									elif non_depo==True:
										break

						depo_idx2=[j for j,c in enumerate(v2.route[:-1]) if c.custno=="0"]+[len(v2.route)-1]
						servt_dict2={}
						for k in range(len(depo_idx2)-1):
							servt_dict2[v2.route[depo_idx2[k]]]=0
							servt=0
							for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
								if v2.route[j].requestType=="DELIVERY" and v2.route[j].custno!=v2.route[j-1].custno:
									servt+=v2.route[j].depotservt
							if v2.route[depo_idx2[k]+1].custno!="0":
								servt_dict2[v2.route[depo_idx2[k]]]+=servt+v2.depotservt
							else:
								servt_dict2[v2.route[depo_idx2[k]]]+=servt
						#集荷時間
						servt_dict2[v2.route[len(v2.route)-1]]=0
						for k in range(1,len(depo_idx2)):
							servt=0
							for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
								if v2.route[j].requestType=="PICKUP" and v2.route[j].custno!=v2.route[j-1].custno:
									servt+=v2.route[j].depotservt
							servt_dict2[v2.route[depo_idx2[k]]]+=servt

						load=[0 for c in v2.route]
						load2=[0 for c in v2.route]
						for i in range(len(v2.route)-1):
							if i in depo_idx2:
								for j in range(i+1,depo_idx2[depo_idx2.index(i)+1]):
									if v2.route[j].requestType=="DELIVERY":
										if v2.route[j].custno[0] != "b":
											load[i]+=v2.route[j].dem
											load2[i]+=v2.route[j].dem2
							else:
								if v2.route[i].requestType=="DELIVERY":
									if v2.route[i].custno[0] != "b":
										load[i]=load[i-1]-v2.route[i].dem
										load2[i]=load2[i-1]-v2.route[i].dem2
									else:
										load[i]=load[i-1]+v2.route[i].dem
										load2[i]=load2[i-1]+v2.route[i].dem2

						for i in reversed(range(len(load))):
							if i in depo_idx2 and i+1 in depo_idx2:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx2=[]
						for c in v2.route[depo_idx2[0]+1:depo_idx2[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx2.append(0)
						
						for i in range(1,len(depo_idx2)-1):
							if load[depo_idx2[i]-1]==0 and load2[depo_idx2[i]-1]==0:
								for c in v2.route[depo_idx2[i]+1:depo_idx2[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[depo_idx2[i]]==0 and load2[depo_idx2[i]]==0:
										no_park_idx2.append(depo_idx2[i])
						if load[depo_idx2[-1]-1]==0 and load2[depo_idx2[-1]-1]==0:
							no_park_idx2.append(depo_idx2[-1])

						pick_opt_flag2=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(v2.route)-1)):
								if argvs.bulkShipping_flag==True:
									if v2.route[i].customers[0].custno!="0":
										if v2.route[i].customers[0].custno[0]!="b":
											non_depo=True
											if v2.route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break
								else:
									if v2.route[i].custno!="0":
										if v2.route[i].custno[0]!="b":
											non_depo=True
											if v2.route[i].requestType=="PICKUP":
												pick_opt_flag2=True
												break
									elif non_depo==True:
										break

						if check_impassability(customers,v1,v1.lv[0],1,servt_dict1,len(v1.route),no_park_idx1,pick_opt_flag1,argvs)[0]==False or check_impassability(customers,v2,v2.lv[0],1,servt_dict2,len(v2.route),no_park_idx2,pick_opt_flag2,argvs)[0]==False:
							argvs.management_ttable = t_ttable
							argvs.management_dtable = t_dtable
							argvs.management_etable = t_etable
							argvs.management_xtable = t_xtable
							v1.route=tv1_route[:]
							v1.update_totalcost_dtable(argvs)
							v2.route=tv2_route[:]
							v2.update_totalcost_dtable(argvs)
							continue

						if not v1_imp in v_imp:
							v_imp.append(v1_imp) ###改善があった車両を覚えておく
						if not v2_imp in v_imp:
							v_imp.append(v2_imp) ###
						v_imp=list(set(v_imp)) ###
						if [v1.vehno,v2.vehno] in v_init:
							v_init.remove([v1.vehno,v2.vehno]) ### 探索済みを初回チェック用リストから除外
						improved_cnt=improved_cnt+1

						#現在(=最新)のatpenとaloadとAPEを保存する
						if argvs.lastc_flag:
							for i in reversed(range(0,len(v1.route))):
								if v1.route[i].custno=="0" or v1.route[i].custno[0]=="b" or v1.route[i].custno[0]=="e" or i==len(v1.route)-1:
									last_idx=i
								else:
									break
							v1.time_pen=sum([max(0.0,v1.st[i]-v1.route[i].due_fs) for i in range(1,last_idx) if v1.route[i].custno!=v1.route[i-1].custno])+max(0.0,v1.lv[last_idx-1]-v1.endhour)
						else:
							v1.time_pen=sum([max(0.0,v1.st[i]-v1.route[i].due_fs) for i in range(1,len(v1.route)) if v1.route[i].custno!=v1.route[i-1].custno])+max(0.0,v1.lv[-1]-v1.endhour)

						if argvs.pickup_flag==True:
							max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v1.route,v1)
						else:
							max_load_pen,max_load_pen2=0,0

						depo_idx1=[j for j,c in enumerate(v1.route[:-1]) if c.custno=="0"]+[len(v1.route)-1]

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx1)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
								if v1.route[k].requestType=="DELIVERY":
									if v1.route[k].custno[0] != "b":
										load_onbrd+=v1.route[k].dem
										load_onbrd2+=v1.route[k].dem2

							load_pen+=max(load_onbrd-v1.cap,0)
							load_pen2+=max(load_onbrd2-v1.cap2,0)

						v1.load_pen =load_pen+max_load_pen
						v1.load_pen2 = load_pen2+max_load_pen2
				
						if argvs.lastc_flag:
							for i in reversed(range(0,len(v2.route))):
								if v2.route[i].custno=="0" or v2.route[i].custno[0]=="b" or v2.route[i].custno[0]=="e" or i==len(v2.route)-1:
									last_idx=i
								else:
									break
							v2.time_pen=sum([max(0.0,v2.st[i]-v2.route[i].due_fs) for i in range(1,last_idx) if v2.route[i].custno!=v2.route[i-1].custno])+max(0.0,v2.lv[last_idx-1]-v2.endhour)
						else:
							v2.time_pen=sum([max(0.0,v2.st[i]-v2.route[i].due_fs) for i in range(1,len(v2.route)) if v2.route[i].custno!=v2.route[i-1].custno])+max(0.0,v2.lv[-1]-v2.endhour)

						if argvs.pickup_flag==True:
							max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v2.route,v2)
						else:
							max_load_pen,max_load_pen2=0,0

						depo_idx2=[j for j,c in enumerate(v2.route[:-1]) if c.custno=="0"]+[len(v2.route)-1]

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx2)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
								if v2.route[k].requestType=="DELIVERY":
									if v2.route[k].custno[0] != "b":
										load_onbrd+=v2.route[k].dem
										load_onbrd2+=v2.route[k].dem2

							load_pen+=max(load_onbrd-v2.cap,0)
							load_pen2+=max(load_onbrd2-v2.cap2,0)

						v2.load_pen =load_pen+max_load_pen
						v2.load_pen2 = load_pen2+max_load_pen2

						argvs.atpen=sum([v.time_pen for v in vehicles])
						argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehicles])
						if argvs.avetime_ape_flag==True:
							argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

						if argvs.avevisits_ape_flag==True:
							argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

						if argvs.avedist_ape_flag==True:
							argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

						#違反なしのrouteを保存する
						backup_route(vehicles, argvs)

						if lastc_flg==True:
							tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
						else:
							tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
						#tresult.output_improved_solution(customers,vehicles,tcost,lastc_flg) #daic
						break
							
					cnt = cnt+1 ###
					v1_tmp,v2_tmp = v1.vehno,v2.vehno ###初回チェック用リストから削除するため
				else:
					continue
				break
		if(improved_cnt==0):
			break
		if(exists==False):
			break
	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return improved_cnt

# def cross_dtable_mps(customers,vehicles,lastc_flg,ls_d_starttime,vpairs,divnum,timeout,outputstime,outputs_count,lowertime,uppertime,inputfile,outputfile,decr_vnum,argvs): #20190927
# 	sLogBuf = "\n"
# 	#exists=True
# 	exists=False
# 	improved_cnt=0

# 	dtable_endtime=time.time() ##20190917
# 	##dtable_endtime=time.clock() ##20190903
# 	if timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > timeout):  ##20190903
# 		sLogBuf += "cross_mp timeout!,divnum" #20190903
# 		if rank==0:
# 			logging.log(logging.INFO,sLogBuf)
# 		return improved_cnt,vehicles #20190903

# 	''' ##20190917
# 	bmax_len,bmin_len=-1,100000
# 	for v in [v for v in vehicles if len(v.route)>=3]:
# 		if bmax_len<len(v.route):
# 			bmax_len=len(v.route)
# 		if bmin_len>len(v.route):
# 			bmin_len=len(v.route)
# 	'''
	
# 	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
# 	if len(vehicles)<=1:
# 		return improved_cnt,vehicles
# 	if len([(v1,v2,p1,p2,p3,p4) for v1 in vehicles \
# 		for v2 in vehicles \
# 		for p1 in range(1,len(v1.route)) \
# 		for p2 in range(1,len(v1.route)) \
# 		for p3 in range(1,len(v2.route)) \
# 		for p4 in range(1,len(v2.route))
# 		if v1!=v2 and \
# 		#p3<=(p4-1)-1 and p1<=(p2-1)-1 \
# 		p3<=(p4-1) and p1<=(p2-1) \
# 		and p1>=1 and p3>=1 \
# 		and len(v1.route)>=3 and len(v2.route)>=3 \
# 		and [v1.vehno, v2.vehno] in vpairs #20190927
# 		])==0:
# 		#exists=False
# 		return improved_cnt,vehicles
# 	v1_imp,v2_imp = -10000,-10000 ### 改善があった場合のみ探索する車両の初期値
# 	#while(exists):
# 	while True:
# 		exists=False
# 		#tresult.logprint("cross_dtable for loop start icnt:"+str(improved_cnt)+"\n")
# 		for v1,v2,p1,p2,p3,p4 in [(v1,v2,p1,p2,p3,p4) for v1 in vehicles \
# 			for v2 in vehicles \
# 			for p1 in range(1,len(v1.route)) \
# 			for p2 in range(1,len(v1.route)) \
# 			#for p2 in range(p1+1, min(len(v1.route),p1+5)) \
# 			for p3 in range(1,len(v2.route)) \
# 			for p4 in range(1,len(v2.route))
# 			#for p4 in range(p3+1,min(len(v2.route),p3+5))
# 			if v1!=v2 \
# 			#and p3<=(p4-1)-1 and p1<=(p2-1)-1 \
# 			and p3<=(p4-1) and p1<=(p2-1) \
# 			and p1>=1 and p3>=1 \
# 			and len(v1.route)>=3 and len(v2.route)>=3 \
# 			and [v1.vehno, v2.vehno] in vpairs #20190927
# 			]:

# 			dtable_endtime=time.time() ##20190917
# 			##dtable_endtime=time.clock() ##20180807
# 			if outputstime > 0.0 and ((dtable_endtime - ls_d_starttime) > outputstime*outputs_count):
# 				sLog = ["youtput_middle cross_dt_mps",divnum]
# 				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
# 				outputs_middle_mp(customers,vehicles,lastc_flg,outputstime,outputs_count,inputfile,outputfile,decr_vnum,argvs,divnum)
# 				outputs_count+=1
# 			while True:
# 				if outputstime > 0.0 and (dtable_endtime - ls_d_starttime) > outputstime*outputs_count:
# 					outputs_count+=1
# 				else:
# 					break
# 			if timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > timeout):  ##20180807
# 				sLog = ["cross_mp timeout!",divnum] #20180807
# 				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
# 				break #20180807
			
# 			if lastc_flg==True:
# 				exists,atpen,aload,aload2,v1_imp,v2_imp=cross_improved_lastc_dtable(customers,v1,v2,p1,p2,p3,p4,lowertime,uppertime,vehicles,argvs)
# 			else:
# 				exists,atpen,aload,aload2,v1_imp,v2_imp=cross_improved_todepot_dtable(customers,v1,v2,p1,p2,p3,p4,lowertime,uppertime,vehicles,argvs)
# 			if(exists):
# 				##20180904
# 				improved_cnt=improved_cnt+1
# 				cross_cust_dtable(v1,v2,p1,p2,p3,p4,argvs)

# 				#現在(=最新)のatpenとaloadとAPEを保存する
# 				argvs.atpen = atpen
# 				argvs.aload = aload
# 				v1.time_pen = atpen
# 				v1.load_pen = aload
# 				v2.time_pen = atpen
# 				v2.load_pen = aload
# 				if argvs.avetime_ape_flag==True:
# 					argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag)
# 				elif argvs.avetime_ae_flag==True:
# 					argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag)

# 				if argvs.avevisits_ape_flag==True:
# 					argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag)
# 				elif argvs.avevisits_ae_flag==True:
# 					argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag)

# 				#違反なしのrouteを保存する
# 				backup_route(vehicles, argvs)

# 				if lastc_flg==True:
# 					tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
# 				else:
# 					tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
# 				#tresult.output_improved_solution(customers,vehicles,tcost,lastc_flg) #daic
# 				if divnum > 10: #1つ目の並列処理なら処理継続 if first multiprocess then continue
# 					break
# 				else: #それ以外ならreturnして1つ目からやる else return and continu from first mlutiprocess
# 					return improved_cnt,vehicles
# 				break
				
# 		if(improved_cnt==0):
# 			break
# 		if(exists==False):
# 			break
# 	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)

# 	if sLogBuf != "\n":
# 		if rank==0:
# 			logging.log(logging.INFO,sLogBuf)

# 	return improved_cnt,vehicles

################################

def cross_improved_lastc_dtable(customers,veh1,veh2,pos1,pos2,pos3,pos4,lowertime,uppertime,vehicles,argvs,no_depo_parkt_flag,one_table_flag):
	ires=False
	custs1_best,custs2_best=[],[]
	pick_opt_flag1_best,pick_opt_flag2_best=False,False
	v1_impc,v2_impc = -10000,-10000 ### 改善車両の初期設定
	cdiff_best=0
	route1_best=None
	route2_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if( not(pos2<=len(veh1.route)-1) or not(pos4<=len(veh2.route)-1) or \
		not(pos3<=(pos4-1)-1) or not(pos1<=(pos2-1)-1) or \
		not(pos1-1>=0) or not(pos3-1>=0) ):
		###return False
		return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None #条件外の場合

	#集荷最適化の場合DEPOは改善対象外
	if argvs.break_flag:
		pick_opt_flag1, pick_opt_idx1 = get_pick_opt_status(veh1, argvs)
		pick_opt_flag2, pick_opt_idx2 = get_pick_opt_status(veh2, argvs)
		if (pick_opt_flag1==True and pos2>=pick_opt_idx1) or \
			(pick_opt_flag2==True and pos4>=pick_opt_idx2):
			return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None
	else:
		pick_opt_flag1=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(veh1.route)-2)):
						if veh1.route[i].customers[0].custno=="0" and veh1.route[i+1].customers[0].custno!="0":
							break
						if veh1.route[i].customers[0].custno!="0" and veh1.route[i].requestType=="PICKUP":
							pick_opt_flag1=True
							break
			else:
				if veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0":
					for i in reversed(range(1,len(veh1.route)-2)):
						if veh1.route[i].custno=="0" and veh1.route[i+1].custno!="0":
							break
						if veh1.route[i].custno!="0" and veh1.route[i].requestType=="PICKUP":
							pick_opt_flag1=True
							break
		pick_opt_flag2=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if veh2.route[-2].customers[0].custno=="0":
					for i in reversed(range(1,len(veh2.route)-2)):
						if veh2.route[i].customers[0].custno=="0" and veh2.route[i+1].customers[0].custno!="0":
							break
						if veh2.route[i].customers[0].custno!="0" and veh2.route[i].requestType=="PICKUP":
							pick_opt_flag2=True
							break
			else:
				if veh2.route[-2].custno=="0":
					for i in reversed(range(1,len(veh2.route)-2)):
						if veh2.route[i].custno=="0" and veh2.route[i+1].custno!="0":
							break
						if veh2.route[i].custno!="0" and veh2.route[i].requestType=="PICKUP":
							pick_opt_flag2=True
							break
		if (pick_opt_flag1==True and pos2==len(veh1.route)-1) or \
			(pick_opt_flag2==True and pos4==len(veh2.route)-1):
			return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None

	cust_list1=[c for c in veh1.route[pos1:pos2] if c.custno!="0" and c.custno[0]!="b"]
	depo_list1=[c for c in veh1.route[pos1:pos2] if c.custno=="0"]
	br_list1=[c for c in veh1.route[pos1:pos2] if c.custno[0]=="b"]
	cust_list2=[c for c in veh2.route[pos3:pos4] if c.custno!="0" and c.custno[0]!="b"]
	depo_list2=[c for c in veh2.route[pos3:pos4] if c.custno=="0"]
	br_list2=[c for c in veh2.route[pos3:pos4] if c.custno[0]=="b"]

	if cust_list1==[] or cust_list2==[]:
		return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None#交換対象がデポのみならFalseを返す

	#変更後にvehnoがreje_veに含まれていたらFalseを返す
	for i in range(pos3,pos4):
		if veh1.vehno in veh2.route[i].reje_ve:
			return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None
	for i in range(pos1,pos2):
		if veh2.vehno in veh1.route[i].reje_ve:
			return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None

	if argvs.init_changecust=="additive": #条件2が含まれるならスキップ
		for c in cust_list1:
			if free_or_additive(c,veh1,vehicles,argvs)=="additive":
				return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None
		for c in cust_list2:
			if free_or_additive(c,veh2,vehicles,argvs)=="additive":
				return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None

	#デポ挿入後の組み合わせ作成
	insert_list1=[]
	insert_set1=[]
	for idx in combinations_with_replacement([j for j in range(len(cust_list2)+1)],len(depo_list1)):
		cust_list_temp=cust_list2[:]
		for i,j in enumerate(idx):
			cust_list_temp.insert(i+j,depo_list1[i])
			
		cust_set=[cust_list_temp[0].custno]+[cust_list_temp[i].custno for i in range(1,len(cust_list_temp)) if cust_list_temp[i].custno!=cust_list_temp[i-1].custno]
		if not cust_set in insert_set1:
			insert_list1.append(cust_list_temp)
			insert_set1.append(cust_set)


	insert_list2=[]
	insert_set2=[]
	for idx in combinations_with_replacement([j for j in range(len(cust_list1)+1)],len(depo_list2)):
		cust_list_temp=cust_list1[:]
		for i,j in enumerate(idx):
			cust_list_temp.insert(i+j,depo_list2[i])

		cust_set=[cust_list_temp[0].custno]+[cust_list_temp[i].custno for i in range(1,len(cust_list_temp)) if cust_list_temp[i].custno!=cust_list_temp[i-1].custno]
		if not cust_set in insert_set2:
			insert_list2.append(cust_list_temp)
			insert_set2.append(cust_set)

	#集荷最適化(簡易アルゴリズム判定)
	pick_nondepo_flag=False
	if veh1.route[-1].custno!="0" or veh2.route[-1].custno!="0":
		for c in veh1.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break
		for c in veh2.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break

	bdist,adist,btpen,atpen,bpower,apower,bexp,aexp,aload,aload2,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
	n1,n2=len(veh1.route),len(veh2.route)

	depo_idx1=[j for j,c in enumerate(veh1.route[:-1]) if c.custno=="0"]+[len(veh1.route)-1]
	# for i in range(len(depo_idx1)-1):
	# 	if depo_idx1[i]<pos1 and pos1<=depo_idx1[i+1]:
	# 		start_idx1=depo_idx1[i]
	# 		break

	depo_idx2=[j for j,c in enumerate(veh2.route[:-1]) if c.custno=="0"]+[len(veh2.route)-1]
	# for i in range(len(depo_idx2)-1):
	# 	if depo_idx2[i]<pos3 and pos3<=depo_idx2[i+1]:
	# 		start_idx2=depo_idx2[i]
	# 		break

	start_idx1=0
	start_idx2=0

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and argvs.break_flag==False:
		start_idx1=pos1-1
	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and argvs.break_flag==False:
		start_idx2=pos3-1

	blast_idx1=n1
	for i in reversed(range(0,n1)):
		if veh1.route[i].custno!="0" and veh1.route[i].custno[0]!="b" and veh1.route[i].custno[0]!="e" and i!=len(veh1.route)-1:
			break
		else:
			blast_idx1=i

	blast_idx2=n2
	for i in reversed(range(0,n2)):
		if veh2.route[i].custno!="0" and veh2.route[i].custno[0]!="b" and veh2.route[i].custno[0]!="e" and i!=len(veh2.route)-1:
			break
		else:
			blast_idx2=i

	for i in range(start_idx1,blast_idx1):
		if i==0 or veh1.route[i-1].custno!=veh1.route[i].custno:
			btpen+=max(0.0,veh1.st[i]-veh1.route[i].due_fs)
	btpen+=max(0.0,veh1.lv[blast_idx1-1]-veh1.endhour)
	for i in range(start_idx2,blast_idx2):
		if i==0 or veh2.route[i-1].custno!=veh2.route[i].custno:
			btpen+=max(0.0,veh2.st[i]-veh2.route[i].due_fs)
	btpen+=max(0.0,veh2.lv[blast_idx2-1]-veh2.endhour)

	##kaizen mae no final arrive time
	bv1final_t=veh1.lv[blast_idx1-1]  ##20180605 delete "+veh1.route[n1-1].servt"
	bv2final_t=veh2.lv[blast_idx2-1]  ##20180605 delete "+veh2.route[n2-1].servt"

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True:
		if veh1.reserved_v_flag==True:
			bunass = len([c for c in veh1.route[1:blast_idx1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
		if veh2.reserved_v_flag==True:
			bunass += len([c for c in veh2.route[1:blast_idx2] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist1=calc_dist(veh1,start_idx1+1,blast_idx1,argvs)
		bdist2=calc_dist(veh2,start_idx2+1,blast_idx2,argvs)
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=calc_power(veh1,start_idx1+1,blast_idx1,argvs) \
			+ calc_power(veh2,start_idx2+1,blast_idx2,argvs)
		if argvs.management_xtable:
			bexp=calc_exp(veh1,start_idx1+1,blast_idx1,argvs) \
			+ calc_exp(veh2,start_idx2+1,blast_idx2,argvs)
	else:
		bdist1=get_dtable(veh1.vtype, veh1.lv[pos1-1], argvs.management_dtable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno]
		bdist2=get_dtable(veh2.vtype, veh2.lv[pos3-1], argvs.management_dtable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]
	
		if pos2<blast_idx1:
			bdist1+=get_dtable(veh1.vtype, veh1.lv[pos2-1], argvs.management_dtable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno]
		if pos4<blast_idx2:
			bdist2+=get_dtable(veh2.vtype, veh2.lv[pos4-1], argvs.management_dtable)[veh2.route[pos4-1].spotno][veh2.route[pos4].spotno]
		bdist=bdist1+bdist2
		
		if argvs.management_etable:
			bpower=get_etable(veh1.vtype, veh1.etype, veh1.lv[pos1-1], argvs.management_etable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno] \
			+get_etable(veh2.vtype, veh2.etype, veh2.lv[pos3-1], argvs.management_etable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]
			if pos2<blast_idx1:
				bpower+=get_etable(veh1.vtype, veh1.etype, veh1.lv[pos2-1], argvs.management_etable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno]
			if pos4<blast_idx2:
				bpower+=get_etable(veh2.vtype, veh2.etype, veh2.lv[pos4-1], argvs.management_etable)[veh2.route[pos4-1].spotno][veh2.route[pos4].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(veh1.vtype, veh1.lv[pos1-1], argvs.management_xtable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno] \
			+get_xtable(veh2.vtype, veh2.lv[pos3-1], argvs.management_xtable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno]
			if pos2<blast_idx1:
				bexp+=get_xtable(veh1.vtype, veh1.lv[pos2-1], argvs.management_xtable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno]
			if pos4<blast_idx2:
				bexp+=get_xtable(veh2.vtype, veh2.lv[pos4-1], argvs.management_xtable)[veh2.route[pos4-1].spotno][veh2.route[pos4].spotno]

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = veh1.lv[blast_idx1-1] + veh2.lv[blast_idx2-1]
	else:
		btime=0.0

	bload = veh1.load_pen+veh2.load_pen
	bload2 = veh1.load_pen2+veh2.load_pen2

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error

	takebreak_list1 = [[]]
	takebreak_list2 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in veh1.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト
		takebreak_list2 = [*map(list, product(*[[c for c in t.additionalcust] for t in veh2.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for custs1 in insert_list1:
		for custs2 in insert_list2:
			for i1 in range(len(takebreak_list1)):
				for i2 in range(len(takebreak_list2)):
					adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
					btpen_temp=btpen
					atpen_temp=0
					#変更後に訪問数上限を超えていたらcontinue
					v1_spotid=[c.spotid for c in veh1.route]
					v2_spotid=[c.spotid for c in veh2.route]
					v1_spotid[pos1:pos2],v2_spotid[pos3:pos4]=[c.spotid for c in custs1],[c.spotid for c in custs2]
					#visitnum1=len([len([*group]) for i,group in groupby(v1_spotid[1:-1])])-len([c for i,c in enumerate(v1_spotid[1:-1]) if c=="0" and (v1_spotid[i]!="0" or i==0)])
					# visitnum1=calc_visitnum(v1_spotid)
					# #visitnum2=len([len([*group]) for i,group in groupby(v2_spotid[1:-1])])-len([c for i,c in enumerate(v2_spotid[1:-1]) if c=="0" and (v2_spotid[i]!="0" or i==0)])
					# visitnum2=calc_visitnum(v2_spotid)
					# if (veh1.maxvisit>0 and visitnum1>veh1.maxvisit) or (veh2.maxvisit>0 and visitnum2>veh2.maxvisit):
					# 	continue

					skv1_route,skv2_route = veh1.route[:],veh2.route[:]             # ルート全体をコピー
					skv1_route[pos1:pos2],skv2_route[pos3:pos4]=[c for c in custs1],[c for c in custs2]  # ルート入替
					skv1_route[pos2:pos2],skv2_route[pos4:pos4]=[c for c in br_list1],[c for c in br_list2]  # ルート入替

					visitnum1=calc_visitnum(skv1_route)
					visitnum2=calc_visitnum(skv1_route)
					if (veh1.maxvisit>0 and visitnum1>veh1.maxvisit) or (veh2.maxvisit>0 and visitnum2>veh2.maxvisit):
						continue

					if argvs.opt_unassigned_flag==True:
						#未割り当て荷物最適化
						if argvs.multitrip_flag==True and argvs.init_changecust=="additive": #条件2が他の便に移るならスキップ
							for i in range(len(skv1_route)-1):
								if in_additive(skv1_route[i],veh1,skv1_route,vehicles,argvs)==False:
									continue

							for i in range(len(skv2_route)-1):
								if in_additive(skv2_route[i],veh2,skv2_route,vehicles,argvs)==False:
									continue
					else:
						#未割り当て荷物最適化無し
						if argvs.multitrip_flag==True and argvs.init_changecust=="additive": #条件2が他の便に移るならスキップ
							rotate_idx1={}
							idx=0
							for i in range(len(veh1.route)-1):
								if veh1.route[i].custno=="0" and veh1.route[i+1].custno!="0":
									idx+=1
								elif veh1.route[i].changecust=="additive" and veh1.route[i].custno!="0" and veh1.route[i].custno[0]!="b":
									rotate_idx1[veh1.route[i]]=idx

							rotate_idx2={}
							idx=0
							for i in range(len(veh2.route)-1):
								if veh2.route[i].custno=="0" and veh2.route[i+1].custno!="0":
									idx+=1
								elif veh2.route[i].changecust=="additive" and veh2.route[i].custno!="0" and veh2.route[i].custno[0]!="b":
									rotate_idx2[veh2.route[i]]=idx

							additive_flag=True
							idx=0
							for i in range(len(skv1_route)-1):
								if skv1_route[i].custno=="0" and skv1_route[i+1].custno!="0":
									idx+=1
								elif skv1_route[i].changecust=="additive" and skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b":
									if rotate_idx1[skv1_route[i]]!=idx:
										additive_flag=False
										break

							if additive_flag==False:
								continue

							idx=0
							for i in range(len(skv2_route)-1):
								if skv2_route[i].custno=="0" and skv2_route[i+1].custno!="0":
									idx+=1
								elif skv2_route[i].changecust=="additive" and skv2_route[i].custno!="0" and skv2_route[i].custno[0]!="b":
									if rotate_idx2[skv2_route[i]]!=idx:
										additive_flag=False
										break

							if additive_flag==False:
								continue

					depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
					servt_dict1={}
					for k in range(len(depo_idx1)-1):
						servt_dict1[skv1_route[depo_idx1[k]]]=0
						servt=0
						for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
							if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno:
								servt+=skv1_route[j].depotservt
						if skv1_route[depo_idx1[k]+1].custno[0]!="b":
							if skv1_route[depo_idx1[k]+1].custno!="0":
								servt_dict1[skv1_route[depo_idx1[k]]]+=servt+veh1.depotservt
							else:
								servt_dict1[skv1_route[depo_idx1[k]]]+=servt
					#集荷時間
					servt_dict1[skv1_route[len(skv1_route)-1]]=0
					for k in range(1,len(depo_idx1)):
						servt=0
						for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
							if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv1_route[j].depotservt
						servt_dict1[skv1_route[depo_idx1[k]]]+=servt

					depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
					servt_dict2={}
					for k in range(len(depo_idx2)-1):
						servt_dict2[skv2_route[depo_idx2[k]]]=0
						servt=0
						for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
							if skv2_route[j].requestType=="DELIVERY" and skv2_route[j].custno!=skv2_route[j-1].custno:
								servt+=skv2_route[j].depotservt
						if skv1_route[depo_idx2[k]+1].custno[0]!="b":
							if skv2_route[depo_idx2[k]+1].custno!="0":
								servt_dict2[skv2_route[depo_idx2[k]]]+=servt+veh2.depotservt
							else:
								servt_dict2[skv2_route[depo_idx2[k]]]+=servt
					#集荷時間
					servt_dict2[skv2_route[len(skv2_route)-1]]=0
					for k in range(1,len(depo_idx2)):
						servt=0
						for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
							if skv2_route[j].requestType=="PICKUP" and skv2_route[j].custno!=skv2_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv2_route[j].depotservt
						servt_dict2[skv2_route[depo_idx2[k]]]+=servt

					alast_idx1=len(skv1_route)
					for i in reversed(range(0,len(skv1_route))):
						if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
							break
						else:
							alast_idx1=i

					alast_idx2=len(skv2_route)
					for i in reversed(range(0,len(skv2_route))):
						if skv2_route[i].custno!="0" and skv2_route[i].custno[0]!="b" and skv2_route[i].custno[0]!="e" and i!=len(skv2_route)-1:
							break
						else:
							alast_idx2=i

					tdepo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]

					load=[0 for c in skv1_route]
					load2=[0 for c in skv1_route]
					for i in range(len(skv1_route)-1):
						if i in tdepo_idx1:
							for j in range(i+1,tdepo_idx1[tdepo_idx1.index(i)+1]):
								if skv1_route[j].requestType=="DELIVERY":
									if skv1_route[j].custno[0] != "b":
										load[i]+=skv1_route[j].dem
										load2[i]+=skv1_route[j].dem2
						else:
							if skv1_route[i].custno[0] != "b":
								if skv1_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv1_route[i].dem
									load2[i]=load2[i-1]-skv1_route[i].dem2
								else:
									load[i]=load[i-1]+skv1_route[i].dem
									load2[i]=load2[i-1]+skv1_route[i].dem2

					for i in reversed(range(len(load))):
						if i in tdepo_idx1 and i+1 in tdepo_idx1:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx1=[]
					for c in skv1_route[tdepo_idx1[0]+1:tdepo_idx1[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx1.append(0)
					
					for i in range(1,len(tdepo_idx1)-1):
						if load[tdepo_idx1[i]-1]==0 and load2[tdepo_idx1[i]-1]==0:
							for c in skv1_route[tdepo_idx1[i]+1:tdepo_idx1[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[tdepo_idx1[i]]==0 and load2[tdepo_idx1[i]]==0:
									no_park_idx1.append(veh1.route.index(skv1_route[tdepo_idx1[i]]))
					if load[tdepo_idx1[-1]-1]==0 and load2[tdepo_idx1[-1]-1]==0:
						no_park_idx1.append(veh1.route.index(skv1_route[tdepo_idx1[-1]]))

					pick_opt_flag1=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv1_route),1)):
							if argvs.bulkShipping_flag==True:
								if skv1_route[i].customers[0].custno!="0":
									if skv1_route[i].customers[0].custno[0]!="b":
										non_depo=True
										if skv1_route[i].customers[0].requestType=="PICKUP":
											pick_opt_flag1=True
											break
								elif non_depo==True:
									break
							else:
								if skv1_route[i].custno!="0":
									if skv1_route[i].custno[0]!="b":
										non_depo=True
										if skv1_route[i].requestType=="PICKUP":
											pick_opt_flag1=True
											break
								elif non_depo==True:
									break

					tdepo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]

					load=[0 for c in skv2_route]
					load2=[0 for c in skv2_route]
					for i in range(len(skv2_route)-1):
						if i in tdepo_idx2:
							for j in range(i+1,tdepo_idx2[tdepo_idx2.index(i)+1]):
								if skv2_route[j].requestType=="DELIVERY":
									if skv2_route[j].custno[0] != "b":
										load[i]+=skv2_route[j].dem
										load2[i]+=skv2_route[j].dem2
						else:
							if skv2_route[i].custno[0] != "b":
								if skv2_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv2_route[i].dem
									load2[i]=load2[i-1]-skv2_route[i].dem2
								else:
									load[i]=load[i-1]+skv2_route[i].dem
									load2[i]=load2[i-1]+skv2_route[i].dem2

					for i in reversed(range(len(load))):
						if i in tdepo_idx2 and i+1 in tdepo_idx2:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx2=[]
					for c in skv2_route[tdepo_idx2[0]+1:tdepo_idx2[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx2.append(0)
					
					for i in range(1,len(tdepo_idx2)-1):
						if load[tdepo_idx2[i]-1]==0 and load2[tdepo_idx2[i]-1]==0:
							for c in skv2_route[tdepo_idx2[i]+1:tdepo_idx2[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[tdepo_idx2[i]]==0 and load2[tdepo_idx2[i]]==0:
									no_park_idx2.append(veh2.route.index(skv2_route[tdepo_idx2[i]]))
					if load[tdepo_idx2[-1]-1]==0 and load2[tdepo_idx2[-1]-1]==0:
						no_park_idx2.append(veh2.route.index(skv2_route[tdepo_idx2[-1]]))

					pick_opt_flag2=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv2_route)-1)):
							if argvs.bulkShipping_flag==True:
								if skv2_route[i].customers[0].custno!="0":
									if skv2_route[i].customers[0].custno[0]!="b":
										non_depo=True
										if skv2_route[i].customers[0].requestType=="PICKUP":
											pick_opt_flag2=True
											break
								elif non_depo==True:
									break
							else:
								if skv2_route[i].custno!="0":
									if skv2_route[i].custno[0]!="b":
										non_depo=True
										if skv2_route[i].requestType=="PICKUP":
											pick_opt_flag2=True
											break
								elif non_depo==True:
									break

					if argvs.break_flag==False:
						#### ここから休憩機能なし用の処理 ####
						if veh1.route[start_idx1] in servt_dict1:
							if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
								lv_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
							else:
								lv_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
						else:
							if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
								lv_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
							else:
								lv_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
						if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
							lv_t+=veh1.route[start_idx1].parkt_open
						arr_t=veh1.arr[start_idx1]

						if start_idx1!=0 and veh1.route[start_idx1].custno==veh1.route[start_idx1-1].custno and veh1.route[start_idx1].custno!="0":
							lv_t=veh1.lv[start_idx1-1]
							arr_t=veh1.arr[start_idx1-1]

						impassable=True
						for i in range(start_idx1,pos1-1):
							from_c,to_c=veh1.route[i],veh1.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable3 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable3 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or \
							dtable3[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
							if to_c in servt_dict1:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh1.opskill
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable3[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable3[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable3[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if veh1.route[pos1-1].custno!=custs1[0].custno:
							dtable1 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable1 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable1 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

							#変更後に通行不可能ならFalseを返す
							ttable1 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
							
							if ttable1[veh1.route[pos1-1].spotno][custs1[0].spotno]==-1 or \
								dtable1[veh1.route[pos1-1].spotno][custs1[0].spotno]==-1 or \
								(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][custs1[0].spotno]==-1) or \
								(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][custs1[0].spotno]==-1):
								continue

							adist+=dtable1[veh1.route[pos1-1].spotno][custs1[0].spotno]
							if argvs.management_etable:
								apower+=etable1[veh1.route[pos1-1].spotno][custs1[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable1[veh1.route[pos1-1].spotno][custs1[0].spotno]

							arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][custs1[0].spotno]*veh1.drskill
							if custs1[0] in servt_dict1:
								if custs1[0].spotid!=veh1.route[pos1-1].spotid and (custs1[0].custno!="0" or not veh1.route.index(custs1[0]) in no_park_idx1):
									lv_t=max(arr_t+custs1[0].parkt_arrive,custs1[0].ready_fs)+servt_dict1[custs1[0]]*veh1.opskill
									st_t=max(arr_t+custs1[0].parkt_arrive,custs1[0].ready_fs)+custs1[0].parkt_open
								else:
									lv_t=max(arr_t,custs1[0].ready_fs)+servt_dict1[custs1[0]]*veh1.opskill
									st_t=max(arr_t,custs1[0].ready_fs)
							else:
								if custs1[0].spotid!=veh1.route[pos1-1].spotid and (custs1[0].custno!="0" or not veh1.route.index(custs1[0]) in no_park_idx1):
									lv_t=max(arr_t+custs1[0].parkt_arrive,custs1[0].ready_fs)+custs1[0].servt*veh1.opskill
									st_t=max(arr_t+custs1[0].parkt_arrive,custs1[0].ready_fs)+custs1[0].parkt_open
								else:
									lv_t=max(arr_t,custs1[0].ready_fs)+custs1[0].servt*veh1.opskill
									st_t=max(arr_t,custs1[0].ready_fs)
							if custs1[0].spotid!=veh1.route[pos1-1].spotid and (custs1[0].custno!="0" or not veh1.route.index(custs1[0]) in no_park_idx1):
								lv_t+=custs1[0].parkt_open

							if veh1.route[pos1-1].custno!="0" or custs1[0].custno!="0":
								atpen+=max(0.0,st_t-custs1[0].due_fs)

						for i in range(len(custs1)-1):
							if custs1[i]==skv1_route[alast_idx1-1]:
								break
							from_c,to_c=custs1[i],custs1[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								dtable3 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
								
								if argvs.management_etable:
									etable3 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable3 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

								if ttable3[from_c.spotno][to_c.spotno]==-1 or \
								dtable3[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break
								
								adist+=dtable3[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable3[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable3[from_c.spotno][to_c.spotno]

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
							if to_c in servt_dict1:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)


						if impassable==False:
							continue
						
						dtable9 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable9 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable9 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)
						ttable9 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

						if (argvs.bulkShipping_flag==False and pos2==len(veh1.route)-1 and custs1[-1].custno!="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==True) or \
						(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-1 and custs1[-1].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
							if ttable9[custs1[-1].spotno][customers[0].spotno]==-1 or \
							dtable9[custs1[-1].spotno][customers[0].spotno]==-1 or \
							(argvs.management_etable and etable9[custs1[-1].spotno][customers[0].spotno]==-1) or \
							(argvs.management_xtable and xtable9[custs1[-1].spotno][customers[0].spotno]==-1):
								continue

							arr=lv_t+ttable9[custs1[-1].spotno][customers[0].spotno]*veh1.drskill
							lv=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[veh1.route[-1]]+veh1.depotservt)*veh1.opskill
							lv+=customers[0].parkt_open
							st=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open

							ttable11 = get_ttable(veh1.vtype, lv, argvs.management_ttable)
							dtable11 = get_dtable(veh1.vtype, lv, argvs.management_dtable)
							if argvs.management_etable:
								etable11 = get_etable(veh1.vtype, veh1.etype, lv, argvs.management_etable)
							if argvs.management_xtable:
								xtable11 = get_xtable(veh1.vtype, lv, argvs.management_xtable)

							if ttable11[customers[0].spotno][veh1.route[-1].spotno]==-1 or \
								dtable11[customers[0].spotno][veh1.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable11[customers[0].spotno][veh1.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable11[customers[0].spotno][veh1.route[-1].spotno]==-1):
								continue
						elif (argvs.bulkShipping_flag==False and pos2==len(veh1.route)-2 and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False) or \
						(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-2 and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
							if ttable9[custs1[-1].spotno][veh1.route[-1].spotno]==-1 or \
							dtable9[custs1[-1].spotno][veh1.route[-1].spotno]==-1 or \
							(argvs.management_etable and etable9[custs1[-1].spotno][veh1.route[-1].spotno]==-1) or \
							(argvs.management_xtable and xtable9[custs1[-1].spotno][veh1.route[-1].spotno]==-1):
								continue
						else:
							if custs1[-1].custno!=veh1.route[pos2].custno or veh1.route[pos2].custno=="0":
								if ttable9[custs1[-1].spotno][veh1.route[pos2].spotno]==-1 or \
								dtable9[custs1[-1].spotno][veh1.route[pos2].spotno]==-1 or \
								(argvs.management_etable and etable9[custs1[-1].spotno][veh1.route[pos2].spotno]==-1) or \
								(argvs.management_xtable and xtable9[custs1[-1].spotno][veh1.route[pos2].spotno]==-1):
									continue

								if pos2<blast_idx1:
									adist+=dtable9[custs1[-1].spotno][veh1.route[pos2].spotno]
									if argvs.management_etable:
										apower+=etable9[custs1[-1].spotno][veh1.route[pos2].spotno]
									if argvs.management_xtable:
										aexp+=xtable9[custs1[-1].spotno][veh1.route[pos2].spotno]

								
								arr=lv_t+ttable9[custs1[-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
								if veh1.route[pos2] in servt_dict1:
									if veh1.route[pos2].spotid!=custs1[-1].spotid and not pos2 in no_park_idx1:
										lv=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										st=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
									else:
										lv=max(arr,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										st=max(arr,veh1.route[pos2].ready_fs)
								else:
									if veh1.route[pos2].spotid!=custs1[-1].spotid and not pos2 in no_park_idx1:
										lv=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										st=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
									else:
										lv=max(arr,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										st=max(arr,veh1.route[pos2].ready_fs)
								if veh1.route[pos2].spotid!=custs1[-1].spotid and not pos2 in no_park_idx1:
									lv+=veh1.route[pos2].parkt_open
							else:
								arr=arr_t
								lv=lv_t
								st=st_t

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,veh1,lv,pos2+1,servt_dict1,blast_idx1,no_park_idx1,pick_opt_flag1,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
						adist1=adist

						lv1=lv_t


						if (pos2)>=blast_idx1:
							atpen+=max(0.0,lv1-veh1.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
							##
						else:
							if custs1[-1].custno!=veh1.route[pos2].custno:
								atpen+=max(0.0,st-veh1.route[pos2].due_fs)

							lv_t=lv
							st_t=st

							for i in range(pos2,blast_idx1-1):
								if veh1.route[i].custno==veh1.route[i+1].custno and veh1.route[i+1].custno!="0":
									continue
								if veh1.route[i+1] in servt_dict1:
									proc_time=servt_dict1[veh1.route[i+1]]
								else:
									proc_time=veh1.route[i+1].servt
								if i+1 in no_park_idx1:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(veh1.route[i],veh1.route[i+1],lv_t,proc_time,veh1,no_park,argvs)
								if veh1.route[i].custno!="0" or veh1.route[i+1].custno!="0":
									atpen+=ttime_pen

							# arr_t=round(arr_t,4)
							#vehicle1の改善後arr計算
							lv1=lv_t

							atpen+=max(0.0,lv_t-veh1.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv_t-veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
							##


						if veh2.route[start_idx2] in servt_dict2:
							if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
								lv_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
							else:
								lv_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
						else:
							if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
								lv_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
							else:
								lv_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
						if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
							lv_t+=veh2.route[start_idx2].parkt_open
						arr_t=veh2.arr[start_idx2]

						if start_idx2!=0 and veh2.route[start_idx2].custno==veh2.route[start_idx2-1].custno and veh2.route[start_idx2].custno!="0":
							lv_t=veh2.lv[start_idx2-1]
							arr_t=veh2.arr[start_idx2-1]

						for i in range(start_idx2,pos3-1):
							from_c,to_c=veh2.route[i],veh2.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable3 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							ttable3 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable3 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or \
							dtable3[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh2.drskill
							if to_c in servt_dict2:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable3[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable3[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable3[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if veh2.route[pos3-1].custno!=custs2[0].custno:
							dtable2 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable2 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable2 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							#変更後に通行不可能ならFalseを返す
							ttable2 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							
							if ttable2[veh2.route[pos3-1].spotno][custs2[0].spotno]==-1 or \
								dtable2[veh2.route[pos3-1].spotno][custs2[0].spotno]==-1 or \
								(argvs.management_etable and etable2[veh2.route[pos3-1].spotno][custs2[0].spotno]==-1) or \
								(argvs.management_xtable and xtable2[veh2.route[pos3-1].spotno][custs2[0].spotno]==-1):
								continue

							adist+=dtable2[veh2.route[pos3-1].spotno][custs2[0].spotno]
							if argvs.management_etable:
								apower+=etable2[veh2.route[pos3-1].spotno][custs2[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable2[veh2.route[pos3-1].spotno][custs2[0].spotno]

							arr_t=lv_t+ttable2[veh2.route[pos3-1].spotno][custs2[0].spotno]*veh2.drskill
							if custs2[0] in servt_dict2:
								if custs2[0].spotid!=veh2.route[pos3-1].spotid and (custs2[0].custno!="0" or not veh2.route.index(custs2[0]) in no_park_idx2):
									lv_t=max(arr_t+custs2[0].parkt_arrive,custs2[0].ready_fs)+servt_dict2[custs2[0]]*veh2.opskill
									st_t=max(arr_t+custs2[0].parkt_arrive,custs2[0].ready_fs)+custs2[0].parkt_open
								else:
									lv_t=max(arr_t,custs2[0].ready_fs)+servt_dict2[custs2[0]]*veh2.opskill
									st_t=max(arr_t,custs2[0].ready_fs)
							else:
								if custs2[0].spotid!=veh2.route[pos3-1].spotid and (custs2[0].custno!="0" or not veh2.route.index(custs2[0]) in no_park_idx2):
									lv_t=max(arr_t+custs2[0].parkt_arrive,custs2[0].ready_fs)+custs2[0].servt*veh2.opskill
									st_t=max(arr_t+custs2[0].parkt_arrive,custs2[0].ready_fs)+custs2[0].parkt_open
								else:
									lv_t=max(arr_t,custs2[0].ready_fs)+custs2[0].servt*veh2.opskill
									st_t=max(arr_t,custs2[0].ready_fs)
							if custs2[0].spotid!=veh2.route[pos3-1].spotid and (custs2[0].custno!="0" or not veh2.route.index(custs2[0]) in no_park_idx2):
								lv_t+=custs2[0].parkt_open

							if veh2.route[pos3-1].custno!="0" or custs2[0].custno!="0":
								atpen+=max(0.0,st_t-custs2[0].due_fs)

						for i in range(len(custs2)-1):
							if custs2[i]==skv2_route[alast_idx2-1]:
								break
							from_c,to_c=custs2[i],custs2[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							ttable3 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								dtable3 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
								
								if argvs.management_etable:
									etable3 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable3 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

								if ttable3[from_c.spotno][to_c.spotno]==-1 or \
								dtable3[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								adist+=dtable3[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable3[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable3[from_c.spotno][to_c.spotno]

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh2.drskill
							if to_c in servt_dict2:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
								lv_t+=to_c.parkt_open	

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)


						if impassable==False:
							continue
						
						dtable10 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable10 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable10 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)
						ttable10 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)

						if (argvs.bulkShipping_flag==False and pos4==len(veh2.route)-1 and custs2[-1].custno!="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==True) or \
						(argvs.bulkShipping_flag==True and pos4==len(veh2.route)-1 and custs2[-1].customers[0].custno!="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
							if ttable10[custs2[-1].spotno][customers[0].spotno]==-1 or \
							dtable10[custs2[-1].spotno][customers[0].spotno]==-1 or \
							(argvs.management_etable and etable10[custs2[-1].spotno][customers[0].spotno]==-1) or \
							(argvs.management_xtable and xtable10[custs2[-1].spotno][customers[0].spotno]==-1):
								continue

							arr_t=lv_t+ttable10[custs2[-1].spotno][customers[0].spotno]*veh2.drskill
							lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[veh2.route[-1]]+veh2.depotservt)*veh2.opskill
							lv_t+=customers[0].parkt_open
							st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open

							ttable12 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							dtable12 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable12 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable12 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							if ttable12[customers[0].spotno][veh2.route[-1].spotno]==-1 or \
								dtable12[customers[0].spotno][veh2.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable12[customers[0].spotno][veh2.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable12[customers[0].spotno][veh2.route[-1].spotno]==-1):
								continue
						elif (argvs.bulkShipping_flag==False and pos4==len(veh2.route)-2 and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False) or \
							(argvs.bulkShipping_flag==True and pos4==len(veh2.route)-2 and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
							if ttable10[custs2[-1].spotno][veh2.route[-1].spotno]==-1 or \
							dtable10[custs2[-1].spotno][veh2.route[-1].spotno]==-1 or \
							(argvs.management_etable and etable10[custs2[-1].spotno][veh2.route[-1].spotno]==-1) or \
							(argvs.management_xtable and xtable10[custs2[-1].spotno][veh2.route[-1].spotno]==-1):
								continue
						else:
							if custs2[-1].custno!=veh2.route[pos4].custno or veh2.route[pos4].custno=="0":
								if ttable10[custs2[-1].spotno][veh2.route[pos4].spotno]==-1 or \
								dtable10[custs2[-1].spotno][veh2.route[pos4].spotno]==-1 or \
								(argvs.management_etable and etable10[custs2[-1].spotno][veh2.route[pos4].spotno]==-1) or \
								(argvs.management_xtable and xtable10[custs2[-1].spotno][veh2.route[pos4].spotno]==-1):
									continue

								if pos4<blast_idx2:
									adist+=dtable10[custs2[-1].spotno][veh2.route[pos4].spotno]
									if argvs.management_etable:
										apower+=etable10[custs2[-1].spotno][veh2.route[pos4].spotno]
									if argvs.management_xtable:
										aexp+=xtable10[custs2[-1].spotno][veh2.route[pos4].spotno]

								arr=lv_t+ttable10[custs2[-1].spotno][veh2.route[pos4].spotno]*veh2.drskill
								if veh2.route[pos4] in servt_dict2:
									if veh2.route[pos4].spotid!=custs2[-1].spotid and not pos4 in no_park_idx2:
										lv=max(arr+veh2.route[pos4].parkt_arrive,veh2.route[pos4].ready_fs)+servt_dict2[veh2.route[pos4]]*veh2.opskill
										st=max(arr+veh2.route[pos4].parkt_arrive,veh2.route[pos4].ready_fs)+veh2.route[pos4].parkt_open
									else:
										lv=max(arr,veh2.route[pos4].ready_fs)+servt_dict2[veh2.route[pos4]]*veh2.opskill
										st=max(arr,veh2.route[pos4].ready_fs)
								else:
									if veh2.route[pos4].spotid!=custs2[-1].spotid and not pos4 in no_park_idx2:
										lv=max(arr+veh2.route[pos4].parkt_arrive,veh2.route[pos4].ready_fs)+veh2.route[pos4].servt*veh2.opskill
										st=max(arr+veh2.route[pos4].parkt_arrive,veh2.route[pos4].ready_fs)+veh2.route[pos4].parkt_open
									else:
										lv=max(arr,veh2.route[pos4].ready_fs)+veh2.route[pos4].servt*veh2.opskill
										st=max(arr,veh2.route[pos4].ready_fs)
								if veh2.route[pos4].spotid!=custs2[-1].spotid and not pos4 in no_park_idx2:
									lv+=veh2.route[pos4].parkt_open
							else:
								arr=arr_t
								lv=lv_t
								st=st_t

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,veh2,lv,pos4+1,servt_dict2,blast_idx2,no_park_idx2,pick_opt_flag2,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
						adist2=adist-adist1

						lv2=lv_t

						if (pos4)>=blast_idx2:
							atpen+=max(0.0,lv2-veh2.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
							##
						else:
							if custs2[-1].custno!=veh2.route[pos4].custno:
								atpen+=max(0.0,st-veh2.route[pos4].due_fs)

							lv_t=lv

							for i in range(pos4,blast_idx2-1):
								if veh2.route[i].custno==veh2.route[i+1].custno and veh2.route[i+1].custno!="0":
									continue

								if veh2.route[i+1] in servt_dict2:
									proc_time=servt_dict2[veh2.route[i+1]]
								else:
									proc_time=veh2.route[i+1].servt
								if i+1 in no_park_idx2:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(veh2.route[i],veh2.route[i+1],lv_t,proc_time,veh2,no_park,argvs)
								if veh2.route[i].custno!="0" or veh2.route[i+1].custno!="0":
									atpen+=ttime_pen

							# arr_t=round(arr_t,4)
							#vehicle1の改善後arr計算
							lv2=lv_t

							atpen+=max(0.0,lv_t-veh2.endhour)
							##
						#### ここまで休憩機能なし用の処理 ####
					else:
						#### ここから休憩機能あり用の処理 ####
						br_veh1 = dcopy(veh1)
						br_veh1.route = skv1_route
						br_veh2 = dcopy(veh2)
						br_veh2.route = skv2_route
						if argvs.pickup_flag==True:
							#集荷最適化
							if pick_opt_flag1:
								if not get_pick_opt_status(br_veh1, argvs)[0]:
									br_veh1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(br_veh1, pick_opt_flag1, argvs)
							if pick_opt_flag2:
								if not get_pick_opt_status(br_veh2, argvs)[0]:
									br_veh2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(br_veh2, pick_opt_flag2, argvs)
						br_veh1, br_veh2 = insert_breakspot(takebreak_list1[i1], takebreak_list2[i2], customers, br_veh1, vehicles, argvs, 0, br_veh2)
						if br_veh1==None or br_veh2==None:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
							continue

						skv1_route = br_veh1.route
						alast_idx1=len(skv1_route)
						for i in reversed(range(0,len(skv1_route))):
							if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
								break
							else:
								alast_idx1=i
						lv1 = br_veh1.lv[alast_idx1-1]
						depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						br_veh1.update_totalcost_dtable(argvs)
						adist1 = br_veh1.totalcost_wolast
						for i in range(start_idx1+1,alast_idx1):
							if (argvs.bulkShipping_flag==False and (br_veh1.route[i-1].custno!=br_veh1.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (br_veh1.route[i-1].customers[0].custno!=br_veh1.route[i].customers[0].custno)):
								atpen+=max(0.0,br_veh1.st[i]-br_veh1.route[i].due_fs)
						atpen+=max(0.0,lv1-br_veh1.endhour)

						skv2_route = br_veh2.route
						alast_idx2=len(skv2_route)
						for i in reversed(range(0,len(skv2_route))):
							if skv2_route[i].custno!="0" and skv2_route[i].custno[0]!="b" and skv2_route[i].custno[0]!="e" and i!=len(skv2_route)-1:
								break
							else:
								alast_idx2=i
						lv2 = br_veh2.lv[alast_idx2-1]
						depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
						br_veh2.update_totalcost_dtable(argvs)
						adist2 = br_veh2.totalcost_wolast
						for i in range(start_idx2+1,alast_idx2):
							if (argvs.bulkShipping_flag==False and (br_veh2.route[i-1].custno!=br_veh2.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (br_veh2.route[i-1].customers[0].custno!=br_veh2.route[i].customers[0].custno)):
								atpen+=max(0.0,br_veh2.st[i]-br_veh2.route[i].due_fs)
						atpen+=max(0.0,lv2-br_veh2.endhour)

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
							if is_reserved(br_veh1,argvs)==False:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-br_veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-br_veh1.arr[0],0,btpen_temp)
							if is_reserved(br_veh2,argvs)==False:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-br_veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-br_veh2.arr[0],atpen_temp,btpen_temp)
						#### 
						if argvs.management_etable:
							apower1=calc_power(br_veh1,start_idx1+1,alast_idx1,argvs)
							apower2=calc_power(br_veh2,start_idx2+1,alast_idx2,argvs)
							apower = apower1 + apower2
						if argvs.management_xtable:
							aexp1=calc_exp(br_veh1,start_idx1+1,alast_idx1,argvs)
							aexp2=calc_exp(br_veh2,start_idx2+1,alast_idx2,argvs)
							aexp = aexp1 + aexp2

						adist = adist1 + adist2
						#### ここまで休憩機能あり用の処理 ####

					#集荷違反量を計算
					if argvs.pickup_flag==True:
						max_load_pen1_1,max_load_pen1_2=calc_vehicle_loadpickup_penalty(skv1_route,veh1)
						max_load_pen2_1,max_load_pen2_2=calc_vehicle_loadpickup_penalty(skv2_route,veh2)
					else:
						max_load_pen1_1,max_load_pen1_2,max_load_pen2_1,max_load_pen2_2=0,0,0,0

					load_pen,load_pen2=0,0
					for j in range(len(depo_idx1)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
							if skv1_route[k].requestType=="DELIVERY":
								if skv1_route[k].custno[0] != "b":
									load_onbrd+=skv1_route[k].dem
									load_onbrd2+=skv1_route[k].dem2

						load_pen+=max(load_onbrd-veh1.cap,0)
						load_pen2+=max(load_onbrd2-veh1.cap2,0)
					for j in range(len(depo_idx2)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
							if skv2_route[k].custno[0] != "b":
								if skv2_route[k].requestType=="DELIVERY":
									load_onbrd+=skv2_route[k].dem
									load_onbrd2+=skv2_route[k].dem2

						load_pen+=max(load_onbrd-veh2.cap,0)
						load_pen2+=max(load_onbrd2-veh2.cap2,0)

					aload =load_pen+max_load_pen1_1+max_load_pen2_1
					aload2 = load_pen2+max_load_pen1_2+max_load_pen2_2
					
					#改善前後の到着時間算出(拠点を出発し最後の配送先での配送を終えて拠点に戻るまで(-l なしの場合))
					if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
						atime=0.0
						time_error = 0.0
					else:
						# #vehicle1の改善後arr計算
						# arr1, _ = calc_vehicle_arr_route(skv1_route, vehicle1, vehicle1.drskill, vehicle1.opskill, vehicle1.chg_batt_dict)
						# #vehicle2の改善後arr計算
						# arr2, _ = calc_vehicle_arr_route(skv2_route, vehicle2, vehicle2.drskill, vehicle2.opskill, vehicle2.chg_batt_dict)
						
						if argvs.opt_t_weight!=0:
							#改善後時間算出
							atime = lv1 + lv2
						else:
							atime=0.0

						mvehicles={veh1:0.0,veh2:0.0}
						mvehicles[veh1] = lv1-veh1.arr[0]
						mvehicles[veh2] = lv2-veh2.arr[0]

						if argvs.avetime_ape_flag==True:
							time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
						else:
							time_error=0.0
					
					if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
						visits_error = 0.0
					else:
						mvehicles={veh1:0.0,veh2:0.0}
						if argvs.bulkShipping_flag:
							mvehicles[veh1] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
							mvehicles[veh2] = len([c for r in skv2_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
						else:
							mvehicles[veh1] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])
							mvehicles[veh2] = len([i for i in range(1,len(skv2_route)-1) if skv2_route[i].custno!="0" and not skv2_route[i].custno.startswith("e") and not skv2_route[i].custno.startswith("b") and skv2_route[i].custno!=skv2_route[i-1].custno])

						if argvs.avevisits_ape_flag==True:
							visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
						else:
							visits_error=0.0

					if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
						dist_error = 0.0
					else:
						mvehicles={veh1:0.0,veh2:0.0}
						mvehicles[veh1] = veh1.totalcost_wolast+adist1-bdist1
						mvehicles[veh2] = veh2.totalcost_wolast+adist2-bdist2

						if argvs.avedist_ape_flag==True:
							dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
						else:
							dist_error=0.0
					
					#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
					if argvs.opt_unassigned_flag==True:
						if veh1.reserved_v_flag==True:
							aunass = len([c for c in skv1_route[1:alast_idx1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
						if veh2.reserved_v_flag==True:
							aunass += len([c for c in skv2_route[1:alast_idx2] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

					ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907
					
					if ires_temp and cdiff<cdiff_best:
						ires=True
						cdiff_best=cdiff
						custs1_best,custs2_best=custs1[:],custs2[:]
						pick_opt_flag1_best,pick_opt_flag2_best=pick_opt_flag1,pick_opt_flag2
						v1_impc,v2_impc = veh1.vehno,veh2.vehno #改善が合ったらその車両番号を返す
						if argvs.break_flag:
							route1_best = skv1_route
							route2_best = skv2_route
							ttable_best = argvs.management_ttable
							dtable_best = argvs.management_dtable
							etable_best = argvs.management_etable
							xtable_best = argvs.management_xtable
							vehnos=[v.vehno for v in vehicles]
							vehicles[vehnos.index(veh1.vehno)].route = skv1_route
							vehicles[vehnos.index(veh2.vehno)].route = skv2_route
							t_route_best = r_backup(vehicles)

					if argvs.break_flag:
						argvs.management_ttable = t_dcopy(t_ttable)
						argvs.management_dtable = t_dcopy(t_dtable)
						argvs.management_etable = t_dcopy(t_etable)
						argvs.management_xtable = t_dcopy(t_xtable)
						vehicles = r_restore(vehicles, t_route, argvs)

	return ires,btpen,bload,bload2,v1_impc,v2_impc,custs1_best,custs2_best,pick_opt_flag1_best,pick_opt_flag2_best,route1_best,route2_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best
	###return ires

################################

def cross_improved_todepot_dtable(customers,veh1,veh2,pos1,pos2,pos3,pos4,lowertime,uppertime,vehicles,argvs,no_depo_parkt_flag,one_table_flag):
	ires=False
	custs1_best,custs2_best=[],[]
	pick_opt_flag1_best,pick_opt_flag2_best=False,False
	v1_impc,v2_impc = -10000,-10000 ### 改善車両の初期設定
	cdiff_best=0
	route1_best = None
	route2_best = None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None
	
	if( not(pos2<=len(veh1.route)-1) or not(pos4<=len(veh2.route)-1) or \
		not(pos3<=(pos4-1)-1) or not(pos1<=(pos2-1)-1) or \
		not(pos1-1>=0) or not(pos3-1>=0) ):
		###return False
		return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None #条件外の場合

	for i in range(pos1,pos2):
		if veh1.route[i].custno[0] =='b':
			return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None #条件外の場合
	for i in range(pos3,pos4):
		if veh2.route[i].custno[0] =='b':
			return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None #条件外の場合

	#集荷最適化の場合DEPOは改善対象外
	if argvs.break_flag:
		#休憩機能あり
		pick_opt_flag1, pick_opt_idx1 = get_pick_opt_status(veh1, argvs)
		pick_opt_flag2, pick_opt_idx2 = get_pick_opt_status(veh2, argvs)
	else:
		#休憩機能なし
		pick_opt_flag1=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(veh1.route)-2)):
						if veh1.route[i].customers[0].custno=="0" and veh1.route[i+1].customers[0].custno!="0":
							break
						if veh1.route[i].customers[0].custno!="0" and veh1.route[i].requestType=="PICKUP":
							pick_opt_flag1=True
							break
			else:
				if veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0":
					for i in reversed(range(1,len(veh1.route)-2)):
						if veh1.route[i].custno=="0" and veh1.route[i+1].custno!="0":
							break
						if veh1.route[i].custno!="0" and veh1.route[i].requestType=="PICKUP":
							pick_opt_flag1=True
							break
		pick_opt_flag2=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if veh2.route[-2].customers[0].custno=="0":
					for i in reversed(range(1,len(veh2.route)-2)):
						if veh2.route[i].customers[0].custno=="0" and veh2.route[i+1].customers[0].custno!="0":
							break
						if veh2.route[i].customers[0].custno!="0" and veh2.route[i].requestType=="PICKUP":
							pick_opt_flag2=True
							break
			else:
				if veh2.route[-2].custno=="0":
					for i in reversed(range(1,len(veh2.route)-2)):
						if veh2.route[i].custno=="0" and veh2.route[i+1].custno!="0":
							break
						if veh2.route[i].custno!="0" and veh2.route[i].requestType=="PICKUP":
							pick_opt_flag2=True
							break
	
	if (pick_opt_flag1==True and pos2>=pick_opt_idx1) or \
		(pick_opt_flag2==True and pos4>=pick_opt_idx2):
		return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None

	cust_list1=[c for c in veh1.route[pos1:pos2] if c.custno!="0"]
	depo_list1=[c for c in veh1.route[pos1:pos2] if c.custno=="0"]
	br_list1=[c for c in veh1.route[pos1:pos2] if c.custno[0]=="b"]
	cust_list2=[c for c in veh2.route[pos3:pos4] if c.custno!="0"]
	depo_list2=[c for c in veh2.route[pos3:pos4] if c.custno=="0"]
	br_list2=[c for c in veh2.route[pos3:pos4] if c.custno[0]=="b"]

	if cust_list1==[] or cust_list2==[]:
		return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None #交換対象がデポのみならFalseを返す

	#変更後にvehnoがreje_veに含まれていたらFalseを返す
	for i in range(pos3,pos4):
		if veh1.vehno in veh2.route[i].reje_ve:
			return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None
	for i in range(pos1,pos2):
		if veh2.vehno in veh1.route[i].reje_ve:
			return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None

	if argvs.init_changecust=="additive": #条件2が含まれるならスキップ
		for c in cust_list1:
			if free_or_additive(c,veh1,vehicles,argvs)=="additive":
				return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None
		for c in cust_list2:
			if free_or_additive(c,veh2,vehicles,argvs)=="additive":
				return False,0.0,0.0,0.0,v1_impc,v2_impc,custs1_best,custs2_best,False,False,None,None,None,None,None,None,None


	#デポ挿入後の組み合わせ作成
	insert_list1=[]
	insert_set1=[]
	for idx in combinations_with_replacement([j for j in range(len(cust_list2)+1)],len(depo_list1)):
		cust_list_temp=cust_list2[:]
		for i,j in enumerate(idx):
			cust_list_temp.insert(i+j,depo_list1[i])

		cust_set=[cust_list_temp[0].custno]+[cust_list_temp[i].custno for i in range(1,len(cust_list_temp)) if cust_list_temp[i].custno!=cust_list_temp[i-1].custno]
		if not cust_set in insert_set1:
			insert_list1.append(cust_list_temp)
			insert_set1.append(cust_set)

	insert_list2=[]
	insert_set2=[]
	for idx in combinations_with_replacement([j for j in range(len(cust_list1)+1)],len(depo_list2)):
		cust_list_temp=cust_list1[:]
		for i,j in enumerate(idx):
			cust_list_temp.insert(i+j,depo_list2[i])

		cust_set=[cust_list_temp[0].custno]+[cust_list_temp[i].custno for i in range(1,len(cust_list_temp)) if cust_list_temp[i].custno!=cust_list_temp[i-1].custno]
		if not cust_set in insert_set2:
			insert_list2.append(cust_list_temp)
			insert_set2.append(cust_set)

	#集荷最適化(簡易アルゴリズム判定)
	pick_nondepo_flag=False
	if veh1.route[-1].custno!="0" or veh2.route[-1].custno!="0":
		for c in veh1.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break
		for c in veh2.route[1:-1]:
			if c.custno != "0" and c.requestType=="PICKUP":
				pick_nondepo_flag=True
				break

	bdist,adist,btpen,atpen,bpower,apower,bexp,aexp,aload,aload2,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
	n1,n2=len(veh1.route),len(veh2.route)

	depo_idx1=[j for j,c in enumerate(veh1.route[:-1]) if c.custno=="0"]+[len(veh1.route)-1]
	for i in range(len(depo_idx1)-1):
		if depo_idx1[i]<pos1 and pos1<=depo_idx1[i+1]:
			start_idx1=depo_idx1[i]
			break

	depo_idx2=[j for j,c in enumerate(veh2.route[:-1]) if c.custno=="0"]+[len(veh2.route)-1]
	for i in range(len(depo_idx2)-1):
		if depo_idx2[i]<pos3 and pos3<=depo_idx2[i+1]:
			start_idx2=depo_idx2[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and argvs.break_flag==False:
		start_idx1=pos1-1
	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and argvs.break_flag==False:
		start_idx2=pos3-1
	

	for i in range(start_idx1,n1):
		if i==0 or (argvs.bulkShipping_flag==False and (veh1.route[i-1].custno!=veh1.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (veh1.route[i-1].customers[0].custno!=veh1.route[i].customers[0].custno)):
			btpen+=max(0.0,veh1.st[i]-veh1.route[i].due_fs)
	btpen+=max(0.0,veh1.lv[n1-1]-veh1.endhour)
	for i in range(start_idx2,n2):
		if i==0 or (argvs.bulkShipping_flag==False and (veh2.route[i-1].custno!=veh2.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (veh2.route[i-1].customers[0].custno!=veh2.route[i].customers[0].custno)):
			btpen+=max(0.0,veh2.st[i]-veh2.route[i].due_fs)
	btpen+=max(0.0,veh2.lv[n2-1]-veh2.endhour)

	##kaizen mae no final arrive time
	bv1final_t=veh1.lv[n1-1]  ##20180605 delete "+veh1.route[n1-1].servt"
	bv2final_t=veh2.lv[n2-1]  ##20180605 delete "+veh2.route[n2-1].servt"

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True:
		if veh1.reserved_v_flag==True:
			bunass = len([c for c in veh1.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
		if veh2.reserved_v_flag==True:
			bunass += len([c for c in veh2.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist1=calc_dist(veh1,start_idx1+1,len(veh1.route),argvs)
		bdist2=calc_dist(veh2,start_idx2+1,len(veh2.route),argvs)
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=calc_power(veh1,start_idx1+1,len(veh1.route),argvs) \
			+ calc_power(veh2,start_idx2+1,len(veh2.route),argvs)
		if argvs.management_xtable:
			bexp=calc_exp(veh1,start_idx1+1,len(veh1.route),argvs) \
			+ calc_exp(veh2,start_idx2+1,len(veh2.route),argvs)
	else:
		bdist1=get_dtable(veh1.vtype, veh1.lv[pos1-1], argvs.management_dtable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno] \
			+get_dtable(veh1.vtype, veh1.lv[pos2-1], argvs.management_dtable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno]
		bdist2=get_dtable(veh2.vtype, veh2.lv[pos3-1], argvs.management_dtable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno] \
			+get_dtable(veh2.vtype, veh2.lv[pos4-1], argvs.management_dtable)[veh2.route[pos4-1].spotno][veh2.route[pos4].spotno]
		bdist=bdist1+bdist2
		if argvs.management_etable:
			bpower=get_etable(veh1.vtype, veh1.etype, veh1.lv[pos1-1], argvs.management_etable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno] \
			+get_etable(veh1.vtype, veh1.etype, veh1.lv[pos2-1], argvs.management_etable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno] \
			+get_etable(veh2.vtype, veh2.etype, veh2.lv[pos3-1], argvs.management_etable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno] \
			+get_etable(veh2.vtype, veh2.etype, veh2.lv[pos4-1], argvs.management_etable)[veh2.route[pos4-1].spotno][veh2.route[pos4].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(veh1.vtype, veh1.lv[pos1-1], argvs.management_xtable)[veh1.route[pos1-1].spotno][veh1.route[pos1].spotno] \
			+get_xtable(veh1.vtype, veh1.lv[pos2-1], argvs.management_xtable)[veh1.route[pos2-1].spotno][veh1.route[pos2].spotno] \
			+get_xtable(veh2.vtype, veh2.lv[pos3-1], argvs.management_xtable)[veh2.route[pos3-1].spotno][veh2.route[pos3].spotno] \
			+get_xtable(veh2.vtype, veh2.lv[pos4-1], argvs.management_xtable)[veh2.route[pos4-1].spotno][veh2.route[pos4].spotno]

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = veh1.lv[-1] + veh2.lv[-1]
	else:
		btime=0.0

	bload = veh1.load_pen+veh2.load_pen
	bload2 = veh1.load_pen2+veh2.load_pen2

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error


	takebreak_list1 = [[]]
	takebreak_list2 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in veh1.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト
		takebreak_list2 = [*map(list, product(*[[c for c in t.additionalcust] for t in veh2.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for custs1 in insert_list1:
		for custs2 in insert_list2:
			for i1 in range(len(takebreak_list1)):
				for i2 in range(len(takebreak_list2)):
					adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
					btpen_temp=btpen
					atpen_temp=0
					#変更後に訪問数上限を超えていたらcontinue
					v1_spotid=[c.spotid for c in veh1.route]
					v2_spotid=[c.spotid for c in veh2.route]
					v1_spotid[pos1:pos2],v2_spotid[pos3:pos4]=[c.spotid for c in custs1],[c.spotid for c in custs2]
					#visitnum1=len([len([*group]) for i,group in groupby(v1_spotid[1:-1])])-len([c for i,c in enumerate(v1_spotid[1:-1]) if c=="0" and (v1_spotid[i]!="0" or i==0)])
					# visitnum1=calc_visitnum(v1_spotid)
					# #visitnum2=len([len([*group]) for i,group in groupby(v2_spotid[1:-1])])-len([c for i,c in enumerate(v2_spotid[1:-1]) if c=="0" and (v2_spotid[i]!="0" or i==0)])
					# visitnum2=calc_visitnum(v2_spotid)
					# if (veh1.maxvisit>0 and visitnum1>veh1.maxvisit) or (veh2.maxvisit>0 and visitnum2>veh2.maxvisit):
					# 	continue

					skv1_route,skv2_route = veh1.route[:],veh2.route[:]             # ルート全体をコピー
					skv1_route[pos1:pos2],skv2_route[pos3:pos4]=[c for c in custs1],[c for c in custs2]  # ルート入替
					skv1_route[pos2:pos2],skv2_route[pos4:pos4]=[c for c in br_list1],[c for c in br_list2]  # ルート入替

					visitnum1=calc_visitnum(skv1_route)
					visitnum2=calc_visitnum(skv2_route)
					if (veh1.maxvisit>0 and visitnum1>veh1.maxvisit) or (veh2.maxvisit>0 and visitnum2>veh2.maxvisit):
						continue

					if argvs.multitrip_flag==True and argvs.init_changecust=="additive": #条件2が他の便に移るならスキップ
						for i in range(len(skv1_route)-1):
							if in_additive(skv1_route[i],veh1,skv1_route,vehicles,argvs)==False:
								continue

						idx=0
						for i in range(len(skv2_route)-1):
							if in_additive(skv2_route[i],veh2,skv2_route,vehicles,argvs)==False:
								continue

					depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
					servt_dict1={}
					for k in range(len(depo_idx1)-1):
						servt_dict1[skv1_route[depo_idx1[k]]]=0
						servt=0
						for j in range(depo_idx1[k]+1,depo_idx1[k+1]):
							if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno:
								servt+=skv1_route[j].depotservt
						if skv1_route[depo_idx1[k]+1].custno[0]!="b":
							if skv1_route[depo_idx1[k]+1].custno!="0":
								servt_dict1[skv1_route[depo_idx1[k]]]+=servt+veh1.depotservt
							else:
								servt_dict1[skv1_route[depo_idx1[k]]]+=servt
					#集荷時間
					servt_dict1[skv1_route[len(skv1_route)-1]]=0
					for k in range(1,len(depo_idx1)):
						servt=0
						for j in range(depo_idx1[k-1]+1,depo_idx1[k]):
							if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv1_route[j].depotservt
						servt_dict1[skv1_route[depo_idx1[k]]]+=servt

					depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
					servt_dict2={}
					for k in range(len(depo_idx2)-1):
						servt_dict2[skv2_route[depo_idx2[k]]]=0
						servt=0
						for j in range(depo_idx2[k]+1,depo_idx2[k+1]):
							if skv2_route[j].requestType=="DELIVERY" and skv2_route[j].custno!=skv2_route[j-1].custno:
								servt+=skv2_route[j].depotservt
						if skv1_route[depo_idx2[k]+1].custno[0]!="b":
							if skv2_route[depo_idx2[k]+1].custno!="0":
								servt_dict2[skv2_route[depo_idx2[k]]]+=servt+veh2.depotservt
							else:
								servt_dict2[skv2_route[depo_idx2[k]]]+=servt
					#集荷時間
					servt_dict2[skv2_route[len(skv2_route)-1]]=0
					for k in range(1,len(depo_idx2)):
						servt=0
						for j in range(depo_idx2[k-1]+1,depo_idx2[k]):
							if skv2_route[j].requestType=="PICKUP" and skv2_route[j].custno!=skv2_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv2_route[j].depotservt
						servt_dict2[skv2_route[depo_idx2[k]]]+=servt

					tdepo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]

					load=[0 for c in skv1_route]
					load2=[0 for c in skv1_route]
					for i in range(len(skv1_route)-1):
						if i in tdepo_idx1:
							for j in range(i+1,tdepo_idx1[tdepo_idx1.index(i)+1]):
								if skv1_route[j].requestType=="DELIVERY":
									if skv1_route[j].custno[0] != "b":
										load[i]+=skv1_route[j].dem
										load2[i]+=skv1_route[j].dem2
						else:
							if skv1_route[i].custno[0] != "b":
								if skv1_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv1_route[i].dem
									load2[i]=load2[i-1]-skv1_route[i].dem2
								else:
									load[i]=load[i-1]+skv1_route[i].dem
									load2[i]=load2[i-1]+skv1_route[i].dem2

					for i in reversed(range(len(load))):
						if i in tdepo_idx1 and i+1 in tdepo_idx1:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx1=[]
					for c in skv1_route[tdepo_idx1[0]+1:tdepo_idx1[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx1.append(0)
					
					for i in range(1,len(tdepo_idx1)-1):
						if load[tdepo_idx1[i]-1]==0 and load2[tdepo_idx1[i]-1]==0:
							for c in skv1_route[tdepo_idx1[i]+1:tdepo_idx1[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[tdepo_idx1[i]]==0 and load2[tdepo_idx1[i]]==0:
									no_park_idx1.append(veh1.route.index(skv1_route[tdepo_idx1[i]]))
					if load[tdepo_idx1[-1]-1]==0 and load2[tdepo_idx1[-1]-1]==0:
						no_park_idx1.append(veh1.route.index(skv1_route[tdepo_idx1[-1]]))

					pick_opt_flag1=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv1_route)-1)):
							if argvs.bulkShipping_flag==True:
								if skv1_route[i].customers[0].custno!="0":
									if skv1_route[i].customers[0].custno[0]!="b":
										non_depo=True
										if skv1_route[i].customers[0].requestType=="PICKUP":
											pick_opt_flag1=True
											break
								elif non_depo==True:
									break
							else:
								if skv1_route[i].custno!="0":
									if skv1_route[i].custno[0]!="b":
										non_depo=True
										if skv1_route[i].requestType=="PICKUP":
											pick_opt_flag1=True
											break
								elif non_depo==True:
									break

					tdepo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]

					load=[0 for c in skv2_route]
					load2=[0 for c in skv2_route]
					for i in range(len(skv2_route)-1):
						if i in tdepo_idx2:
							for j in range(i+1,tdepo_idx2[tdepo_idx2.index(i)+1]):
								if skv2_route[j].requestType=="DELIVERY":
									if skv2_route[j].custno[0] != "b":
										load[i]+=skv2_route[j].dem
										load2[i]+=skv2_route[j].dem2
						else:
							if skv2_route[i].custno[0] != "b":
								if skv2_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv2_route[i].dem
									load2[i]=load2[i-1]-skv2_route[i].dem2
								else:
									load[i]=load[i-1]+skv2_route[i].dem
									load2[i]=load2[i-1]+skv2_route[i].dem2

					for i in reversed(range(len(load))):
						if i in tdepo_idx2 and i+1 in tdepo_idx2:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx2=[]
					for c in skv2_route[tdepo_idx2[0]+1:tdepo_idx2[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx2.append(0)
					
					for i in range(1,len(tdepo_idx2)-1):
						if load[tdepo_idx2[i]-1]==0 and load2[tdepo_idx2[i]-1]==0:
							for c in skv2_route[tdepo_idx2[i]+1:tdepo_idx2[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[tdepo_idx2[i]]==0 and load2[tdepo_idx2[i]]==0:
									no_park_idx2.append(veh2.route.index(skv2_route[tdepo_idx2[i]]))
					if load[tdepo_idx2[-1]-1]==0 and load2[tdepo_idx2[-1]-1]==0:
						no_park_idx2.append(veh2.route.index(skv2_route[tdepo_idx2[-1]]))

					pick_opt_flag2=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv2_route)-1)):
							if argvs.bulkShipping_flag==True:
								if skv2_route[i].customers[0].custno!="0":
									if skv2_route[i].customers[0].custno[0]!="b":
										non_depo=True
										if skv2_route[i].customers[0].requestType=="PICKUP":
											pick_opt_flag2=True
											break
								elif non_depo==True:
									break
							else:
								if skv2_route[i].custno!="0":
									if skv2_route[i].custno[0]!="b":
										non_depo=True
										if skv2_route[i].requestType=="PICKUP":
											pick_opt_flag2=True
											break
								elif non_depo==True:
									break

					if argvs.break_flag==False:
						#### ここから休憩機能なし用の処理 ####
						if veh1.route[start_idx1] in servt_dict1:
							if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
								lv_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
							else:
								lv_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)+servt_dict1[veh1.route[start_idx1]]*veh1.opskill
						else:
							if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
								lv_t=max(veh1.arr[start_idx1]+veh1.route[start_idx1].parkt_arrive,veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
							else:
								lv_t=max(veh1.arr[start_idx1],veh1.route[start_idx1].ready_fs)+veh1.route[start_idx1].servt*veh1.opskill
						if (start_idx1==0 or veh1.route[start_idx1].spotid!=veh1.route[start_idx1-1].spotid) and not start_idx1 in no_park_idx1:
							lv_t+=veh1.route[start_idx1].parkt_open
						arr_t=veh1.arr[start_idx1]

						if start_idx1!=0 and veh1.route[start_idx1].custno==veh1.route[start_idx1-1].custno and veh1.route[start_idx1].custno!="0":
							lv_t=veh1.lv[start_idx1-1]
							arr_t=veh1.arr[start_idx1-1]

						impassable=True
						for i in range(start_idx1,pos1-1):
							from_c,to_c=veh1.route[i],veh1.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable3 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable3 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or \
							dtable3[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
							if to_c in servt_dict1:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable3[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable3[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable3[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if veh1.route[pos1-1].custno!=custs1[0].custno:
							dtable1 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable1 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable1 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

							#変更後に通行不可能ならFalseを返す
							ttable1 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
							
							if ttable1[veh1.route[pos1-1].spotno][custs1[0].spotno]==-1 or \
								dtable1[veh1.route[pos1-1].spotno][custs1[0].spotno]==-1 or \
								(argvs.management_etable and etable1[veh1.route[pos1-1].spotno][custs1[0].spotno]==-1) or \
								(argvs.management_xtable and xtable1[veh1.route[pos1-1].spotno][custs1[0].spotno]==-1):
								continue

							adist+=dtable1[veh1.route[pos1-1].spotno][custs1[0].spotno]
							if argvs.management_etable:
								apower+=etable1[veh1.route[pos1-1].spotno][custs1[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable1[veh1.route[pos1-1].spotno][custs1[0].spotno]

							arr_t=lv_t+ttable1[veh1.route[pos1-1].spotno][custs1[0].spotno]*veh1.drskill
							if custs1[0] in servt_dict1:
								if custs1[0].spotid!=veh1.route[pos1-1].spotid and (custs1[0].custno!="0" or not veh1.route.index(custs1[0]) in no_park_idx1):
									lv_t=max(arr_t+custs1[0].parkt_arrive,custs1[0].ready_fs)+servt_dict1[custs1[0]]*veh1.opskill
									st_t=max(arr_t+custs1[0].parkt_arrive,custs1[0].ready_fs)+custs1[0].parkt_open
								else:
									lv_t=max(arr_t,custs1[0].ready_fs)+servt_dict1[custs1[0]]*veh1.opskill
									st_t=max(arr_t,custs1[0].ready_fs)
							else:
								if custs1[0].spotid!=veh1.route[pos1-1].spotid and (custs1[0].custno!="0" or not veh1.route.index(custs1[0]) in no_park_idx1):
									lv_t=max(arr_t+custs1[0].parkt_arrive,custs1[0].ready_fs)+custs1[0].servt*veh1.opskill
									st_t=max(arr_t+custs1[0].parkt_arrive,custs1[0].ready_fs)+custs1[0].servt*veh1.opskill
								else:
									lv_t=max(arr_t,custs1[0].ready_fs)+custs1[0].servt*veh1.opskill
									st_t=max(arr_t,custs1[0].ready_fs)
							if custs1[0].spotid!=veh1.route[pos1-1].spotid and (custs1[0].custno!="0" or not veh1.route.index(custs1[0]) in no_park_idx1):
								lv_t+=custs1[0].parkt_open

							if veh1.route[pos1-1].custno!="0" or custs1[0].custno!="0":
								atpen+=max(0.0,st_t-custs1[0].due_fs)

						for i in range(len(custs1)-1):
							from_c,to_c=custs1[i],custs1[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							ttable3 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								dtable3 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
								
								if argvs.management_etable:
									etable3 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable3 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

								if ttable3[from_c.spotno][to_c.spotno]==-1 or \
								dtable3[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								adist+=dtable3[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable3[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable3[from_c.spotno][to_c.spotno]

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh1.drskill
							if to_c in servt_dict1:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict1[to_c]*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh1.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh1.route.index(to_c) in no_park_idx1):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)


						if impassable==False:
							continue
						
						dtable9 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable9 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable9 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)
						ttable9 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)

						if (argvs.bulkShipping_flag==False and pos2==len(veh1.route)-1 and custs1[-1].custno!="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==True) or \
						(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-1 and custs1[-1].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
							if ttable9[custs1[-1].spotno][customers[0].spotno]==-1 or \
							dtable9[custs1[-1].spotno][customers[0].spotno]==-1 or \
							(argvs.management_etable and etable9[custs1[-1].spotno][customers[0].spotno]==-1) or \
							(argvs.management_xtable and xtable9[custs1[-1].spotno][customers[0].spotno]==-1):
								continue

							adist+=dtable9[custs1[-1].spotno][customers[0].spotno]
							if argvs.management_etable:
								apower+=etable9[custs1[-1].spotno][customers[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable9[custs1[-1].spotno][customers[0].spotno]

							arr_t=lv_t+ttable9[custs1[-1].spotno][customers[0].spotno]*veh1.drskill
							st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
							atpen+=max(0.0,st_t-customers[0].due_fs)
							lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[veh1.route[-1]]+veh1.depotservt)*veh1.opskill
							lv_t+=customers[0].parkt_open

							ttable11 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
							dtable11 = get_dtable(veh1.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable11 = get_etable(veh1.vtype, veh1.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable11 = get_xtable(veh1.vtype, lv_t, argvs.management_xtable)

							if ttable11[customers[0].spotno][veh1.route[-1].spotno]==-1 or \
								dtable11[customers[0].spotno][veh1.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable11[customers[0].spotno][veh1.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable11[customers[0].spotno][veh1.route[-1].spotno]==-1):
								continue

							adist+=dtable11[customers[0].spotno][veh1.route[-1].spotno]
							if argvs.management_etable:
								apower+=etable11[customers[0].spotno][veh1.route[-1].spotno]
							if argvs.management_xtable:
								aexp+=xtable11[customers[0].spotno][veh1.route[-1].spotno]

							arr_t=lv_t+ttable11[customers[0].spotno][veh1.route[-1].spotno]*veh1.drskill
							st_t=max(arr_t,veh1.route[-1].ready_fs)
							atpen+=max(0.0,st_t-veh1.route[-1].due_fs)
							lv_t=max(arr_t,veh1.route[-1].ready_fs)
							arr=arr_t
							lv=lv_t
							st=st_t
						elif (argvs.bulkShipping_flag==False and pos2==len(veh1.route)-2 and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False) or \
						(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-2 and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
							if ttable9[custs1[-1].spotno][veh1.route[-1].spotno]==-1 or \
							dtable9[custs1[-1].spotno][veh1.route[-1].spotno]==-1 or \
							(argvs.management_etable and etable9[custs1[-1].spotno][veh1.route[-1].spotno]==-1) or \
							(argvs.management_xtable and xtable9[custs1[-1].spotno][veh1.route[-1].spotno]==-1):
								continue

							arr_t=lv_t+ttable9[custs1[-1].spotno][veh1.route[-1].spotno]*veh1.drskill
							st_t=max(arr_t,veh1.route[-1].ready_fs)
							atpen+=max(0.0,st_t-veh1.route[-1].due_fs)
							lv_t=max(arr_t,veh1.route[-1].ready_fs)
							arr=arr_t
							lv=lv_t
							st=st_t

							adist+=dtable9[custs1[-1].spotno][veh1.route[-1].spotno]
							if argvs.management_etable:
								apower+=etable9[custs1[-1].spotno][veh1.route[-1].spotno]
							if argvs.management_xtable:
								aexp+=xtable9[custs1[-1].spotno][veh1.route[-1].spotno]
						else:
							if custs1[-1].custno!=veh1.route[pos2].custno or veh1.route[pos2].custno=="0":
								if ttable9[custs1[-1].spotno][veh1.route[pos2].spotno]==-1 or \
								dtable9[custs1[-1].spotno][veh1.route[pos2].spotno]==-1 or \
								(argvs.management_etable and etable9[custs1[-1].spotno][veh1.route[pos2].spotno]==-1) or \
								(argvs.management_xtable and xtable9[custs1[-1].spotno][veh1.route[pos2].spotno]==-1):
									continue

								adist+=dtable9[custs1[-1].spotno][veh1.route[pos2].spotno]
								if argvs.management_etable:
									apower+=etable9[custs1[-1].spotno][veh1.route[pos2].spotno]
								if argvs.management_xtable:
									aexp+=xtable9[custs1[-1].spotno][veh1.route[pos2].spotno]

									
								arr=lv_t+ttable9[custs1[-1].spotno][veh1.route[pos2].spotno]*veh1.drskill
								if veh1.route[pos2] in servt_dict1:
									if veh1.route[pos2].spotid!=custs1[-1].spotid and not pos2 in no_park_idx1:
										lv=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										st=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].parkt_open
									else:
										lv=max(arr,veh1.route[pos2].ready_fs)+servt_dict1[veh1.route[pos2]]*veh1.opskill
										st=max(arr,veh1.route[pos2].ready_fs)
								else:
									if veh1.route[pos2].spotid!=custs1[-1].spotid and not pos2 in no_park_idx1:
										lv=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										st=max(arr+veh1.route[pos2].parkt_arrive,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
									else:
										lv=max(arr,veh1.route[pos2].ready_fs)+veh1.route[pos2].servt*veh1.opskill
										st=max(arr,veh1.route[pos2].ready_fs)
								if veh1.route[pos2].spotid!=custs1[-1].spotid and not pos2 in no_park_idx1:
									lv+=veh1.route[pos2].parkt_open
							else:
								arr=arr_t
								lv=lv_t
								st=st_t

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,veh1,lv,pos2+1,servt_dict1,len(skv1_route)-1,no_park_idx1,pick_opt_flag1,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp
						adist1=adist

						lv1=lv
						st1=st

						if (pos2)==(len(veh1.route)-1):
							if (argvs.bulkShipping_flag==False and (custs1[-1].custno!="0" or veh1.route[n1-1].custno!="0")) or \
								(argvs.bulkShipping_flag==True and (custs1[-1].customers[0].custno!="0" or veh1.route[n1-1].customers[0].custno!="0")):
								atpen+=max(0.0,st1-veh1.route[n1-1].due_fs)
							atpen+=max(0.0,lv1-veh1.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
								##
						else:
							if not ((argvs.bulkShipping_flag==False and pos2==len(veh1.route)-2 and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False) or \
							(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-2 and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False)) and \
							not ((argvs.bulkShipping_flag==False and pos2==len(veh1.route)-1 and custs1[-1].custno!="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==True) or \
							(argvs.bulkShipping_flag==True and pos2==len(veh1.route)-1 and custs1[-1].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True)):
								if custs1[-1].custno!=veh1.route[pos2].custno:
									atpen+=max(0.0,st1-veh1.route[pos2].due_fs)

								lv_t=lv1
								st_t=st1

								for i in range(pos2,n1-1-1):
									if i+1==n1-2 and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False:
										continue

									if veh1.route[i].custno==veh1.route[i+1].custno and veh1.route[i+1].custno!="0":
										continue

									if veh1.route[i+1] in servt_dict1:
										proc_time=servt_dict1[veh1.route[i+1]]
									else:
										proc_time=veh1.route[i+1].servt
									if i+1 in no_park_idx1:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(veh1.route[i],veh1.route[i+1],lv_t,proc_time,veh1,no_park,argvs)
									if veh1.route[i].custno!="0" or veh1.route[i+1].custno!="0":
										atpen+=ttime_pen

								ttable8 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
								if (argvs.bulkShipping_flag==False and veh1.route[-2].custno!="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==True) or \
								(argvs.bulkShipping_flag==True and veh1.route[-2].customers[0].custno!="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==True): #集荷最適化
									arr_t=lv_t+ttable8[veh1.route[-2].spotno][customers[0].spotno]*veh1.drskill
									st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
									atpen+=max(0.0,st_t-customers[0].due_fs)
									lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict1[veh1.route[-1]]+veh1.depotservt)*veh1.opskill
									lv_t+=customers[0].parkt_open

									ttable12 = get_ttable(veh1.vtype, lv_t, argvs.management_ttable)
									arr_t=lv_t+ttable12[customers[0].spotno][veh1.route[-1].spotno]*veh1.drskill

									#改善前時間算出
									lv1=max(arr_t,veh1.route[-1].ready_fs)
									st1=max(arr_t,veh1.route[-1].ready_fs)
								elif (argvs.bulkShipping_flag==False and veh1.route[-2].custno=="0" and veh1.route[-1].custno!="0" and pick_opt_flag1==False) or \
								(argvs.bulkShipping_flag==True and veh1.route[-2].customers[0].custno=="0" and veh1.route[-1].customers[0].custno!="0" and pick_opt_flag1==False): #集荷最適化
									arr_t=lv_t+ttable8[veh1.route[-3].spotno][veh1.route[-1].spotno]*veh1.drskill

									#改善前時間算出
									lv1=max(arr_t,veh1.route[-1].ready_fs)
									st1=max(arr_t,veh1.route[-1].ready_fs)
								else:
									arr_t=lv_t+ttable8[veh1.route[-2].spotno][veh1.route[-1].spotno]*veh1.drskill
									# arr_t=round(arr_t,4)
									
									if veh1.route[len(veh1.route)-1].spotid!=veh1.route[len(veh1.route)-2].spotid and not len(veh1.route)-1 in no_park_idx1:
										lv1=max(arr_t+veh1.route[len(veh1.route)-1].parkt_arrive,veh1.route[-1].ready_fs)+servt_dict1[veh1.route[len(veh1.route)-1]]*veh1.opskill
										st1=max(arr_t+veh1.route[len(veh1.route)-1].parkt_arrive,veh1.route[-1].ready_fs)+veh1.route[len(veh1.route)-1].parkt_open
									else:
										lv1=max(arr_t,veh1.route[-1].ready_fs)+servt_dict1[veh1.route[len(veh1.route)-1]]*veh1.opskill
										st1=max(arr_t,veh1.route[-1].ready_fs)
									if veh1.route[len(veh1.route)-1].spotid!=veh1.route[len(veh1.route)-2].spotid and not len(veh1.route)-1 in no_park_idx1:
										lv1+=veh1.route[len(veh1.route)-1].parkt_open

								if (argvs.bulkShipping_flag==False and (veh1.route[n1-2].custno!="0" or veh1.route[n1-1].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (veh1.route[n1-2].customers[0].custno!="0" or veh1.route[n1-1].customers[0].custno!="0")):
									atpen+=max(0.0,st_t-veh1.route[n1-1].due_fs)
							atpen+=max(0.0,lv1-veh1.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-veh1.arr[0],0,btpen_temp)
								##


						if veh2.route[start_idx2] in servt_dict2:
							if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
								lv_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
							else:
								lv_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)+servt_dict2[veh2.route[start_idx2]]*veh2.opskill
						else:
							if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
								lv_t=max(veh2.arr[start_idx2]+veh2.route[start_idx2].parkt_arrive,veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
							else:
								lv_t=max(veh2.arr[start_idx2],veh2.route[start_idx2].ready_fs)+veh2.route[start_idx2].servt*veh2.opskill
						if (start_idx2==0 or veh2.route[start_idx2].spotid!=veh2.route[start_idx2-1].spotid) and not start_idx2 in no_park_idx2:
							lv_t+=veh2.route[start_idx2].parkt_open
						arr_t=veh2.arr[start_idx2]

						if start_idx2!=0 and veh2.route[start_idx2].custno==veh2.route[start_idx2-1].custno and veh2.route[start_idx2].custno!="0":
							lv_t=veh2.lv[start_idx2-1]
							arr_t=veh2.arr[start_idx2-1]

						for i in range(start_idx2,pos3-1):
							from_c,to_c=veh2.route[i],veh2.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable3 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							ttable3 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable3 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							if ttable3[from_c.spotno][to_c.spotno]==-1 or \
							dtable3[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh2.drskill
							if to_c in servt_dict2:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.stotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable3[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable3[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable3[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if veh2.route[pos3-1].custno!=custs2[0].custno:
							dtable2 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable2 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable2 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							#変更後に通行不可能ならFalseを返す
							ttable2 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							
							if ttable2[veh2.route[pos3-1].spotno][custs2[0].spotno]==-1 or \
								dtable2[veh2.route[pos3-1].spotno][custs2[0].spotno]==-1 or \
								(argvs.management_etable and etable2[veh2.route[pos3-1].spotno][custs2[0].spotno]==-1) or \
								(argvs.management_xtable and xtable2[veh2.route[pos3-1].spotno][custs2[0].spotno]==-1):
								continue

							adist+=dtable2[veh2.route[pos3-1].spotno][custs2[0].spotno]
							if argvs.management_etable:
								apower+=etable2[veh2.route[pos3-1].spotno][custs2[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable2[veh2.route[pos3-1].spotno][custs2[0].spotno]

							arr_t=lv_t+ttable2[veh2.route[pos3-1].spotno][custs2[0].spotno]*veh2.drskill
							if custs2[0] in servt_dict2:
								if custs2[0].spotid!=veh2.route[pos3-1].spotid and (custs2[0].custno!="0" or not veh2.route.index(custs2[0]) in no_park_idx2):
									lv_t=max(arr_t+custs2[0].parkt_arrive,custs2[0].ready_fs)+servt_dict2[custs2[0]]*veh2.opskill
									st_t=max(arr_t+custs2[0].parkt_arrive,custs2[0].ready_fs)+custs2[0].parkt_open
								else:
									lv_t=max(arr_t,custs2[0].ready_fs)+servt_dict2[custs2[0]]*veh2.opskill
									st_t=max(arr_t,custs2[0].ready_fs)
							else:
								if custs2[0].spotid!=veh2.route[pos3-1].spotid and (custs2[0].custno!="0" or not veh2.route.index(custs2[0]) in no_park_idx2):
									lv_t=max(arr_t+custs2[0].parkt_arrive,custs2[0].ready_fs)+custs2[0].servt*veh2.opskill
									st_t=max(arr_t+custs2[0].parkt_arrive,custs2[0].ready_fs)+custs2[0].parkt_open
								else:
									lv_t=max(arr_t,custs2[0].ready_fs)+custs2[0].servt*veh2.opskill
									st_t=max(arr_t,custs2[0].ready_fs)
							if custs2[0].spotid!=veh2.route[pos3-1].spotid and (custs2[0].custno!="0" or not veh2.route.index(custs2[0]) in no_park_idx2):
								lv_t+=custs2[0].parkt_open

							if veh2.route[pos3-1].custno!="0" or custs2[0].custno!="0":
								atpen+=max(0.0,st_t-custs2[0].due_fs)

						for i in range(len(custs2)-1):
							from_c,to_c=custs2[i],custs2[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							ttable3 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								dtable3 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
								
								if argvs.management_etable:
									etable3 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable3 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

								if ttable3[from_c.spotno][to_c.spotno]==-1 or \
								dtable3[from_c.spotno][to_c.spotno]==-1 or \
								(argvs.management_etable and etable3[from_c.spotno][to_c.spotno]==-1) or \
								(argvs.management_xtable and xtable3[from_c.spotno][to_c.spotno]==-1):
									impassable=False
									break

								adist+=dtable3[from_c.spotno][to_c.spotno]
								if argvs.management_etable:
									apower+=etable3[from_c.spotno][to_c.spotno]
								if argvs.management_xtable:
									aexp+=xtable3[from_c.spotno][to_c.spotno]

							arr_t=lv_t+ttable3[from_c.spotno][to_c.spotno]*veh2.drskill
							if to_c in servt_dict2:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict2[to_c]*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*veh2.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not veh2.route.index(to_c) in no_park_idx2):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)


						if impassable==False:
							continue
						
						dtable10 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable10 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable10 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)
						ttable10 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)

						if (argvs.bulkShipping_flag==False and pos4==len(veh2.route)-1 and custs2[-1].custno!="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==True) or \
						(argvs.bulkShipping_flag==True and pos4==len(veh2.route)-1 and custs2[-1].customers[0].custno!="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
							if ttable10[custs2[-1].spotno][customers[0].spotno]==-1 or \
							dtable10[custs2[-1].spotno][customers[0].spotno]==-1 or \
							(argvs.management_etable and etable10[custs2[-1].spotno][customers[0].spotno]==-1) or \
							(argvs.management_xtable and xtable10[custs2[-1].spotno][customers[0].spotno]==-1):
								continue

							adist+=dtable10[custs2[-1].spotno][customers[0].spotno]
							if argvs.management_etable:
								apower+=etable10[custs2[-1].spotno][customers[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable10[custs2[-1].spotno][customers[0].spotno]

							arr_t=lv_t+ttable10[custs2[-1].spotno][customers[0].spotno]*veh2.drskill
							st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
							atpen+=max(0.0,st_t-customers[0].due_fs)
							lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[veh2.route[-1]]+veh2.depotservt)*veh2.opskill
							lv_t+=customers[0].parkt_open

							ttable12 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
							dtable12 = get_dtable(veh2.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable12 = get_etable(veh2.vtype, veh2.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable12 = get_xtable(veh2.vtype, lv_t, argvs.management_xtable)

							if ttable12[customers[0].spotno][veh2.route[-1].spotno]==-1 or \
								dtable12[customers[0].spotno][veh2.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable12[customers[0].spotno][veh2.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable12[customers[0].spotno][veh2.route[-1].spotno]==-1):
								continue

							adist+=dtable12[customers[0].spotno][veh2.route[-1].spotno]
							if argvs.management_etable:
								apower+=etable12[customers[0].spotno][veh2.route[-1].spotno]
							if argvs.management_xtable:
								aexp+=xtable12[customers[0].spotno][veh2.route[-1].spotno]

							arr_t=lv_t+ttable12[customers[0].spotno][veh2.route[-1].spotno]*veh2.drskill
							st_t=max(arr_t,veh2.route[-1].ready_fs)
							atpen+=max(0.0,st_t-veh2.route[-1].due_fs)
							lv_t=max(arr_t,veh2.route[-1].ready_fs)
							arr=arr_t
							lv=lv_t
							st=st_t
						elif (argvs.bulkShipping_flag==False and pos4==len(veh2.route)-2 and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False) or \
							(argvs.bulkShipping_flag==True and pos4==len(veh2.route)-2 and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
							if ttable10[custs2[-1].spotno][veh2.route[-1].spotno]==-1 or \
							dtable10[custs2[-1].spotno][veh2.route[-1].spotno]==-1 or \
							(argvs.management_etable and etable10[custs2[-1].spotno][veh2.route[-1].spotno]==-1) or \
							(argvs.management_xtable and xtable10[custs2[-1].spotno][veh2.route[-1].spotno]==-1):
								continue

							arr_t=lv_t+ttable10[custs2[-1].spotno][veh2.route[-1].spotno]*veh2.drskill
							st_t=max(arr_t,veh2.route[-1].ready_fs)
							atpen+=max(0.0,st_t-veh2.route[-1].due_fs)
							lv_t=max(arr_t,veh2.route[-1].ready_fs)
							arr=arr_t
							lv=lv_t
							st=st_t

							adist+=dtable10[custs2[-1].spotno][veh2.route[-1].spotno]
							if argvs.management_etable:
								apower+=etable10[custs2[-1].spotno][veh2.route[-1].spotno]
							if argvs.management_xtable:
								aexp+=xtable10[custs2[-1].spotno][veh2.route[-1].spotno]
						else:
							if custs2[-1].custno!=veh2.route[pos4].custno or veh2.route[pos4].custno=="0":
								if ttable10[custs2[-1].spotno][veh2.route[pos4].spotno]==-1 or \
								dtable10[custs2[-1].spotno][veh2.route[pos4].spotno]==-1 or \
								(argvs.management_etable and etable10[custs2[-1].spotno][veh2.route[pos4].spotno]==-1) or \
								(argvs.management_xtable and xtable10[custs2[-1].spotno][veh2.route[pos4].spotno]==-1):
									continue

								adist+=dtable10[custs2[-1].spotno][veh2.route[pos4].spotno]
								if argvs.management_etable:
									apower+=etable10[custs2[-1].spotno][veh2.route[pos4].spotno]
								if argvs.management_xtable:
									aexp+=xtable10[custs2[-1].spotno][veh2.route[pos4].spotno]

								arr=lv_t+ttable10[custs2[-1].spotno][veh2.route[pos4].spotno]*veh2.drskill
								if veh2.route[pos4] in servt_dict2:
									if veh2.route[pos4].spotid!=custs2[-1].spotid and not pos4 in no_park_idx2:
										lv=max(arr+veh2.route[pos4].parkt_arrive,veh2.route[pos4].ready_fs)+servt_dict2[veh2.route[pos4]]*veh2.opskill
										st=max(arr+veh2.route[pos4].parkt_arrive,veh2.route[pos4].ready_fs)+veh2.route[pos4].parkt_open
									else:
										lv=max(arr,veh2.route[pos4].ready_fs)+servt_dict2[veh2.route[pos4]]*veh2.opskill
										st=max(arr,veh2.route[pos4].ready_fs)
								else:
									if veh2.route[pos4].spotid!=custs2[-1].spotid and not pos4 in no_park_idx2:
										lv=max(arr+veh2.route[pos4].parkt_arrive,veh2.route[pos4].ready_fs)+veh2.route[pos4].servt*veh2.opskill
										st=max(arr+veh2.route[pos4].parkt_arrive,veh2.route[pos4].ready_fs)+veh2.route[pos4].parkt_open
									else:
										lv=max(arr,veh2.route[pos4].ready_fs)+veh2.route[pos4].servt*veh2.opskill
										st=max(arr,veh2.route[pos4].ready_fs)
								if veh2.route[pos4].spotid!=custs2[-1].spotid and not pos4 in no_park_idx2:
									lv+=veh2.route[pos4].parkt_open
							else:
								arr=arr_t
								lv=lv_t
								st=st_t

							if one_table_flag==False or argvs.multitrip_flag==True or pick_nondepo_flag==True or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,veh2,lv,pos4+1,servt_dict2,len(skv2_route)-1,no_park_idx2,pick_opt_flag2,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp	
						adist2=adist-adist1

						lv2=lv
						st2=st

						if (pos4)==(len(veh2.route)-1):
							if (argvs.bulkShipping_flag==False and (custs2[-1].custno!="0" or veh2.route[n2-1].custno!="0")) or \
								(argvs.bulkShipping_flag==True and (custs2[-1].customers[0].custno!="0" or veh2.route[n2-1].customers[0].custno!="0")):
								atpen+=max(0.0,st2-veh2.route[n2-1].due_fs)
							atpen+=max(0.0,lv2-veh2.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
								##
						else:
							if not ((argvs.bulkShipping_flag==False and pos4==len(veh2.route)-2 and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False) or \
							(argvs.bulkShipping_flag==True and pos4==len(veh2.route)-2 and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False)) and \
							not ((argvs.bulkShipping_flag==False and pos4==len(veh2.route)-1 and custs2[-1].custno!="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==True) or \
							(argvs.bulkShipping_flag==True and pos4==len(veh2.route)-1 and custs2[-1].customers[0].custno!="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True)):
								if custs2[-1].custno!=veh2.route[pos4].custno:
									atpen+=max(0.0,st2-veh2.route[pos4].due_fs)

								lv_t=lv2
								st_t=st2

								for i in range(pos4,n2-1-1):
									if i+1==n2-2 and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False:
										continue

									if veh2.route[i].custno==veh2.route[i+1].custno and veh2.route[i+1].custno!="0":
										continue

									if veh2.route[i+1] in servt_dict2:
										proc_time=servt_dict2[veh2.route[i+1]]
									else:
										proc_time=veh2.route[i+1].servt
									if i+1 in no_park_idx2:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(veh2.route[i],veh2.route[i+1],lv_t,proc_time,veh2,no_park,argvs)
									if veh2.route[i].custno!="0" or veh2.route[i+1].custno!="0":
										atpen+=ttime_pen

								ttable8 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
								if (argvs.bulkShipping_flag==False and veh2.route[-2].custno!="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==True) or \
								(argvs.bulkShipping_flag==True and veh2.route[-2].customers[0].custno!="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==True): #集荷最適化
									arr_t=lv_t+ttable8[veh2.route[-2].spotno][customers[0].spotno]*veh2.drskill
									st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
									atpen+=max(0.0,st_t-customers[0].due_fs)
									lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict2[veh1.route[-1]]+veh2.depotservt)*veh2.opskill
									lv_t+=customers[0].parkt_open

									ttable12 = get_ttable(veh2.vtype, lv_t, argvs.management_ttable)
									arr_t=lv_t+ttable12[customers[0].spotno][veh2.route[-1].spotno]*veh2.drskill

									#改善前時間算出
									lv2=max(arr_t,veh2.route[-1].ready_fs)
								elif (argvs.bulkShipping_flag==False and veh2.route[-2].custno=="0" and veh2.route[-1].custno!="0" and pick_opt_flag2==False) or \
								(argvs.bulkShipping_flag==True and veh2.route[-2].customers[0].custno=="0" and veh2.route[-1].customers[0].custno!="0" and pick_opt_flag2==False): #集荷最適化
									arr_t=lv_t+ttable8[veh2.route[-3].spotno][veh2.route[-1].spotno]*veh2.drskill

									#改善前時間算出
									lv2=max(arr_t,veh2.route[-1].ready_fs)
								else:
									arr_t=lv_t+ttable8[veh2.route[-2].spotno][veh2.route[-1].spotno]*veh2.drskill
									# arr_t=round(arr_t,4)
									
									if veh2.route[len(veh2.route)-1].spotid!=veh2.route[len(veh2.route)-2].spotid and not len(veh2.route)-1 in no_park_idx2:
										lv2=max(arr_t+veh2.route[len(veh2.route)-1].parkt_arrive,veh2.route[-1].ready_fs)+servt_dict2[veh2.route[len(veh2.route)-1]]*veh2.opskill
										st_t=max(arr_t+veh2.route[len(veh2.route)-1].parkt_arrive,veh2.route[-1].ready_fs)+veh2.route[len(veh2.route)-1].parkt_open
									else:
										lv2=max(arr_t,veh2.route[-1].ready_fs)+servt_dict2[veh2.route[len(veh2.route)-1]]*veh2.opskill
										lv2=max(arr_t,veh2.route[-1].ready_fs)
									if veh2.route[len(veh2.route)-1].spotid!=veh2.route[len(veh2.route)-2].spotid and not len(veh2.route)-1 in no_park_idx2:
										lv2+=veh2.route[len(veh2.route)-1].parkt_open

								if (argvs.bulkShipping_flag==False and (veh2.route[n2-2].custno!="0" or veh2.route[n2-1].custno!="0")) or \
									(argvs.bulkShipping_flag==True and (veh2.route[n2-2].customers[0].custno!="0" or veh2.route[n2-1].customers[0].custno!="0")):
									atpen+=max(0.0,st_t-veh2.route[n2-1].due_fs)
							atpen+=max(0.0,lv2-veh2.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(lowertime)>0 or compare_time(uppertime)>0:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-veh2.arr[0],atpen_temp,btpen_temp)
								##
						#### ここまで休憩機能なし用の処理 ####
					else:
						#### ここから休憩機能あり用の処理 ####
						br_veh1 = dcopy(veh1)
						br_veh1.route = skv1_route
						br_veh2 = dcopy(veh2)
						br_veh2.route = skv2_route
						if argvs.pickup_flag==True:
							#集荷最適化
							if pick_opt_flag1:
								if not get_pick_opt_status(br_veh1, argvs)[0]:
									br_veh1.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(br_veh1, pick_opt_flag1, argvs)
							if pick_opt_flag2:
								if not get_pick_opt_status(br_veh2, argvs)[0]:
									br_veh2.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(br_veh2, pick_opt_flag2, argvs)
						br_veh1, br_veh2 = insert_breakspot(takebreak_list1[i1], takebreak_list2[i2], customers, br_veh1, vehicles, argvs, 0, br_veh2)
						if br_veh1==None or br_veh2==None:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
							continue

						lv1 = br_veh1.lv[-1]
						skv1_route = br_veh1.route
						lv2 = br_veh2.lv[-1]
						skv2_route = br_veh2.route

						depo_idx1=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						br_veh1.update_totalcost_dtable(argvs)
						adist1 = br_veh1.totalcost
						nn1 = len(br_veh1.route)
						for i in range(start_idx1+1,nn1):
							if (argvs.bulkShipping_flag==False and (br_veh1.route[i-1].custno!=br_veh1.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (br_veh1.route[i-1].customers[0].custno!=br_veh1.route[i].customers[0].custno)):
								atpen+=max(0.0,br_veh1.st[i]-br_veh1.route[i].due_fs)
						atpen+=max(0.0,lv1-br_veh1.endhour)

						depo_idx2=[j for j,c in enumerate(skv2_route[:-1]) if c.custno=="0"]+[len(skv2_route)-1]
						br_veh2.update_totalcost_dtable(argvs)
						adist2 = br_veh2.totalcost
						nn2 = len(br_veh2.route)
						for i in range(start_idx2+1,nn2):
							if (argvs.bulkShipping_flag==False and (br_veh2.route[i-1].custno!=br_veh2.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (br_veh2.route[i-1].customers[0].custno!=br_veh2.route[i].customers[0].custno)):
								atpen+=max(0.0,br_veh2.st[i]-br_veh2.route[i].due_fs)
						atpen+=max(0.0,lv2-br_veh2.endhour)

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
							if is_reserved(br_veh1,argvs)==False:
								atpen_temp,btpen_temp=return_lutime_penalty(lv1-br_veh1.arr[0],argvs.lowertime,argvs.uppertime,bv1final_t-br_veh1.arr[0],0,btpen_temp)
							if is_reserved(br_veh2,argvs)==False:
								atpen_temp,btpen_temp=return_lutime_penalty(lv2-br_veh2.arr[0],argvs.lowertime,argvs.uppertime,bv2final_t-br_veh2.arr[0],atpen_temp,btpen_temp)
						#### 
						if argvs.management_etable:
							apower1=calc_power(br_veh1,start_idx1+1,len(br_veh1.route),argvs)
							apower2=calc_power(br_veh2,start_idx2+1,len(br_veh2.route),argvs)
							apower = apower1 + apower2
						if argvs.management_xtable:
							aexp1=calc_exp(veh1,start_idx1+1,len(br_veh1.route),argvs)
							aexp2=calc_exp(veh2,start_idx2+1,len(br_veh2.route),argvs)
							aexp = aexp1 + aexp2

						adist = adist1 + adist2
						#### ここまで休憩機能あり用の処理 ####

					#集荷違反量を計算
					if argvs.pickup_flag==True:
						max_load_pen1_1,max_load_pen1_2=calc_vehicle_loadpickup_penalty(skv1_route,veh1)
						max_load_pen2_1,max_load_pen2_2=calc_vehicle_loadpickup_penalty(skv2_route,veh2)
					else:
						max_load_pen1_1,max_load_pen1_2,max_load_pen2_1,max_load_pen2_2=0,0,0,0

					load_pen,load_pen2=0,0
					for j in range(len(depo_idx1)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
							if skv1_route[k].requestType=="DELIVERY":
								if skv1_route[k].custno[0] != "b":
									load_onbrd+=skv1_route[k].dem
									load_onbrd2+=skv1_route[k].dem2

						load_pen+=max(load_onbrd-veh1.cap,0)
						load_pen2+=max(load_onbrd2-veh1.cap2,0)
					for j in range(len(depo_idx2)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx2[j]+1,depo_idx2[j+1]):
							if skv2_route[k].requestType=="DELIVERY":
								if skv2_route[k].custno[0] != "b":
									load_onbrd+=skv2_route[k].dem
									load_onbrd2+=skv2_route[k].dem2

						load_pen+=max(load_onbrd-veh2.cap,0)
						load_pen2+=max(load_onbrd2-veh2.cap2,0)

					aload =load_pen+max_load_pen1_1+max_load_pen2_1
					aload2 = load_pen2+max_load_pen1_2+max_load_pen2_2
					
					#改善前後の到着時間算出(拠点を出発し最後の配送先での配送を終えて拠点に戻るまで(-l なしの場合))
					if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
						atime=0.0
						time_error = 0.0
					else:
						# #vehicle1の改善後arr計算
						# arr1, _ = calc_vehicle_arr_route(skv1_route, vehicle1, vehicle1.drskill, vehicle1.opskill, vehicle1.chg_batt_dict)
						# #vehicle2の改善後arr計算
						# arr2, _ = calc_vehicle_arr_route(skv2_route, vehicle2, vehicle2.drskill, vehicle2.opskill, vehicle2.chg_batt_dict)
						
						if argvs.opt_t_weight!=0:
							#改善後時間算出
							atime = lv1 + lv2
						else:
							atime=0.0

						mvehicles={veh1:0.0,veh2:0.0}
						mvehicles[veh1] = lv1-veh1.arr[0]
						mvehicles[veh2] = lv2-veh2.arr[0]

						if argvs.avetime_ape_flag==True:
							time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
						else:
							time_error=0.0
					
					if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
						visits_error = 0.0
					else:
						mvehicles={veh1:0.0,veh2:0.0}
						if argvs.bulkShipping_flag:
							mvehicles[veh1] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
							mvehicles[veh2] = len([c for r in skv2_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
						else:
							mvehicles[veh1] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])
							mvehicles[veh2] = len([i for i in range(1,len(skv2_route)-1) if skv2_route[i].custno!="0" and not skv2_route[i].custno.startswith("e") and not skv2_route[i].custno.startswith("b") and skv2_route[i].custno!=skv2_route[i-1].custno])

						if argvs.avevisits_ape_flag==True:
							visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
						else:
							visits_error=0.0

					if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
						dist_error = 0.0
					else:
						mvehicles={veh1:0.0,veh2:0.0}
						mvehicles[veh1] = veh1.totalcost+adist1-bdist1
						mvehicles[veh2] = veh2.totalcost+adist2-bdist2

						if argvs.avedist_ape_flag==True:
							dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
						else:
							dist_error=0.0
					
					#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
					if argvs.opt_unassigned_flag==True:
						if veh1.reserved_v_flag==True:
							aunass = len([c for c in skv1_route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
						if veh2.reserved_v_flag==True:
							aunass += len([c for c in skv2_route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

					ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907
					
					if ires_temp and cdiff<cdiff_best:
						ires=True
						cdiff_best=cdiff
						custs1_best,custs2_best=custs1[:],custs2[:]
						pick_opt_flag1_best,pick_opt_flag2_best=pick_opt_flag1,pick_opt_flag2
						v1_impc,v2_impc = veh1.vehno,veh2.vehno #改善が合ったらその車両番号を返す
						if argvs.break_flag:
							route1_best = skv1_route
							route2_best = skv2_route
							ttable_best = argvs.management_ttable
							dtable_best = argvs.management_dtable
							etable_best = argvs.management_etable
							xtable_best = argvs.management_xtable
							vehnos=[v.vehno for v in vehicles]
							vehicles[vehnos.index(veh1.vehno)].route = skv1_route
							vehicles[vehnos.index(veh2.vehno)].route = skv2_route
							t_route_best = r_backup(vehicles)

					if argvs.break_flag:
						argvs.management_ttable = t_dcopy(t_ttable)
						argvs.management_dtable = t_dcopy(t_dtable)
						argvs.management_etable = t_dcopy(t_etable)
						argvs.management_xtable = t_dcopy(t_xtable)
						vehicles = r_restore(vehicles, t_route, argvs)

	return ires,btpen,bload,bload2,v1_impc,v2_impc,custs1_best,custs2_best,pick_opt_flag1_best,pick_opt_flag2_best,route1_best,route2_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best
	###return ires

def relocate_cust_dtable(customers,vehicle,pos1,pos2,pick_opt_flag,index1,index2,route,argvs):
	#[0,1,...pos1-1,pos1,pos1+1,....,pos2-1,pos2,pos+1,...]
	if route!=None:
		#休憩機能あり
		vehicle.route = route
		vehicle.update_totalcost_dtable(argvs)
	else:
		#休憩機能なし
		vehicle.route[pos2],vehicle.route[pos1]=vehicle.route[pos1].additionalcust[index1],vehicle.route[pos2].additionalcust[index2]
		vehicle.update_totalcost_dtable(argvs)

		#集荷最適化
		if argvs.bulkShipping_flag==False and pick_opt_flag==True and vehicle.route[-2].custno!="0" and vehicle.route[-1].custno!="0":
			vehicle.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
		elif argvs.bulkShipping_flag==True and pick_opt_flag==True and vehicle.route[-2].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0":
			depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
			depo.customers.append(copy.deepcopy(customers[0].customers[0]))
			depo.servt=customers[0].servt
			depo.dem=customers[0].dem
			depo.dem2=customers[0].dem2
			depo.reje_ve=customers[0].reje_ve
			depo.parkt_open=customers[0].parkt_open
			depo.parkt_arrive=customers[0].parkt_arrive
			depo.depotservt=customers[0].depotservt
			depo.additionalcust=[depo]
			depo.demdivideunit=customers[0].demdivideunit
			depo.requestType=customers[0].requestType
			depo.deny_unass=customers[0].deny_unass #未割り当て荷物

			vehicle.insert_customer_at(-1,depo,argvs)
		elif (argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0") or \
			(argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0"):
			remove_customers_specified([vehicle.route[-2]],vehicle,argvs)

def relocate_addcust(customers,vehicles,vehicle,pos1,pos2,argvs,no_depo_parkt_flag,one_table_flag):
	exists_addcust = False

	if(pos1<1 or not(pos1<=pos2-2) or not((len(vehicle.route)-1)>=pos2+1)):
		return False

	if len(vehicle.route[pos1].additionalcust)==1 and len(vehicle.route[pos2].additionalcust)==1:
		return False

	if vehicle.route[pos1].custno[0]=="b" or vehicle.route[pos2].custno[0]=="b": #休憩スポットならスキップ
		return False

	if argvs.break_flag:
		pick_opt_flag, pick_opt_idx = get_pick_opt_status(vehicle, argvs)
		if pick_opt_flag==True and pos2==pick_opt_idx:
			return False
	else:
		pick_opt_flag=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].customers[0].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
			else:
				if vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break

		if pick_opt_flag==True and pos2==len(vehicle.route)-2 and vehicle.route[pos2].custno=="0":
			return False

	if argvs.delaystart2_flag==True: #休憩スポットが有効ならばdelayしない
		delay_arr_list=[[0 for i1 in range(len(vehicle.route[pos1].additionalcust))] for i2 in range(len(vehicle.route[pos2].additionalcust))]

		for i2 in range(len(vehicle.route[pos2].additionalcust)):
			for i1 in range(len(vehicle.route[pos1].additionalcust)):
				tv_route=copy.copy(vehicle.route)
				vehicle.route[pos1],vehicle.route[pos2]=vehicle.route[pos1].additionalcust[i1],vehicle.route[pos2].additionalcust[i2]
				vehicle.update_totalcost_dtable(argvs)

				delay_arr_time(vehicles,argvs)

				delay_arr_list[i2][i1]=vehicle.delay_arr[0]

				vehicle.route=tv_route
				vehicle.update_totalcost_dtable(argvs)
	else:
		delay_arr_list=[]

	#tv=copy.deepcopy(vehicle)
	tv = dcopy(vehicle)
	tv.load_pen=1e9 #大きい値を設定することで必ず１つは改善解が見つかる
	#tvehicles=copy.deepcopy(vehicles)
	tvehicles=[]
	for v in vehicles:
		tvehicles.append(dcopy(v))

	relocate_cust_dtable(customers,tv,pos1,pos2,pick_opt_flag,0,0,None,argvs)

	for i in range(len(tvehicles)):
		if tvehicles[i].vehno==tv.vehno:
			tvehicles[i]=tv
			break

	org_flag=True
	if argvs.lastc_flag==True:
		exists,atpen,aload,aload2,pick_opt_flag,index1,index2,delay_flag,route,ttable,dtable,etable,xtable,t_route = relocate_improved_lastc_dtable(customers,tvehicles,tv,pos1,pos2,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list,org_flag)
	else:
		exists,atpen,aload,aload2,pick_opt_flag,index1,index2,delay_flag,route,ttable,dtable,etable,xtable,t_route = relocate_improved_todepot_dtable(customers,tvehicles,tv,pos1,pos2,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list,org_flag)
	if(exists):
		if index1!=0 or index2!=0:
			exists_addcust = True
		##20180904
		tv_route=vehicle.route[:]
		if route!=None:
			t_ttable = t_dcopy(argvs.management_ttable)
			t_dtable = t_dcopy(argvs.management_dtable)
			t_etable = t_dcopy(argvs.management_etable)
			t_xtable = t_dcopy(argvs.management_xtable)
			argvs.management_ttable = t_dcopy(ttable)
			argvs.management_dtable = t_dcopy(dtable)
			argvs.management_etable = t_dcopy(etable)
			argvs.management_xtable = t_dcopy(xtable)
			vehicles = r_restore(vehicles, t_route, argvs)
			vehicle.route = route
		else:
			vehicle.route[pos1],vehicle.route[pos2]=vehicle.route[pos1].additionalcust[index2],vehicle.route[pos2].additionalcust[index1]
		vehicle.update_totalcost_dtable(argvs)

		if delay_flag:
			delay_arr_time2(vehicles,vehicles,argvs)

		depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]
		servt_dict={}
		for k in range(len(depo_idx)-1):
			servt_dict[vehicle.route[depo_idx[k]]]=0
			servt=0
			for j in range(depo_idx[k]+1,depo_idx[k+1]):
				if vehicle.route[j].requestType=="DELIVERY" and vehicle.route[j].custno[0]!='b':
					servt+=vehicle.route[j].depotservt
			if vehicle.route[depo_idx[k]+1].custno!="0":
				servt_dict[vehicle.route[depo_idx[k]]]+=servt+vehicle.depotservt
			else:
				servt_dict[vehicle.route[depo_idx[k]]]+=servt
		#集荷時間
		servt_dict[vehicle.route[len(vehicle.route)-1]]=0
		for k in range(1,len(depo_idx)):
			servt=0
			for j in range(depo_idx[k-1]+1,depo_idx[k]):
				if vehicle.route[j].requestType=="PICKUP":
					servt+=vehicle.route[j].depotservt
			servt_dict[vehicle.route[depo_idx[k]]]+=servt

		load=[0 for c in vehicle.route]
		load2=[0 for c in vehicle.route]
		for i in range(len(vehicle.route)-1):
			if i in depo_idx:
				for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
					if vehicle.route[j].requestType=="DELIVERY":
						if vehicle.route[j].custno[0] != "b":
							load[i]+=vehicle.route[j].dem
							load2[i]+=vehicle.route[j].dem2
			else:
				if vehicle.route[i].custno[0] != "b":
					if vehicle.route[i].requestType=="DELIVERY":
						load[i]=load[i-1]-vehicle.route[i].dem
						load2[i]=load2[i-1]-vehicle.route[i].dem2
					else:
						load[i]=load[i-1]+vehicle.route[i].dem
						load2[i]=load2[i-1]+vehicle.route[i].dem2

		for i in reversed(range(len(load))):
			if i in depo_idx and i+1 in depo_idx:
				load[i]=load[i+1]
				load2[i]=load2[i+1]

		load=[i if i>1e-9 else 0 for i in load] #誤差対策
		load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

		no_park_idx=[]
		for c in vehicle.route[depo_idx[0]+1:depo_idx[1]]:
			if c.requestType=="DELIVERY":
				break
		else:
			if load[0]==0 and load2[0]==0:
				no_park_idx.append(0)
		
		for i in range(1,len(depo_idx)-1):
			if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
				for c in vehicle.route[depo_idx[i]+1:depo_idx[i+1]]:
					if c.requestType=="DELIVERY":
						break
				else:
					if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
						no_park_idx.append(depo_idx[i])
		if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
			no_park_idx.append(depo_idx[-1])

		if argvs.break_flag:
			pick_opt_flag=get_pick_opt_status(vehicle, argvs)[0]
		else:
			pick_opt_flag=False
			non_depo=False
			if argvs.pickup_flag==True:
				for i in reversed(range(1,len(vehicle.route)-1)):
					if argvs.bulkShipping_flag==True:
						if vehicle.route[i].customers[0].custno!="0":
							if vehicle.route[i].customers[0].custno[0]!="b":
								non_depo=True
								if vehicle.route[i].customers[0].requestType=="PICKUP":
									pick_opt_flag=True
									break
						elif non_depo==True:
							break
					else:
						if vehicle.route[i].custno!="0":
							if vehicle.route[i].custno[0]!="b":
								non_depo=True
								if vehicle.route[i].requestType=="PICKUP":
									pick_opt_flag=True
									break
						elif non_depo==True:
							break

		if check_impassability(customers,vehicle,vehicle.lv[0],1,servt_dict,len(vehicle.route),no_park_idx,pick_opt_flag,argvs)[0]==False:
			vehicle.route=tv_route[:]
			argvs.management_ttable = t_ttable
			argvs.management_dtable = t_dtable
			argvs.management_etable = t_etable
			argvs.management_xtable = t_xtable
			vehicle.update_totalcost_dtable(argvs)
			return False

		#現在(=最新)のatpenとaloadとAPEを保存する
		if argvs.lastc_flag:
			for i in reversed(range(0,len(vehicle.route))):
				if vehicle.route[i].custno=="0" or vehicle.route[i].custno[0]=="b" or vehicle.route[i].custno[0]=="e" or i==len(vehicle.route)-1:
					last_idx=i
				else:
					break
			vehicle.time_pen=sum([max(0.0,vehicle.st[i]-vehicle.route[i].due_fs) for i in range(1,last_idx)])+max(0.0,vehicle.lv[last_idx-1]-vehicle.endhour)
		else:
			vehicle.time_pen=sum([max(0.0,vehicle.st[i]-vehicle.route[i].due_fs) for i in range(1,len(vehicle.route))])+max(0.0,vehicle.lv[-1]-vehicle.endhour)

		if argvs.pickup_flag==True:
			max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(vehicle.route,vehicle)
		else:
			max_load_pen,max_load_pen2=0,0

		depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]

		load_pen,load_pen2=0,0
		for j in range(len(depo_idx)-1):
			load_onbrd,load_onbrd2=0,0
			for k in range(depo_idx[j]+1,depo_idx[j+1]):
				if vehicle.route[k].requestType=="DELIVERY":
					if vehicle.route[k].custno[0] != "b":
						load_onbrd+=vehicle.route[k].dem
						load_onbrd2+=vehicle.route[k].dem2

			load_pen+=max(load_onbrd-vehicle.cap,0)
			load_pen2+=max(load_onbrd2-vehicle.cap2,0)

		vehicle.load_pen =load_pen+max_load_pen
		vehicle.load_pen2 = load_pen2+max_load_pen2
		argvs.atpen=sum([v.time_pen for v in vehicles])
		argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehicles])
		if argvs.avetime_ape_flag==True:
			argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
		elif argvs.avetime_ae_flag==True:
			argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

		if argvs.avevisits_ape_flag==True:
			argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
		elif argvs.avevisits_ae_flag==True:
			argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

		if argvs.avedist_ape_flag==True:
			argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
		elif argvs.avedist_ae_flag==True:
			argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

		#違反なしのrouteを保存する
		backup_route(vehicles, argvs)

	return exists_addcust


# daic ttableを追加(元はグローバル変数にアクセスしていた)
def relocate_dtable(customers,vehicles,lastc_flg,ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag): #20180807
	sLogBuf = "\n"
	#exists=True
	exists=False
	improved_cnt=0
	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
	if len([(v,i1,i2) for v in vehicles \
		for i1,i2 in combinations(range(1,len(v.route)),2) \
		if v.direct_flag==False])==0:
					#exists=False
					return improved_cnt
	#while(exists):
	while True:
		exists=False
		exists_addcust=False
		# #平準化高速化の為のソート
		# sorted_vehicles = vehicles[:]
		# if argvs.avedist_ape_flag or argvs.avedist_ae_flag:
		# 	derrs = [0 for v in sorted_vehicles]
		# 	if argvs.avedist_ape_flag:
		# 		derrs = calc_avedist_APE_list(sorted_vehicles, argvs.avedist_ape, argvs.lastc_flag)
		# 	else:
		# 		derrs = calc_avedist_AE_list(sorted_vehicles, argvs.avedist_ae, argvs.lastc_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, derrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# if argvs.avevisits_ape_flag or argvs.avevisits_ae_flag:
		# 	verrs = [0 for v in sorted_vehicles]
		# 	if argvs.avevisits_ape_flag:
		# 		verrs = calc_avevisits_APE_list(sorted_vehicles, argvs.avevisits_ape, argvs.bulkShipping_flag)
		# 	else:
		# 		verrs = calc_avevisits_AE_list(sorted_vehicles, argvs.avevisits_ae, argvs.bulkShipping_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, verrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# if argvs.avetime_ape_flag or argvs.avetime_ae_flag:
		# 	terrs = [0 for v in sorted_vehicles]
		# 	if argvs.avetime_ape_flag:
		# 		terrs = calc_avetime_APE_list(sorted_vehicles, argvs.avetime_ape, argvs.lastc_flag)
		# 	else:
		# 		terrs = calc_avetime_AE_list(sorted_vehicles, argvs.avetime_ae, argvs.lastc_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, terrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# for v in sorted_vehicles:
		for v in vehicles:
			if v.direct_flag==False:
				for i1,i2 in combinations(range(1,len(v.route)),2):
					dtable_endtime=time.time() ##20190917
					##dtable_endtime=time.clock() ##20180807
					##20190903
					if argvs.outputstime > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
						sLogBuf += "output_middle relocate\n"
						outputs_middle(customers,vehicles,argvs)
						argvs.outputs_count+=1
					while True:
						if argvs.outputstime > 0.0 and (dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
							argvs.outputs_count+=1
						else:
							break
					##20190903
					if argvs.timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.timeout):  ##20180807
						sLogBuf += "relocate timeout!\n" #20180807
						break #20180807

					exists_addcust_tmp = relocate_addcust(customers,vehicles,v,i1,i2,argvs,no_depo_parkt_flag,one_table_flag)
					if exists_addcust_tmp:
						exists_addcust = True
						improved_cnt=improved_cnt+1

					if argvs.delaystart2_flag==True and argvs.break_flag==False and i2<len(v.route) and (len(v.route[i1].additionalcust)>1 or len(v.route[i2].additionalcust)>1):
						delay_arr_list=[[0 for i in range(len(v.route[i2].additionalcust))] for j in range(len(v.route[i1].additionalcust))]

						tv_route=v.route[:]
						for j in range(len(tv_route[i2].additionalcust)):
							for i in range(len(tv_route[i1].additionalcust)):
								v.route[i1],v.route[i2]=v.route[i2].additionalcust[j],v.route[i1].additionalcust[i]
								v.update_totalcost_dtable(argvs)

								delay_arr_time([v],argvs)

								delay_arr_list[i][j]=v.delay_arr[0]

								v.route=tv_route[:]
								v.update_totalcost_dtable(argvs)
					else:
						delay_arr_list=[]

					if lastc_flg==True:
						exists,atpen,aload,aload2,pick_opt_flag,index1,index2,delay_flag,route,ttable,dtable,etable,xtable,t_route=relocate_improved_lastc_dtable(customers,vehicles,v,i1,i2,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list)
					else:
						exists,atpen,aload,aload2,pick_opt_flag,index1,index2,delay_flag,route,ttable,dtable,etable,xtable,t_route=relocate_improved_todepot_dtable(customers,vehicles,v,i1,i2,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list)
					if(exists):
						##20180904
						tv_route=v.route[:]
						if route!=None:
							t_ttable = t_dcopy(argvs.management_ttable)
							t_dtable = t_dcopy(argvs.management_dtable)
							t_etable = t_dcopy(argvs.management_etable)
							t_xtable = t_dcopy(argvs.management_xtable)
							argvs.management_ttable = t_dcopy(ttable)
							argvs.management_dtable = t_dcopy(dtable)
							argvs.management_etable = t_dcopy(etable)
							argvs.management_xtable = t_dcopy(xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
						relocate_cust_dtable(customers,v,i1,i2,pick_opt_flag,index1,index2,route,argvs)
						if argvs.delaystart2_flag==True and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
							delay_arr_time2(vehicles,[v],argvs)

						depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
						servt_dict={}
						for k in range(len(depo_idx)-1):
							servt_dict[v.route[depo_idx[k]]]=0
							servt=0
							for j in range(depo_idx[k]+1,depo_idx[k+1]):
								if v.route[j].requestType=="DELIVERY" and v.route[j].custno!=v.route[j-1].custno and v.route[j].custno[0]!='b':
									servt+=v.route[j].depotservt
							if v.route[depo_idx[k]+1].custno!="0":
								servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
							else:
								servt_dict[v.route[depo_idx[k]]]+=servt
						#集荷時間
						servt_dict[v.route[len(v.route)-1]]=0
						for k in range(1,len(depo_idx)):
							servt=0
							for j in range(depo_idx[k-1]+1,depo_idx[k]):
								if v.route[j].requestType=="PICKUP" and v.route[j].custno!=v.route[j-1].custno:
									servt+=v.route[j].depotservt
							servt_dict[v.route[depo_idx[k]]]+=servt

						load=[0 for c in v.route]
						load2=[0 for c in v.route]
						for i in range(len(v.route)-1):
							if i in depo_idx:
								for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
									if v.route[j].requestType=="DELIVERY":
										if v.route[j].custno[0] != "b":
											load[i]+=v.route[j].dem
											load2[i]+=v.route[j].dem2
							else:
								if v.route[i].custno[0] != "b":
									if v.route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-v.route[i].dem
										load2[i]=load2[i-1]-v.route[i].dem2
									else:
										load[i]=load[i-1]+v.route[i].dem
										load2[i]=load2[i-1]+v.route[i].dem2

						for i in reversed(range(len(load))):
							if i in depo_idx and i+1 in depo_idx:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx=[]
						for c in v.route[depo_idx[0]+1:depo_idx[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx.append(0)
						
						for i in range(1,len(depo_idx)-1):
							if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
								for c in v.route[depo_idx[i]+1:depo_idx[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
										no_park_idx.append(depo_idx[i])
						if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
							no_park_idx.append(depo_idx[-1])

						if argvs.break_flag:
							pick_opt_flag=get_pick_opt_status(v, argvs)[0]
						else:
							pick_opt_flag=False
							non_depo=False
							if argvs.pickup_flag==True:
								for i in reversed(range(1,len(v.route)-1)):
									if argvs.bulkShipping_flag==True:
										if v.route[i].customers[0].custno!="0":
											if v.route[i].customers[0].custno[0]!="b":
												non_depo=True
												if v.route[i].customers[0].requestType=="PICKUP":
													pick_opt_flag=True
													break
										elif non_depo==True:
											break
									else:
										if v.route[i].custno!="0":
											if v.route[i].custno[0]!="b":
												non_depo=True
												if v.route[i].requestType=="PICKUP":
													pick_opt_flag=True
													break
										elif non_depo==True:
											break

						if check_impassability(customers,v,v.lv[0],1,servt_dict,len(v.route),no_park_idx,pick_opt_flag,argvs)[0]==False:
							if argvs.break_flag:
								argvs.management_ttable = t_ttable
								argvs.management_dtable = t_dtable
								argvs.management_etable = t_etable
								argvs.management_xtable = t_xtable
							v.route=tv_route[:]
							v.update_totalcost_dtable(argvs)
							continue
						if exists_addcust_tmp==False:
							improved_cnt=improved_cnt+1
						
						#現在(=最新)のatpenとaloadとAPEを保存する
						if argvs.lastc_flag:
							for i in reversed(range(0,len(v.route))):
								if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
									last_idx=i
								else:
									break
							v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,last_idx) if v.route[i].custno!=v.route[i-1].custno])+max(0.0,v.lv[last_idx-1]-v.endhour)
						else:
							v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,len(v.route)) if v.route[i].custno!=v.route[i-1].custno])+max(0.0,v.lv[-1]-v.endhour)

						if argvs.pickup_flag==True:
							max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v.route,v)
						else:
							max_load_pen,max_load_pen2=0,0

						depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx[j]+1,depo_idx[j+1]):
								if v.route[k].requestType=="DELIVERY":
									if v.route[k].custno[0] != "b":
										load_onbrd+=v.route[k].dem
										load_onbrd2+=v.route[k].dem2

							load_pen+=max(load_onbrd-v.cap,0)
							load_pen2+=max(load_onbrd2-v.cap2,0)

						v.load_pen =load_pen+max_load_pen
						v.load_pen2 = load_pen2+max_load_pen2
						argvs.atpen=sum([v.time_pen for v in vehicles])
						argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehicles])
						if argvs.avetime_ape_flag==True:
							argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

						if argvs.avevisits_ape_flag==True:
							argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

						if argvs.avedist_ape_flag==True:
							argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

						#違反なしのrouteを保存する
						backup_route(vehicles, argvs)

						if lastc_flg==True:
							tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
						else:
							tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
						#tresult.output_improved_solution(customers,vehicles,tcost,lastc_flg) #daic
						break
				else:
					continue
				break
					
		if exists==False and exists_addcust==False:
			break

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return improved_cnt

# def relocate_dtable_mp(customers,vehicles,lastc_flg,ls_d_starttime,timeout,argvs): #20190917
# 	sLogBuf = "\n"
# 	#exists=True
# 	exists=False
# 	improved_cnt=0
# 	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
# 	if len([(v,i1,i2) for v in vehicles \
# 				for i1 in range(1,len(v.route)) for i2 in range(1,len(v.route)) \
# 				if i1!=i2])==0:
# 					#exists=False
# 					return improved_cnt,vehicles
# 	#while(exists):
# 	while True:
# 		exists=False
# 		for v,i1,i2 in [(v,i1,i2) for v in vehicles \
# 					for i1 in range(1,len(v.route)) for i2 in range(1,len(v.route)) \
# 					if i1!=i2]:

# 			dtable_endtime=time.time() ##20190917
# 			##dtable_endtime=time.clock() ##20180807
# 			if timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > timeout):  ##20180807
# 				sLogBuf += "relocate_mp timeout!\n" #20180807
# 				break #20180807

# 			if lastc_flg==True:
# 				exists,atpen,aload,aload2=relocate_improved_lastc_dtable(customers,vehicles,v,i1,i2,argvs)
# 			else:
# 				exists,atpen,aload,aload2=relocate_improved_todepot_dtable(customers,vehicles,v,i1,i2,argvs)
# 			if(exists):
# 				##20180904
# 				improved_cnt=improved_cnt+1
# 				relocate_cust_dtable(v,i1,i2,argvs)

# 				#現在(=最新)のatpenとaloadとAPEを保存する
# 				argvs.atpen = atpen
# 				argvs.aload = aload
# 				v.time_pen = atpen
# 				v.load_pen = aload
# 				if argvs.avetime_ape_flag==True:
# 					argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag)
# 				elif argvs.avetime_ae_flag==True:
# 					argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag)

# 				if argvs.avevisits_ape_flag==True:
# 					argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag)
# 				elif argvs.avevisits_ae_flag==True:
# 					argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag)

# 				#違反なしのrouteを保存する
# 				backup_route(vehicles, argvs)

# 				if lastc_flg==True:
# 					tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
# 				else:
# 					tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
# 				#tresult.output_improved_solution(customers,vehicles,tcost,lastc_flg) #daic
# 				break
					
# 		if(exists==False):
# 			break

# 	if sLogBuf != "\n":
# 		if rank==0:
# 			logging.log(logging.INFO,sLogBuf)

# 	return improved_cnt,vehicles

######################
def relocate_improved_todepot_dtable(customers,vehicles,vehicle,pos1,pos2,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list,org_flag=False):
	ires=False
	index1,index2=0,0
	delay_lcnt_best=0
	pick_opt_flag_best=False
	cdiff_best=0
	route_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if vehicle.route[pos1].custno=="0" and vehicle.route[pos2].custno=="0": #デポ同士ならスキップ
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if vehicle.route[pos1].custno[0]=="b" or vehicle.route[pos2].custno[0]=="b": #休憩スポットならスキップ
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if(pos1<1 or not(pos1<=pos2-2) or not((len(vehicle.route)-1)>=pos2+1)):
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化
		if free_or_additive(vehicle.route[pos1],vehicle,vehicles,argvs)=="additive" and free_or_additive(vehicle.route[pos2],vehicle,vehicles,argvs)=="additive": #条件2同士ならスキップ
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" and vehicle.load_pen!=1e9: #条件2が他の便に移るならスキップ
			rotate_idx={}
			idx=0
			for i in range(len(vehicle.route)-1):
				if vehicle.route[i].custno=="0" and vehicle.route[i+1].custno!="0":
					idx+=1
				elif vehicle.route[i].changecust=="additive" and (argvs.opt_unassigned_flag==False or vehicle.route[i].custno in argvs.initroute[vehicle.vehno]) and vehicle.route[i].custno!="0" and vehicle.route[i].custno[0]!="b":
					rotate_idx[vehicle.route[i]]=idx

			skv1_route_temp = vehicle.route[:]											# ルート全体をコピー
			skv1_route_temp[pos2],skv1_route_temp[pos1]=skv1_route_temp[pos1],skv1_route_temp[pos2]	# ルート入替

			idx=0
			for i in range(len(skv1_route_temp)-1):
				if in_additive(skv1_route_temp[i],vehicle,skv1_route_temp,vehicles,argvs)==False:
					return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	else:
		#未割り当て荷物最適化ではない、または、予約車両ではない
		if vehicle.route[pos1].changecust=="additive" and vehicle.route[pos2].changecust=="additive": #条件2同士ならスキップ
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" and vehicle.load_pen!=1e9: #条件2が他の便に移るならスキップ
			rotate_idx={}
			idx=0
			for i in range(len(vehicle.route)-1):
				if vehicle.route[i].custno=="0" and vehicle.route[i+1].custno!="0":
					idx+=1
				elif vehicle.route[i].changecust=="additive" and vehicle.route[i].custno!="0" and vehicle.route[i].custno[0]!="b":
					rotate_idx[vehicle.route[i]]=idx

			skv1_route_temp = vehicle.route[:]											# ルート全体をコピー
			skv1_route_temp[pos2],skv1_route_temp[pos1]=skv1_route_temp[pos1],skv1_route_temp[pos2]	# ルート入替

			idx=0
			for i in range(len(skv1_route_temp)-1):
				if skv1_route_temp[i].custno=="0" and skv1_route_temp[i+1].custno!="0":
					idx+=1
				elif skv1_route_temp[i].changecust=="additive" and skv1_route_temp[i].custno!="0" and skv1_route_temp[i].custno[0]!="b":
					if rotate_idx[skv1_route_temp[i]]!=idx:
						return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.init_changecust=="additive" and (vehicle.route[pos1].changecust=="additive" or vehicle.route[pos2].changecust=="additive"): #条件2の順番が変わるならスキップ
			for c in vehicle.route[pos1+1:pos2]:
				if c.changecust=="additive" and c.custno!="0" and c.custno[0]!="b":
					return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	#集荷最適化の場合DEPOは改善対象外
	if argvs.break_flag:
		pick_opt_flag, pick_opt_idx = get_pick_opt_status(vehicle, argvs)
		if pick_opt_flag==True and pos2>=pick_opt_idx:
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	else:
		pick_opt_flag=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].customers[0].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
			else:
				if vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break

		if pick_opt_flag==True and pos2==len(vehicle.route)-2:
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]
	for i in range(len(depo_idx)-1):
		if depo_idx[i]<pos1 and pos1<=depo_idx[i+1]:
			start_idx=depo_idx[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and delay_arr_list==[] and argvs.break_flag==False:
		start_idx=pos1-1
	if delay_arr_list!=[]:
		start_idx=0

	n=len(vehicle.route)
	bdist,adist,btpen,atpen,bpower,bunass,apower,bexp,aexp,aload,aload2,aunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
	for i in range(start_idx,n):
		if i==0 or (argvs.bulkShipping_flag==False and (vehicle.route[i-1].custno!=vehicle.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (vehicle.route[i-1].customers[0].custno!=vehicle.route[i].customers[0].custno)):
			btpen+=max(0.0,vehicle.st[i]-vehicle.route[i].due_fs)
	btpen+=max(0.0,vehicle.lv[n-1]-vehicle.endhour)

	##kaizen mae no final arrive time
	bvfinal_t=vehicle.lv[n-1]
	##

	if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist=calc_dist(vehicle,start_idx+1,len(vehicle.route),argvs)
		if argvs.management_etable:
			bpower=calc_power(vehicle,start_idx+1,len(vehicle.route),argvs)
		if argvs.management_xtable:
			bexp=calc_exp(vehicle,start_idx+1,len(vehicle.route),argvs)
	else:
		bdist=get_dtable(vehicle.vtype, vehicle.lv[pos1-1], argvs.management_dtable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_dtable(vehicle.vtype, vehicle.lv[pos1], argvs.management_dtable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_dtable(vehicle.vtype, vehicle.lv[pos2-1], argvs.management_dtable)[vehicle.route[pos2-1].spotno][vehicle.route[pos2].spotno] \
			+get_dtable(vehicle.vtype, vehicle.lv[pos2], argvs.management_dtable)[vehicle.route[pos2].spotno][vehicle.route[pos2+1].spotno]
		if argvs.management_etable:
			bpower=get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1-1], argvs.management_etable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1], argvs.management_etable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos2-1], argvs.management_etable)[vehicle.route[pos2-1].spotno][vehicle.route[pos2].spotno] \
			+get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos2], argvs.management_etable)[vehicle.route[pos2].spotno][vehicle.route[pos2+1].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(vehicle.vtype, vehicle.lv[pos1-1], argvs.management_xtable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_xtable(vehicle.vtype, vehicle.lv[pos1], argvs.management_xtable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_xtable(vehicle.vtype, vehicle.lv[pos2-1], argvs.management_xtable)[vehicle.route[pos2-1].spotno][vehicle.route[pos2].spotno] \
			+get_xtable(vehicle.vtype, vehicle.lv[pos2], argvs.management_xtable)[vehicle.route[pos2].spotno][vehicle.route[pos2+1].spotno]

	bload = vehicle.load_pen
	bload2 = vehicle.load_pen2

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = vehicle.lv[-1]
	else:
		btime=0.0

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
		bunass = len([c for c in vehicle.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	if delay_arr_list!=[]:
		delay_lcnt=2
	else:
		delay_lcnt=1

	takebreak_list1 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in vehicle.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for i1 in range(len(vehicle.route[pos1].additionalcust)):
		if free_or_additive(vehicle.route[pos1],vehicle,vehicles,argvs)=="additive" and i1!=0:
			continue
		for i2 in range(len(vehicle.route[pos2].additionalcust)):
			if free_or_additive(vehicle.route[pos2],vehicle,vehicles,argvs)=="additive" and i2!=0:
				continue
			for i3 in range(len(takebreak_list1)):
				for lcnt in range(delay_lcnt):
					adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
					btpen_temp=btpen
					atpen_temp=0
					#変更後に訪問数上限を超えていたらFalseを返す
					v_spotid=[c.spotid for c in vehicle.route]
					v_spotid[pos1],v_spotid[pos2]=vehicle.route[pos2].additionalcust[i2].spotid,vehicle.route[pos1].additionalcust[i1].spotid
					#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([c for c in v_spotid[1:-1] if c=="0"])
					# visitnum=calc_visitnum(v_spotid)
					# if vehicle.maxvisit>0 and visitnum>vehicle.maxvisit:
					# 	continue

					
					skv1_route = vehicle.route[:]
					skv1_route[pos1],skv1_route[pos2]=skv1_route[pos2].additionalcust[i2],skv1_route[pos1].additionalcust[i1]	# ルート入替

					visitnum=calc_visitnum(skv1_route)
					if vehicle.maxvisit>0 and visitnum>vehicle.maxvisit:
						continue

					depo_idx=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[skv1_route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno and skv1_route[depo_idx[k]+1].custno[0]!="b":
								servt+=skv1_route[j].depotservt
						if skv1_route[depo_idx[k]+1].custno!="0":
							servt_dict[skv1_route[depo_idx[k]]]+=servt+vehicle.depotservt
						else:
							servt_dict[skv1_route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[skv1_route[len(skv1_route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv1_route[j].depotservt
						servt_dict[skv1_route[depo_idx[k]]]+=servt
							

					load=[0 for c in skv1_route]
					load2=[0 for c in skv1_route]
					for i in range(len(skv1_route)-1):
						if i in depo_idx:
							for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
								if skv1_route[j].requestType=="DELIVERY":
									if skv1_route[j].custno[0] != "b":
										load[i]+=skv1_route[j].dem
										load2[i]+=skv1_route[j].dem2
						else:
							if skv1_route[i].custno[0] != "b":
								if skv1_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv1_route[i].dem
									load2[i]=load2[i-1]-skv1_route[i].dem2
								else:
									load[i]=load[i-1]+skv1_route[i].dem
									load2[i]=load2[i-1]+skv1_route[i].dem2

					for i in reversed(range(len(load))):
						if i in depo_idx and i+1 in depo_idx:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx=[]
					for c in skv1_route[depo_idx[0]+1:depo_idx[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx.append(0)
					
					for i in range(1,len(depo_idx)-1):
						if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
							for c in skv1_route[depo_idx[i]+1:depo_idx[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
									no_park_idx.append(vehicle.route.index(skv1_route[depo_idx[i]]))
					if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
						no_park_idx.append(vehicle.route.index(skv1_route[depo_idx[-1]]))

					pick_opt_flag=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv1_route)-1)):
							if skv1_route[i].custno!="0":
								if skv1_route[i].custno[0]!="b":
									non_depo=True
									if skv1_route[i].requestType=="PICKUP":
										pick_opt_flag=True
										break
							elif non_depo==True:
								break

					if argvs.break_flag==False:
						#### ここから休憩機能なし用の処理 ####
						if lcnt==0:
							if vehicle.route[start_idx] in servt_dict:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)
							else:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)
						else:
							if vehicle.route[start_idx] in servt_dict:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)
							else:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)
						if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
							lv_t+=vehicle.route[start_idx].parkt_open	
						if start_idx==0 or vehicle.route[start_idx-1].custno!="0" or vehicle.route[start_idx].custno!="0": #デポが連続しない場合
							atpen += max(0.0, st_t-vehicle.route[start_idx].due_fs)
						arr_t=vehicle.arr[start_idx]

						if start_idx!=0 and vehicle.route[start_idx].custno==vehicle.route[start_idx-1].custno and vehicle.route[start_idx].custno!="0":
							lv_t=vehicle.lv[start_idx-1]
							arr_t=vehicle.arr[start_idx-1]	

						impassable=True
						for i in range(start_idx,pos1-1):
							from_c,to_c=vehicle.route[i],vehicle.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable1 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							ttable2 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable1 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable1 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable2[from_c.spotno][to_c.spotno]==-1 or \
							dtable1[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable1[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable1[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable2[from_c.spotno][to_c.spotno]*vehicle.drskill
							if to_c in servt_dict:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict[to_c]*vehicle.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict[to_c]*vehicle.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*vehicle.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*vehicle.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable1[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable1[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable1[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if vehicle.route[pos1-1].custno!=vehicle.route[pos2].additionalcust[i2].custno or vehicle.route[pos2].additionalcust[i2].custno=="0":
							dtable3 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable3 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							#変更後に通行不可能ならFalseを返す
							ttable3 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if ttable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]==-1 or \
								dtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]==-1 or \
								(argvs.management_etable and etable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]==-1) or \
								(argvs.management_xtable and xtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]==-1):
								continue

							adist+=dtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]
							if argvs.management_etable:
								apower+=etable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]
							if argvs.management_xtable:
								aexp+=xtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]

							arr_t=lv_t+ttable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]*vehicle.drskill
							if vehicle.route[pos2].additionalcust[i2] in servt_dict:
								if vehicle.route[pos2].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos2 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos2].additionalcust[i2].parkt_arrive,vehicle.route[pos2].additionalcust[i2].ready_fs)+servt_dict[vehicle.route[pos2].additionalcust[i2]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos2].additionalcust[i2].parkt_arrive,vehicle.route[pos2].additionalcust[i2].ready_fs)+vehicle.route[pos2].additionalcust[i2].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos2].additionalcust[i2].ready_fs)+servt_dict[vehicle.route[pos2].additionalcust[i2]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos2].additionalcust[i2].ready_fs)
							else:
								if vehicle.route[pos2].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos2 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos2].additionalcust[i2].parkt_arrive,vehicle.route[pos2].additionalcust[i2].ready_fs)+vehicle.route[pos2].additionalcust[i2].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos2].additionalcust[i2].parkt_arrive,vehicle.route[pos2].additionalcust[i2].ready_fs)+vehicle.route[pos2].additionalcust[i2].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos2].additionalcust[i2].ready_fs)+vehicle.route[pos2].additionalcust[i2].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos2].additionalcust[i2].ready_fs)
							if vehicle.route[pos2].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos2 in no_park_idx:
								lv_t+=vehicle.route[pos2].additionalcust[i2].parkt_open
							if vehicle.route[pos1-1].custno!="0" or vehicle.route[pos2].additionalcust[i2].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[pos2].additionalcust[i2].due_fs)

						if vehicle.route[pos2].additionalcust[i2].custno!=vehicle.route[pos1+1].custno or vehicle.route[pos1+1].custno=="0":
							ttable5 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							dtable5 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable5 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable5 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]==-1 or \
								dtable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]==-1 or \
								(argvs.management_etable and etable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]==-1) or \
								(argvs.management_xtable and xtable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]==-1):
								continue

							adist+=dtable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]
							if argvs.management_etable:
								apower+=etable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]
							if argvs.management_xtable:
								aexp+=xtable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]

							arr_t=lv_t+ttable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]*vehicle.drskill
							if vehicle.route[pos1+1] in servt_dict:
								if vehicle.route[pos1+1].spotid!=vehicle.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1+1].parkt_arrive,vehicle.route[pos1+1].ready_fs)+servt_dict[vehicle.route[pos1+1]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1+1].parkt_arrive,vehicle.route[pos1+1].ready_fs)+vehicle.route[pos1+1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1+1].ready_fs)+servt_dict[vehicle.route[pos1+1]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1+1].ready_fs)
							else:
								if vehicle.route[pos1+1].spotid!=vehicle.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1+1].parkt_arrive,vehicle.route[pos1+1].ready_fs)+vehicle.route[pos1+1].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1+1].parkt_arrive,vehicle.route[pos1+1].ready_fs)+vehicle.route[pos1+1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1+1].ready_fs)+vehicle.route[pos1+1].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1+1].ready_fs)
							if vehicle.route[pos1+1].spotid!=vehicle.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx:
								lv_t+=vehicle.route[pos1+1].parkt_open
							lv1=lv_t
							if vehicle.route[pos2].additionalcust[i2].custno!="0" or vehicle.route[pos1+1].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[pos1+1].due_fs)

						impassable=True
						for i in range(pos1+1,pos2-1):
							if vehicle.route[i].custno==vehicle.route[i+1].custno and vehicle.route[i+1].custno!="0":
								continue

							ttable8 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								dtable8 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable8 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable8 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

								if ttable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]==-1 or \
									dtable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]==-1 or \
									(argvs.management_etable and etable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]==-1) or \
									(argvs.management_xtable and xtable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]==-1):
									impassable=False
									break

								adist+=dtable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]
								if argvs.management_etable:
									apower+=etable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]

							arr_t=lv_t+ttable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]*vehicle.drskill
							if vehicle.route[i+1] in servt_dict:
								if vehicle.route[i+1].spotid!=vehicle.route[i].spotid and not i+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[i+1].parkt_arrive,vehicle.route[i+1].ready_fs)+servt_dict[vehicle.route[i+1]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[i+1].parkt_arrive,vehicle.route[i+1].ready_fs)+vehicle.route[i+1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[i+1].ready_fs)+servt_dict[vehicle.route[i+1]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[i+1].ready_fs)
							else:
								if vehicle.route[i+1].spotid!=vehicle.route[i].spotid and not i+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[i+1].parkt_arrive,vehicle.route[i+1].ready_fs)+vehicle.route[i+1].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[i+1].parkt_arrive,vehicle.route[i+1].ready_fs)+vehicle.route[i+1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[i+1].ready_fs)+vehicle.route[i+1].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[i+1].ready_fs)
							if vehicle.route[i+1].spotid!=vehicle.route[i].spotid and not i+1 in no_park_idx:
								lv_t+=vehicle.route[i+1].parkt_open

							if vehicle.route[i].custno!="0" or vehicle.route[i+1].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[i+1].due_fs)
						if impassable==False:
							continue

						if vehicle.route[pos2-1].custno!=vehicle.route[pos1].additionalcust[i1].custno or vehicle.route[pos1].additionalcust[i1].custno=="0":
							ttable6 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							dtable6 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable6 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable6 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1 or \
								dtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1 or \
								(argvs.management_etable and etable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1) or \
								(argvs.management_xtable and xtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1):
								continue

							adist+=dtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]
							if argvs.management_etable:
								apower+=etable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]
							if argvs.management_xtable:
								aexp+=xtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]

							arr_t=lv_t+ttable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]*vehicle.drskill
							if vehicle.route[pos1].additionalcust[i1] in servt_dict:
								if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos2-1].spotid and not pos1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+servt_dict[vehicle.route[pos1].additionalcust[i1]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)+servt_dict[vehicle.route[pos1].additionalcust[i1]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)
							else:
								if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos2-1].spotid and not pos1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)
							if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos2-1].spotid and not pos1 in no_park_idx:
								lv_t+=vehicle.route[pos1].additionalcust[i1].parkt_open
							
							if vehicle.route[pos2-1].custno!="0" or vehicle.route[pos1].additionalcust[i1].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[pos1].additionalcust[i1].due_fs)

						ttable7 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
						dtable7 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable7 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable7 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

						if (argvs.bulkShipping_flag==False and pos2+1==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].custno!="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==True) or \
							(argvs.bulkShipping_flag==True and pos2+1==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==True): #集荷最適化
							if ttable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
							dtable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
							(argvs.management_etable and etable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1) or \
							(argvs.management_xtable and xtable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1):
								continue

							adist+=dtable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]
							if argvs.management_etable:
								apower+=etable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]

							arr_t=lv_t+ttable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]*vehicle.drskill
							st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
							atpen+=max(0.0,st_t-customers[0].due_fs)
							lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[vehicle.route[pos2+1]]+vehicle.depotservt)*vehicle.opskill
							lv_t+=customers[0].parkt_open

							ttable10 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							dtable9 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable9 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable9 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable10[customers[0].spotno][vehicle.route[pos2+1].spotno]==-1 or \
								dtable9[customers[0].spotno][vehicle.route[pos2+1].spotno]==-1 or \
								(argvs.management_etable and etable9[customers[0].spotno][vehicle.route[pos2+1].spotno]==-1) or \
								(argvs.management_xtable and xtable9[customers[0].spotno][vehicle.route[pos2+1].spotno]==-1):
								continue

							adist+=dtable9[customers[0].spotno][vehicle.route[pos2+1].spotno]
							if argvs.management_etable:
								apower+=etable9[customers[0].spotno][vehicle.route[pos2+1].spotno]
							if argvs.management_xtable:
								aexp+=xtable9[customers[0].spotno][vehicle.route[pos2+1].spotno]

							arr_t=lv_t+ttable10[customers[0].spotno][vehicle.route[pos2+1].spotno]*vehicle.drskill
							st_t=max(arr_t,vehicle.route[pos2+1].ready_fs)
							atpen+=max(st_t-vehicle.route[pos2+1].due_fs,0)
							lv_t=max(arr_t,vehicle.route[pos2+1].ready_fs)

							lv=lv_t
						elif (argvs.bulkShipping_flag==False and pos2+1==len(vehicle.route)-2 and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False) or \
							(argvs.bulkShipping_flag==True and pos2+1==len(vehicle.route)-2 and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==False): #集荷最適化
							if ttable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1 or \
							dtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1 or \
							(argvs.management_etable and etable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1) or \
							(argvs.management_xtable and xtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1):
								continue

							adist+=dtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]
							if argvs.management_etable:
								apower+=etable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]
							if argvs.management_xtable:
								aexp+=xtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]

							arr_t=lv_t+ttable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]*vehicle.drskill
							st_t=max(arr_t,vehicle.route[-1].ready_fs)
							atpen+=max(st_t-vehicle.route[-1].due_fs,0)
							lv_t=max(arr_t,vehicle.route[-1].ready_fs)
							
							lv=lv_t
						else:
							if vehicle.route[pos1].additionalcust[i1].custno!=vehicle.route[pos2+1].custno or vehicle.route[pos2+1].custno=="0":
								if ttable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]==-1 or \
									dtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]==-1 or \
									(argvs.management_etable and etable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]==-1) or \
									(argvs.management_xtable and xtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]==-1):
									continue

								adist+=dtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]
								if argvs.management_etable:
									apower+=etable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]

								arr_t=lv_t+ttable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]*vehicle.drskill
								if vehicle.route[pos2+1] in servt_dict:
									if vehicle.route[pos2+1].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx:
										lv_t=max(arr_t+vehicle.route[pos2+1].parkt_arrive,vehicle.route[pos2+1].ready_fs)+servt_dict[vehicle.route[pos2+1]]*vehicle.opskill
										st_t=max(arr_t+vehicle.route[pos2+1].parkt_arrive,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].parkt_open
									else:
										lv_t=max(arr_t,vehicle.route[pos2+1].ready_fs)+servt_dict[vehicle.route[pos2+1]]*vehicle.opskill
										st_t=max(arr_t,vehicle.route[pos2+1].ready_fs)
								else:
									if vehicle.route[pos2+1].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx:
										lv_t=max(arr_t+vehicle.route[pos2+1].parkt_arrive,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].servt*vehicle.opskill
										st_t=max(arr_t+vehicle.route[pos2+1].parkt_arrive,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].parkt_open
									else:
										lv_t=max(arr_t,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].servt*vehicle.opskill
										st_t=max(arr_t,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].servt*vehicle.opskill
								if vehicle.route[pos2+1].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx:
									lv_t+=vehicle.route[pos2+1].parkt_open

							lv=lv_t

							if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,vehicle,lv,pos2+2,servt_dict,len(skv1_route)-1,no_park_idx,pick_opt_flag,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp


						if (pos2+1)==(len(vehicle.route)-1): #case1
							#mvehicles[vehicle]=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1-1],vehicle.route[pos2],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos2],vehicle.route[pos1+1],dtable)
							#mvehicles[vehicle]+=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1+1,pos2-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos2-1],vehicle.route[pos1],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1],vehicle.route[pos2+1],dtable)

							
							#改善前時間算出
							# arr_t=round(arr_t,4)
							lv1=lv
							if (argvs.bulkShipping_flag==False and (vehicle.route[pos1].additionalcust[i1].custno!="0" or vehicle.route[pos2+1].custno!="0")) or \
								(argvs.bulkShipping_flag==True and (vehicle.route[pos1].additionalcust[i1].customers[0].custno!="0" or vehicle.route[pos2+1].customers[0].custno!="0")):
								atpen+=max(0.0,st_t-vehicle.route[pos2+1].due_fs)
							atpen+=max(0.0,lv1-vehicle.endhour)

							##20180605
							# atpen+=max(0.0,arr_t-bvfinal_t)     

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle,argvs)==False:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list[i1][i2],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
							##

							# adist=dtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].spotno] \
							# 	+ dtable5[vehicle.route[pos2].spotno][vehicle.route[pos1+1].spotno] \
							# 	+ calc_dist(vehicle,lv1,pos1+2,pos2,argvs) \
							# 	+ dtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].spotno] \
							# 	+ dtable7[vehicle.route[pos1].spotno][vehicle.route[pos2+1].spotno] 
							# if argvs.management_etable:
							# 	apower=etable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].spotno] \
							# 	+ etable5[vehicle.route[pos2].spotno][vehicle.route[pos1+1].spotno] \
							# 	+ etable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].spotno] \
							# 	+ etable7[vehicle.route[pos1].spotno][vehicle.route[pos2+1].spotno] 
							# if argvs.management_xtable:
							# 	aexp=xtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].spotno] \
							# 	+ xtable5[vehicle.route[pos2].spotno][vehicle.route[pos1+1].spotno] \
							# 	+ xtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].spotno] \
							# 	+ xtable7[vehicle.route[pos1].spotno][vehicle.route[pos2+1].spotno] 

						else: #case2
							#mvehicles[vehicle]=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1-1],vehicle.route[pos2],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos2],vehicle.route[pos1+1],dtable)
							#mvehicles[vehicle]+=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1+1,pos2-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos2-1],vehicle.route[pos1],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1],vehicle.route[pos2+1],dtable)
							#mvehicles[vehicle]+=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos2+1,len(vehicle.route)-1)])

							if not ((argvs.bulkShipping_flag==False and pos2+1==len(vehicle.route)-2 and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False) or \
							(argvs.bulkShipping_flag==True and pos2+1==len(vehicle.route)-2 and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==False)) and \
							not ((argvs.bulkShipping_flag==False and pos2+1==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].custno!="0" and vehicle.route[-1].custno!="0") or \
							(argvs.bulkShipping_flag==True and pos2+1==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0")):
								# NOT 最終訪問先が指定されている、かつ、改善前には集荷最適化のDEPOが存在して、かつ、改善後には集荷最適化を使用した場合DEPOが要らず、かつ、pos2 がDEPOの集荷最適化のDEPOの直前
								# AND
								# NOT 最終訪問先が指定されている、かつ、pos1がDEPOではなく、かつ、pos2+1が最終訪問先、かつ、改善前には集荷最適化のDEPOが存在して、かつ、改善後にはDEPOが要らず、かつ、pos2 がDEPOの集荷最適化のDEPOの直前

								# 最終訪問先が指定されていない、または、改善前には集荷最適化のDEPOが存在しない、あるいは、改善後には集荷最適化のDEPOが存在する、あるいは、pos2 がDEPOの集荷最適化のDEPOの直前ではない
								# 最終訪問先が指定されていない、または、pos1がDEPOである、または、pos2+1が最終訪問先ではない

								if vehicle.route[pos1].additionalcust[i1].custno!=vehicle.route[pos2+1].custno:
									atpen+=max(0.0,st_t-vehicle.route[pos2+1].due_fs)
								
								for i in range(pos2+1,n-1-1):
									if i+1==n-2 and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False:
										continue

									if vehicle.route[i].custno==vehicle.route[i+1].custno and vehicle.route[i+1].custno!="0":
										continue

									if vehicle.route[i+1] in servt_dict:
										proc_time=servt_dict[vehicle.route[i+1]]
									else:
										proc_time=vehicle.route[i+1].servt
									if i+1 in no_park_idx:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(vehicle.route[i],vehicle.route[i+1],lv_t,proc_time,vehicle,no_park,argvs)
									if vehicle.route[i].custno!="0" or vehicle.route[i+1].custno!="0":
										atpen+=ttime_pen

								
								ttable9 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
								if (argvs.bulkShipping_flag==False and vehicle.route[-2].custno!="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==True) or \
								(argvs.bulkShipping_flag==True and vehicle.route[-2].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==True): #集荷最適化
									arr_t=lv_t+ttable9[vehicle.route[n-1-1].spotno][customers[0].spotno]*vehicle.drskill
									st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
									atpen+=max(0.0,st_t-customers[0].due_fs)
									lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[vehicle.route[-1]]+vehicle.depotservt)*vehicle.opskill
									lv_t+=customers[0].parkt_open

									ttable11 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
									arr_t=lv_t+ttable11[customers[0].spotno][vehicle.route[n-1].spotno]*vehicle.drskill
									lv1=max(arr_t,vehicle.route[-1].ready_fs)
								elif (argvs.bulkShipping_flag==False and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False) or \
								(argvs.bulkShipping_flag==True and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==False): #集荷最適化
									arr_t=lv_t+ttable6[vehicle.route[n-3].spotno][vehicle.route[n-1].spotno]*vehicle.drskill
									st_t=max(arr_t,vehicle.route[n-1].ready_fs)

									#改善前時間算出
									lv1=max(arr_t,vehicle.route[n-1].ready_fs)
								else:
									arr_t=lv_t+ttable9[vehicle.route[n-1-1].spotno][vehicle.route[n-1].spotno]*vehicle.drskill
									#改善前時間算出
									# arr_t=round(arr_t,4)
									if vehicle.route[n-1].spotid!=vehicle.route[n-1-1].spotid and not n-1 in no_park_idx:
										st_t=max(arr_t+vehicle.route[len(vehicle.route)-1].parkt_arrive,vehicle.route[-1].ready_fs)+vehicle.route[len(vehicle.route)-1].parkt_open
										lv1=max(arr_t+vehicle.route[len(vehicle.route)-1].parkt_arrive,vehicle.route[-1].ready_fs)+servt_dict[vehicle.route[len(vehicle.route)-1]]*vehicle.opskill
									else:
										st_t=max(arr_t,vehicle.route[-1].ready_fs)
										lv1=max(arr_t,vehicle.route[-1].ready_fs)+servt_dict[vehicle.route[len(vehicle.route)-1]]*vehicle.opskill
									if vehicle.route[n-1].spotid!=vehicle.route[n-1-1].spotid and not n-1 in no_park_idx:
										lv1+=vehicle.route[len(vehicle.route)-1].parkt_open

								if (argvs.bulkShipping_flag==False and (vehicle.route[n-2].custno!="0" or vehicle.route[n-1].custno!="0")) or \
								(argvs.bulkShipping_flag==True and (vehicle.route[n-2].customers[0].custno!="0" or vehicle.route[n-1].customers[0].custno!="0")):
									atpen+=max(0.0,st_t-vehicle.route[n-1].due_fs)
							else:
								lv1=lv
							atpen+=max(0.0,lv1-vehicle.endhour)
							

							##20180605
							# atpen+=max(0.0,arr_t-bvfinal_t)     

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle,argvs)==False:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list[i1][i2],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
							##
						#### ここまで休憩機能なし用の処理 ####
					else:
						#### ここから休憩機能あり用の処理 ####
						veh = dcopy(vehicle)
						veh.route = skv1_route
						if argvs.pickup_flag==True:
							#集荷最適化
							if pick_opt_flag:
								if not get_pick_opt_status(veh, argvs)[0]:
									veh.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(veh, pick_opt_flag, argvs)
						if not(org_flag==True and i1==0 and i2==0):
							veh = insert_breakspot(takebreak_list1[i3], None, customers, veh, vehicles, argvs, 0)
						if veh==None:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
							continue

						lv1 = veh.lv[-1]
						skv1_route = veh.route
						depo_idx=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						veh.update_totalcost_dtable(argvs)

						adist = veh.totalcost
						nn = len(veh.route)
						for i in range(start_idx,nn):
							if i==0 or (argvs.bulkShipping_flag==False and (veh.route[i-1].custno!=veh.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (veh.route[i-1].customers[0].custno!=veh.route[i].customers[0].custno)):
								atpen+=max(0.0,veh.st[i]-veh.route[i].due_fs)
						atpen+=max(0.0,lv1-veh.endhour)

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(veh,argvs)==False:
							atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-veh.arr[0],0,btpen_temp)
						#### 
						if argvs.management_etable:
							apower=calc_power(veh,start_idx+1,len(veh.route),argvs)
						if argvs.management_xtable:
							aexp=calc_exp(veh,start_idx+1,len(veh.route),argvs)
						#### ここまで休憩機能あり用の処理 ####

					#集荷違反量を計算
					if argvs.pickup_flag==True:
						max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(skv1_route,vehicle)
					else:
						max_load_pen,max_load_pen2=0,0

					load_pen,load_pen2=0,0
					for j in range(len(depo_idx)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx[j]+1,depo_idx[j+1]):
							if skv1_route[k].requestType=="DELIVERY":
								if skv1_route[k].custno[0] != "b":
									load_onbrd+=skv1_route[k].dem
									load_onbrd2+=skv1_route[k].dem2

						load_pen+=max(load_onbrd-vehicle.cap,0)
						load_pen2+=max(load_onbrd2-vehicle.cap2,0)

					aload =load_pen+max_load_pen
					aload2 = load_pen2+max_load_pen2
					
					#改善前後の到着時間算出(拠点を出発し最後の配送先での配送を終えて拠点に戻るまで(-l なしの場合))
					if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
						atime=0.0
						time_error = 0.0
					else:
						# #vehicle1の改善後arr計算
						# arr1, _ = calc_vehicle_arr_route(skv1_route, vehicle, vehicle.drskill, vehicle.opskill, vehicle.chg_batt_dict)

						if argvs.opt_t_weight!=0:
							#改善後時間算出
							if lcnt==0:
								atime = lv1
							else:
								atime = lv1-delay_arr_list[i1][i2]+vehicle.arr[0]
						else:
							atime=0.0

						mvehicles={vehicle:0.0}
						if lcnt==0:
							mvehicles[vehicle] = lv1-vehicle.arr[0]
						else:
							mvehicles[vehicle] = lv1-delay_arr_list[i1][i2]

						if argvs.avetime_ape_flag==True:
							time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
						else:
							time_error=0.0
					
					if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
						visits_error = 0.0
					else:
						mvehicles={vehicle:0.0}
						if argvs.bulkShipping_flag:
							mvehicles[vehicle] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
						else:
							mvehicles[vehicle] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])

						if argvs.avevisits_ape_flag==True:
							visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
						else:
							visits_error=0.0

					if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
						dist_error = 0.0
					else:
						mvehicles={vehicle:0.0}
						if lcnt==0:
							mvehicles[vehicle] = adist+vehicle.remdist[0]-vehicle.remdist[start_idx]
						else:
							mvehicles[vehicle] = adist+vehicle.delay_remdist[0]-vehicle.delay_remdist[start_idx]

						if argvs.avedist_ape_flag==True:
							dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
						else:
							dist_error=0.0
					
					#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
					if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
						aunass = len([c for c in skv1_route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

					ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907

					if ires_temp and cdiff<cdiff_best:
						ires=True
						cdiff_best=cdiff
						if bload==1e9 and i1==0 and i2==0 and lcnt==0:
							btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp=atpen,adist,aload,aload2,time_error,visits_error,dist_error,atime,apower,aexp
							bvfinal_t=lv1
							cdiff_best=0
						pick_opt_flag_best=pick_opt_flag
						index1,index2=i1,i2
						delay_lcnt_best=lcnt
						if argvs.break_flag:
							route_best = skv1_route
							ttable_best = argvs.management_ttable
							dtable_best = argvs.management_dtable
							etable_best = argvs.management_etable
							xtable_best = argvs.management_xtable
							vehnos=[v.vehno for v in vehicles]
							vehicles[vehnos.index(vehicle.vehno)].route = skv1_route
							t_route_best = r_backup(vehicles)

					if argvs.break_flag:
						argvs.management_ttable = t_dcopy(t_ttable)
						argvs.management_dtable = t_dcopy(t_dtable)
						argvs.management_etable = t_dcopy(t_etable)
						argvs.management_xtable = t_dcopy(t_xtable)
						vehicles = r_restore(vehicles, t_route, argvs)

	return ires,btpen,bload,bload2,pick_opt_flag_best,index1,index2,delay_lcnt_best,route_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best
###################

def relocate_improved_lastc_dtable(customers,vehicles,vehicle,pos1,pos2,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list,org_flag=False):
	ires=False
	index1,index2=0,0
	delay_lcnt_best=0
	pick_opt_flag_best=False
	cdiff_best=0
	route_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if vehicle.route[pos1].custno=="0" and vehicle.route[pos2].custno=="0": #デポ同士ならスキップ
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if vehicle.route[pos1].custno[0]=="b" or vehicle.route[pos2].custno[0]=="b": #休憩スポット同士ならスキップ
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if(pos1<1 or not(pos1<=pos2-2) or not((len(vehicle.route)-1)>=pos2+1)):
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
		#未割り当て荷物最適化で予約車両
		if free_or_additive(vehicle.route[pos1],vehicle,vehicles,argvs)=="additive" and free_or_additive(vehicle.route[pos2],vehicle,vehicles,argvs)=="additive": #条件2同士ならスキップ
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" and vehicle.load_pen!=1e9: #条件2が他の便に移るならスキップ
			skv1_route_temp = vehicle.route[:]											# ルート全体をコピー
			skv1_route_temp[pos2],skv1_route_temp[pos1]=skv1_route_temp[pos1],skv1_route_temp[pos2]	# ルート入替
			for i in range(len(skv1_route_temp)-1):
				if in_additive(skv1_route_temp[i],vehicle,skv1_route_temp,vehicles,argvs)==False:
					#便が変わった or 順序が変わった
					return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	else:
		#未割り当て荷物最適化無し、あるいは、予約車両以外
		if vehicle.route[pos1].changecust=="additive" and vehicle.route[pos2].changecust=="additive": #条件2同士ならスキップ
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" and vehicle.load_pen!=1e9: #条件2が他の便に移るならスキップ
			rotate_idx={}
			idx=0
			for i in range(len(vehicle.route)-1):
				if vehicle.route[i].custno=="0" and vehicle.route[i+1].custno!="0":
					idx+=1
				elif vehicle.route[i].changecust=="additive" and vehicle.route[i].custno!="0" and vehicle.route[i].custno[0]!="b":
					rotate_idx[vehicle.route[i]]=idx

			skv1_route_temp = vehicle.route[:]											# ルート全体をコピー
			skv1_route_temp[pos2],skv1_route_temp[pos1]=skv1_route_temp[pos1],skv1_route_temp[pos2]	# ルート入替

			idx=0
			for i in range(len(skv1_route_temp)-1):
				if skv1_route_temp[i].custno=="0" and skv1_route_temp[i+1].custno!="0":
					idx+=1
				elif skv1_route_temp[i].changecust=="additive" and skv1_route_temp[i].custno!="0" and skv1_route_temp[i].custno[0]!="b":
					if rotate_idx[skv1_route_temp[i]]!=idx:
						return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.init_changecust=="additive" and (vehicle.route[pos1].changecust=="additive" or vehicle.route[pos2].changecust=="additive"): #条件2の順番が変わるならスキップ
			for c in vehicle.route[pos1+1:pos2]:
				if c.changecust=="additive" and c.custno!="0" and c.custno[0]!="b":
					return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	#集荷最適化の場合DEPOは改善対象外
	if argvs.break_flag:
		pick_opt_flag, pick_opt_idx = get_pick_opt_status(vehicle, argvs)
		if pick_opt_flag==True and pos2>=pick_opt_idx:
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	else:
		pick_opt_flag=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].customers[0].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
			else:
				if vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
		if pick_opt_flag==True and pos2==len(vehicle.route)-2:
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]
	for i in range(len(depo_idx)-1):
		if depo_idx[i]<pos1 and pos1<=depo_idx[i+1]:
			start_idx=depo_idx[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and delay_arr_list==[] and argvs.break_flag==False:
		start_idx=pos1-1
	if delay_arr_list!=[]:
		start_idx=0

	n=len(vehicle.route)
	blast_idx=n
	for i in reversed(range(0,n)):
		if vehicle.route[i].custno!="0" and vehicle.route[i].custno[0]!="b" and vehicle.route[i].custno[0]!="e" and i!=len(vehicle.route)-1:
			break
		else:
			blast_idx=i

	adist,bdist,atpen,btpen,apower,bpower,aexp,bexp,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
	
	for i in range(start_idx,blast_idx):
		if i==0 or (argvs.bulkShipping_flag==False and (vehicle.route[i-1].custno!=vehicle.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (vehicle.route[i-1].customers[0].custno!=vehicle.route[i].customers[0].custno)):
			btpen+=max(0.0,vehicle.st[i]-vehicle.route[i].due_fs)
	btpen+=max(0.0,vehicle.lv[blast_idx-1]-vehicle.endhour)

	##kaizen mae no final arrive time
	bvfinal_t=vehicle.lv[blast_idx-1]
	##

	if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist=calc_dist(vehicle,start_idx+1,blast_idx,argvs)
		if argvs.management_etable:
			bpower=calc_power(vehicle,start_idx+1,blast_idx,argvs)
		if argvs.management_xtable:
			bexp=calc_exp(vehicle,start_idx+1,blast_idx,argvs)
	else:
		bdist=get_dtable(vehicle.vtype, vehicle.lv[pos1-1], argvs.management_dtable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_dtable(vehicle.vtype, vehicle.lv[pos1], argvs.management_dtable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_dtable(vehicle.vtype, vehicle.lv[pos2-1], argvs.management_dtable)[vehicle.route[pos2-1].spotno][vehicle.route[pos2].spotno]
		if (pos2+1)<blast_idx:
			bdist+=get_dtable(vehicle.vtype, vehicle.lv[pos2], argvs.management_dtable)[vehicle.route[pos2].spotno][vehicle.route[pos2+1].spotno]
		if argvs.management_etable:
			bpower=get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1-1], argvs.management_etable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1], argvs.management_etable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos2-1], argvs.management_etable)[vehicle.route[pos2-1].spotno][vehicle.route[pos2].spotno]
			if (pos2+1)<blast_idx:
				bpower+=get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos2], argvs.management_etable)[vehicle.route[pos2].spotno][vehicle.route[pos2+1].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(vehicle.vtype, vehicle.lv[pos1-1], argvs.management_xtable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_xtable(vehicle.vtype, vehicle.lv[pos1], argvs.management_xtable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_xtable(vehicle.vtype, vehicle.lv[pos2-1], argvs.management_xtable)[vehicle.route[pos2-1].spotno][vehicle.route[pos2].spotno]
			if (pos2+1)<blast_idx:
				bexp+=get_xtable(vehicle.vtype, vehicle.lv[pos2], argvs.management_xtable)[vehicle.route[pos2].spotno][vehicle.route[pos2+1].spotno]

	bload = vehicle.load_pen
	bload2 = vehicle.load_pen2

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = vehicle.lv[blast_idx-1]
	else:
		btime=0.0

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
		bunass = len([c for c in vehicle.route[1:blast_idx] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	if delay_arr_list!=[]:
		delay_lcnt=2
	else:
		delay_lcnt=1

	takebreak_list1 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in vehicle.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for i1 in range(len(vehicle.route[pos1].additionalcust)):
		if free_or_additive(vehicle.route[pos1],vehicle,vehicles,argvs)=="additive" and i1!=0:
			continue
		for i2 in range(len(vehicle.route[pos2].additionalcust)):
			if free_or_additive(vehicle.route[pos2],vehicle,vehicles,argvs)=="additive" and i2!=0:
				continue
			for i3 in range(len(takebreak_list1)):
				for lcnt in range(delay_lcnt):
					adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
					btpen_temp=btpen
					atpen_temp=0
					#変更後に訪問数上限を超えていたらFalseを返す
					v_spotid=[c.spotid for c in vehicle.route]
					v_spotid[pos1],v_spotid[pos2]=vehicle.route[pos2].additionalcust[i2].spotid,vehicle.route[pos1].additionalcust[i1].spotid
					#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([c for c in v_spotid[1:-1] if c=="0"])
					# visitnum=calc_visitnum(v_spotid)
					# if vehicle.maxvisit>0 and visitnum>vehicle.maxvisit:
					# 	continue

					skv1_route = vehicle.route[:]
					skv1_route[pos1],skv1_route[pos2]=skv1_route[pos2].additionalcust[i2],skv1_route[pos1].additionalcust[i1]	# ルート入替

					visitnum=calc_visitnum(skv1_route)
					if vehicle.maxvisit>0 and visitnum>vehicle.maxvisit:
						continue

					depo_idx=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[skv1_route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno and skv1_route[j].custno[0]!='b':
								servt+=skv1_route[j].depotservt
						if skv1_route[depo_idx[k]+1].custno[0]!="b":
							if skv1_route[depo_idx[k]+1].custno!="0":
								servt_dict[skv1_route[depo_idx[k]]]+=servt+vehicle.depotservt
							else:
								servt_dict[skv1_route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[skv1_route[len(skv1_route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv1_route[j].depotservt
						servt_dict[skv1_route[depo_idx[k]]]+=servt

					load=[0 for c in skv1_route]
					load2=[0 for c in skv1_route]
					for i in range(len(skv1_route)-1):
						if i in depo_idx:
							for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
								if skv1_route[j].requestType=="DELIVERY":
									if skv1_route[j].custno[0] != "b":
										load[i]+=skv1_route[j].dem
										load2[i]+=skv1_route[j].dem2
						else:
							if skv1_route[i].custno[0] != "b":
								if skv1_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv1_route[i].dem
									load2[i]=load2[i-1]-skv1_route[i].dem2
								else:
									load[i]=load[i-1]+skv1_route[i].dem
									load2[i]=load2[i-1]+skv1_route[i].dem2

					for i in reversed(range(len(load))):
						if i in depo_idx and i+1 in depo_idx:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx=[]
					for c in skv1_route[depo_idx[0]+1:depo_idx[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx.append(0)
					
					for i in range(1,len(depo_idx)-1):
						if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
							for c in skv1_route[depo_idx[i]+1:depo_idx[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
									no_park_idx.append(vehicle.route.index(skv1_route[depo_idx[i]]))
					if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
						no_park_idx.append(vehicle.route.index(skv1_route[depo_idx[-1]]))

					pick_opt_flag=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv1_route)-1)):
							if skv1_route[i].custno!="0":
								if skv1_route[i].custno[0]!="b":
									non_depo=True
									if skv1_route[i].requestType=="PICKUP":
										pick_opt_flag=True
										break
							elif non_depo==True:
								break

					alast_idx=len(skv1_route)
					for i in reversed(range(0,len(skv1_route))):
						if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
							break
						else:
							alast_idx=i

					if argvs.break_flag==False:
						#### ここから休憩機能なし用の処理 ####
						if lcnt==0:
							if vehicle.route[start_idx] in servt_dict:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)
							else:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)
						else:
							if vehicle.route[start_idx] in servt_dict:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)
							else:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)
						if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
							lv_t+=vehicle.route[start_idx].parkt_open
						if start_idx==0 or vehicle.route[start_idx-1].custno!="0" or vehicle.route[start_idx].custno!="0": #デポが連続しない場合
							atpen += max(0.0, st_t-vehicle.route[start_idx].due_fs)
						arr_t=vehicle.arr[start_idx]

						if start_idx!=0 and vehicle.route[start_idx].custno==vehicle.route[start_idx-1].custno and vehicle.route[start_idx].custno!="0":
							lv_t=vehicle.lv[start_idx-1]
							arr_t=vehicle.arr[start_idx-1]

						impassable=True
						for i in range(start_idx,pos1-1):
							from_c,to_c=vehicle.route[i],vehicle.route[i+1]

							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable1 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							ttable2 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable1 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable1 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable2[from_c.spotno][to_c.spotno]==-1 or \
							dtable1[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable1[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable1[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable2[from_c.spotno][to_c.spotno]*vehicle.drskill
							if to_c in servt_dict:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict[to_c]*vehicle.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict[to_c]*vehicle.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*vehicle.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*vehicle.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable1[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable1[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable1[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if vehicle.route[pos1-1].custno!=vehicle.route[pos2].additionalcust[i2].custno or vehicle.route[pos2].additionalcust[i2].custno=="0":
							dtable3 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable3 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable3 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							#変更後に通行不可能ならFalseを返す
							ttable3 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if ttable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]==-1 or \
								dtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]==-1 or \
								(argvs.management_etable and etable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]==-1) or \
								(argvs.management_xtable and xtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]==-1):
								continue

							adist+=dtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]
							if argvs.management_etable:
								apower+=etable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]
							if argvs.management_xtable:
								aexp+=xtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]

							arr_t=lv_t+ttable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].additionalcust[i2].spotno]*vehicle.drskill
							if vehicle.route[pos2].additionalcust[i2] in servt_dict:
								if vehicle.route[pos2].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos2 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos2].additionalcust[i2].parkt_arrive,vehicle.route[pos2].additionalcust[i2].ready_fs)+servt_dict[vehicle.route[pos2].additionalcust[i2]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos2].additionalcust[i2].parkt_arrive,vehicle.route[pos2].additionalcust[i2].ready_fs)+vehicle.route[pos2].additionalcust[i2].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos2].additionalcust[i2].ready_fs)+servt_dict[vehicle.route[pos2].additionalcust[i2]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos2].additionalcust[i2].ready_fs)
							else:
								if vehicle.route[pos2].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos2 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos2].additionalcust[i2].parkt_arrive,vehicle.route[pos2].additionalcust[i2].ready_fs)+vehicle.route[pos2].additionalcust[i2].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos2].additionalcust[i2].parkt_arrive,vehicle.route[pos2].additionalcust[i2].ready_fs)+vehicle.route[pos2].additionalcust[i2].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos2].additionalcust[i2].ready_fs)+vehicle.route[pos2].additionalcust[i2].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos2].additionalcust[i2].ready_fs)
							if vehicle.route[pos2].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos2 in no_park_idx:
								lv_t+=vehicle.route[pos2].additionalcust[i2].parkt_open
							if vehicle.route[pos1-1].custno!="0" or vehicle.route[pos2].additionalcust[i2].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[pos2].additionalcust[i2].due_fs)

						if vehicle.route[pos2].additionalcust[i2].custno!=vehicle.route[pos1+1].custno or vehicle.route[pos1+1].custno=="0":
							ttable5 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							dtable5 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable5 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable5 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]==-1 or \
								dtable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]==-1 or \
								(argvs.management_etable and etable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]==-1) or \
								(argvs.management_xtable and xtable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]==-1):
								continue


							if pos1+1<alast_idx:
								adist+=dtable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]
								if argvs.management_etable:
									apower+=etable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]

								arr_t=lv_t+ttable5[vehicle.route[pos2].additionalcust[i2].spotno][vehicle.route[pos1+1].spotno]*vehicle.drskill
								if vehicle.route[pos1+1] in servt_dict:
									if vehicle.route[pos1+1].spotid!=vehicle.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx:
										lv_t=max(arr_t+vehicle.route[pos1+1].parkt_arrive,vehicle.route[pos1+1].ready_fs)+servt_dict[vehicle.route[pos1+1]]*vehicle.opskill
										st_t=max(arr_t+vehicle.route[pos1+1].parkt_arrive,vehicle.route[pos1+1].ready_fs)+vehicle.route[pos1+1].parkt_open
									else:
										lv_t=max(arr_t,vehicle.route[pos1+1].ready_fs)+servt_dict[vehicle.route[pos1+1]]*vehicle.opskill
										st_t=max(arr_t,vehicle.route[pos1+1].ready_fs)
								else:
									if vehicle.route[pos1+1].spotid!=vehicle.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx:
										lv_t=max(arr_t+vehicle.route[pos1+1].parkt_arrive,vehicle.route[pos1+1].ready_fs)+vehicle.route[pos1+1].servt*vehicle.opskill
										st_t=max(arr_t+vehicle.route[pos1+1].parkt_arrive,vehicle.route[pos1+1].ready_fs)+vehicle.route[pos1+1].parkt_open
									else:
										lv_t=max(arr_t,vehicle.route[pos1+1].ready_fs)+vehicle.route[pos1+1].servt*vehicle.opskill
										st_t=max(arr_t,vehicle.route[pos1+1].ready_fs)
								if vehicle.route[pos1+1].spotid!=vehicle.route[pos2].additionalcust[i2].spotid and not pos1+1 in no_park_idx:
									lv_t+=vehicle.route[pos1+1].parkt_open
								
								if vehicle.route[pos2].additionalcust[i2].custno!="0" or vehicle.route[pos1+1].custno!="0":
									atpen+=max(0.0,st_t-vehicle.route[pos1+1].due_fs)

						impassable=True
						for i in range(pos1+1,pos2-1):
							if vehicle.route[i].custno==vehicle.route[i+1].custno and vehicle.route[i+1].custno!="0":
								continue

							ttable8 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								dtable8 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
								if argvs.management_etable:
									etable8 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
								if argvs.management_xtable:
									xtable8 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

								if ttable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]==-1 or \
									dtable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]==-1 or \
									(argvs.management_etable and etable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]==-1) or \
									(argvs.management_xtable and xtable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]==-1):
									impassable=False
									break

								adist+=dtable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]
								if argvs.management_etable:
									apower+=etable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]

							arr_t=lv_t+ttable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]*vehicle.drskill
							if vehicle.route[i+1] in servt_dict:
								if vehicle.route[i+1].spotid!=vehicle.route[i].spotid and not i+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[i+1].parkt_arrive,vehicle.route[i+1].ready_fs)+servt_dict[vehicle.route[i+1]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[i+1].parkt_arrive,vehicle.route[i+1].ready_fs)+vehicle.route[i+1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[i+1].ready_fs)+servt_dict[vehicle.route[i+1]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[i+1].ready_fs)
							else:
								if vehicle.route[i+1].spotid!=vehicle.route[i].spotid and not i+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[i+1].parkt_arrive,vehicle.route[i+1].ready_fs)+vehicle.route[i+1].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[i+1].parkt_arrive,vehicle.route[i+1].ready_fs)+vehicle.route[i+1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[i+1].ready_fs)+vehicle.route[i+1].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[i+1].ready_fs)
							if vehicle.route[i+1].spotid!=vehicle.route[i].spotid and not i+1 in no_park_idx:
								lv_t+=vehicle.route[i+1].parkt_open

							if vehicle.route[i].custno!="0" or vehicle.route[i+1].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[i+1].due_fs)
						if impassable==False:
							continue

						if vehicle.route[pos2-1].custno!=vehicle.route[pos1].additionalcust[i1].custno or vehicle.route[pos1].additionalcust[i1].custno=="0":
							ttable6 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							dtable6 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable6 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable6 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1 or \
								dtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1 or \
								(argvs.management_etable and etable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1) or \
								(argvs.management_xtable and xtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1):
								continue

							adist+=dtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]
							if argvs.management_etable:
								apower+=etable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]
							if argvs.management_xtable:
								aexp+=xtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]

							arr_t=lv_t+ttable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].additionalcust[i1].spotno]*vehicle.drskill
							if vehicle.route[pos1].additionalcust[i1] in servt_dict:
								if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos2-1].spotid and not pos1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+servt_dict[vehicle.route[pos1].additionalcust[i1]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)+servt_dict[vehicle.route[pos1].additionalcust[i1]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)
							else:
								if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos2-1].spotid and not pos1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)
							if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos2-1].spotid and not pos1 in no_park_idx:
								lv_t+=vehicle.route[pos1].additionalcust[i1].parkt_open
							if vehicle.route[pos2-1].custno!="0" or vehicle.route[pos1].additionalcust[i1].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[pos1].additionalcust[i1].due_fs)

						ttable7 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
						dtable7 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable7 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable7 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

						if (argvs.bulkShipping_flag==False and pos2+1==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].custno!="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==True) or \
							(argvs.bulkShipping_flag==True and pos2+1==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==True): #集荷最適化
							if ttable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
							dtable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
							(argvs.management_etable and etable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1) or \
							(argvs.management_xtable and xtable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1):
								continue

							arr=lv_t+ttable7[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]*vehicle.drskill
							st=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
							lv=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[vehicle.route[pos2+1]]+vehicle.depotservt)*vehicle.opskill
							lv+=customers[0].parkt_open

							ttable10 = get_ttable(vehicle.vtype, lv, argvs.management_ttable)
							dtable9 = get_dtable(vehicle.vtype, lv, argvs.management_dtable)
							if argvs.management_etable:
								etable9 = get_etable(vehicle.vtype, vehicle.etype, lv, argvs.management_etable)
							if argvs.management_xtable:
								xtable9 = get_xtable(vehicle.vtype, lv, argvs.management_xtable)

							if ttable10[customers[0].spotno][vehicle.route[pos2+1].spotno]==-1 or \
								dtable9[customers[0].spotno][vehicle.route[pos2+1].spotno]==-1 or \
								(argvs.management_etable and etable9[customers[0].spotno][vehicle.route[pos2+1].spotno]==-1) or \
								(argvs.management_xtable and xtable9[customers[0].spotno][vehicle.route[pos2+1].spotno]==-1):
								continue
						elif (argvs.bulkShipping_flag==False and pos2+1==len(vehicle.route)-2 and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False) or \
							(argvs.bulkShipping_flag==True and pos2+1==len(vehicle.route)-2 and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==False): #集荷最適化
							if ttable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1 or \
								dtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1 or \
								(argvs.management_etable and etable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1) or \
								(argvs.management_xtable and xtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1):
								continue
						else:
							if ttable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]==-1 or \
								dtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]==-1 or \
								(argvs.management_etable and etable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]==-1) or \
								(argvs.management_xtable and xtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]==-1):
								continue

						if vehicle.route[pos1].additionalcust[i1].custno!=vehicle.route[pos2+1].custno or vehicle.route[pos2+1].custno=="0":
							if (pos2+1)<blast_idx:
								adist+=dtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]
								if argvs.management_etable:
									apower+=etable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]
								if argvs.management_xtable:
									aexp+=xtable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]

							arr=lv_t+ttable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]*vehicle.drskill
							if vehicle.route[pos2+1] in servt_dict:
								if vehicle.route[pos2+1].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx:
									lv=max(arr+vehicle.route[pos2+1].parkt_arrive,vehicle.route[pos2+1].ready_fs)+servt_dict[vehicle.route[pos2+1]]*vehicle.opskill
									st=max(arr+vehicle.route[pos2+1].parkt_arrive,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].parkt_open
								else:
									lv=max(arr,vehicle.route[pos2+1].ready_fs)+servt_dict[vehicle.route[pos2+1]]*vehicle.opskill
									st=max(arr,vehicle.route[pos2+1].ready_fs)
							else:
								if vehicle.route[pos2+1].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx:
									lv=max(arr+vehicle.route[pos2+1].parkt_arrive,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].servt*vehicle.opskill
									st=max(arr+vehicle.route[pos2+1].parkt_arrive,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].parkt_open
								else:
									lv=max(arr,vehicle.route[pos2+1].ready_fs)+vehicle.route[pos2+1].servt*vehicle.opskill
									st=max(arr,vehicle.route[pos2+1].ready_fs)
							if vehicle.route[pos2+1].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos2+1 in no_park_idx:
								lv+=vehicle.route[pos2+1].parkt_open
						else:
							arr=arr_t
							lv=lv_t
							st=st_t

						if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
							impassable,dist,power,exp,_=check_impassability(customers,vehicle,lv,pos2+2,servt_dict,blast_idx,no_park_idx,pick_opt_flag,argvs)
							if impassable==False:
								continue

							adist+=dist
							if argvs.management_etable:
								apower+=power
							if argvs.management_xtable:
								aexp+=exp


						#mvehicles={vehicle:0.0}

						if (pos2+1)>=blast_idx:
							#mvehicles[vehicle]=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1-1],vehicle.route[pos2],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos2],vehicle.route[pos1+1],dtable)
							#mvehicles[vehicle]+=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1+1,pos2-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos2-1],vehicle.route[pos1],dtable)

							
							#改善前時間算出
							# arr_t=round(arr_t,4)
							arr1=arr_t
							atpen+=max(0.0,lv_t-vehicle.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle,argvs)==False:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-vehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list[i1][i2],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
							##

							# adist=dtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].spotno] \
							# 	+ dtable5[vehicle.route[pos2].spotno][vehicle.route[pos1+1].spotno] \
							# 	+ calc_dist(vehicle,lv1,pos1+2,pos2,argvs) \
							# 	+ dtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].spotno]
							# if argvs.management_etable:
							# 	apower=etable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].spotno] \
							# 	+ etable5[vehicle.route[pos2].spotno][vehicle.route[pos1+1].spotno] \
							# 	+ etable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].spotno]
							# if argvs.management_xtable:
							# 	aexp=xtable3[vehicle.route[pos1-1].spotno][vehicle.route[pos2].spotno] \
							# 	+ xtable5[vehicle.route[pos2].spotno][vehicle.route[pos1+1].spotno] \
							# 	+ xtable6[vehicle.route[pos2-1].spotno][vehicle.route[pos1].spotno]

						else:
							#mvehicles[vehicle]=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1-1],vehicle.route[pos2],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos2],vehicle.route[pos1+1],dtable)
							#mvehicles[vehicle]+=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1+1,pos2-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos2-1],vehicle.route[pos1],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1],vehicle.route[pos2+1],dtable)
							#mvehicles[vehicle]+=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos2+1,len(vehicle.route)-2)])


							arr_t=lv_t+ttable7[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos2+1].spotno]*vehicle.drskill
							lv_t=lv
							st_t=st
							if vehicle.route[pos1].additionalcust[i1].custno!=vehicle.route[pos2+1].custno:
								atpen+=max(0.0,st_t-vehicle.route[pos2+1].due_fs)

							for i in range(pos2+1,blast_idx-1):
								if vehicle.route[i].custno==vehicle.route[i+1].custno and vehicle.route[i+1].custno!="0":
									continue
								
								ttable8=get_ttable(vehicle.vtype,lv_t,argvs.management_ttable)
								arr_t=lv_t+ttable8[vehicle.route[i].spotno][vehicle.route[i+1].spotno]*vehicle.drskill
								# arr_t=round(arr_t,4)
								

								if vehicle.route[i+1] in servt_dict:
									proc_time=servt_dict[vehicle.route[i+1]]
								else:
									proc_time=vehicle.route[i+1].servt
								if i+1 in no_park_idx:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(vehicle.route[i],vehicle.route[i+1],lv_t,proc_time,vehicle,no_park,argvs)
								if vehicle.route[i].custno!="0" or vehicle.route[i+1].custno!="0":
									atpen+=ttime_pen
							arr1=arr_t

							atpen+=max(0.0,lv_t-vehicle.endhour) ##bug no younanode tsuika

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle,argvs)==False:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-vehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list[i1][i2],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
							##
						#### ここまで休憩機能なし用の処理 ####
					else:
						#### ここから休憩機能あり用の処理 ####
						veh = dcopy(vehicle)
						veh.route = skv1_route
						if argvs.pickup_flag==True:
							#集荷最適化
							if pick_opt_flag:
								if not get_pick_opt_status(veh, argvs)[0]:
									veh.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(veh, pick_opt_flag, argvs)
						if not(org_flag==True and i1==0 and i2==0):
							veh = insert_breakspot(takebreak_list1[i3], None, customers, veh, vehicles, argvs, 0)
						if veh==None:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
							continue

						skv1_route = veh.route
						alast_idx=len(skv1_route)
						for i in reversed(range(0,len(skv1_route))):
							if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
								break
							else:
								alast_idx=i
						arr1 = veh.arr[alast_idx-1]
						lv_t = veh.lv[alast_idx-1]
						depo_idx=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						veh.update_totalcost_dtable(argvs)
						adist = veh.totalcost_wolast
						for i in range(start_idx,alast_idx):
							if i==0 or (argvs.bulkShipping_flag==False and (veh.route[i-1].custno!=veh.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (veh.route[i-1].customers[0].custno!=veh.route[i].customers[0].custno)):
								atpen+=max(0.0,veh.st[i]-veh.route[i].due_fs)
						atpen+=max(0.0,lv_t-veh.endhour)

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(veh,argvs)==False:
							atpen_temp,btpen_temp=return_lutime_penalty(lv_t-veh.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-veh.arr[0],0,btpen_temp)
						#### 
						if argvs.management_etable:
							apower=calc_power(veh,start_idx+1,alast_idx,argvs)
						if argvs.management_xtable:
							aexp=calc_exp(veh,start_idx+1,alast_idx,argvs)
						#### ここまで休憩機能あり用の処理 ####

					#集荷違反量を計算
					if argvs.pickup_flag==True:
						max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(skv1_route,vehicle)
					else:
						max_load_pen,max_load_pen2=0,0

					load_pen,load_pen2=0,0
					for j in range(len(depo_idx)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx[j]+1,depo_idx[j+1]):
							if skv1_route[k].requestType=="DELIVERY":
								if skv1_route[k].custno[0] != "b":
									load_onbrd+=skv1_route[k].dem
									load_onbrd2+=skv1_route[k].dem2

						load_pen+=max(load_onbrd-vehicle.cap,0)
						load_pen2+=max(load_onbrd2-vehicle.cap2,0)

					aload =load_pen+max_load_pen
					aload2 = load_pen2+max_load_pen2

					#改善前後の到着時間算出(拠点を出発し最後の配送先まで(-l ありの場合))
					if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
						atime=0.0
						time_error = 0.0
					else:
						# #vehicle1の改善後arr計算
						# arr1, route1 = calc_vehicle_arr_route(skv1_route, vehicle, vehicle.drskill, vehicle.opskill, vehicle.chg_batt_dict)

						if argvs.opt_t_weight!=0:
							#(最後の配送先の到着時刻(arr)と最後の配送先の受け入れ時刻(ready_fs)の遅い時刻 + 荷下ろし時間)
							#改善後時間算出
							if skv1_route[alast_idx-1] in servt_dict:
								if lcnt==0:
									if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill
									else:
										atime = max(arr1, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill
								else:
									if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill-delay_arr_list[i1][i2]+vehicle.arr[0]
									else:
										atime = max(arr1, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill-delay_arr_list[i1][i2]+vehicle.arr[0]
							else:
								if lcnt==0:
									if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill
									else:
										atime = max(arr1, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill
								else:
									if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill-delay_arr_list[i1][i2]+vehicle.arr[0]
									else:
										atime = max(arr1, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill-delay_arr_list[i1][i2]+vehicle.arr[0]
							if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
								atime+=skv1_route[alast_idx-1].parkt_open
						else:
							atime=0.0

						mvehicles={vehicle:0.0}
						if skv1_route[alast_idx-1] in servt_dict:
							if lcnt==0:
								if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
									mvehicles[vehicle] = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill - vehicle.arr[0]
								else:
									mvehicles[vehicle] = max(arr1, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill - vehicle.arr[0]
							else:
								if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
									mvehicles[vehicle] = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill - delay_arr_list[i1][i2]
								else:
									mvehicles[vehicle] = max(arr1, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill - delay_arr_list[i1][i2]
						else:
							if lcnt==0:
								if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
									mvehicles[vehicle] = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill - vehicle.arr[0]
								else:
									mvehicles[vehicle] = max(arr1, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill - vehicle.arr[0]
							else:
								if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
									mvehicles[vehicle] = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill - delay_arr_list[i1][i2]
								else:
									mvehicles[vehicle] = max(arr1, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill - delay_arr_list[i1][i2]
						if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
							mvehicles[vehicle]+=skv1_route[alast_idx-1].parkt_open

						if argvs.avetime_ape_flag==True:
							time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
						else:
							time_error=0.0
					
					if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
						visits_error = 0.0
					else:
						mvehicles={vehicle:0.0}
						if argvs.bulkShipping_flag:
							mvehicles[vehicle] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
						else:
							mvehicles[vehicle] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])

						if argvs.avevisits_ape_flag==True:
							visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
						else:
							visits_error=0.0

					if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
						dist_error = 0.0
					else:
						mvehicles={vehicle:0.0}
						if lcnt==0:
							mvehicles[vehicle] = adist+vehicle.remdist[0]-vehicle.remdist[start_idx]
						else:
							mvehicles[vehicle] = adist+vehicle.delay_remdist[0]-vehicle.delay_remdist[start_idx]

						if argvs.avedist_ape_flag==True:
							dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
						else:
							dist_error=0.0

					#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
					if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
						aunass = len([c for c in skv1_route[1:alast_idx] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

					ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907

					if ires_temp and cdiff<cdiff_best:
						ires=True
						cdiff_best=cdiff
						if bload==1e9 and i1==0 and i2==0 and lcnt==0:
							btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp=atpen,adist,aload,aload2,time_error,visits_error,dist_error,atime,apower,aexp
							bvfinal_t=lv_t
							cdiff_best=0
						pick_opt_flag_best=pick_opt_flag
						index1,index2=i1,i2
						delay_lcnt_best=lcnt
						if argvs.break_flag == True:
							route_best = skv1_route
							ttable_best = argvs.management_ttable
							dtable_best = argvs.management_dtable
							etable_best = argvs.management_etable
							xtable_best = argvs.management_xtable
							vehnos=[v.vehno for v in vehicles]
							vehicles[vehnos.index(vehicle.vehno)].route = skv1_route
							t_route_best = r_backup(vehicles)

					if argvs.break_flag:
						argvs.management_ttable = t_dcopy(t_ttable)
						argvs.management_dtable = t_dcopy(t_dtable)
						argvs.management_etable = t_dcopy(t_etable)
						argvs.management_xtable = t_dcopy(t_xtable)
						vehicles = r_restore(vehicles, t_route, argvs)

	return ires,btpen,bload,bload2,pick_opt_flag_best,index1,index2,delay_lcnt_best,route_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best

def inswap_cust_dtable(customers,vehicle,pos1,pick_opt_flag,index1,index2,route,argvs):
	if route != None:
		#休憩機能あり
		vehicle.route = route
		vehicle.update_totalcost_dtable(argvs)
	else:
		#休憩機能なし
		vehicle.route[pos1+1],vehicle.route[pos1]=vehicle.route[pos1].additionalcust[index1],vehicle.route[pos1+1].additionalcust[index2]
		vehicle.update_totalcost_dtable(argvs)
		#集荷最適化
		if argvs.bulkShipping_flag==False and pick_opt_flag==True and vehicle.route[-2].custno!="0" and vehicle.route[-1].custno!="0":
			vehicle.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
		elif argvs.bulkShipping_flag==True and pick_opt_flag==True and vehicle.route[-2].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0":
			depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
			depo.customers.append(copy.deepcopy(customers[0].customers[0]))
			depo.servt=customers[0].servt
			depo.dem=customers[0].dem
			depo.dem2=customers[0].dem2
			depo.reje_ve=customers[0].reje_ve
			depo.parkt_open=customers[0].parkt_open
			depo.parkt_arrive=customers[0].parkt_arrive
			depo.depotservt=customers[0].depotservt
			depo.additionalcust=[depo]
			depo.demdivideunit=customers[0].demdivideunit
			depo.requestType=customers[0].requestType
			depo.deny_unass=customers[0].deny_unass #未割り当て荷物

			vehicle.insert_customer_at(-1,depo,argvs)
		elif (argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0") or \
			(argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0"):
			remove_customers_specified([vehicle.route[-2]],vehicle,argvs)

def inswap_addcust(customers,vehicles,vehicle,pos1,argvs,no_depo_parkt_flag,one_table_flag):
	exists_addcust = False

	if( not(pos1+2<len(vehicle.route)) ):
		return False

	if len(vehicle.route[pos1].additionalcust)==1 and len(vehicle.route[pos1+1].additionalcust)==1:
		return False

	if vehicle.route[pos1].custno[0]=="b" or vehicle.route[pos1+1].custno[0]=="b": #休憩スポットならスキップ
		return False

	if argvs.break_flag:
		pick_opt_flag, pick_opt_idx = get_pick_opt_status(vehicle, argvs)
		if pick_opt_flag==True and pos1+1==pick_opt_idx:
			return False
	else:
		pick_opt_flag=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].customers[0].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
			else:
				if vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
		if pick_opt_flag==True and pos1+1==len(vehicle.route)-2 and vehicle.route[pos1+1].custno=="0":
			return False

	if argvs.delaystart2_flag==True: #休憩スポットが有効ならばdelayしない
		delay_arr_list=[[0 for i1 in range(len(vehicle.route[pos1].additionalcust))] for i2 in range(len(vehicle.route[pos1+1].additionalcust))]

		for i2 in range(len(vehicle.route[pos1+1].additionalcust)):
			for i1 in range(len(vehicle.route[pos1].additionalcust)):
				tv_route=copy.copy(vehicle.route)
				vehicle.route[pos1],vehicle.route[pos1+1]=vehicle.route[pos1].additionalcust[i1],vehicle.route[pos1+1].additionalcust[i2]
				vehicle.update_totalcost_dtable(argvs)

				delay_arr_time(vehicles,argvs)

				delay_arr_list[i2][i1]=vehicle.delay_arr[0]

				vehicle.route=tv_route
				vehicle.update_totalcost_dtable(argvs)
	else:
		delay_arr_list=[]

	#tv=copy.deepcopy(vehicle)
	tv = dcopy(vehicle)
	tv.load_pen=1e9 #大きい値を設定することで必ず１つは改善解が見つかる
	#tvehicles=copy.deepcopy(vehicles)
	tvehicles=[]
	for v in vehicles:
		tvehicles.append(dcopy(v))

	inswap_cust_dtable(customers,tv,pos1,pick_opt_flag,0,0,None,argvs)

	for i in range(len(tvehicles)):
		if tvehicles[i].vehno==tv.vehno:
			tvehicles[i]=tv
			break

	org_flag=True
	if argvs.lastc_flag==True:
		exists,atpen,aload,aload2,pick_opt_flag,index1,index2,delay_flag,route,ttable,dtable,etable,xtable,t_route=inswap_improved_lastc_dtable(customers,tvehicles,tv,pos1,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list,org_flag)
	else:
		exists,atpen,aload,aload2,pick_opt_flag,index1,index2,delay_flag,route,ttable,dtable,etable,xtable,t_route=inswap_improved_todepot_dtable(customers,tvehicles,tv,pos1,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list,org_flag)
	if(exists):
		if index1!=0 or index2!=0:
			exists_addcust = True
		##20180904
		tv_route=vehicle.route[:]
		if route!=None:
			t_ttable = t_dcopy(argvs.management_ttable)
			t_dtable = t_dcopy(argvs.management_dtable)
			t_etable = t_dcopy(argvs.management_etable)
			t_xtable = t_dcopy(argvs.management_xtable)
			argvs.management_ttable = t_dcopy(ttable)
			argvs.management_dtable = t_dcopy(dtable)
			argvs.management_etable = t_dcopy(etable)
			argvs.management_xtable = t_dcopy(xtable)
			vehicles = r_restore(vehicles, t_route, argvs)
			vehicle.route = route
		else:
			vehicle.route[pos1],vehicle.route[pos1+1]=vehicle.route[pos1].additionalcust[index2],vehicle.route[pos1+1].additionalcust[index1]
		vehicle.update_totalcost_dtable(argvs)

		if delay_flag:
			delay_arr_time2(vehicles,vehicles,argvs)


		depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]
		servt_dict={}
		for k in range(len(depo_idx)-1):
			servt_dict[vehicle.route[depo_idx[k]]]=0
			servt=0
			for j in range(depo_idx[k]+1,depo_idx[k+1]):
				if vehicle.route[j].requestType=="DELIVERY" and vehicle.route[j].custno[0]!='b':
					servt+=vehicle.route[j].depotservt
			if vehicle.route[depo_idx[k]+1].custno!="0":
				servt_dict[vehicle.route[depo_idx[k]]]+=servt+vehicle.depotservt
			else:
				servt_dict[vehicle.route[depo_idx[k]]]+=servt
		#集荷時間
		servt_dict[vehicle.route[len(vehicle.route)-1]]=0
		for k in range(1,len(depo_idx)):
			servt=0
			for j in range(depo_idx[k-1]+1,depo_idx[k]):
				if vehicle.route[j].requestType=="PICKUP":
					servt+=vehicle.route[j].depotservt
			servt_dict[vehicle.route[depo_idx[k]]]+=servt

		load=[0 for c in vehicle.route]
		load2=[0 for c in vehicle.route]
		for i in range(len(vehicle.route)-1):
			if i in depo_idx:
				for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
					if vehicle.route[j].requestType=="DELIVERY":
						if vehicle.route[j].custno[0] != "b":
							load[i]+=vehicle.route[j].dem
							load2[i]+=vehicle.route[j].dem2
			else:
				if vehicle.route[i].custno[0] != "b":
					if vehicle.route[i].requestType=="DELIVERY":
						load[i]=load[i-1]-vehicle.route[i].dem
						load2[i]=load2[i-1]-vehicle.route[i].dem2
					else:
						load[i]=load[i-1]+vehicle.route[i].dem
						load2[i]=load2[i-1]+vehicle.route[i].dem2

		for i in reversed(range(len(load))):
			if i in depo_idx and i+1 in depo_idx:
				load[i]=load[i+1]
				load2[i]=load2[i+1]

		load=[i if i>1e-9 else 0 for i in load] #誤差対策
		load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

		no_park_idx=[]
		for c in vehicle.route[depo_idx[0]+1:depo_idx[1]]:
			if c.requestType=="DELIVERY":
				break
		else:
			if load[0]==0 and load2[0]==0:
				no_park_idx.append(0)
		
		for i in range(1,len(depo_idx)-1):
			if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
				for c in vehicle.route[depo_idx[i]+1:depo_idx[i+1]]:
					if c.requestType=="DELIVERY":
						break
				else:
					if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
						no_park_idx.append(depo_idx[i])
		if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
			no_park_idx.append(depo_idx[-1])

		pick_opt_flag=False
		non_depo=False
		if argvs.pickup_flag==True:
			for i in reversed(range(1,len(vehicle.route)-1)):
				if argvs.bulkShipping_flag==True:
					if vehicle.route[i].customers[0].custno!="0":
						if vehicle.route[i].customers[0].custno[0]!="b":
							non_depo=True
							if vehicle.route[i].customers[0].requestType=="PICKUP":
								pick_opt_flag=True
								break
					elif non_depo==True:
						break
				else:
					if vehicle.route[i].custno!="0":
						if vehicle.route[i].custno[0]!="b":
							non_depo=True
							if vehicle.route[i].requestType=="PICKUP":
								pick_opt_flag=True
								break
					elif non_depo==True:
						break

		if check_impassability(customers,vehicle,vehicle.lv[0],1,servt_dict,len(vehicle.route),no_park_idx,pick_opt_flag,argvs)[0]==False:
			if argvs.break_flag:
				argvs.management_ttable = t_ttable
				argvs.management_dtable = t_dtable
				argvs.management_etable = t_etable
				argvs.management_xtable = t_xtable
			vehicle.route=tv_route[:]
			vehicle.update_totalcost_dtable(argvs)
			return False

		#現在(=最新)のatpenとaloadとAPEを保存する
		if argvs.lastc_flag:
			for i in reversed(range(0,len(vehicle.route))):
				if vehicle.route[i].custno=="0" or vehicle.route[i].custno[0]=="b" or vehicle.route[i].custno[0]=="e" or i==len(vehicle.route)-1:
					last_idx=i
				else:
					break
			vehicle.time_pen=sum([max(0.0,vehicle.st[i]-vehicle.route[i].due_fs) for i in range(1,last_idx)])+max(0.0,vehicle.lv[last_idx-1]-vehicle.endhour)
		else:
			vehicle.time_pen=sum([max(0.0,vehicle.st[i]-vehicle.route[i].due_fs) for i in range(1,len(vehicle.route))])+max(0.0,vehicle.lv[-1]-vehicle.endhour)

		if argvs.pickup_flag==True:
			max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(vehicle.route,vehicle)
		else:
			max_load_pen,max_load_pen2=0,0

		depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]

		load_pen,load_pen2=0,0
		for j in range(len(depo_idx)-1):
			load_onbrd,load_onbrd2=0,0
			for k in range(depo_idx[j]+1,depo_idx[j+1]):
				if vehicle.route[k].requestType=="DELIVERY":
					if vehicle.route[k].custno[0] != "b":
						load_onbrd+=vehicle.route[k].dem
						load_onbrd2+=vehicle.route[k].dem2

			load_pen+=max(load_onbrd-vehicle.cap,0)
			load_pen2+=max(load_onbrd2-vehicle.cap2,0)

		vehicle.load_pen =load_pen+max_load_pen
		vehicle.load_pen2 = load_pen2+max_load_pen2
		argvs.atpen=sum([v.time_pen for v in vehicles])
		argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehicles])
		if argvs.avetime_ape_flag==True:
			argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
		elif argvs.avetime_ae_flag==True:
			argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

		if argvs.avevisits_ape_flag==True:
			argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
		elif argvs.avevisits_ae_flag==True:
			argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

		if argvs.avedist_ape_flag==True:
			argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
		elif argvs.avedist_ae_flag==True:
			argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

		#違反なしのrouteを保存する
		backup_route(vehicles, argvs)

	return exists_addcust


def inswap_dtable(customers,vehicles,lastc_flg,ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag): #20180807
	sLogBuf = "\n"
	#exists=True
	exists=False
	improved_cnt=0
	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
	if len([(v,i1) for v in vehicles \
				for i1 in range(1,len(v.route)) \
				if v.direct_flag==False])==0:
				#exists=False
				return improved_cnt

	#while(exists):
	while True:
		exists=False
		exists_addcust=False
		#result.logprint("inswap_dtable for loop start icnt:"+str(improved_cnt)+"\n")
		# #平準化高速化の為のソート
		# sorted_vehicles = vehicles[:]
		# if argvs.avedist_ape_flag or argvs.avedist_ae_flag:
		# 	derrs = [0 for v in sorted_vehicles]
		# 	if argvs.avedist_ape_flag:
		# 		derrs = calc_avedist_APE_list(sorted_vehicles, argvs.avedist_ape, argvs.lastc_flag)
		# 	else:
		# 		derrs = calc_avedist_AE_list(sorted_vehicles, argvs.avedist_ae, argvs.lastc_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, derrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# if argvs.avevisits_ape_flag or argvs.avevisits_ae_flag:
		# 	verrs = [0 for v in sorted_vehicles]
		# 	if argvs.avevisits_ape_flag:
		# 		verrs = calc_avevisits_APE_list(sorted_vehicles, argvs.avevisits_ape, argvs.bulkShipping_flag)
		# 	else:
		# 		verrs = calc_avevisits_AE_list(sorted_vehicles, argvs.avevisits_ae, argvs.bulkShipping_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, verrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# if argvs.avetime_ape_flag or argvs.avetime_ae_flag:
		# 	terrs = [0 for v in sorted_vehicles]
		# 	if argvs.avetime_ape_flag:
		# 		terrs = calc_avetime_APE_list(sorted_vehicles, argvs.avetime_ape, argvs.lastc_flag)
		# 	else:
		# 		terrs = calc_avetime_AE_list(sorted_vehicles, argvs.avetime_ae, argvs.lastc_flag)
		# 	sorted_vehicles_temp = []
		# 	for i,v in enumerate(sorted_vehicles):
		# 		sorted_vehicles_temp.append([v, terrs[i]])
		# 	sorted_vehicles_temp.sort(key=lambda x:x[1], reverse=True)
		# 	sorted_vehicles=[v[0] for v in sorted_vehicles_temp]

		# for v in sorted_vehicles:
		for v in vehicles:
			if v.direct_flag==False:
				for i1 in range(1,len(v.route)):
					dtable_endtime=time.time() ##20190917
					##dtable_endtime=time.clock() ##20180807
					##20190903
					if argvs.outputstime > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
						sLogBuf += "output_middle inswap\n"
						outputs_middle(customers,vehicles,argvs)
						argvs.outputs_count+=1
					while True:
						if argvs.outputstime > 0.0 and (dtable_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
							argvs.outputs_count+=1
						else:
							break
					##20190903
					if argvs.timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > argvs.timeout):  ##20180807
						sLogBuf += "inswap timeout!\n" #20180807
						break #20180807

					exists_addcust_tmp = inswap_addcust(customers,vehicles,v,i1,argvs,no_depo_parkt_flag,one_table_flag) #場所を変えずに飛び地設定のみ変えて判定
					if exists_addcust_tmp:
						exists_addcust = True
						improved_cnt=improved_cnt+1

					if argvs.delaystart2_flag==True and argvs.break_flag==False and i1+1<len(v.route) and (len(v.route[i1].additionalcust)>1 or len(v.route[i1+1].additionalcust)>1): #休憩スポットが有効ならばdelayしない
						delay_arr_list=[[0 for i in range(len(v.route[i1+1].additionalcust))] for j in range(len(v.route[i1].additionalcust))]

						tv_route=v.route[:]
						for j in range(len(tv_route[i1+1].additionalcust)):
							for i in range(len(tv_route[i1].additionalcust)):
								v.route[i1],v.route[i1+1]=v.route[i1+1].additionalcust[j],v.route[i1].additionalcust[i]
								v.update_totalcost_dtable(argvs)

								delay_arr_time([v],argvs)

								delay_arr_list[i][j]=v.delay_arr[0]

								v.route=tv_route[:]
								v.update_totalcost_dtable(argvs)
					else:
						delay_arr_list=[]

					if lastc_flg==True:
						exists,atpen,aload,aload2,pick_opt_flag,index1,index2,delay_flag,route,ttable,dtable,etable,xtable,t_route=inswap_improved_lastc_dtable(customers,vehicles,v,i1,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list)
					else:
						exists,atpen,aload,aload2,pick_opt_flag,index1,index2,delay_flag,route,ttable,dtable,etable,xtable,t_route=inswap_improved_todepot_dtable(customers,vehicles,v,i1,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list)
					if(exists):
						##20180904
						if route != None:
							t_ttable = t_dcopy(argvs.management_ttable)
							t_dtable = t_dcopy(argvs.management_dtable)
							t_etable = t_dcopy(argvs.management_etable)
							t_xtable = t_dcopy(argvs.management_xtable)
							argvs.management_ttable = t_dcopy(ttable)
							argvs.management_dtable = t_dcopy(dtable)
							argvs.management_etable = t_dcopy(etable)
							argvs.management_xtable = t_dcopy(xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
						tv_route=v.route[:]
						inswap_cust_dtable(customers,v,i1,pick_opt_flag,index1,index2,route,argvs)

						if argvs.delaystart2_flag==True and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
							delay_arr_time2(vehicles,vehicles,argvs)

						depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
						servt_dict={}
						for k in range(len(depo_idx)-1):
							servt_dict[v.route[depo_idx[k]]]=0
							servt=0
							for j in range(depo_idx[k]+1,depo_idx[k+1]):
								if v.route[j].requestType=="DELIVERY" and v.route[j].custno!=v.route[j-1].custno and v.route[j].custno[0]!='b':
									servt+=v.route[j].depotservt
							if v.route[depo_idx[k]+1].custno!="0":
								servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
							else:
								servt_dict[v.route[depo_idx[k]]]+=servt
						#集荷時間
						servt_dict[v.route[len(v.route)-1]]=0
						for k in range(1,len(depo_idx)):
							servt=0
							for j in range(depo_idx[k-1]+1,depo_idx[k]):
								if v.route[j].requestType=="PICKUP" and v.route[j].custno!=v.route[j-1].custno:
									servt+=v.route[j].depotservt
							servt_dict[v.route[depo_idx[k]]]+=servt

						load=[0 for c in v.route]
						load2=[0 for c in v.route]
						for i in range(len(v.route)-1):
							if i in depo_idx:
								for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
									if v.route[j].requestType=="DELIVERY":
										if v.route[j].custno[0] != "b":
											load[i]+=v.route[j].dem
											load2[i]+=v.route[j].dem2
							else:
								if v.route[i].custno[0] != "b":
									if v.route[i].requestType=="DELIVERY":
										load[i]=load[i-1]-v.route[i].dem
										load2[i]=load2[i-1]-v.route[i].dem2
									else:
										load[i]=load[i-1]+v.route[i].dem
										load2[i]=load2[i-1]+v.route[i].dem2

						for i in reversed(range(len(load))):
							if i in depo_idx and i+1 in depo_idx:
								load[i]=load[i+1]
								load2[i]=load2[i+1]

						load=[i if i>1e-9 else 0 for i in load] #誤差対策
						load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

						no_park_idx=[]
						for c in v.route[depo_idx[0]+1:depo_idx[1]]:
							if c.requestType=="DELIVERY":
								break
						else:
							if load[0]==0 and load2[0]==0:
								no_park_idx.append(0)
						
						for i in range(1,len(depo_idx)-1):
							if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
								for c in v.route[depo_idx[i]+1:depo_idx[i+1]]:
									if c.requestType=="DELIVERY":
										break
								else:
									if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
										no_park_idx.append(depo_idx[i])
						if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
							no_park_idx.append(depo_idx[-1])

						pick_opt_flag=False
						non_depo=False
						if argvs.pickup_flag==True:
							for i in reversed(range(1,len(v.route)-1)):
								if argvs.bulkShipping_flag==True:
									if v.route[i].customers[0].custno!="0":
										if v.route[i].customers[0].custno[0]!="b":
											non_depo=True
											if v.route[i].customers[0].requestType=="PICKUP":
												pick_opt_flag=True
												break
									elif non_depo==True:
										break
								else:
									if v.route[i].custno!="0":
										if v.route[i].custno[0]!="b":
											non_depo=True
											if v.route[i].requestType=="PICKUP":
												pick_opt_flag=True
												break
									elif non_depo==True:
										break

						if check_impassability(customers,v,v.lv[0],1,servt_dict,len(v.route),no_park_idx,pick_opt_flag,argvs)[0]==False:
							v.route=tv_route[:]
							if argvs.break_flag:
								argvs.management_ttable = t_ttable
								argvs.management_dtable = t_dtable
								argvs.management_etable = t_etable
								argvs.management_xtable = t_xtable
							v.update_totalcost_dtable(argvs)
							continue
						if exists_addcust_tmp==False:
							improved_cnt=improved_cnt+1

						#現在(=最新)のatpenとaloadとAPEを保存する
						if argvs.lastc_flag:
							for i in reversed(range(0,len(v.route))):
								if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
									last_idx=i
								else:
									break
							v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,last_idx) if v.route[i].custno!=v.route[i-1].custno])+max(0.0,v.lv[last_idx-1]-v.endhour)
						else:
							v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,len(v.route)) if v.route[i].custno!=v.route[i-1].custno])+max(0.0,v.lv[-1]-v.endhour)

						if argvs.pickup_flag==True:
							max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v.route,v)
						else:
							max_load_pen,max_load_pen2=0,0

						depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

						load_pen,load_pen2=0,0
						for j in range(len(depo_idx)-1):
							load_onbrd,load_onbrd2=0,0
							for k in range(depo_idx[j]+1,depo_idx[j+1]):
								if v.route[k].requestType=="DELIVERY":
									if v.route[k].custno[0] != "b":
										load_onbrd+=v.route[k].dem
										load_onbrd2+=v.route[k].dem2

							load_pen+=max(load_onbrd-v.cap,0)
							load_pen2+=max(load_onbrd2-v.cap2,0)

						v.load_pen =load_pen+max_load_pen
						v.load_pen2 = load_pen2+max_load_pen2
						argvs.atpen=sum([v.time_pen for v in vehicles])
						argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehicles])
						if argvs.avetime_ape_flag==True:
							argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

						if argvs.avevisits_ape_flag==True:
							argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

						if argvs.avedist_ape_flag==True:
							argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

						#違反なしのrouteを保存する
						backup_route(vehicles, argvs)

						if lastc_flg==True:
							tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
						else:
							tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
						#result.output_improved_solution(customers,vehicles,tcost,lastc_flg) #daic
						break
				else:
					continue
				break
					
		if exists==False and exists_addcust==False:
			break

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return improved_cnt

#routeを保存する
def backup_route(vehicles, argvs):
	backup_flag=True
	for v in vehicles:
		if ((argvs.loadPenaltyType=="hard" or argvs.loadPenaltyWeight>0) and v.load_pen > 0) or ((argvs.load2PenaltyType=="hard" or argvs.load2PenaltyWeight>0) and v.load_pen2>0) or ((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v.time_pen)) > 0:
			backup_flag=False
			break
		#未割り当て荷物最適化ペナルティがあればバックアップしない
		if (argvs.opt_unassigned_flag==True and v.reserved_v_flag==True):
			last_idx=get_last_idx(v,argvs)
			if len([c for c in v.route[1:last_idx+1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) > 0:
				backup_flag=False
				break
	if ((argvs.timeLevelingPenaltyType=="hard" or argvs.timeLevelingPenaltyWeight>0) and argvs.avetime_ape_flag==True and argvs.time_error > 0) or\
			((argvs.timeLevelingPenaltyType=="hard" or argvs.timeLevelingPenaltyWeight>0) and argvs.avetime_ae_flag==True and argvs.time_error > 0) or\
			((argvs.visitsLevelingPenaltyType=="hard" or argvs.visitsLevelingPenaltyWeight>0) and argvs.avevisits_ape_flag==True and argvs.visits_error > 0) or\
			((argvs.visitsLevelingPenaltyType=="hard" or argvs.visitsLevelingPenaltyWeight>0) and argvs.avevisits_ae_flag==True and argvs.visits_error > 0) or\
			((argvs.distLevelingPenaltyType=="hard" or argvs.distLevelingPenaltyWeight>0) and argvs.avedist_ape_flag==True and argvs.dist_error > 0) or\
			((argvs.distLevelingPenaltyType=="hard" or argvs.distLevelingPenaltyWeight>0) and argvs.avedist_ae_flag==True and argvs.dist_error > 0):
		backup_flag=False

	#違反なしの場合、解保存用Vehicle.routeを保持
	if backup_flag==True:
		for v in vehicles:
			#違反なし解のrouteを保存する
			argvs.non_violation_vehicles_route[v.vehno]=v.route[:]

		#違反なしの場合、ttable,dtable,etable,xtableを保持
		if argvs.break_flag and (get_breakspot_pattern(vehicles, argvs)==3 or len([t for v in vehicles for t in v.takebreak if t.spotid==""])>0):
			argvs.non_violation_management_dtable = t_dcopy(argvs.management_dtable)
			argvs.non_violation_management_ttable = t_dcopy(argvs.management_ttable)
			argvs.non_violation_management_etable = t_dcopy(argvs.management_etable)
			argvs.non_violation_management_xtable = t_dcopy(argvs.management_xtable)


#保存されたrouteを書き戻す
def restore_route(vehicles, argvs):
	restore_flag=False
	for v in vehicles:
		if ((argvs.loadPenaltyType=="hard" or argvs.loadPenaltyWeight>0) and v.load_pen > 0) or ((argvs.load2PenaltyType=="hard" or argvs.load2PenaltyWeight>0) and v.load_pen2>0) or ((argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(v.time_pen)) > 0:
			restore_flag=True
			break
		#未割り当て荷物最適化ペナルティがあればリストアする
		if (argvs.opt_unassigned_flag==True and v.reserved_v_flag==True):
			last_idx=get_last_idx(v,argvs)
			if len([c for c in v.route[1:last_idx+1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) > 0:
				restore_flag=True
				break
	# if argvs.aveflag==True and argvs.APE > 0:
	if ((argvs.timeLevelingPenaltyType=="hard" or argvs.timeLevelingPenaltyWeight>0) and argvs.avetime_ape_flag==True and argvs.time_error > 0) or\
			((argvs.timeLevelingPenaltyType=="hard" or argvs.timeLevelingPenaltyWeight>0) and argvs.avetime_ae_flag==True and argvs.time_error > 0) or\
			((argvs.visitsLevelingPenaltyType=="hard" or argvs.visitsLevelingPenaltyWeight>0) and argvs.avevisits_ape_flag==True and argvs.visits_error > 0) or\
			((argvs.visitsLevelingPenaltyType=="hard" or argvs.visitsLevelingPenaltyWeight>0) and argvs.avevisits_ae_flag==True and argvs.visits_error > 0) or\
			((argvs.distLevelingPenaltyType=="hard" or argvs.distLevelingPenaltyWeight>0) and argvs.avedist_ape_flag==True and argvs.dist_error > 0) or\
			((argvs.distLevelingPenaltyType=="hard" or argvs.distLevelingPenaltyWeight>0) and argvs.avedist_ae_flag==True and argvs.dist_error > 0):
		restore_flag=True

	if restore_flag==True:
		if argvs.break_flag and (get_breakspot_pattern(vehicles, argvs)==3 or len([t for v in vehicles for t in v.takebreak if t.spotid==""])>0):
			#違反ありの場合、ttable,dtable,etable,xtableを書き戻す
			if len(argvs.non_violation_management_dtable) > 0:
				argvs.management_dtable = t_dcopy(argvs.non_violation_management_dtable)
			if len(argvs.non_violation_management_ttable) > 0:
				argvs.management_ttable = t_dcopy(argvs.non_violation_management_ttable)
			if len(argvs.non_violation_management_etable) > 0:
				argvs.management_etable = t_dcopy(argvs.non_violation_management_etable)
			if len(argvs.non_violation_management_xtable) > 0:
				argvs.management_xtable = t_dcopy(argvs.non_violation_management_xtable)
		for v in vehicles:		
			#違反解の場合、routeを書き戻す
			if v.vehno in argvs.non_violation_vehicles_route:
				v.route[:] = argvs.non_violation_vehicles_route[v.vehno][:]
				v.update_totalcost_dtable(argvs)
				v.update_arrtime_tw(argvs)	#到着時刻再計算
				v.update_load_onbrd()	#積載量再計算
				v.update_rem_battery(argvs)  #充電残量再計算

				#現在(=最新)のatpenとaloadとAPEを保存する
				if argvs.lastc_flag:
					for i in reversed(range(0,len(v.route))):
						if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
							last_idx=i
						else:
							break
					v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,last_idx) if v.route[i].custno!=v.route[i-1].custno])+max(0.0,v.lv[last_idx-1]-v.endhour)
				else:
					v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,len(v.route)) if v.route[i].custno!=v.route[i-1].custno])+max(0.0,v.lv[-1]-v.endhour)

				if argvs.pickup_flag==True:
					max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v.route,v)
				else:
					max_load_pen,max_load_pen2=0,0

				depo_idx1=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

				load_pen,load_pen2=0,0
				for j in range(len(depo_idx1)-1):
					load_onbrd,load_onbrd2=0,0
					for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
						if v.route[k].requestType=="DELIVERY":
							if v.route[k].custno[0] != "b":
								load_onbrd+=v.route[k].dem
								load_onbrd2+=v.route[k].dem2

					load_pen+=max(load_onbrd-v.cap,0)
					load_pen2+=max(load_onbrd2-v.cap2,0)

				v.load_pen =load_pen+max_load_pen
				v.load_pen2 = load_pen2+max_load_pen2

		argvs.atpen=sum([v.time_pen for v in vehicles])
		argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehicles])
		if argvs.avetime_ape_flag==True:
			argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
		elif argvs.avetime_ae_flag==True:
			argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

		if argvs.avevisits_ape_flag==True:
			argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
		elif argvs.avevisits_ae_flag==True:
			argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

		if argvs.avedist_ape_flag==True:
			argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
		elif argvs.avedist_ae_flag==True:
			argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)



# def inswap_dtable_mp(customers,vehicles,lastc_flg,ls_d_starttime,timeout,argvs): #20190917
# 	sLogBuf = "\n"
# 	#exists=True
# 	exists=False
# 	improved_cnt=0
# 	tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
# 	if len([(v,i1) for v in vehicles \
# 				for i1 in range(1,len(v.route)) \
# 				])==0:
# 				#exists=False
# 				return improved_cnt,vehicles

# 	#while(exists):
# 	while True:
# 		exists=False
# 		#result.logprint("inswap_dtable for loop start icnt:"+str(improved_cnt)+"\n")
# 		for v,i1 in [(v,i1) for v in vehicles \
# 					for i1 in range(1,len(v.route)) \
# 					]:

# 			dtable_endtime=time.time() ##20190917
# 			##dtable_endtime=time.clock() ##20180807
# 			if timeout > 0.0 and ((dtable_endtime - ls_d_starttime) > timeout):  ##20180807
# 				sLogBuf += "inswap_mp timeout!\n" #20180807
# 				break #20180807

# 			if lastc_flg==True:
# 				exists,atpen,aload,aload2=inswap_improved_lastc_dtable(customers,vehicles,v,i1,argvs)
# 			else:
# 				exists,atpen,aload.aload2=inswap_improved_todepot_dtable(customers,vehicles,v,i1,argvs)
# 			if(exists):
# 				##20180904
# 				improved_cnt=improved_cnt+1
# 				inswap_cust_dtable(v,i1,argvs)

# 				#現在(=最新)のatpenとaloadとAPEを保存する
# 				argvs.atpen = atpen
# 				argvs.aload = aload
# 				v.time_pen = atpen
# 				v.load_pen = aload
# 				if argvs.avetime_ape_flag==True:
# 					argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag)
# 				elif argvs.avetime_ae_flag==True:
# 					argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag)

# 				if argvs.avevisits_ape_flag==True:
# 					argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag)
# 				elif argvs.avevisits_ae_flag==True:
# 					argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag)

# 				#違反なしのrouteを保存する
# 				backup_route(vehicles, argvs)

# 				if lastc_flg==True:
# 					tcost=reduce(lambda s,v:s+v.totalcost_wolast,vehicles,0.0)
# 				else:
# 					tcost=reduce(lambda s,v:s+v.totalcost,vehicles,0.0)
# 				#result.output_improved_solution(customers,vehicles,tcost,lastc_flg)
# 				break
					
# 		if(exists==False):
# 			break

# 	if sLogBuf != "\n":
# 		if rank==0:
# 			logging.log(logging.INFO,sLogBuf)

# 	return improved_cnt,vehicles

def inswap_improved_todepot_dtable(customers,vehicles,vehicle,pos1,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list,org_flag=False):
	ires=False
	index1,index2=0,0
	delay_lcnt_best=0
	pick_opt_flag_best=False
	cdiff_best=0
	route_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if( not(pos1+2<len(vehicle.route)) ):
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	
	if vehicle.route[pos1].custno=="0" and vehicle.route[pos1+1].custno=="0": #デポ同士ならスキップ
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if vehicle.route[pos1].custno[0]=="b" or vehicle.route[pos1+1].custno[0]=="b": #休憩スポットならスキップ
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化
		if free_or_additive(vehicle.route[pos1],vehicle,vehicles,argvs)=="additive" and free_or_additive(vehicle.route[pos1+1],vehicle,vehicles,argvs)=="additive": #条件2同士ならスキップ
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" and vehicle.load_pen!=1e9: #条件2が他の便に移るならスキップ
			skv1_route_temp = vehicle.route[:]											# ルート全体をコピー
			skv1_route_temp[pos1+1],skv1_route_temp[pos1]=skv1_route_temp[pos1],skv1_route_temp[pos1+1]	# ルート入替
			for i in range(len(skv1_route_temp)-1):
				if in_additive(skv1_route_temp[i],vehicle,skv1_route_temp,vehicles,argvs)==False:
					return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	else:
		#未割り当て荷物最適化ではない、または、予約車両ではない
		if vehicle.route[pos1].changecust=="additive" and vehicle.route[pos1+1].changecust=="additive": #条件2同士ならスキップ
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" and vehicle.load_pen!=1e9: #条件2が他の便に移るならスキップ
			rotate_idx={}
			idx=0
			for i in range(len(vehicle.route)-1):
				if vehicle.route[i].custno=="0" and vehicle.route[i+1].custno!="0":
					idx+=1
				elif vehicle.route[i].changecust=="additive" and vehicle.route[i].custno!="0" and vehicle.route[i].custno[0]!="b":
					rotate_idx[vehicle.route[i]]=idx

			skv1_route_temp = vehicle.route[:]											# ルート全体をコピー
			skv1_route_temp[pos1+1],skv1_route_temp[pos1]=skv1_route_temp[pos1],skv1_route_temp[pos1+1]	# ルート入替

			idx=0
			for i in range(len(skv1_route_temp)-1):
				if skv1_route_temp[i].custno=="0" and skv1_route_temp[i+1].custno!="0":
					idx+=1
				elif skv1_route_temp[i].changecust=="additive" and skv1_route_temp[i].custno!="0" and skv1_route_temp[i].custno[0]!="b":
					if rotate_idx[skv1_route_temp[i]]!=idx:
						return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	#集荷最適化の場合DEPOは改善対象外
	if argvs.break_flag:
		pick_opt_flag, pick_opt_idx = get_pick_opt_status(vehicle, argvs)
		if pick_opt_flag==True and pos1+1>=pick_opt_idx:
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	else:
		pick_opt_flag = False	
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].customers[0].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
			else:
				if vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
		if pick_opt_flag==True and pos1+1==len(vehicle.route)-2:
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]
	for i in range(len(depo_idx)-1):
		if depo_idx[i]<pos1 and pos1<=depo_idx[i+1]:
			start_idx=depo_idx[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and delay_arr_list==[] and argvs.break_flag==False:
		start_idx=pos1-1	
	if delay_arr_list!=[]:
		start_idx=0

	n=len(vehicle.route)
	l_time=0.0
	bdist,adist,btpen,atpen,bpower,apower,bexp,aexp,aload,aload2,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
	for i in range(start_idx,n):
		if i==0 or (argvs.bulkShipping_flag==False and (vehicle.route[i-1].custno!=vehicle.route[i].custno)) or \
			(argvs.bulkShipping_flag==True and (vehicle.route[i-1].customers[0].custno!=vehicle.route[i].customers[0].custno)):
			btpen+=max(0.0,vehicle.st[i]-vehicle.route[i].due_fs)
	btpen+=max(0.0,vehicle.lv[n-1]-vehicle.endhour)

	##kaizen mae no final arrive time
	bvfinal_t=vehicle.lv[n-1]
	##

	if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist=calc_dist(vehicle,start_idx+1,len(vehicle.route),argvs)
		if argvs.management_etable:
			bpower=calc_power(vehicle,start_idx+1,len(vehicle.route),argvs)
		if argvs.management_xtable:
			bexp=calc_exp(vehicle,start_idx+1,len(vehicle.route),argvs)
	else:
		bdist=get_dtable(vehicle.vtype, vehicle.lv[pos1-1], argvs.management_dtable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_dtable(vehicle.vtype, vehicle.lv[pos1], argvs.management_dtable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_dtable(vehicle.vtype, vehicle.lv[pos1+1], argvs.management_dtable)[vehicle.route[pos1+1].spotno][vehicle.route[pos1+2].spotno]
		if argvs.management_etable:
			bpower=get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1-1], argvs.management_etable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1], argvs.management_etable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1+1], argvs.management_etable)[vehicle.route[pos1+1].spotno][vehicle.route[pos1+2].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(vehicle.vtype, vehicle.lv[pos1-1], argvs.management_xtable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_xtable(vehicle.vtype, vehicle.lv[pos1], argvs.management_xtable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno] \
			+get_xtable(vehicle.vtype, vehicle.lv[pos1+1], argvs.management_xtable)[vehicle.route[pos1+1].spotno][vehicle.route[pos1+2].spotno]

	bload = vehicle.load_pen
	bload2 = vehicle.load_pen2

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = vehicle.lv[-1]
	else:
		btime=0.0

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
		bunass = len([c for c in vehicle.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	if delay_arr_list!=[]:
		delay_lcnt=2
	else:
		delay_lcnt=1

	takebreak_list1 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in vehicle.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for i1 in range(len(vehicle.route[pos1].additionalcust)):
		if free_or_additive(vehicle.route[pos1],vehicle,vehicles,argvs)=="additive" and i1!=0:
			continue
		for i2 in range(len(vehicle.route[pos1+1].additionalcust)):
			if free_or_additive(vehicle.route[pos1+1],vehicle,vehicles,argvs)=="additive" and i2!=0:
				continue
			for i3 in range(len(takebreak_list1)):
				for lcnt in range(delay_lcnt):
					adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
					btpen_temp=btpen
					atpen_temp=0
					#変更後に訪問数上限を超えていたらFalseを返す
					v_spotid=[c.spotid for c in vehicle.route]
					v_spotid[pos1],v_spotid[pos1+1]=vehicle.route[pos1+1].additionalcust[i2].spotid,vehicle.route[pos1].additionalcust[i1].spotid
					#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([c for c in v_spotid[1:-1] if c=="0"])
					# visitnum=calc_visitnum(v_spotid)
					# if vehicle.maxvisit>0 and visitnum>vehicle.maxvisit:
					# 	continue
					
					skv1_route = vehicle.route[:]											# ルート全体をコピー
					skv1_route[pos1+1],skv1_route[pos1]=skv1_route[pos1].additionalcust[i1],skv1_route[pos1+1].additionalcust[i2]	# ルート入替

					visitnum=calc_visitnum(skv1_route)
					if vehicle.maxvisit>0 and visitnum>vehicle.maxvisit:
						continue

					depo_idx=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[skv1_route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno and skv1_route[j].custno[0]!='b':
								servt+=skv1_route[j].depotservt
						if skv1_route[depo_idx[k]+1].custno!="0":
							servt_dict[skv1_route[depo_idx[k]]]+=servt+vehicle.depotservt
						else:
							servt_dict[skv1_route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[skv1_route[len(skv1_route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv1_route[j].depotservt
						servt_dict[skv1_route[depo_idx[k]]]+=servt

					load=[0 for c in skv1_route]
					load2=[0 for c in skv1_route]
					for i in range(len(skv1_route)-1):
						if i in depo_idx:
							for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
								if skv1_route[j].requestType=="DELIVERY":
									if skv1_route[j].custno[0] != "b":
										load[i]+=skv1_route[j].dem
										load2[i]+=skv1_route[j].dem2
						else:
							if skv1_route[i].custno[0] != "b":
								if skv1_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv1_route[i].dem
									load2[i]=load2[i-1]-skv1_route[i].dem2
								else:
									load[i]=load[i-1]+skv1_route[i].dem
									load2[i]=load2[i-1]+skv1_route[i].dem2

					for i in reversed(range(len(load))):
						if i in depo_idx and i+1 in depo_idx:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx=[]
					for c in skv1_route[depo_idx[0]+1:depo_idx[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx.append(0)
					
					for i in range(1,len(depo_idx)-1):
						if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
							for c in skv1_route[depo_idx[i]+1:depo_idx[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
									no_park_idx.append(vehicle.route.index(skv1_route[depo_idx[i]]))
					if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
						no_park_idx.append(vehicle.route.index(skv1_route[depo_idx[-1]]))

					pick_opt_flag=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv1_route)-1)):
							if skv1_route[i].custno!="0":
								if skv1_route[i].custno[0]!="b":
									non_depo=True
									if skv1_route[i].requestType=="PICKUP":
										pick_opt_flag=True
										break
							elif non_depo==True:
								break

					if argvs.break_flag==False:
						#### ここから休憩機能なし用の処理 ####
						if lcnt==0:
							if vehicle.route[start_idx] in servt_dict:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)
							else:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)
						else:
							if vehicle.route[start_idx] in servt_dict:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)
							else:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)
						if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
							lv_t+=vehicle.route[start_idx].parkt_open
						if start_idx==0 or vehicle.route[start_idx-1].custno!="0" or vehicle.route[start_idx].custno!="0": #デポが連続しない場合
							atpen += max(0.0, st_t-vehicle.route[start_idx].due_fs)
						arr_t=vehicle.arr[start_idx]

						if start_idx!=0 and vehicle.route[start_idx].custno==vehicle.route[start_idx-1].custno and vehicle.route[start_idx].custno!="0":
							lv_t=vehicle.lv[start_idx-1]
							arr_t=vehicle.arr[start_idx-1]

						impassable=True
						for i in range(start_idx,pos1-1):
							from_c,to_c=vehicle.route[i],vehicle.route[i+1]
							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable6 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							ttable7 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable6 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable6 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable7[from_c.spotno][to_c.spotno]==-1 or \
							dtable6[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable6[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable6[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable7[from_c.spotno][to_c.spotno]*vehicle.drskill
							if to_c in servt_dict:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict[to_c]*vehicle.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict[to_c]*vehicle.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*vehicle.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*vehicle.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable6[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable6[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable6[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if vehicle.route[pos1-1].custno!=vehicle.route[pos1+1].additionalcust[i2].custno or vehicle.route[pos1+1].additionalcust[i2].custno=="0":
							dtable1 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable1 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable1 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							#変更後に通行不可能ならFalseを返す
							ttable1 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if ttable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]==-1 or \
								dtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]==-1 or \
								(argvs.management_etable and etable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]==-1) or \
								(argvs.management_xtable and xtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]==-1):
								continue

							adist+=dtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]
							if argvs.management_etable:
								apower+=etable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]
							if argvs.management_xtable:
								aexp+=xtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]

							arr_t=lv_t+ttable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]*vehicle.drskill
							if vehicle.route[pos1+1].additionalcust[i2] in servt_dict:
								if vehicle.route[pos1+1].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos1+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1+1].additionalcust[i2].parkt_arrive,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+servt_dict[vehicle.route[pos1+1].additionalcust[i2]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1+1].additionalcust[i2].parkt_arrive,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+vehicle.route[pos1+1].additionalcust[i2].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+servt_dict[vehicle.route[pos1+1].additionalcust[i2]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1+1].additionalcust[i2].ready_fs)
							else:
								if vehicle.route[pos1+1].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos1+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1+1].additionalcust[i2].parkt_arrive,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+vehicle.route[pos1+1].additionalcust[i2].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1+1].additionalcust[i2].parkt_arrive,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+vehicle.route[pos1+1].additionalcust[i2].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+vehicle.route[pos1+1].additionalcust[i2].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1+1].additionalcust[i2].ready_fs)
							if vehicle.route[pos1+1].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos1+1 in no_park_idx:
								lv_t+=vehicle.route[pos1+1].additionalcust[i2].parkt_open
							if vehicle.route[pos1-1].custno!="0" or vehicle.route[pos1+1].additionalcust[i2].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[pos1+1].additionalcust[i2].due_fs)


						if vehicle.route[pos1+1].additionalcust[i2].custno!=vehicle.route[pos1].additionalcust[i1].custno or vehicle.route[pos1].additionalcust[i1].custno=="0":
							ttable4 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							dtable4 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable4 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable4 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1 or \
								dtable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1 or \
								(argvs.management_etable and etable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1) or \
								(argvs.management_xtable and xtable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1):
								continue

							adist+=dtable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]
							if argvs.management_etable:
								apower+=etable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]
							if argvs.management_xtable:
								aexp+=xtable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]

							arr_t=lv_t+ttable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]*vehicle.drskill
							
							if vehicle.route[pos1].additionalcust[i1] in servt_dict:
								if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos1+1].additionalcust[i2].spotid and not pos1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+servt_dict[vehicle.route[pos1].additionalcust[i1]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)+servt_dict[vehicle.route[pos1].additionalcust[i1]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)
							else:
								if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos1+1].additionalcust[i2].spotid and not pos1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)
							if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos1+1].additionalcust[i2].spotid and not pos1 in no_park_idx:
								lv_t+=vehicle.route[pos1].additionalcust[i1].parkt_open
							if vehicle.route[pos1+1].additionalcust[i2].custno!="0" or vehicle.route[pos1].additionalcust[i1].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[pos1].additionalcust[i1].due_fs)

						ttable5 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
						dtable5 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable5 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable5 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

						if (argvs.bulkShipping_flag==False and pos1+2==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].custno!="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==True) or \
							(argvs.bulkShipping_flag==True and pos1+2==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==True): #集荷最適化
							if ttable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
								dtable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
								(argvs.management_etable and etable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1) or \
								(argvs.management_xtable and xtable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1):
								continue

							adist+=dtable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]
							if argvs.management_etable:
								apower+=etable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]
							if argvs.management_xtable:
								aexp+=xtable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]

							arr_t=lv_t+ttable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]*vehicle.drskill
							st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
							atpen+=max(0.0,st_t-customers[0].due_fs)
							lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[vehicle.route[pos1+2]]+vehicle.depotservt)*vehicle.opskill
							lv_t+=customers[0].parkt_open

							ttable8 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							dtable7 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable7 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable7 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable8[customers[0].spotno][vehicle.route[pos1+2].spotno]==-1 or \
								dtable7[customers[0].spotno][vehicle.route[pos1+2].spotno]==-1 or \
								(argvs.management_etable and etable7[customers[0].spotno][vehicle.route[pos1+2].spotno]==-1) or \
								(argvs.management_xtable and xtable7[customers[0].spotno][vehicle.route[pos1+2].spotno]==-1):
								continue

							adist+=dtable7[customers[0].spotno][vehicle.route[pos1+2].spotno]
							if argvs.management_etable:
								apower+=etable7[customers[0].spotno][vehicle.route[pos1+2].spotno]
							if argvs.management_xtable:
								aexp+=xtable7[customers[0].spotno][vehicle.route[pos1+2].spotno]

							arr_t=lv_t+ttable8[customers[0].spotno][vehicle.route[pos1+2].spotno]*vehicle.drskill
							st_t=max(arr_t,vehicle.route[pos1+2].ready_fs)
							atpen+=max(st_t-vehicle.route[pos1+2].due_fs,0)
							lv_t=max(arr_t,vehicle.route[pos1+2].ready_fs)

							lv=lv_t
							st=st_t
						elif (argvs.bulkShipping_flag==False and pos1+2==len(vehicle.route)-2 and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False) or \
							(argvs.bulkShipping_flag==True and pos1+2==len(vehicle.route)-2 and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==False): #集荷最適化
							if ttable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+3].spotno]==-1 or \
								dtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+3].spotno]==-1 or \
								(argvs.management_etable and etable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+3].spotno]==-1) or \
								(argvs.management_xtable and xtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+3].spotno]==-1):
								continue

							adist+=dtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+3].spotno]
							if argvs.management_etable:
								apower+=etable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+3].spotno]
							if argvs.management_xtable:
								aexp+=xtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+3].spotno]

							arr_t=lv_t+ttable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+3].spotno]*vehicle.drskill
							st_t=max(arr_t,vehicle.route[pos1+3].ready_fs)
							atpen+=max(st_t-vehicle.route[pos1+3].due_fs,0)
							lv_t=max(arr_t,vehicle.route[pos1+3].ready_fs)
							
							lv=lv_t
							st=st_t
						else:
							if vehicle.route[pos1].additionalcust[i1].custno!=vehicle.route[pos1+2].custno or vehicle.route[pos1+2].custno=="0":
								if ttable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]==-1 or \
									dtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]==-1 or \
									(argvs.management_etable and etable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]==-1) or \
									(argvs.management_xtable and xtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]==-1):
									continue

								adist+=dtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]
								if argvs.management_etable:
									apower+=etable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]
								if argvs.management_xtable:
									aexp+=xtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]

								arr_t=lv_t+ttable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]*vehicle.drskill
								if vehicle.route[pos1+2] in servt_dict:
									if vehicle.route[pos1+2].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos1+2 in no_park_idx:
										lv_t=max(arr_t+vehicle.route[pos1+2].parkt_arrive,vehicle.route[pos1+2].ready_fs)+servt_dict[vehicle.route[pos1+2]]*vehicle.opskill
										st_t=max(arr_t+vehicle.route[pos1+2].parkt_arrive,vehicle.route[pos1+2].ready_fs)+vehicle.route[pos1+2].parkt_open
									else:
										lv_t=max(arr_t,vehicle.route[pos1+2].ready_fs)+servt_dict[vehicle.route[pos1+2]]*vehicle.opskill
										st_t=max(arr_t,vehicle.route[pos1+2].ready_fs)
								else:
									if vehicle.route[pos1+2].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos1+2 in no_park_idx:
										lv_t=max(arr_t+vehicle.route[pos1+2].parkt_arrive,vehicle.route[pos1+2].ready_fs)+vehicle.route[pos1+2].servt*vehicle.opskill
										st_t=max(arr_t+vehicle.route[pos1+2].parkt_arrive,vehicle.route[pos1+2].ready_fs)+vehicle.route[pos1+2].parkt_open
									else:
										lv_t=max(arr_t,vehicle.route[pos1+2].ready_fs)+vehicle.route[pos1+2].servt*vehicle.opskill
										st_t=max(arr_t,vehicle.route[pos1+2].ready_fs)
								if vehicle.route[pos1+2].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos1+2 in no_park_idx:
									lv_t+=vehicle.route[pos1+2].parkt_open
							
							lv=lv_t
							st=st_t

							if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,vehicle,lv,pos1+3,servt_dict,len(skv1_route)-1,no_park_idx,pick_opt_flag,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp

						
						if (pos1+2)==(len(vehicle.route)-1):
							#mvehicles[vehicle]=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1-1],vehicle.route[pos1+1],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1+1],vehicle.route[pos1],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1],vehicle.route[pos1+2],dtable)

							
							#改善前時間算出
							lv1=lv
							st1=st
							if (argvs.bulkShipping_flag==False and (vehicle.route[pos1].additionalcust[i1].custno!="0" or vehicle.route[pos1+2].custno!="0")) or \
								(argvs.bulkShipping_flag==True and (vehicle.route[pos1].additionalcust[i1].customers[0].custno!="0" or vehicle.route[pos1+2].customers[0].custno!="0")):
								atpen+=max(0.0,st_t-vehicle.route[pos1+2].due_fs)
							atpen+=max(0.0,lv1-vehicle.endhour) 
							
							# atpen+=max(0.0,arr_t-bvfinal_t)     

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle,argvs)==False:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list[i1][i2],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
							##

							# adist=dtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].spotno] \
							# + dtable4[vehicle.route[pos1+1].spotno][vehicle.route[pos1].spotno] \
							# + dtable5[vehicle.route[pos1].spotno][vehicle.route[pos1+2].spotno] \
							# + calc_dist(vehicle,lv_t,pos1+3,len(vehicle.route),argvs)
							# if argvs.management_etable:
							# 	apower=etable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].spotno] \
							# + etable4[vehicle.route[pos1+1].spotno][vehicle.route[pos1].spotno] \
							# + etable5[vehicle.route[pos1].spotno][vehicle.route[pos1+2].spotno]
							# if argvs.management_xtable:
							# 	aexp=xtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].spotno] \
							# + xtable4[vehicle.route[pos1+1].spotno][vehicle.route[pos1].spotno] \
							# + xtable5[vehicle.route[pos1].spotno][vehicle.route[pos1+2].spotno]


						else:
							if not ((argvs.bulkShipping_flag==False and pos1+2==len(vehicle.route)-2 and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False) or \
								(argvs.bulkShipping_flag==True and pos1+2==len(vehicle.route)-2 and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==False)):
								lv=lv_t
								st=st_t

								if vehicle.route[pos1].additionalcust[i1].custno!=vehicle.route[pos1+2].custno:
									atpen+=max(0.0,st_t-vehicle.route[pos1+2].due_fs)

								for i in range(pos1+2,n-1-1):
									if i+1==n-2 and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False:
										continue

									if vehicle.route[i].custno==vehicle.route[i+1].custno and vehicle.route[i+1].custno!="0":
										continue

									if vehicle.route[i+1] in servt_dict:
										proc_time=servt_dict[vehicle.route[i+1]]
									else:
										proc_time=vehicle.route[i+1].servt
									if i+1 in no_park_idx:
										no_park=True
									else:
										no_park=False
									lv_t,ttime_pen=calc_time_pen(vehicle.route[i],vehicle.route[i+1],lv_t,proc_time,vehicle,no_park,argvs)
									if vehicle.route[i].custno!="0" or vehicle.route[i+1].custno!="0":
										atpen+=ttime_pen
								
								ttable6 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
								if (argvs.bulkShipping_flag==False and vehicle.route[-2].custno!="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==True) or \
								(argvs.bulkShipping_flag==True and vehicle.route[-2].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==True): #集荷最適化
									arr_t=lv_t+ttable6[vehicle.route[n-2].spotno][customers[0].spotno]*vehicle.drskill
									st_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
									atpen+=max(0.0,st_t-customers[0].due_fs)
									lv_t=max(arr_t+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[vehicle.route[-1]]+vehicle.depotservt)*vehicle.opskill
									lv_t+=customers[0].parkt_open

									ttable9 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
									arr_t=lv_t+ttable9[customers[0].spotno][vehicle.route[n-1].spotno]*vehicle.drskill

									#改善前時間算出
									lv1=max(arr_t,vehicle.route[n-1].ready_fs)
									st1=max(arr_t,vehicle.route[n-1].ready_fs)
								elif (argvs.bulkShipping_flag==False and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False) or \
								(argvs.bulkShipping_flag==True and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==False): #集荷最適化
									arr_t=lv_t+ttable6[vehicle.route[n-3].spotno][vehicle.route[n-1].spotno]*vehicle.drskill

									#改善前時間算出
									lv1=max(arr_t,vehicle.route[n-1].ready_fs)
									st1=max(arr_t,vehicle.route[n-1].ready_fs)
								else:
									arr_t=lv_t+ttable6[vehicle.route[n-2].spotno][vehicle.route[n-1].spotno]*vehicle.drskill

									#改善前時間算出
									if vehicle.route[n-1].spotid!=vehicle.route[n-2].spotid and not n-1 in no_park_idx:
										lv1=max(arr_t+vehicle.route[n-1].parkt_arrive,vehicle.route[n-1].ready_fs)+servt_dict[vehicle.route[n-1]]*vehicle.opskill
										st1=max(arr_t+vehicle.route[n-1].parkt_arrive,vehicle.route[n-1].ready_fs)
									else:
										lv1=max(arr_t,vehicle.route[n-1].ready_fs)+servt_dict[vehicle.route[n-1]]*vehicle.opskill
										st1=max(arr_t,vehicle.route[n-1].ready_fs)
									if vehicle.route[n-1].spotid!=vehicle.route[n-2].spotid and not n-1 in no_park_idx:
										lv1+=vehicle.route[n-1].parkt_open
								# arr_t=round(arr_t,4)
								
							else:
								lv1=lv
								st1=st
							st_t=st1
							if (argvs.bulkShipping_flag==False and (vehicle.route[n-2].custno!="0" or vehicle.route[n-1].custno!="0")) or \
								(argvs.bulkShipping_flag==True and (vehicle.route[n-2].customers[0].custno!="0" or vehicle.route[n-1].customers[0].custno!="0")):
								atpen+=max(0.0,st_t-vehicle.route[n-1].due_fs)
							atpen+=max(0.0,lv1-vehicle.endhour)  

							##20180605
							# atpen+=max(0.0,arr_t-bvfinal_t)     

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle,argvs)==False:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-vehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv1-delay_arr_list[i1][i2],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
							##
						#### ここまで休憩機能なし用の処理 ####
					else:
						#### ここから休憩機能あり用の処理 ####
						veh = dcopy(vehicle)
						veh.route = skv1_route
						if argvs.pickup_flag==True:
							#集荷最適化
							if pick_opt_flag:
								if not get_pick_opt_status(veh, argvs)[0]:
									veh.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(veh, pick_opt_flag, argvs)
						if not(org_flag==True and i1==0 and i2==0):
							veh = insert_breakspot(takebreak_list1[i3], None, customers, veh, vehicles, argvs, 0)
						if veh==None:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
							continue

						lv1 = veh.lv[-1]
						skv1_route = veh.route
						depo_idx=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						veh.update_totalcost_dtable(argvs)
						adist = veh.totalcost
						nn = len(veh.route)
						for i in range(start_idx,nn):
							if i==0 or (argvs.bulkShipping_flag==False and (veh.route[i-1].custno!=veh.route[i].custno)) or \
								(argvs.bulkShipping_flag==True and (veh.route[i-1].customers[0].custno!=veh.route[i].customers[0].custno)):
								atpen+=max(0.0,veh.st[i]-veh.route[i].due_fs)
						atpen+=max(0.0,lv1-veh.endhour)

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(veh,argvs)==False:
							atpen_temp,btpen_temp=return_lutime_penalty(lv1-veh.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-veh.arr[0],0,btpen_temp)
						#### 
						if argvs.management_etable:
							apower=calc_power(veh,start_idx+1,len(veh.route),argvs)
						if argvs.management_xtable:
							aexp=calc_exp(veh,start_idx+1,len(veh.route),argvs)
						#### ここまで休憩機能あり用の処理 ####

					#集荷違反量を計算
					if argvs.pickup_flag==True:
						max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(skv1_route,vehicle)
					else:
						max_load_pen,max_load_pen2=0,0

					load_pen,load_pen2=0,0
					for j in range(len(depo_idx)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx[j]+1,depo_idx[j+1]):
							if skv1_route[k].requestType=="DELIVERY":
								if skv1_route[k].custno[0] != "b":
									load_onbrd+=skv1_route[k].dem
									load_onbrd2+=skv1_route[k].dem2

						load_pen+=max(load_onbrd-vehicle.cap,0)
						load_pen2+=max(load_onbrd2-vehicle.cap2,0)

					aload =load_pen+max_load_pen
					aload2 = load_pen2+max_load_pen2

					#改善前後の到着時間算出(拠点を出発し最後の配送先での配送を終えて拠点に戻るまで(-l なしの場合))
					if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
						atime=0.0
						time_error = 0.0
					else:
						# #vehicle1の改善後arr計算
						# arr1, _ = calc_vehicle_arr_route(skv1_route, vehicle, vehicle.drskill, vehicle.opskill, vehicle.chg_batt_dict)
						if argvs.opt_t_weight!=0:
							#改善後時間算出
							if lcnt==0:
								atime = lv1
							else:
								atime = lv1-delay_arr_list[i1][i2]+vehicle.arr[0]
						else:
							atime=0.0

						mvehicles={vehicle:0.0}
						if lcnt==0:
							mvehicles[vehicle] = lv1-vehicle.arr[0]
						else:
							mvehicles[vehicle] = lv1-delay_arr_list[i1][i2]

						if argvs.avetime_ape_flag==True:
							time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
						else:
							time_error=0.0
					
					if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
						visits_error = 0.0
					else:
						mvehicles={vehicle:0.0}
						if argvs.bulkShipping_flag:
							mvehicles[vehicle] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and c.custno[0]!="b" and c.custno!="0"])
						else:
							mvehicles[vehicle] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and skv1_route[i].custno[0]!="b" and skv1_route[i].custno!=skv1_route[i-1].custno])

						if argvs.avevisits_ape_flag==True:
							visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
						else:
							visits_error=0.0

					if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
						dist_error = 0.0
					else:
						mvehicles={vehicle:0.0}
						if lcnt==0:
							mvehicles[vehicle] = adist+vehicle.remdist[0]-vehicle.remdist[start_idx]
						else:
							mvehicles[vehicle] = adist+vehicle.delay_remdist[0]-vehicle.delay_remdist[start_idx]

						if argvs.avedist_ape_flag==True:
							dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
						else:
							dist_error=0.0

					#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
					if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
						aunass = len([c for c in skv1_route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

					ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907

					if ires_temp and cdiff<cdiff_best:
						ires=True
						cdiff_best=cdiff
						if bload==1e9 and i1==0 and i2==0 and lcnt==0:
							btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp=atpen,adist,aload,aload2,time_error,visits_error,dist_error,atime,apower,aexp
							bvfinal_t=lv1
							cdiff_best=0
						pick_opt_flag_best=pick_opt_flag
						index1,index2=i1,i2
						delay_lcnt_best=lcnt
						if argvs.break_flag:
							route_best = skv1_route
							ttable_best = argvs.management_ttable
							dtable_best = argvs.management_dtable
							etable_best = argvs.management_etable
							xtable_best = argvs.management_xtable
							vehnos=[v.vehno for v in vehicles]
							vehicles[vehnos.index(vehicle.vehno)].route = skv1_route
							t_route_best = r_backup(vehicles)

					if argvs.break_flag:
						argvs.management_ttable = t_dcopy(t_ttable)
						argvs.management_dtable = t_dcopy(t_dtable)
						argvs.management_etable = t_dcopy(t_etable)
						argvs.management_xtable = t_dcopy(t_xtable)
						vehicles = r_restore(vehicles, t_route, argvs)
			
	return ires,btpen,bload,bload2,pick_opt_flag_best,index1,index2,delay_lcnt_best,route_best,ttable_best,dtable_best,etable_best,xtable_best,t_route_best

def inswap_improved_lastc_dtable(customers,vehicles,vehicle,pos1,argvs,no_depo_parkt_flag,one_table_flag,delay_arr_list,org_flag=False):
	ires=False
	index1,index2=0,0
	delay_lcnt_best=0
	pick_opt_flag_best=False
	cdiff_best=0
	route_best=None
	if argvs.break_flag:
		ttable_best = t_dcopy(argvs.management_ttable)
		dtable_best = t_dcopy(argvs.management_dtable)
		etable_best = t_dcopy(argvs.management_etable)
		xtable_best = t_dcopy(argvs.management_xtable)
		t_route_best = r_backup(vehicles)
	else:
		ttable_best = None
		dtable_best = None
		etable_best = None
		xtable_best = None
		t_route_best = None

	if( not(pos1+2<len(vehicle.route)) ):
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if vehicle.route[pos1].custno=="0" and vehicle.route[pos1+1].custno=="0": #デポ同士ならスキップ
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if vehicle.route[pos1].custno[0]=="b" or vehicle.route[pos1+1].custno[0]=="b": #休憩スポット同士ならスキップ
		return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化
		if free_or_additive(vehicle.route[pos1],vehicle,vehicles,argvs)=="additive" and free_or_additive(vehicle.route[pos1+1],vehicle,vehicles,argvs)=="additive": #条件2同士ならスキップ
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" and vehicle.load_pen!=1e9: #条件2が他の便に移るならスキップ
			skv1_route_temp = vehicle.route[:]											# ルート全体をコピー
			skv1_route_temp[pos1+1],skv1_route_temp[pos1]=skv1_route_temp[pos1],skv1_route_temp[pos1+1]	# ルート入替

			for i in range(len(skv1_route_temp)-1):
				if in_additive(skv1_route_temp[i],vehicle,skv1_route_temp,vehicles,argvs)==False:
					return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	else:
		#未割り当て荷物最適化無し、あるいは、予約車両以外
		if vehicle.route[pos1].changecust=="additive" and vehicle.route[pos1+1].changecust=="additive": #条件2同士ならスキップ
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

		if argvs.multitrip_flag==True and argvs.init_changecust=="additive" and vehicle.load_pen!=1e9: #条件2が他の便に移るならスキップ
			rotate_idx={}
			idx=0
			for i in range(len(vehicle.route)-1):
				if vehicle.route[i].custno=="0" and vehicle.route[i+1].custno!="0":
					idx+=1
				elif vehicle.route[i].changecust=="additive" and vehicle.route[i].custno!="0" and vehicle.route[i].custno[0]!="b":
					rotate_idx[vehicle.route[i]]=idx

			skv1_route_temp = vehicle.route[:]											# ルート全体をコピー
			skv1_route_temp[pos1+1],skv1_route_temp[pos1]=skv1_route_temp[pos1],skv1_route_temp[pos1+1]	# ルート入替

			idx=0
			for i in range(len(skv1_route_temp)-1):
				if skv1_route_temp[i].custno=="0" and skv1_route_temp[i+1].custno!="0":
					idx+=1
				elif skv1_route_temp[i].changecust=="additive" and skv1_route_temp[i].custno!="0" and skv1_route_temp[i].custno[0]!="b":
					if rotate_idx[skv1_route_temp[i]]!=idx:
						return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	#集荷最適化の場合DEPOは改善対象外
	if argvs.break_flag:
		pick_opt_flag, pick_opt_idx = get_pick_opt_status(vehicle, argvs)
		if pick_opt_flag==True and pos1+1>=pick_opt_idx:
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None
	else:
		pick_opt_flag=False
		if argvs.pickup_flag==True:
			if argvs.bulkShipping_flag==True:
				if vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].customers[0].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
			else:
				if vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0":
					for i in reversed(range(1,len(vehicle.route)-2)):
						if vehicle.route[i].custno=="0":
							break
						if vehicle.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break
		if pick_opt_flag==True and pos1+1==len(vehicle.route)-2:
			return False,0.0,0.0,0.0,False,0,0,0,None,None,None,None,None,None

	depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]
	for i in range(len(depo_idx)-1):
		if depo_idx[i]<pos1 and pos1<=depo_idx[i+1]:
			start_idx=depo_idx[i]
			break

	if argvs.multitrip_flag==False and no_depo_parkt_flag==True and delay_arr_list==[] and argvs.break_flag==False:
		start_idx=pos1-1
	if delay_arr_list!=[]:
		start_idx=0

	n=len(vehicle.route)
	blast_idx=n
	for i in reversed(range(0,n)):
		if vehicle.route[i].custno!="0" and vehicle.route[i].custno[0]!="b" and vehicle.route[i].custno[0]!="e" and i!=len(vehicle.route)-1:
			break
		else:
			blast_idx=i

	#l_time=0.0
	bdist,adist,btpen,atpen,bpower,apower,bexp,aexp,aload,aload2,aunass,bunass=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
	for i in range(start_idx,blast_idx):
		if i==0 or vehicle.route[i-1].custno!=vehicle.route[i].custno:
			btpen+=max(0.0,vehicle.st[i]-vehicle.route[i].due_fs)
	#btpen+=time_pen(vehicle.arr[n-2],vehicle.route[n-2])+max(0.0,vehicle.arr[n-2]+vehicle.route[n-2].servt-vehicle.endhour)
	btpen+=max(0.0,vehicle.lv[blast_idx-1]-vehicle.endhour)

	##kaizen mae no final arrive time
	bvfinal_t=vehicle.lv[blast_idx-1]

	if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True or argvs.break_flag==True:
		bdist=calc_dist(vehicle,start_idx+1,blast_idx,argvs)
		if argvs.management_etable:
			bpower=calc_power(vehicle,start_idx+1,blast_idx,argvs)
		if argvs.management_xtable:
			bexp=calc_exp(vehicle,start_idx+1,blast_idx,argvs)
	else:
		bdist=get_dtable(vehicle.vtype, vehicle.lv[pos1-1], argvs.management_dtable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_dtable(vehicle.vtype, vehicle.lv[pos1], argvs.management_dtable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno]
		if pos1+2<blast_idx:
			bdist+=get_dtable(vehicle.vtype, vehicle.lv[pos1+1], argvs.management_dtable)[vehicle.route[pos1+1].spotno][vehicle.route[pos1+2].spotno]
		if argvs.management_etable:
			bpower=get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1-1], argvs.management_etable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1], argvs.management_etable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno]
			if pos1+2<blast_idx:
				bpower+=get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[pos1+1], argvs.management_etable)[vehicle.route[pos1+1].spotno][vehicle.route[pos1+2].spotno]
		if argvs.management_xtable:
			bexp=get_xtable(vehicle.vtype, vehicle.lv[pos1-1], argvs.management_xtable)[vehicle.route[pos1-1].spotno][vehicle.route[pos1].spotno] \
			+get_xtable(vehicle.vtype, vehicle.lv[pos1], argvs.management_xtable)[vehicle.route[pos1].spotno][vehicle.route[pos1+1].spotno]
			if pos1+2<blast_idx:
				bexp+=get_xtable(vehicle.vtype, vehicle.lv[pos1+1], argvs.management_xtable)[vehicle.route[pos1+1].spotno][vehicle.route[pos1+2].spotno]

	bload = vehicle.load_pen
	bload2 = vehicle.load_pen2

	if argvs.opt_t_weight!=0:
		#改善前時間算出
		btime = vehicle.lv[blast_idx-1]
	else:
		btime=0.0

	if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True:
		btime_error = 0.0
	else:
		btime_error = argvs.time_error
	if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
		bvisits_error = 0.0
	else:
		bvisits_error = argvs.visits_error
	if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
		bdist_error = 0.0
	else:
		bdist_error = argvs.dist_error

	#改善前未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
	if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
		bunass = len([c for c in vehicle.route[1:blast_idx] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

	if delay_arr_list!=[]:
		delay_lcnt=2
	else:
		delay_lcnt=1

	takebreak_list1 = [[]]
	if argvs.break_flag:
		t_ttable = t_dcopy(argvs.management_ttable)
		t_dtable = t_dcopy(argvs.management_dtable)
		t_etable = t_dcopy(argvs.management_etable)
		t_xtable = t_dcopy(argvs.management_xtable)
		t_route = r_backup(vehicles)
		takebreak_list1 = [*map(list, product(*[[c for c in t.additionalcust] for t in vehicle.takebreak]))] #休憩スポットの飛び地のすべての組み合わせリスト

	for i1 in range(len(vehicle.route[pos1].additionalcust)):
		if free_or_additive(vehicle.route[pos1],vehicle,vehicles,argvs)=="additive" and i1!=0:
			continue
		for i2 in range(len(vehicle.route[pos1+1].additionalcust)):
			if free_or_additive(vehicle.route[pos1+1],vehicle,vehicles,argvs)=="additive" and i2!=0:
				continue
			for i3 in range(len(takebreak_list1)):
				for lcnt in range(delay_lcnt):
					adist,atpen,apower,aexp=0.0,0.0,0.0,0.0
					btpen_temp=btpen
					atpen_temp=0
					#変更後に訪問数上限を超えていたらFalseを返す
					v_spotid=[c.spotid for c in vehicle.route]
					v_spotid[pos1],v_spotid[pos1+1]=vehicle.route[pos1+1].additionalcust[i2].spotid,vehicle.route[pos1].additionalcust[i1].spotid
					#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([c for c in v_spotid[1:-1] if c=="0" and c.custno[0]!="b"])
					# visitnum=calc_visitnum(v_spotid)
					# if vehicle.maxvisit>0 and visitnum>vehicle.maxvisit:
					# 	continue
					
					skv1_route = vehicle.route[:]											# ルート全体をコピー
					skv1_route[pos1+1],skv1_route[pos1]=skv1_route[pos1].additionalcust[i1],skv1_route[pos1+1].additionalcust[i2]	# ルート入替

					visitnum=calc_visitnum(skv1_route)
					if vehicle.maxvisit>0 and visitnum>vehicle.maxvisit:
						continue
					
					depo_idx=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[skv1_route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if skv1_route[j].requestType=="DELIVERY" and skv1_route[j].custno!=skv1_route[j-1].custno and skv1_route[depo_idx[k]+1].custno[0]!="b":
								servt+=skv1_route[j].depotservt
						if skv1_route[depo_idx[k]+1].custno!="0":
							servt_dict[skv1_route[depo_idx[k]]]+=servt+vehicle.depotservt
						else:
							servt_dict[skv1_route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[skv1_route[len(skv1_route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if skv1_route[j].requestType=="PICKUP" and skv1_route[j].custno!=skv1_route[j-1].custno:
								if skv1_route[j].custno[0]!="b":
									servt+=skv1_route[j].depotservt
						servt_dict[skv1_route[depo_idx[k]]]+=servt
						

					load=[0 for c in skv1_route]
					load2=[0 for c in skv1_route]
					for i in range(len(skv1_route)-1):
						if i in depo_idx:
							for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
								if skv1_route[j].requestType=="DELIVERY":
									if skv1_route[j].custno[0] != "b":
										load[i]+=skv1_route[j].dem
										load2[i]+=skv1_route[j].dem2
						else:
							if skv1_route[i].custno[0] != "b":
								if skv1_route[i].requestType=="DELIVERY":
									load[i]=load[i-1]-skv1_route[i].dem
									load2[i]=load2[i-1]-skv1_route[i].dem2
								else:
									load[i]=load[i-1]+skv1_route[i].dem
									load2[i]=load2[i-1]+skv1_route[i].dem2

					for i in reversed(range(len(load))):
						if i in depo_idx and i+1 in depo_idx:
							load[i]=load[i+1]
							load2[i]=load2[i+1]

					load=[i if i>1e-9 else 0 for i in load] #誤差対策
					load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

					no_park_idx=[]
					for c in skv1_route[depo_idx[0]+1:depo_idx[1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[0]==0 and load2[0]==0:
							no_park_idx.append(0)
					
					for i in range(1,len(depo_idx)-1):
						if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
							for c in skv1_route[depo_idx[i]+1:depo_idx[i+1]]:
								if c.requestType=="DELIVERY":
									break
							else:
								if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
									no_park_idx.append(vehicle.route.index(skv1_route[depo_idx[i]]))
					if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
						no_park_idx.append(vehicle.route.index(skv1_route[depo_idx[-1]]))

					pick_opt_flag=False
					non_depo=False
					if argvs.pickup_flag==True:
						for i in reversed(range(1,len(skv1_route)-1)):
							if skv1_route[i].custno!="0":
								if skv1_route[i].custno[0]!="b":
									non_depo=True
									if skv1_route[i].requestType=="PICKUP":
										pick_opt_flag=True
										break
							elif non_depo==True:
								break

					alast_idx=len(skv1_route)
					for i in reversed(range(0,len(skv1_route))):
						if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
							break
						else:
							alast_idx=i

					if argvs.break_flag==False:
						#### ここから休憩機能なし用の処理 ####
						if lcnt==0:
							if vehicle.route[start_idx] in servt_dict:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)
							else:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(vehicle.arr[start_idx]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(vehicle.arr[start_idx],vehicle.route[start_idx].ready_fs)
						else:
							if vehicle.route[start_idx] in servt_dict:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)+servt_dict[vehicle.route[start_idx]]*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)
							else:
								if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
									lv_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2]+vehicle.route[start_idx].parkt_arrive,vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].parkt_open
								else:
									lv_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)+vehicle.route[start_idx].servt*vehicle.opskill
									st_t=max(delay_arr_list[i1][i2],vehicle.route[start_idx].ready_fs)
						if (start_idx==0 or vehicle.route[start_idx].spotid!=vehicle.route[start_idx-1].spotid) and not start_idx in no_park_idx:
							lv_t+=vehicle.route[start_idx].parkt_open
						if start_idx==0 or vehicle.route[start_idx-1].custno!="0" or vehicle.route[start_idx].custno!="0": #デポが連続しない場合
							atpen += max(0.0, st_t-vehicle.route[start_idx].due_fs)
						arr_t=vehicle.arr[start_idx]

						if start_idx!=0 and vehicle.route[start_idx].custno==vehicle.route[start_idx-1].custno and vehicle.route[start_idx].custno!="0":
							lv_t=vehicle.lv[start_idx-1]
							arr_t=vehicle.arr[start_idx-1]

						##
						impassable=True
						for i in range(start_idx,pos1-1):
							from_c,to_c=vehicle.route[i],vehicle.route[i+1]
							if to_c.custno==from_c.custno and to_c.custno!="0":
								continue

							dtable6 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							ttable7 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if argvs.management_etable:
								etable6 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable6 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if ttable7[from_c.spotno][to_c.spotno]==-1 or \
							dtable6[from_c.spotno][to_c.spotno]==-1 or \
							(argvs.management_etable and etable6[from_c.spotno][to_c.spotno]==-1) or \
							(argvs.management_xtable and xtable6[from_c.spotno][to_c.spotno]==-1):
								impassable=False
								break

							arr_t=lv_t+ttable7[from_c.spotno][to_c.spotno]*vehicle.drskill
							if to_c in servt_dict:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+servt_dict[to_c]*vehicle.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+servt_dict[to_c]*vehicle.opskill
									st_t=max(arr_t,to_c.ready_fs)
							else:
								if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
									lv_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.servt*vehicle.opskill
									st_t=max(arr_t+to_c.parkt_arrive,to_c.ready_fs)+to_c.parkt_open
								else:
									lv_t=max(arr_t,to_c.ready_fs)+to_c.servt*vehicle.opskill
									st_t=max(arr_t,to_c.ready_fs)
							if to_c.spotid!=from_c.spotid and (to_c.custno!="0" or not i+1 in no_park_idx):
								lv_t+=to_c.parkt_open

							if from_c.custno!="0" or to_c.custno!="0":
								atpen+=max(0.0,st_t-to_c.due_fs)

							adist+=dtable6[from_c.spotno][to_c.spotno]
							if argvs.management_etable:
								apower+=etable6[from_c.spotno][to_c.spotno]
							if argvs.management_xtable:
								aexp+=xtable6[from_c.spotno][to_c.spotno]
						if impassable==False:
							continue

						if vehicle.route[pos1-1].custno!=vehicle.route[pos1+1].additionalcust[i2].custno or vehicle.route[pos1+1].additionalcust[i2].custno=="0":
							dtable1 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable1 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable1 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							#変更後に通行不可能ならFalseを返す
							ttable1 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							if ttable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]==-1 or \
								dtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]==-1 or \
								(argvs.management_etable and etable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]==-1) or \
								(argvs.management_xtable and xtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]==-1):
								continue

							adist+=dtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]
							if argvs.management_etable:
								apower+=etable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]
							if argvs.management_xtable:
								aexp+=xtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]

							arr_t=lv_t+ttable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].additionalcust[i2].spotno]*vehicle.drskill
							if vehicle.route[pos1+1].additionalcust[i2] in servt_dict:
								if vehicle.route[pos1+1].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos1+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1+1].additionalcust[i2].parkt_arrive,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+servt_dict[vehicle.route[pos1+1].additionalcust[i2]]*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1+1].additionalcust[i2].parkt_arrive,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+vehicle.route[pos1+1].additionalcust[i2].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+servt_dict[vehicle.route[pos1+1].additionalcust[i2]]*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1+1].additionalcust[i2].ready_fs)
							else:
								if vehicle.route[pos1+1].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos1+1 in no_park_idx:
									lv_t=max(arr_t+vehicle.route[pos1+1].additionalcust[i2].parkt_arrive,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+vehicle.route[pos1+1].additionalcust[i2].servt*vehicle.opskill
									st_t=max(arr_t+vehicle.route[pos1+1].additionalcust[i2].parkt_arrive,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+vehicle.route[pos1+1].additionalcust[i2].parkt_open
								else:
									lv_t=max(arr_t,vehicle.route[pos1+1].additionalcust[i2].ready_fs)+vehicle.route[pos1+1].additionalcust[i2].servt*vehicle.opskill
									st_t=max(arr_t,vehicle.route[pos1+1].additionalcust[i2].ready_fs)
							if vehicle.route[pos1+1].additionalcust[i2].spotid!=vehicle.route[pos1-1].spotid and not pos1+1 in no_park_idx:
								lv_t+=vehicle.route[pos1+1].additionalcust[i2].parkt_open
							if vehicle.route[pos1-1].custno!="0" or vehicle.route[pos1+1].additionalcust[i2].custno!="0":
								atpen+=max(0.0,st_t-vehicle.route[pos1+1].additionalcust[i2].due_fs)

						ttable4 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
						dtable4 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
						if argvs.management_etable:
							etable4 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
						if argvs.management_xtable:
							xtable4 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

						if ttable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1 or \
							dtable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1 or \
							(argvs.management_etable and etable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1) or \
							(argvs.management_xtable and xtable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]==-1):
							continue


						if pos1+1<alast_idx:
							if vehicle.route[pos1+1].additionalcust[i2].custno!=vehicle.route[pos1].additionalcust[i1].custno or vehicle.route[pos1].additionalcust[i1].custno=="0":
								adist+=dtable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]
								if argvs.management_etable:
									apower+=etable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]
								if argvs.management_xtable:
									aexp+=xtable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]

								arr_t=lv_t+ttable4[vehicle.route[pos1+1].additionalcust[i2].spotno][vehicle.route[pos1].additionalcust[i1].spotno]*vehicle.drskill
								
								if vehicle.route[pos1].additionalcust[i1] in servt_dict:
									if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos1+1].additionalcust[i2].spotid and not pos1 in no_park_idx:
										lv_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+servt_dict[vehicle.route[pos1].additionalcust[i1]]*vehicle.opskill
										st_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].parkt_open
									else:
										lv_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)+servt_dict[vehicle.route[pos1].additionalcust[i1]]*vehicle.opskill
										st_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)
								else:
									if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos1+1].additionalcust[i2].spotid and not pos1 in no_park_idx:
										lv_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].servt*vehicle.opskill
										st_t=max(arr_t+vehicle.route[pos1].additionalcust[i1].parkt_arrive,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].parkt_open
									else:
										lv_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)+vehicle.route[pos1].additionalcust[i1].servt*vehicle.opskill
										st_t=max(arr_t,vehicle.route[pos1].additionalcust[i1].ready_fs)
								if vehicle.route[pos1].additionalcust[i1].spotid!=vehicle.route[pos1+1].additionalcust[i2].spotid and not pos1 in no_park_idx:
									lv_t+=vehicle.route[pos1].additionalcust[i1].parkt_open
								if vehicle.route[pos1+1].additionalcust[i2].custno!="0" or vehicle.route[pos1].additionalcust[i1].custno!="0":
									atpen+=max(0.0,st_t-vehicle.route[pos1].additionalcust[i1].due_fs)

							ttable5 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
							dtable5 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
							if argvs.management_etable:
								etable5 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
							if argvs.management_xtable:
								xtable5 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)

							if (argvs.bulkShipping_flag==False and pos1+2==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].custno!="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==True) or \
								(argvs.bulkShipping_flag==True and pos1+2==len(vehicle.route)-1 and vehicle.route[pos1].additionalcust[i1].customers[0].custno!="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==True): #集荷最適化
								if ttable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
									dtable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1 or \
									(argvs.management_etable and etable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1) or \
									(argvs.management_xtable and xtable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]==-1):
									continue

								arr=lv_t+ttable5[vehicle.route[pos1].additionalcust[i1].spotno][customers[0].spotno]*vehicle.drskill
								st=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+customers[0].parkt_open
								lv=max(arr+customers[0].parkt_arrive,customers[0].ready_fs)+(servt_dict[vehicle.route[pos1+2]]+vehicle.depotservt)*vehicle.opskill
								lv+=customers[0].parkt_open

								ttable8 = get_ttable(vehicle.vtype, lv, argvs.management_ttable)
								dtable7 = get_dtable(vehicle.vtype, lv, argvs.management_dtable)
								if argvs.management_etable:
									etable7 = get_etable(vehicle.vtype, vehicle.etype, lv, argvs.management_etable)
								if argvs.management_xtable:
									xtable7 = get_xtable(vehicle.vtype, lv, argvs.management_xtable)

								if ttable8[customers[0].spotno][vehicle.route[pos1+2].spotno]==-1 or \
									dtable7[customers[0].spotno][vehicle.route[pos1+2].spotno]==-1 or \
									(argvs.management_etable and etable7[customers[0].spotno][vehicle.route[pos1+2].spotno]==-1) or \
									(argvs.management_xtable and xtable7[customers[0].spotno][vehicle.route[pos1+2].spotno]==-1):
									continue
							elif (argvs.bulkShipping_flag==False and pos1+2==len(vehicle.route)-2 and vehicle.route[-2].custno=="0" and vehicle.route[-1].custno!="0" and pick_opt_flag==False) or \
								(argvs.bulkShipping_flag==True and pos1+2==len(vehicle.route)-2 and vehicle.route[-2].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0" and pick_opt_flag==False): #集荷最適化
								if ttable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1 or \
									dtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1 or \
									(argvs.management_etable and etable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1) or \
									(argvs.management_xtable and xtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[-1].spotno]==-1):
									continue
							else:
								if ttable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]==-1 or \
									dtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]==-1 or \
									(argvs.management_etable and etable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]==-1) or \
									(argvs.management_xtable and xtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]==-1):
									continue

							if vehicle.route[pos1].additionalcust[i1].custno!=vehicle.route[pos1+2].custno or vehicle.route[pos1+2].custno=="0":
								if (pos1+2)<blast_idx:
									adist+=dtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]
									if argvs.management_etable:
										apower+=etable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]
									if argvs.management_xtable:
										aexp+=xtable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]

								arr=lv_t+ttable5[vehicle.route[pos1].additionalcust[i1].spotno][vehicle.route[pos1+2].spotno]*vehicle.drskill
								if vehicle.route[pos1+2] in servt_dict:
									if vehicle.route[pos1+2].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos1+2 in no_park_idx:
										lv=max(arr+vehicle.route[pos1+2].parkt_arrive,vehicle.route[pos1+2].ready_fs)+servt_dict[vehicle.route[pos1+2]]*vehicle.opskill
										st=max(arr+vehicle.route[pos1+2].parkt_arrive,vehicle.route[pos1+2].ready_fs)+vehicle.route[pos1+2].parkt_open
									else:
										lv=max(arr,vehicle.route[pos1+2].ready_fs)+servt_dict[vehicle.route[pos1+2]]*vehicle.opskill
										st=max(arr,vehicle.route[pos1+2].ready_fs)
								else:
									if vehicle.route[pos1+2].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos1+2 in no_park_idx:
										lv=max(arr+vehicle.route[pos1+2].parkt_arrive,vehicle.route[pos1+2].ready_fs)+vehicle.route[pos1+2].servt*vehicle.opskill
										st=max(arr+vehicle.route[pos1+2].parkt_arrive,vehicle.route[pos1+2].ready_fs)+vehicle.route[pos1+2].parkt_open
									else:
										lv=max(arr,vehicle.route[pos1+2].ready_fs)+vehicle.route[pos1+2].servt*vehicle.opskill
										st=max(arr,vehicle.route[pos1+2].ready_fs)
								if vehicle.route[pos1+2].spotid!=vehicle.route[pos1].additionalcust[i1].spotid and not pos1+2 in no_park_idx:
									lv+=vehicle.route[pos1+2].parkt_open
							else:
								lv=lv_t	
								arr=arr_t	
								st=st_t	

							if one_table_flag==False or argvs.multitrip_flag==True or delay_arr_list!=[] or argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
								impassable,dist,power,exp,_=check_impassability(customers,vehicle,lv,pos1+3,servt_dict,blast_idx,no_park_idx,pick_opt_flag,argvs)
								if impassable==False:
									continue

								adist+=dist
								if argvs.management_etable:
									apower+=power
								if argvs.management_xtable:
									aexp+=exp


						if (pos1+2)>=blast_idx:			
							# arr_t=round(arr_t,4)
							#改善前時間算出
							arr1=arr_t
							atpen+=max(0.0,lv_t-vehicle.endhour)

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle,argvs)==False:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-vehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list[i1][i2],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
							##

							# adist=dtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].spotno] \
							# + dtable4[vehicle.route[pos1+1].spotno][vehicle.route[pos1].spotno]
							# if argvs.management_etable:
							# 	apower=etable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].spotno] \
							# + etable4[vehicle.route[pos1+1].spotno][vehicle.route[pos1].spotno]
							# if argvs.management_xtable:
							# 	aexp=xtable1[vehicle.route[pos1-1].spotno][vehicle.route[pos1+1].spotno] \
							# + xtable4[vehicle.route[pos1+1].spotno][vehicle.route[pos1].spotno]

						else:
							#mvehicles[vehicle]=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1-1)])
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1-1],vehicle.route[pos1+1],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1+1],vehicle.route[pos1],dtable)
							#mvehicles[vehicle]+=dist_dtable(vehicle.route[pos1],vehicle.route[pos1+2],dtable)
							#mvehicles[vehicle]+=sum([dist_dtable(vehicle.route[i],vehicle.route[i+1],dtable) for i in range(pos1+2,len(vehicle.route)-2)])

							if vehicle.route[pos1].additionalcust[i1].custno!=vehicle.route[pos1+2].custno:
								atpen+=max(0.0,st-vehicle.route[pos1+2].due_fs)
							lv_t=lv
							arr_t=arr
							st_t=st				

							for i in range(pos1+2,blast_idx-1):
								if vehicle.route[i].custno==vehicle.route[i+1].custno and vehicle.route[i+1].custno!="0":
									continue
								
								ttable6=get_ttable(vehicle.vtype,lv_t,argvs.management_ttable)
								arr_t=lv_t+ttable6[vehicle.route[i].spotno][vehicle.route[i+1].spotno]*vehicle.drskill
								# arr_t=round(arr_t,4)

								if vehicle.route[i+1] in servt_dict:
									proc_time=servt_dict[vehicle.route[i+1]]
								else:
									proc_time=vehicle.route[i+1].servt
								if i+1 in no_park_idx:
									no_park=True
								else:
									no_park=False
								lv_t,ttime_pen=calc_time_pen(vehicle.route[i],vehicle.route[i+1],lv_t,proc_time,vehicle,no_park,argvs)
								if vehicle.route[i].custno!="0" or vehicle.route[i+1].custno!="0":
									atpen+=ttime_pen
							
							#改善前時間算出
							arr1=arr_t

							atpen+=max(0.0,lv_t-vehicle.endhour) ##bug no younanode tsuika

							##kaizen go no arrive time wo ltime,utime to hikaku
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(vehicle,argvs)==False:
								if lcnt==0:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-vehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
								else:
									atpen_temp,btpen_temp=return_lutime_penalty(lv_t-delay_arr_list[i1][i2],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
							##
						#### ここまで休憩機能なし用の処理 ####
					else:
						#### ここから休憩機能あり用の処理 ####
						veh = dcopy(vehicle)
						veh.route = skv1_route
						if argvs.pickup_flag==True:
							#集荷最適化
							if pick_opt_flag:
								if not get_pick_opt_status(veh, argvs)[0]:
									veh.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
							else:
								pick_opt_rest(veh, pick_opt_flag, argvs)
						if not(org_flag==True and i1==0 and i2==0):
							veh = insert_breakspot(takebreak_list1[i3], None, customers, veh, vehicles, argvs, 0)
						if veh==None:
							argvs.management_ttable = t_dcopy(t_ttable)
							argvs.management_dtable = t_dcopy(t_dtable)
							argvs.management_etable = t_dcopy(t_etable)
							argvs.management_xtable = t_dcopy(t_xtable)
							vehicles = r_restore(vehicles, t_route, argvs)
							continue

						skv1_route = veh.route
						alast_idx=len(skv1_route)
						for i in reversed(range(0,len(skv1_route))):
							if skv1_route[i].custno!="0" and skv1_route[i].custno[0]!="b" and skv1_route[i].custno[0]!="e" and i!=len(skv1_route)-1:
								break
							else:
								alast_idx=i
						arr1 = veh.arr[alast_idx-1]
						lv_t = veh.lv[alast_idx-1]
						depo_idx=[j for j,c in enumerate(skv1_route[:-1]) if c.custno=="0"]+[len(skv1_route)-1]
						veh.update_totalcost_dtable(argvs)
						adist = veh.totalcost_wolast
						for i in range(start_idx,blast_idx):
							if i==0 or veh.route[i-1].custno!=veh.route[i].custno:
								atpen+=max(0.0,veh.st[i]-veh.route[i].due_fs)
						atpen+=max(0.0,lv_t-veh.endhour)

						##kaizen go no arrive time wo ltime,utime to hikaku
						if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(veh,argvs)==False:
							atpen_temp,btpen_temp=return_lutime_penalty(lv_t-veh.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],0,btpen_temp)
						#### 
						if argvs.management_etable:
							apower=calc_power(veh,start_idx+1,alast_idx,argvs)
						if argvs.management_xtable:
							aexp=calc_exp(veh,start_idx+1,alast_idx,argvs)
						#### ここまで休憩機能あり用の処理 ####

					#集荷違反量を計算
					if argvs.pickup_flag==True:
						max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(skv1_route,vehicle)
					else:
						max_load_pen,max_load_pen2=0,0

					load_pen,load_pen2=0,0
					for j in range(len(depo_idx)-1):
						load_onbrd,load_onbrd2=0,0
						for k in range(depo_idx[j]+1,depo_idx[j+1]):
							if skv1_route[k].custno[0] !="b":
								if skv1_route[k].requestType=="DELIVERY":
									load_onbrd+=skv1_route[k].dem
									load_onbrd2+=skv1_route[k].dem2

						load_pen+=max(load_onbrd-vehicle.cap,0)
						load_pen2+=max(load_onbrd2-vehicle.cap2,0)

					aload =load_pen+max_load_pen
					aload2 = load_pen2+max_load_pen2

					#改善前後の到着時間算出(拠点を出発し最後の配送先まで(-l ありの場合))
					if argvs.avetime_ape_flag != True and argvs.avetime_ae_flag != True and argvs.opt_t_weight == 0:
						atime=0.0
						time_error = 0.0
					else:
						# #vehicle1の改善後arr計算
						# arr1, route1 = calc_vehicle_arr_route(skv1_route, vehicle, vehicle.drskill, vehicle.opskill, vehicle.chg_batt_dict)

						if argvs.opt_t_weight!=0:
							#(最後の配送先の到着時刻(arr)と最後の配送先の受け入れ時刻(ready_fs)の遅い時刻 + 荷下ろし時間)
							#改善後時間算出
							if skv1_route[alast_idx-1] in servt_dict:
								if lcnt==0:
									if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill
									else:
										atime = max(arr1, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill
								else:
									if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill-delay_arr_list[i1][i2]+vehicle.arr[0]
									else:
										atime = max(arr1, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill-delay_arr_list[i1][i2]+vehicle.arr[0]
							else:
								if lcnt==0:
									if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill
									else:
										atime = max(arr1, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill
								else:
									if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
										atime = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill-delay_arr_list[i1][i2]+vehicle.arr[0]
									else:
										atime = max(arr1, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill-delay_arr_list[i1][i2]+vehicle.arr[0]
							if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
								atime+=skv1_route[alast_idx-1].parkt_open

						else:
							atime=0.0

						mvehicles={vehicle:0.0}
						if skv1_route[alast_idx-1] in servt_dict:
							if lcnt==0:
								if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
									mvehicles[vehicle] = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill - vehicle.arr[0]
								else:
									mvehicles[vehicle] = max(arr1, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill - vehicle.arr[0]
							else:
								if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
									mvehicles[vehicle] = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill - delay_arr_list[i1][i2]
								else:
									mvehicles[vehicle] = max(arr1, skv1_route[alast_idx-1].ready_fs) + servt_dict[skv1_route[alast_idx-1]] * vehicle.opskill - delay_arr_list[i1][i2]
						else:
							if lcnt==0:
								if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
									mvehicles[vehicle] = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill - vehicle.arr[0]
								else:
									mvehicles[vehicle] = max(arr1, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill - vehicle.arr[0]
							else:
								if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
									mvehicles[vehicle] = max(arr1+skv1_route[alast_idx-1].parkt_arrive, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill - delay_arr_list[i1][i2]
								else:
									mvehicles[vehicle] = max(arr1, skv1_route[alast_idx-1].ready_fs) + skv1_route[alast_idx-1].servt * vehicle.opskill - delay_arr_list[i1][i2]
						if skv1_route[alast_idx-1].spotid!=skv1_route[alast_idx-2].spotid or (skv1_route[alast_idx-1].custno==skv1_route[alast_idx-2].custno and skv1_route[alast_idx-1].custno!="0"):
							mvehicles[vehicle]+=skv1_route[alast_idx-1].parkt_open

						if argvs.avetime_ape_flag==True:
							time_error=calc_avetime_APE(vehicles,mvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avetime_ae_flag==True:
							time_error=calc_avetime_AE(vehicles,mvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
						else:
							time_error=0.0
					
					if argvs.avevisits_ape_flag != True and argvs.avevisits_ae_flag != True:
						visits_error = 0.0
					else:
						mvehicles={vehicle:0.0}
						if argvs.bulkShipping_flag:
							mvehicles[vehicle] = len([c for r in skv1_route[1:-1] for c in r.customers if not c.custno.startswith("e") and not c.custno.startswith("b") and c.custno!="0"])
						else:
							mvehicles[vehicle] = len([i for i in range(1,len(skv1_route)-1) if skv1_route[i].custno!="0" and not skv1_route[i].custno.startswith("e") and not skv1_route[i].custno.startswith("b") and skv1_route[i].custno!=skv1_route[i-1].custno])

						if argvs.avevisits_ape_flag==True:
							visits_error=calc_avevisits_APE(vehicles,mvehicles,argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
						elif argvs.avevisits_ae_flag==True:
							visits_error=calc_avevisits_AE(vehicles,mvehicles,argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
						else:
							visits_error=0.0
					
					if argvs.avedist_ape_flag != True and argvs.avedist_ae_flag != True:
						dist_error = 0.0
					else:
						mvehicles={vehicle:0.0}
						if lcnt==0:
							mvehicles[vehicle] = adist+vehicle.remdist[0]-vehicle.remdist[start_idx]
						else:
							mvehicles[vehicle] = adist+vehicle.delay_remdist[0]-vehicle.delay_remdist[start_idx]

						if argvs.avedist_ape_flag==True:
							dist_error=calc_avedist_APE(vehicles,mvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
						elif argvs.avedist_ae_flag==True:
							dist_error=calc_avedist_AE(vehicles,mvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
						else:
							dist_error=0.0

					#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
					if argvs.opt_unassigned_flag==True and vehicle.reserved_v_flag==True:
						aunass = len([c for c in skv1_route[1:alast_idx] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

					ires_temp,cdiff=improved_or_not(atpen+atpen_temp,btpen_temp,adist,bdist,aload,bload,aload2,bload2,time_error,btime_error,visits_error,bvisits_error,dist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass) #20210907

					if ires_temp and cdiff<cdiff_best:
						ires=True
						cdiff_best=cdiff
						if bload==1e9 and i1==0 and i2==0 and lcnt==0:
							btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp=atpen,adist,aload,aload2,time_error,visits_error,dist_error,atime,apower,aexp
							bvfinal_t=lv_t
							cdiff_best=0
						pick_opt_flag_best=pick_opt_flag
						index1,index2=i1,i2
						delay_lcnt_best=lcnt
						if argvs.break_flag == True:
							route_best = skv1_route
							ttable_best = argvs.management_ttable
							dtable_best = argvs.management_dtable
							etable_best = argvs.management_etable
							xtable_best = argvs.management_xtable
							vehnos=[v.vehno for v in vehicles]
							vehicles[vehnos.index(vehicle.vehno)].route = skv1_route
							t_route_best = r_backup(vehicles)
					if argvs.break_flag:
						argvs.management_ttable = t_dcopy(t_ttable)
						argvs.management_dtable = t_dcopy(t_dtable)
						argvs.management_etable = t_dcopy(t_etable)
						argvs.management_xtable = t_dcopy(t_xtable)
						vehicles = r_restore(vehicles, t_route, argvs)

	return ires,btpen,bload,bload2,pick_opt_flag_best,index1,index2,delay_lcnt_best,route_best,ttable_best,dtable_best,etable_best,xtable_best, t_route_best

def count_nonempty_vehicles(vehicles):
	empty_veh_cnt=0
	for v in vehicles:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])<1:
			empty_veh_cnt+=1
	return len(vehicles)-empty_veh_cnt

def localsearch_dtable_org(customers,vehicles,nbflag,ivnum,lflag,decr_vnum,argvs,logout=True): #20180807 ##20190917
	kcnt=0
	lastc_flag=lflag
	ls_d_starttime=time.time() ##20200626
	#ls_d_starttime=time.clock() ##20171012

	sLogBuf=""

	# 各車両の違反量を計算して保存する
	for v in vehicles:
		if argvs.lastc_flag:
			for i in reversed(range(0,len(v.route))):
				if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
					last_idx=i
				else:
					break
			v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,last_idx)])+max(0.0,v.lv[last_idx-1]-v.endhour)
		else:
			v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,len(v.route))])+max(0.0,v.lv[-1]-v.endhour)

		if argvs.pickup_flag==True:
			max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v.route,v)
		else:
			max_load_pen,max_load_pen2=0,0

		depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

		load_pen,load_pen2=0,0
		for j in range(len(depo_idx)-1):
			load_onbrd,load_onbrd2=0,0
			for k in range(depo_idx[j]+1,depo_idx[j+1]):
				if v.route[k].requestType=="DELIVERY":
					if v.route[k].custno[0] != "b":
						load_onbrd+=v.route[k].dem
						load_onbrd2+=v.route[k].dem2

			load_pen+=max(load_onbrd-v.cap,0)
			load_pen2+=max(load_onbrd2-v.cap2,0)

		v.load_pen =load_pen+max_load_pen
		v.load_pen2 = load_pen2+max_load_pen2
	if argvs.avetime_ape_flag==True:
		argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
	elif argvs.avetime_ae_flag==True:
		argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

	if argvs.avevisits_ape_flag==True:
		argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
	elif argvs.avevisits_ae_flag==True:
		argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

	if argvs.avedist_ape_flag==True:
		argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
	elif argvs.avedist_ae_flag==True:
		argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

	no_depo_parkt_flag=True
	for c in customers:
		if compare_time(c.depotservt)>0 or compare_time(c.parkt_open)>0 or compare_time(c.parkt_arrive)>0:
			no_depo_parkt_flag=False
			break

	one_table_flag=False
	if len(argvs.management_dtable)<=1 and \
		len(argvs.management_ttable)<=1 and \
		len(argvs.management_etable)<=1 and \
		len(argvs.management_xtable)<=1:
		one_table_flag=True

	if cpp_flag==True:
		cpp_customers=set_customer_vectors(customers,vehicles,argvs.bulkShipping_flag, argvs)

	#平準化高速化
	#argv の平準化のフラグを6種類をリストにtrue/falseを保存して(しきい値は不要) 
	aveflag_list = []
	aveflag_list.append(argvs.avetime_ape_flag)
	aveflag_list.append(argvs.avetime_ae_flag)
	aveflag_list.append(argvs.avevisits_ape_flag)
	aveflag_list.append(argvs.avevisits_ae_flag)
	aveflag_list.append(argvs.avedist_ape_flag)
	aveflag_list.append(argvs.avedist_ae_flag)
	#上記のフラグをぜんぶFalseにする
	argvs.avetime_ape_flag = False
	argvs.avetime_ae_flag = False
	argvs.avevisits_ape_flag = False
	argvs.avevisits_ae_flag = False
	argvs.avedist_ape_flag = False
	argvs.avedist_ae_flag = False
	while(True):
		sLogBuf=""
		re_cnt=inswap_cnt=ex_cnt=cross_cnt=merge_cnt=0
		#result.logprint("kcnt:"+str(kcnt)+"\n")
		if nbflag.relflag==True:
			#re_cnt=relocate_dtable(customers,vehicles,lastc_flag,dtable,ttable,ls_d_starttime,argvs) #20180807 #daic
			#result.logprint("re_cnt:"+str(re_cnt)+"\n")
			pass
		if nbflag.inswapflag==True:
			inswap_cnt=inswap_dtable(customers,vehicles,lastc_flag,ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
			#result.logprint("inswap_cnt:"+str(inswap_cnt)+"\n")
		if nbflag.exflag==True:
			ex_cnt=exchange_dtable(customers,vehicles,lastc_flag,ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
			#result.logprint("ex_cnt:"+str(ex_cnt)+"\n")

		if nbflag.mergeflag==True:
			#merge_cnt=merge_dtable(customers,vehicles,lastc_flag,dtable,ttable)
			merge_cnt=merge_dtable(customers,vehicles,lastc_flag,ivnum,decr_vnum,ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
			#result.logprint("merge_cnt:"+str(merge_cnt)+"\n")
			#if count_nonempty_vehicles(vehicles)==ivnum:
			#	nbflag.mergeflag=False
			##merge if count_nonempty_vehicles(vehicles)<=ivnum:
			##merge 	nbflag.mergeflag=False

		##20190722
		if nbflag.crossflag==True:
			# C++化用
			if cpp_flag==True:
				cpp_customers=set_customer_vectors(customers,vehicles,argvs.bulkShipping_flag, argvs)
				cpp_vehicles=set_vehicle_vectors(vehicles,customers,argvs)
				cpp_args=set_cppargs(customers,vehicles,argvs)

				cross_cnt,cpp_sLogBuf,cpp_vehicles,cpp_customers=cross_dtable_cpp(cpp_vehicles,cpp_customers,cpp_args,no_depo_parkt_flag,one_table_flag)

				update_vehicles(cpp_vehicles,cpp_args,vehicles,customers,cpp_customers,argvs)

				if cpp_sLogBuf!="\n":
					sLogBuf+=cpp_sLogBuf
			else:
				cross_cnt=cross_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
			#result.logprint("cross_cnt:"+str(cross_cnt)+"\n")

		kcnt=kcnt+1
		sLog = ["inswap_cnt:",inswap_cnt," re:",re_cnt," ex:",ex_cnt," merge_cnt:",merge_cnt," cross:",cross_cnt]
		sLogBuf += " ".join(list(map(str,sLog)))
		if rank==0 and logout:
			logging.log(logging.INFO,sLogBuf)
		ls_d_endtime=time.time() ##20200626
		#ls_d_endtime=time.clock() ##20171012
		if argvs.timeout > 0.0 and ((ls_d_endtime - ls_d_starttime) > argvs.timeout):  ##20171012
			sLogBuf = "timeout!"
			if rank==0:
				logging.log(logging.INFO,sLogBuf)
			break  ##20171012
		if(inswap_cnt==0 and re_cnt==0 and ex_cnt==0 and cross_cnt==0 and merge_cnt==0):
			break

	#平準化高速化
	#保存したフラグのリストを復元
	argvs.avetime_ape_flag = aveflag_list[0]
	argvs.avetime_ae_flag = aveflag_list[1]
	argvs.avevisits_ape_flag = aveflag_list[2]
	argvs.avevisits_ae_flag = aveflag_list[3]
	argvs.avedist_ape_flag = aveflag_list[4]
	argvs.avedist_ae_flag = aveflag_list[5]

	return sLogBuf


def set_vehicle_vectors(vehicles,customers,argvs):
	all_customers=customers+[v.route[-1] for v in vehicles]
	for v in vehicles:
		for tb in v.takebreak:
			if argvs.bulkShipping_flag == False:
				all_customers = all_customers + [tb]
				if len(tb.additionalcust) > 1:
					for c in tb.additionalcust[1:]:
						all_customers = all_customers + [c]
			else:
				tied_customers = TiedCustomer(tb.custno,tb.spotid,tb.ready_fs,tb.due_fs,tb.x,tb.y)
				tied_customers.customers.append(tb)
				tied_customers.servt=tb.servt
				tied_customers.dem=tb.dem
				tied_customers.dem2=tb.dem2
				tied_customers.reje_ve=tb.reje_ve
				tied_customers.parkt_open=tb.parkt_open
				tied_customers.parkt_arrive=tb.parkt_arrive
				tied_customers.depotservt=tb.depotservt
				tied_customers.additionalcust=[tied_customers]
				tied_customers.demdivideunit=tb.demdivideunit
				tied_customers.requestType=tb.requestType
				tied_customers.deny_unass=tb.deny_unass
				tied_customers.spotno=tb.spotno
				all_customers = all_customers + [tied_customers]
				if len(tied_customers.additionalcust) > 1:
					for c in tied_customers.additionalcust[1:]:
						all_customers = all_customers + [c]

	if argvs.bulkShipping_flag:
		for c in all_customers[:]:
			all_customers+=c.customers

	#スポットid無しの休憩スポットを追加(パターン3だけ)
	if argvs.br_file==None and argvs.break_interval!=0 and argvs.break_time!=0:
		for v in vehicles:
			for r in v.route:
				if r.spotid == '':
					all_customers = all_customers + [r]

	for v in vehicles:
		r_size = len(v.route)
		for j in range(r_size):
			if v.route[j].custno[0] == 'b':
				ac_size = len(all_customers)
				for i in range(ac_size):
					if all_customers[i].custno == v.route[j].custno:
						del v.route[j]
						v.route.insert(j, all_customers[i])
						break

	#routeにある休憩スポットのspotnoをcustomersに反映させる
	for c in all_customers:
		if c.custno[0] == 'b' and c.spotid == '':
			#c.spotno = 0
			breakf = False
			for v in vehicles:
				for r in v.route:
					if c.custno == r.custno:
						if argvs.bulkShipping_flag == False:
							c.spotno = r.spotno
						else:
							c.spotno = r.spotno
							#c.customers[0].spotno = r.spotno
							c.customers[0] = c

						breakf = True
						break
				if breakf:
					break

	cpp_vehicles=[]

	for v in vehicles:
		# r_size = len(v.route)
		# for j in range(r_size):
		# 	if v.route[j].custno[0] == 'b':
		# 		ac_size = len(all_customers)
		# 		for i in range(ac_size):
		# 			if all_customers[i].custno == v.route[j].custno:
		# 				del v.route[j]
		# 				v.route.insert(j, all_customers[i])
		# 				break

		route=[all_customers.index(c) if c in all_customers else 0 for c in v.route]
		chg_batt_dict={k:[all_customers.index(c) if c in all_customers else 0 for c in val] for k,val in v.chg_batt_dict.items()}
		delay_chg_batt_dict={k:[all_customers.index(c) if c in all_customers else 0 for c in val] for k,val in v.delay_chg_batt_dict.items()}
		takebreak=[all_customers.index(c) if c in all_customers else 0 for c in v.takebreak]

		#飛び地が選択されている場合は、C++にはオリジナルではなく飛び地のインデックスを渡す
		takebreak_ad=[{all_customers.index(ad):all_customers.index(c)} for c in v.takebreak for ad in c.additionalcust if c.custno!=ad.custno]
		for ad in takebreak_ad:
			for key in ad.keys():
				for r in route:
					if key == r:
						for i, tb in enumerate(takebreak):
							if tb==ad[key]:
								takebreak[i] = key
								break

		if v.delay_arr!=[]:
			cpp_vehicles.append(CppVehicle(route,v.arr,v.rem_batt,v.chg_batt,v.slack_t,v.st,v.lv,v.remdist,v.vehno,v.cap,v.cap2,v.totalcost,v.totalcost_wolast,v.load_onbrd,v.load_onbrd2,v.load_pickup,v.load_pickup2,v.opskill,v.drskill,v.e_capacity,v.e_initial,v.e_cost,v.e_margin,v.time_pen,v.load_pen,v.load_pen2,v.vtype,v.etype,v.direct_flag,v.starthour,v.endhour,v.maxvisit,v.maxrotate,v.depotservt,v.rmpriority,chg_batt_dict,v.delay_arr,v.delay_totalcost,v.delay_totalcost_wolast,v.delay_rem_batt,v.delay_chg_batt,delay_chg_batt_dict,v.delay_slack_t,takebreak,v.reserved_v_flag,v.delay_remdist,v.delay_lv,v.delay_st))
		else:
			cpp_vehicles.append(CppVehicle(route,v.arr,v.rem_batt,v.chg_batt,v.slack_t,v.st,v.lv,v.remdist,v.vehno,v.cap,v.cap2,v.totalcost,v.totalcost_wolast,v.load_onbrd,v.load_onbrd2,v.load_pickup,v.load_pickup2,v.opskill,v.drskill,v.e_capacity,v.e_initial,v.e_cost,v.e_margin,v.time_pen,v.load_pen,v.load_pen2,v.vtype,v.etype,v.direct_flag,v.starthour,v.endhour,v.maxvisit,v.maxrotate,v.depotservt,v.rmpriority,chg_batt_dict,v.delay_arr,v.delay_totalcost,v.delay_totalcost_wolast,v.delay_rem_batt,v.delay_chg_batt,delay_chg_batt_dict,v.delay_slack_t,takebreak,v.reserved_v_flag,[],[],[]))

	return cpp_vehicles

def set_customer_vectors(customers,vehicles,bulkShipping_flag, argvs):
	all_customers=customers+[v.route[-1] for v in vehicles]
	for v in vehicles:
		for tb in v.takebreak:
			if bulkShipping_flag == False:
				all_customers = all_customers + [tb]
				if len(tb.additionalcust) > 1:
					for c in tb.additionalcust[1:]:
						all_customers = all_customers + [c]
			else:
				tied_customers = TiedCustomer(tb.custno,tb.spotid,tb.ready_fs,tb.due_fs,tb.x,tb.y)
				tied_customers.customers.append(tb)
				tied_customers.servt=tb.servt
				tied_customers.dem=tb.dem
				tied_customers.dem2=tb.dem2
				tied_customers.reje_ve=tb.reje_ve
				tied_customers.parkt_open=tb.parkt_open
				tied_customers.parkt_arrive=tb.parkt_arrive
				tied_customers.depotservt=tb.depotservt
				tied_customers.additionalcust=[tied_customers]
				tied_customers.demdivideunit=tb.demdivideunit
				tied_customers.requestType=tb.requestType
				tied_customers.deny_unass=tb.deny_unass
				tied_customers.spotno=tb.spotno
				all_customers = all_customers + [tied_customers]
				if len(tied_customers.additionalcust) > 1:
					for c in tied_customers.additionalcust[1:]:
						all_customers = all_customers + [c]

	if bulkShipping_flag:
		for c in all_customers[:]:
			all_customers+=c.customers

	#スポットid無しの休憩スポットを追加(パターン3だけ)
	if argvs.br_file==None and argvs.break_interval!=0 and argvs.break_time!=0:
		for v in vehicles:
			for r in v.route:
				if r.spotid == '':
					all_customers = all_customers + [r]

	for c in all_customers:
		if c.custno[0] == 'b' and c.spotid == '':
			#c.spotno = 0
			breakf = False
			for v in vehicles:
				for r in v.route:
					if c.custno == r.custno:
						if bulkShipping_flag == False:
							c.spotno = r.spotno
						else:
							c.spotno = r.spotno
							if not hasattr(c, "customers"):
								customers=[]
								customers.append(c)
								setattr(c,"customers",customers)
							else:
								c.customers[0] = c
						breakf = True
						break
				if breakf:
					break

	cpp_customers=[]

	for tc in all_customers:
		deny_unass=False
		if tc.deny_unass=="true":
			deny_unass=True

		if bulkShipping_flag==True and hasattr(tc,"customers"):
			tieup_customer=[all_customers.index(c) if c in all_customers else 0 for c in tc.customers]
		else:
			tieup_customer=[]
		cpp_customers.append(CppCustomer(tieup_customer,tc.reje_ve,tc.custno,tc.spotid,tc.spotno,tc.y,tc.x,tc.dem,tc.dem2,tc.servt,tc.e_rate,tc.parkt_arrive,tc.parkt_open,tc.depotservt,tc.ready_fs,tc.due_fs,tc.requestType,deny_unass,tc.changecust))

	return cpp_customers
	

def set_cppargs(customers,vehicles,argvs):
	all_customers=customers+[v.route[-1] for v in vehicles]
	for v in vehicles:
		for tb in v.takebreak:
			if argvs.bulkShipping_flag == False:
				all_customers = all_customers + [tb]
				if len(tb.additionalcust) > 1:
					for c in tb.additionalcust[1:]:
						all_customers = all_customers + [c]
			else:
				tied_customers = TiedCustomer(tb.custno,tb.spotid,tb.ready_fs,tb.due_fs,tb.x,tb.y)
				tied_customers.customers.append(tb)
				tied_customers.servt=tb.servt
				tied_customers.dem=tb.dem
				tied_customers.dem2=tb.dem2
				tied_customers.reje_ve=tb.reje_ve
				tied_customers.parkt_open=tb.parkt_open
				tied_customers.parkt_arrive=tb.parkt_arrive
				tied_customers.depotservt=tb.depotservt
				tied_customers.additionalcust=[tied_customers]
				tied_customers.demdivideunit=tb.demdivideunit
				tied_customers.requestType=tb.requestType
				tied_customers.deny_unass=tb.deny_unass
				tied_customers.spotno=tb.spotno
				all_customers = all_customers + [tied_customers]
				if len(tied_customers.additionalcust) > 1:
					for c in tied_customers.additionalcust[1:]:
						all_customers = all_customers + [c]

	if argvs.bulkShipping_flag:
		for c in all_customers[:]:
			all_customers+=c.customers

	#スポットid無しの休憩スポットを追加(パターン3だけ)
	if argvs.br_file==None and argvs.break_interval!=0 and argvs.break_time!=0:
		for v in vehicles:
			for r in v.route:
				if r.spotid == '':
					all_customers = all_customers + [r]

	for k,v in argvs.non_violation_vehicles_route.items():
		r_size = len(v)
		for j in range(r_size):
			if v[j].custno[0] == 'b':
				ac_size = len(all_customers)
				for i in range(ac_size):
					if all_customers[i].custno == v[j].custno:
						del v[j]
						v.insert(j, all_customers[i])
						break

	for c in all_customers:
		if c.custno[0] == 'b' and c.spotid == '':
			#c.spotno = 0
			breakf = False
			for v in vehicles:
				for r in v.route:
					if c.custno == r.custno:
						if argvs.bulkShipping_flag == False:
							c.spotno = r.spotno
						else:
							c.spotno = r.spotno
							#c.customers[0].spotno = r.spotno
							c.customers[0] = c

						breakf = True
						break
				if breakf:
					break

	non_violation_vehicles_route={k:[all_customers.index(c) if c in all_customers else 0 for c in v] for k,v in argvs.non_violation_vehicles_route.items() }

	management_dtable={}
	for table in argvs.management_dtable:
		management_dtable[(table["vtype"],table["start_time"])]=table["table"]

	management_ttable={}
	for table in argvs.management_ttable:
		management_ttable[(table["vtype"],table["start_time"])]=table["table"]

	management_etable={}
	for table in argvs.management_etable:
		management_etable[(table["vtype"],table["etype"],table["start_time"])]=table["table"]

	management_xtable={}
	for table in argvs.management_xtable:
		management_xtable[(table["vtype"],table["start_time"])]=table["table"]

	non_violation_management_dtable={}
	for table in argvs.non_violation_management_dtable:
		non_violation_management_dtable[(table["vtype"],table["start_time"])]=table["table"]

	non_violation_management_ttable={}
	for table in argvs.non_violation_management_ttable:
		non_violation_management_ttable[(table["vtype"],table["start_time"])]=table["table"]

	non_violation_management_etable={}
	for table in argvs.non_violation_management_etable:
		non_violation_management_etable[(table["vtype"],table["etype"],table["start_time"])]=table["table"]

	non_violation_management_xtable={}
	for table in argvs.non_violation_management_xtable:
		non_violation_management_xtable[(table["vtype"],table["start_time"])]=table["table"]

	br_file = ""
	unass_file = ""
	reservedv_file = ""
	initroute = {}

	if argvs.br_file != None:
		br_file = argvs.br_file

	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化 未割り当て禁止ファイル
		if argvs.unass_file != None:
			unass_file = argvs.unass_file

		#未割り当て荷物最適化 予約車両ファイル
		if argvs.reservedv_file != None:
			reservedv_file = argvs.reservedv_file

		#初期解入力
		initroute={k:v for k,v in argvs.initroute.items()}

	return Cppargs(argvs.outputfile,argvs.lastc_flag,argvs.lowertime,argvs.uppertime,argvs.timeout,argvs.decr_vnum,argvs.avetime_ape_flag,argvs.avetime_ape,argvs.avetime_ae_flag,argvs.avetime_ae,argvs.avevisits_ape_flag,argvs.avevisits_ape,argvs.avevisits_ae_flag,argvs.avevisits_ae,argvs.avedist_ape_flag,argvs.avedist_ape,argvs.avedist_ae_flag,argvs.avedist_ae, \
		argvs.outputstime,int(argvs.outputs_count),argvs.evplan,argvs.ls_d_starttime,argvs.opt_d_weight,argvs.opt_t_weight,argvs.opt_e_weight,argvs.opt_x_weight,non_violation_vehicles_route,non_violation_management_dtable,non_violation_management_ttable,non_violation_management_etable,non_violation_management_xtable,argvs.atpen,argvs.aload,argvs.time_error,argvs.visits_error,argvs.dist_error,argvs.pickup_flag,argvs.skillshuffle_flag, \
		argvs.bulkShipping_flag,management_dtable,management_ttable,management_etable,management_xtable,argvs.delaystart_flag,argvs.multitrip_flag,argvs.multithread_num,argvs.timePenaltyWeight,argvs.loadPenaltyWeight,argvs.load2PenaltyWeight,argvs.timeLevelingPenaltyWeight,argvs.visitsLevelingPenaltyWeight,argvs.distLevelingPenaltyWeight,argvs.sparePenaltyWeight, \
		argvs.timePenaltyType,argvs.loadPenaltyType,argvs.load2PenaltyType,argvs.timeLevelingPenaltyType,argvs.visitsLevelingPenaltyType,argvs.distLevelingPenaltyType,argvs.delaystart2_flag,argvs.init_changecust,argvs.break_interval,argvs.break_time,br_file,argvs.break_flag,argvs.opt_unassigned_flag,unass_file,reservedv_file,initroute)

def update_vehicles(cpp_vehicles, cpp_args,vehicles,customers,cpp_customers,argvs):
	all_customers=customers+[v.route[-1] for v in vehicles]
	for v in vehicles:
		for tb in v.takebreak:
			if argvs.bulkShipping_flag == False:
				all_customers = all_customers + [tb]
				if len(tb.additionalcust) > 1:
					for c in tb.additionalcust[1:]:
						all_customers = all_customers + [c]
			else:
				tied_customers = TiedCustomer(tb.custno,tb.spotid,tb.ready_fs,tb.due_fs,tb.x,tb.y)
				tied_customers.customers.append(tb)
				tied_customers.servt=tb.servt
				tied_customers.dem=tb.dem
				tied_customers.dem2=tb.dem2
				tied_customers.reje_ve=tb.reje_ve
				tied_customers.parkt_open=tb.parkt_open
				tied_customers.parkt_arrive=tb.parkt_arrive
				tied_customers.depotservt=tb.depotservt
				tied_customers.additionalcust=[tied_customers]
				tied_customers.demdivideunit=tb.demdivideunit
				tied_customers.requestType=tb.requestType
				tied_customers.deny_unass=tb.deny_unass
				tied_customers.spotno=tb.spotno
				all_customers = all_customers + [tied_customers]
				if len(tied_customers.additionalcust) > 1:
					for c in tied_customers.additionalcust[1:]:
						all_customers = all_customers + [c]

	if argvs.bulkShipping_flag:
		for c in all_customers[:]:
			all_customers+=c.customers

	br_pattern = get_breakspot_pattern(vehicles, argvs)
	for c_cus in cpp_customers:
		if c_cus.spotid == '':
			if br_pattern == 3:
				#スポットid無しの休憩スポットを追加
				if argvs.bulkShipping_flag == False:
					custno = "b00"
					spotid = ""
					y = 0
					x = 0
					dem = 0
					dem2 = 0
					ready = '1000/01/01 00:00:00'
					due = '3000/01/01 00:00:00'
					servt = argvs.break_time
					starttime = argvs.starttime
					reje_ve = []
					parkt_arrive = 0
					parkt_open = 0
					depotservt = 0
					additionalcust = []
					demdivideunit = 1
					requestType = "DELIVERY"
					deny_unass = True
					ncus = Customer(custno,spotid,y,x,dem,dem2,ready,due,servt,starttime,reje_ve,parkt_arrive,parkt_open,depotservt,additionalcust,demdivideunit,requestType,deny_unass)
					ncus.spotno = c_cus.spotno
					ncus.custno = c_cus.custno
					ncus.additionalcust = [ncus]
					all_customers = all_customers + [ncus]
				else:
					custno = "b00"
					spotid = ""
					y = 0
					x = 0
					dem = c_cus.dem
					dem2 = c_cus.dem2
					ready_fs = c_cus.ready_fs
					due_fs = c_cus.due_fs
					tied_customers = TiedCustomer(custno,spotid,ready_fs,due_fs,x,y)
					tied_customers.servt=c_cus.servt
					tied_customers.reje_ve=c_cus.reje_ve
					tied_customers.parkt_open=c_cus.parkt_open
					tied_customers.parkt_arrive=c_cus.parkt_arrive
					tied_customers.depotservt=c_cus.depotservt
					tied_customers.additionalcust=[tied_customers]
					tied_customers.demdivideunit=1
					tied_customers.requestType=c_cus.requestType
					tied_customers.deny_unass=c_cus.deny_unass
					tied_customers.spotno = c_cus.spotno
					tied_customers.custno = c_cus.custno
					servt = argvs.break_time
					starttime = argvs.starttime
					reje_ve = []
					parkt_arrive = 0
					parkt_open = 0
					depotservt = 0
					ready = '1000/01/01 00:00:00'
					due = '3000/01/01 00:00:00'
					additionalcust = []
					demdivideunit = 1
					requestType = "DELIVERY"
					deny_unass = True
					ncus = Customer(custno,spotid,y,x,dem,dem2,ready,due,servt,starttime,reje_ve,parkt_arrive,parkt_open,depotservt,additionalcust,demdivideunit,requestType,deny_unass)
					ncus.spotno = c_cus.spotno
					ncus.custno = c_cus.custno
					ncus.additionalcust = [ncus]
					tied_customers.customers.append(ncus)
					all_customers = all_customers + [tied_customers]
			else:
				for ac in all_customers:
					if ac.custno == c_cus.custno:
						ac.spotno = c_cus.spotno
						break

	for i,v in enumerate(vehicles):
		v.route=[]
		for j,c in enumerate(cpp_vehicles[i].route):
			if c==0 and j!=0:
				v.route.append(copy.copy(all_customers[c])) #デポ
				v.route[-1].additionalcust=[]
				v.route[-1].additionalcust.append(v.route[-1])
			else:
				v.route.append(all_customers[c])

		v.arr=cpp_vehicles[i].arr[:]
		v.rem_batt=cpp_vehicles[i].rem_batt[:]
		v.chg_batt=cpp_vehicles[i].chg_batt[:]
		v.slack_t=cpp_vehicles[i].slack_t[:]
		v.st=cpp_vehicles[i].st[:]
		v.lv=cpp_vehicles[i].lv[:]
		v.remdist=cpp_vehicles[i].remdist[:]
		v.totalcost=cpp_vehicles[i].totalcost
		v.totalcost_wolast=cpp_vehicles[i].totalcost_wolast
		v.load_onbrd=cpp_vehicles[i].load_onbrd
		v.load_onbrd2=cpp_vehicles[i].load_onbrd2
		v.load_pickup=cpp_vehicles[i].load_pickup
		v.load_pickup2=cpp_vehicles[i].load_pickup2
		v.time_pen=cpp_vehicles[i].time_pen
		v.load_pen=cpp_vehicles[i].load_pen
		v.load_pen2=cpp_vehicles[i].load_pen2
		v.chg_batt_dict={all_customers[k]:val for k,val in cpp_vehicles[i].chg_batt_dict.items()}
		v.delay_arr=cpp_vehicles[i].delay_arr[:]
		v.delay_totalcost=cpp_vehicles[i].delay_totalcost
		v.delay_totalcost_wolast=cpp_vehicles[i].delay_totalcost_wolast
		v.delay_rem_batt=cpp_vehicles[i].delay_rem_batt[:] 
		v.delay_chg_batt=cpp_vehicles[i].delay_chg_batt[:]
		v.delay_chg_batt_dict={all_customers[k]:val for k,val in cpp_vehicles[i].delay_chg_batt_dict.items()}
		v.delay_slack_t=cpp_vehicles[i].delay_slack_t[:]
		if argvs.delaystart2_flag==True:
			v.delay_remdist=cpp_vehicles[i].delay_remdist[:] 
			v.delay_lv=cpp_vehicles[i].delay_lv[:] 
			v.delay_st=cpp_vehicles[i].delay_st[:] 

	argvs.non_violation_vehicles_route=cpp_args.non_violation_vehicles_route
	argvs.atpen=cpp_args.atpen
	argvs.aload=cpp_args.aload
	argvs.time_error=cpp_args.time_error
	argvs.visits_error=cpp_args.visits_error
	argvs.dist_error=cpp_args.dist_error

	for i, route in cpp_args.non_violation_vehicles_route.items():
		route_tmp = []
		for j,c in enumerate(cpp_args.non_violation_vehicles_route[i]):
			if c==0 and j!=0:
				route_tmp.append(copy.copy(all_customers[c]))
			else:
				route_tmp.append(all_customers[c])

		argvs.non_violation_vehicles_route[i] = route_tmp

	# TTable等を戻す処理
	argvs.management_dtable = []
	for table in cpp_args.management_dtable:
		vtype = table[0]
		start_time = table[1]
		dtable = cpp_args.management_dtable[vtype, start_time]
		argvs.management_dtable.append({"vtype":vtype, "start_time":start_time, "table":dtable})

	argvs.management_ttable = []
	for table in cpp_args.management_ttable:
		vtype = table[0]
		start_time = table[1]
		ttable = cpp_args.management_ttable[vtype, start_time]
		argvs.management_ttable.append({"vtype":vtype, "start_time":start_time, "table":ttable})

	argvs.management_etable = []
	for table in cpp_args.management_etable:
		vtype = table[0]
		etype = table[1]
		start_time = table[2]
		etable = cpp_args.management_etable[vtype, etype, start_time]
		argvs.management_etable.append({"vtype":vtype, "etype":etype, "start_time":start_time, "table":etable})

	argvs.management_xtable = []
	for table in cpp_args.management_xtable:
		vtype = table[0]
		start_time = table[1]
		xtable = cpp_args.management_xtable[vtype, start_time]
		argvs.management_xtable.append({"vtype":vtype, "start_time":start_time, "table":xtable})

	argvs.non_violation_management_dtable = []
	for table in cpp_args.non_violation_management_dtable:
		vtype = table[0]
		start_time = table[1]
		dtable = cpp_args.non_violation_management_dtable[vtype, start_time]
		argvs.non_violation_management_dtable.append({"vtype":vtype, "start_time":start_time, "table":dtable})

	argvs.non_violation_management_ttable = []
	for table in cpp_args.non_violation_management_ttable:
		vtype = table[0]
		start_time = table[1]
		ttable = cpp_args.non_violation_management_ttable[vtype, start_time]
		argvs.non_violation_management_ttable.append({"vtype":vtype, "start_time":start_time, "table":ttable})

	argvs.non_violation_management_etable = []
	for table in cpp_args.non_violation_management_etable:
		vtype = table[0]
		etype = table[1]
		start_time = table[2]
		etable = cpp_args.non_violation_management_etable[vtype, etype, start_time]
		argvs.non_violation_management_etable.append({"vtype":vtype, "etype":etype, "start_time":start_time, "table":etable})

	argvs.non_violation_management_xtable = []
	for table in cpp_args.non_violation_management_xtable:
		vtype = table[0]
		start_time = table[1]
		xtable = cpp_args.non_violation_management_xtable[vtype, start_time]
		argvs.non_violation_management_xtable.append({"vtype":vtype, "start_time":start_time, "table":xtable})

	#各種テーブルをソート
	argvs.management_dtable=sort_table(argvs.management_dtable)
	argvs.management_ttable=sort_table(argvs.management_ttable)
	if argvs.management_etable:
		argvs.management_etable=sort_table(argvs.management_etable)
	if argvs.management_xtable:
		argvs.management_xtable=sort_table(argvs.management_xtable)

	argvs.non_violation_management_dtable=sort_table(argvs.non_violation_management_dtable)
	argvs.non_violation_management_ttable=sort_table(argvs.non_violation_management_ttable)
	if argvs.non_violation_management_etable:
		argvs.non_violation_management_etable=sort_table(argvs.non_violation_management_etable)
	if argvs.non_violation_management_xtable:
		argvs.non_violation_management_xtable=sort_table(argvs.non_violation_management_xtable)



def localsearch_dtable(customers,vehicles,nbflag,ivnum,skills,argvs): #20180807
	#利用期限を過ぎていたらエラー出力して終了
	if is_expired():
		sErrMes="license expired"
		raise ValueError(sErrMes)

	sLog = ["customers = ",[c.custno for c in customers],", vehicles = ",[v.vehno for v in vehicles],", nbflag = ",vars(nbflag),", ivnum = ",ivnum,", skills = ",skills,", argvs = ",argvs]
	sLogBuf = " ".join(list(map(str,sLog)))
	if rank==0:
		logging.log(logging.DEBUG,sLogBuf)

	sLogBuf = "\n"
	try:
		#ivnumが1以上の整数値以外の場合
		if type(ivnum)==str:
			sErrMes = "vehicle number (aka ivnum) set to other than 0 or positive integer (ivnum = \'"+str(ivnum)+"\')"
			raise ValueError(sErrMes)
		elif not str(ivnum).isdecimal():
			sErrMes = "vehicle number (aka ivnum) set to other than 0 or positive integer (ivnum = "+str(ivnum)+")"
			raise ValueError(sErrMes)
		elif  int(ivnum)<=0:
			sErrMes = "vehicle number (aka ivnum) set to other than 0 or positive integer (ivnum = "+str(ivnum)+")"
			raise ValueError(sErrMes)

		#vehiclesの要素(車両)数と値が異なる場合
		if argvs.num_addv==-1:
			if len(vehicles)!=ivnum and argvs.opt_unassigned_flag==False:
				sErrMes = "vehicle number (aka ivnum) differs from vehicle class length (ivnum = "+str(ivnum)+", vehicle class length = "+str(len(vehicles))+")"
				raise ValueError(sErrMes)
		else:
			if len(vehicles)!=ivnum+argvs.num_addv and argvs.opt_unassigned_flag==False:
				sErrMes = "vehicle number (aka ivnum) differs from vehicle class length (ivnum+num_addv = "+str(ivnum+argvs.num_addv)+", vehicle class length = "+str(len(vehicles))+")"
				raise ValueError(sErrMes)

		#ArgvsオブジェクトのskillfileがNoneでskillsがNoneでない場合
		if argvs.skillfile==None and skills!=None:
			sErrMes = "skills argument must be set to none when skillfile field of Argvs object set none (skills = "+str(skills)+")"
			raise ValueError(sErrMes)

	except Exception:
		sErr = traceback.format_exc()
		sErr = ["<Error message log>",sErr]
		sLogBuf_error = " ".join(list(map(str,sErr)))
		if rank==0:
			logging.log(logging.ERROR,sLogBuf_error)
		raise

	# 初期解のバックアップは捨てる
	argvs.non_violation_vehicles_route.clear()

	# 各車両の違反量を計算して保存する
	for v in vehicles:
		if argvs.lastc_flag:
			for i in reversed(range(0,len(v.route))):
				if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
					last_idx=i
				else:
					break
			v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,last_idx)])+max(0.0,v.lv[last_idx-1]-v.endhour)
		else:
			v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,len(v.route))])+max(0.0,v.lv[-1]-v.endhour)

		if argvs.pickup_flag==True:
			max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v.route,v)
		else:
			max_load_pen,max_load_pen2=0,0

		depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

		load_pen,load_pen2=0,0
		for j in range(len(depo_idx)-1):
			load_onbrd,load_onbrd2=0,0
			for k in range(depo_idx[j]+1,depo_idx[j+1]):
				if v.route[k].requestType=="DELIVERY":
					if v.route[k].custno[0] != "b":
						load_onbrd+=v.route[k].dem
						load_onbrd2+=v.route[k].dem2

			load_pen+=max(load_onbrd-v.cap,0)
			load_pen2+=max(load_onbrd2-v.cap2,0)

		v.load_pen =load_pen+max_load_pen
		v.load_pen2 = load_pen2+max_load_pen2
	if argvs.avetime_ape_flag==True:
		argvs.time_error=calc_avetime_APE(vehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
	elif argvs.avetime_ae_flag==True:
		argvs.time_error=calc_avetime_AE(vehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

	if argvs.avevisits_ape_flag==True:
		argvs.visits_error=calc_avevisits_APE(vehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
	elif argvs.avevisits_ae_flag==True:
		argvs.visits_error=calc_avevisits_AE(vehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

	if argvs.avedist_ape_flag==True:
		argvs.dist_error=calc_avedist_APE(vehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
	elif argvs.avedist_ae_flag==True:
		argvs.dist_error=calc_avedist_AE(vehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
	
	backup_route(vehicles,argvs)

	no_depo_parkt_flag=True
	for c in customers:
		if compare_time(c.depotservt)>0 or compare_time(c.parkt_open)>0 or compare_time(c.parkt_arrive)>0:
			no_depo_parkt_flag=False
			break

	one_table_flag=False
	if len(argvs.management_dtable)<=1 and \
		len(argvs.management_ttable)<=1 and \
		len(argvs.management_etable)<=1 and \
		len(argvs.management_xtable)<=1:
		one_table_flag=True

	#荷物自動分割のチェック
	autoloaddivide_flag=False
	for c in customers:
		if c.demdivideunit!=1:
			autoloaddivide_flag=True
			break

	if autoloaddivide_flag==True:
		input_digits=max([len(str('{:f}'.format(c.dem).rstrip('0')).split(".")[1]) for c in customers])
		input_digits2=max([len(str('{:f}'.format(c.dem2).rstrip('0')).split(".")[1]) for c in customers])
	
	kcnt=0

	if cpp_flag==True:
		cpp_customers=set_customer_vectors(customers,vehicles,argvs.bulkShipping_flag, argvs)

	###ls_d_starttime=time.time() ##20190917
	##ls_d_starttime=time.clock() ##20171012
	if argvs.multi_p != 0: ##20190917
		sLog = ["multiprocessing:"+str(argvs.multi_p)+"\n"]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	if argvs.decr_vnum:
	# #平準化高速化
	# if argvs.decr_vnum or argvs.avetime_ape_flag or argvs.avetime_ae_flag or argvs.avevisits_ape_flag or argvs.avevisits_ae_flag or argvs.avedist_ape_flag or argvs.avedist_ae_flag:
		# #argv の平準化のフラグを6種類をリストにtrue/falseを保存して(しきい値は不要) 
		# aveflag_list = []
		# aveflag_list.append(argvs.avetime_ape_flag)
		# aveflag_list.append(argvs.avetime_ae_flag)
		# aveflag_list.append(argvs.avevisits_ape_flag)
		# aveflag_list.append(argvs.avevisits_ae_flag)
		# aveflag_list.append(argvs.avedist_ape_flag)
		# aveflag_list.append(argvs.avedist_ae_flag)
		#上記のフラグをぜんぶFalseにする
		# argvs.avetime_ape_flag = False
		# argvs.avetime_ae_flag = False
		# argvs.avevisits_ape_flag = False
		# argvs.avevisits_ae_flag = False
		# argvs.avedist_ape_flag = False
		# argvs.avedist_ae_flag = False
		while(True):
			re_cnt=inswap_cnt=ex_cnt=cross_cnt=merge_cnt=0
			#result.logprint("kcnt:"+str(kcnt)+"\n")
			if argvs.multi_p == 0: ##20190917
				if nbflag.relflag==True:
					re_cnt=relocate_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
					#result.logprint("re_cnt:"+str(re_cnt)+"\n")
				if nbflag.inswapflag==True:
					inswap_cnt=inswap_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
					#result.logprint("inswap_cnt:"+str(inswap_cnt)+"\n")
				if nbflag.exflag==True:
					ex_cnt=exchange_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
					#result.logprint("ex_cnt:"+str(ex_cnt)+"\n")
				
				if nbflag.mergeflag==True:
					#merge_cnt=merge_dtable(customers,vehicles,lastc_flag,dtable,ttable,result)
					merge_cnt=merge_dtable(customers,vehicles,argvs.lastc_flag,ivnum,False,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
					#result.logprint("merge_cnt:"+str(merge_cnt)+"\n")
					#if count_nonempty_vehicles(vehicles)==ivnum:
					#	nbflag.mergeflag=False
					##merge if count_nonempty_vehicles(vehicles)<=ivnum:
					##merge 	nbflag.mergeflag=False

				##20190722
				if nbflag.crossflag==True:
					# C++化用
					if cpp_flag==True:
						cpp_customers=set_customer_vectors(customers,vehicles,argvs.bulkShipping_flag, argvs)
						cpp_vehicles=set_vehicle_vectors(vehicles,customers,argvs)
						cpp_args=set_cppargs(customers,vehicles,argvs)

						cross_cnt,cpp_sLogBuf,cpp_vehicles,cpp_customers=cross_dtable_cpp(cpp_vehicles,cpp_customers,cpp_args,no_depo_parkt_flag,one_table_flag)

						update_vehicles(cpp_vehicles,cpp_args,vehicles,customers,cpp_customers,argvs)

						if cpp_sLogBuf!="\n":
							sLogBuf+=cpp_sLogBuf
					else:
						cross_cnt=cross_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807



					#result.logprint("cross_cnt:"+str(cross_cnt)+"\n")
			##20190917 
			# else: #multiprocessing of me,cr
			# 	#under 3(re,in,ex) are same process of main process because short time execution
			# 	if nbflag.relflag==True:
			# 		re_cnt=relocate_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs) #20180807
			# 		#result.logprint("re_cnt:"+str(re_cnt)+"\n")
			# 	if nbflag.inswapflag==True:
			# 		inswap_cnt=inswap_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs) #20180807
			# 		#result.logprint("inswap_cnt:"+str(inswap_cnt)+"\n")
			# 	if nbflag.exflag==True:
			# 		ex_cnt=exchange_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs) #20180807
			# 		#result.logprint("ex_cnt:"+str(ex_cnt)+"\n")

			# 	re_veh=inswap_veh=ex_veh=merge_veh=cross_veh = []
			# 	ls_d_endtime=time.time()
			# 	if argvs.outputstime > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
			# 		outputs_middle(customers,vehicles,argvs)
			# 		argvs.outputs_count+=1
			# 	while True:
			# 		if argvs.outputstime > 0.0 and (ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
			# 			argvs.outputs_count+=1
			# 		else:
			# 			break
			# 	if argvs.timeout > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.timeout): ##20190917
			# 		sLogBuf += "mp all timeout!\n"
			# 		sLog = [" relocate:",re_cnt,"inswap:",inswap_cnt," exchange:",ex_cnt," merge:",merge_cnt," cross:",cross_cnt]
			# 		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			# 		break ##20190917
				
			# 	#multiprocessing of me,cr(me is 1process、cr is 3process)
			# 	re_cnt2,inswap_cnt2,ex_cnt2,merge_cnt,cross_cnt,re_veh2,inswap_veh2,ex_veh2,merge_veh,cross_veh = \
			# 	localsearch_dtable_mp(customers,vehicles,nbflag,ivnum,argvs.lastc_flag,argvs.decr_vnum,argvs.ls_d_starttime,2,argvs)

			# 	if merge_cnt != 0:
			# 		vehicles[:] = merge_veh[:]
			# 		ls_d_endtime=time.time() ##20190917
			# 		if argvs.outputstime > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
			# 			outputs_middle(customers,vehicles,argvs)
			# 			argvs.outputs_count+=1
			# 		while True:
			# 			if argvs.outputstime > 0.0 and (ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
			# 				argvs.outputs_count+=1
			# 			else:
			# 				break
			# 		if argvs.timeout > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.timeout): ##20190917
			# 			sLogBuf += "mp merge timeout!\n"
			# 			sLog = [" relocate:",re_cnt,"inswap:",inswap_cnt," exchange:",ex_cnt," merge:",merge_cnt," cross:",cross_cnt]
			# 			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			# 			break ##20190917
									
			# 		#multiprocessing of cr
			# 		re_cnt1,inswap_cnt1,ex_cnt1,merge_cnt1,cross_cnt,re_veh1,inswap_veh1,ex_veh1,merge_veh1,cross_veh = \
			# 		localsearch_dtable_mp(customers,vehicles,nbflag,ivnum,argvs.lastc_flag,argvs.decr_vnum,argvs.ls_d_starttime,1,argvs)

			# 	vehicles[:] = cross_veh[:]
			# 	ls_d_endtime=time.time() ##20190917
			# 	if argvs.outputstime > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
			# 		outputs_middle(customers,vehicles,argvs)
			# 		argvs.outputs_count+=1
			# 	while True:
			# 		if argvs.outputstime > 0.0 and (ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
			# 			argvs.outputs_count+=1
			# 		else:
			# 			break
			# 	if argvs.timeout > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.timeout): ##20190917
			# 		sLogBuf += "mp cross timeout!\n"
			# 		sLog = [" relocate:",re_cnt,"inswap:",inswap_cnt," exchange:",ex_cnt," merge:",merge_cnt," cross:",cross_cnt]
			# 		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			# 		break ##20190917
			##20190917
			kcnt=kcnt+1
			sLog = [" relocate:",re_cnt,"inswap:",inswap_cnt," exchange:",ex_cnt," merge:",merge_cnt," cross:",cross_cnt]
			if re_cnt==0 and inswap_cnt==0 and ex_cnt==0 and merge_cnt==0 and cross_cnt==0:
				sLogBuf += " ".join(list(map(str,sLog))) + " start rv mode" + "\n"
			else:
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			ls_d_endtime=time.time() ##20190917
			##ls_d_endtime=time.clock() ##20171012
			if argvs.timeout > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.timeout):  ##20171012
				sLogBuf += "timeout!\n"

				restore_route(vehicles, argvs)

				break  ##20171012
			if(inswap_cnt==0 and re_cnt==0 and ex_cnt==0 and cross_cnt==0 and merge_cnt==0):
				''' ##20190917 debug
				totalcost=0
				totalcost_wolast=0
				for v in vehicles:
					if len(v.route)>=3:
						totalcost+=v.totalcost
						totalcost_wolast+=v.totalcost_wolast
						v = []
				printlog(["===== 総走行距離: mp",round(totalcost,2)," ====="])
				printlog(["===== 総走行距離 mp（最後の配送先から拠点までを含まない）: ",round(totalcost_wolast,2)," ====="])
				'''
			
				restore_route(vehicles, argvs)
			
				break

		# #平準化高速化
		# #保存したフラグのリストを復元
		# argvs.avetime_ape_flag = aveflag_list[0]
		# argvs.avetime_ae_flag = aveflag_list[1]
		# argvs.avevisits_ape_flag = aveflag_list[2]
		# argvs.avevisits_ae_flag = aveflag_list[3]
		# argvs.avedist_ape_flag = aveflag_list[4]
		# argvs.avedist_ae_flag = aveflag_list[5]

		#荷物自動分割
		if autoloaddivide_flag==True:
			customers_before=copy.copy(customers)
			autoloaddivide(vehicles,customers,argvs)

			divided_customers=[]
			divided_customers+=list(set(customers)^set(customers_before))

			if divided_customers!=[]:
				sLogBuf += "customers(custno = " + ", ".join(list(map(str,[c.custno for c in divided_customers if c.custno!="0"]))) + ") were divided" "\n"

			if cpp_flag==True:
				cpp_customers=set_customer_vectors(customers,vehicles,argvs.bulkShipping_flag,argvs)


	route_before=None
	load_pen_before=1e9
	load2_pen_before=1e9
	while(True):	
		while(True):
			re_cnt=inswap_cnt=ex_cnt=cross_cnt=merge_cnt=0
			#result.logprint("kcnt:"+str(kcnt)+"\n")
			if argvs.multi_p == 0: ##20190917
				if nbflag.relflag==True:
					re_cnt=relocate_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
					if "debugpy" in sys.modules:
						print("re_cnt:"+str(re_cnt), datetime.datetime.now(), "\n")
					#result.logprint("re_cnt:"+str(re_cnt)+"\n")
				if nbflag.inswapflag==True:
					inswap_cnt=inswap_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
					if "debugpy" in sys.modules:
						print("inswap_cnt:"+str(inswap_cnt), datetime.datetime.now(), "\n")
					#result.logprint("inswap_cnt:"+str(inswap_cnt)+"\n")
				if nbflag.exflag==True:
					ex_cnt=exchange_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
					if "debugpy" in sys.modules:
						print("ex_cnt:"+str(ex_cnt), datetime.datetime.now(), "\n")
					#result.logprint("ex_cnt:"+str(ex_cnt)+"\n")

				if nbflag.mergeflag==True:
					#merge_cnt=merge_dtable(customers,vehicles,lastc_flag,dtable,ttable,result)
					merge_cnt=merge_dtable(customers,vehicles,argvs.lastc_flag,ivnum,argvs.decr_vnum,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807
					if "debugpy" in sys.modules:
						print("merge_cnt:"+str(merge_cnt), datetime.datetime.now(), "\n")
					#result.logprint("merge_cnt:"+str(merge_cnt)+"\n")
					#if count_nonempty_vehicles(vehicles)==ivnum:
					#	nbflag.mergeflag=False
					##merge if count_nonempty_vehicles(vehicles)<=ivnum:
					##merge 	nbflag.mergeflag=False

				##20190722
				if nbflag.crossflag==True:
					#C++化用
					if cpp_flag==True:
						cpp_customers=set_customer_vectors(customers,vehicles,argvs.bulkShipping_flag,argvs)
						cpp_vehicles=set_vehicle_vectors(vehicles,customers,argvs)
						cpp_args=set_cppargs(customers,vehicles,argvs)
						
						cross_cnt,cpp_sLogBuf,cpp_vehicles,cpp_customers=cross_dtable_cpp(cpp_vehicles,cpp_customers,cpp_args,no_depo_parkt_flag,one_table_flag)
						if "debugpy" in sys.modules:
							print("cross_cnt:"+str(cross_cnt), datetime.datetime.now(), "\n", flush=True)
						
						update_vehicles(cpp_vehicles,cpp_args,vehicles,customers,cpp_customers,argvs)

						if cpp_sLogBuf!="\n":
							sLogBuf+=cpp_sLogBuf
					else:
						cross_cnt=cross_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs,no_depo_parkt_flag,one_table_flag) #20180807



					#result.logprint("cross_cnt:"+str(cross_cnt)+"\n")
			##20190917 
			# else: #multiprocessing of me,cr
			# 	#under 3(re,in,ex) are same process of main process because short time execution
			# 	if nbflag.relflag==True:
			# 		re_cnt=relocate_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs) #20180807
			# 		#result.logprint("re_cnt:"+str(re_cnt)+"\n")
			# 	if nbflag.inswapflag==True:
			# 		inswap_cnt=inswap_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs) #20180807
			# 		#result.logprint("inswap_cnt:"+str(inswap_cnt)+"\n")
			# 	if nbflag.exflag==True:
			# 		ex_cnt=exchange_dtable(customers,vehicles,argvs.lastc_flag,argvs.ls_d_starttime,argvs) #20180807
			# 		#result.logprint("ex_cnt:"+str(ex_cnt)+"\n")

			# 	re_veh=inswap_veh=ex_veh=merge_veh=cross_veh = []
			# 	ls_d_endtime=time.time()
			# 	if argvs.outputstime > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
			# 		outputs_middle(customers,vehicles,argvs)
			# 		argvs.outputs_count+=1
			# 	while True:
			# 		if argvs.outputstime > 0.0 and (ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
			# 			argvs.outputs_count+=1
			# 		else:
			# 			break
			# 	if argvs.timeout > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.timeout): ##20190917
			# 		sLogBuf += "mp all timeout!\n"
			# 		sLog = [" relocate:",re_cnt,"inswap:",inswap_cnt," exchange:",ex_cnt," merge:",merge_cnt," cross:",cross_cnt]
			# 		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			# 		break ##20190917
				
			# 	#multiprocessing of me,cr(me is 1process、cr is 3process)
			# 	re_cnt2,inswap_cnt2,ex_cnt2,merge_cnt,cross_cnt,re_veh2,inswap_veh2,ex_veh2,merge_veh,cross_veh = \
			# 	localsearch_dtable_mp(customers,vehicles,nbflag,ivnum,argvs.lastc_flag,argvs.decr_vnum,argvs.ls_d_starttime,2,argvs)

			# 	if merge_cnt != 0:
			# 		vehicles[:] = merge_veh[:]
			# 		ls_d_endtime=time.time() ##20190917
			# 		if argvs.outputstime > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
			# 			outputs_middle(customers,vehicles,argvs)
			# 			argvs.outputs_count+=1
			# 		while True:
			# 			if argvs.outputstime > 0.0 and (ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
			# 				argvs.outputs_count+=1
			# 			else:
			# 				break
			# 		if argvs.timeout > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.timeout): ##20190917
			# 			sLogBuf += "mp merge timeout!\n"
			# 			sLog = [" relocate:",re_cnt,"inswap:",inswap_cnt," exchange:",ex_cnt," merge:",merge_cnt," cross:",cross_cnt]
			# 			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			# 			break ##20190917
									
			# 		#multiprocessing of cr
			# 		re_cnt1,inswap_cnt1,ex_cnt1,merge_cnt1,cross_cnt,re_veh1,inswap_veh1,ex_veh1,merge_veh1,cross_veh = \
			# 		localsearch_dtable_mp(customers,vehicles,nbflag,ivnum,argvs.lastc_flag,argvs.decr_vnum,argvs.ls_d_starttime,1,argvs)

			# 	vehicles[:] = cross_veh[:]
			# 	ls_d_endtime=time.time() ##20190917
			# 	if argvs.outputstime > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
			# 		outputs_middle(customers,vehicles,argvs)
			# 		argvs.outputs_count+=1
			# 	while True:
			# 		if argvs.outputstime > 0.0 and (ls_d_endtime - argvs.ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
			# 			argvs.outputs_count+=1
			# 		else:
			# 			break
			# 	if argvs.timeout > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.timeout): ##20190917
			# 		sLogBuf += "mp cross timeout!\n"
			# 		sLog = [" relocate:",re_cnt,"inswap:",inswap_cnt," exchange:",ex_cnt," merge:",merge_cnt," cross:",cross_cnt]
			# 		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			# 		break ##20190917
			##20190917
			kcnt=kcnt+1
			sLog = [" relocate:",re_cnt,"inswap:",inswap_cnt," exchange:",ex_cnt," merge:",merge_cnt," cross:",cross_cnt]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			ls_d_endtime=time.time() ##20190917
			##ls_d_endtime=time.clock() ##20171012
			if argvs.timeout > 0.0 and ((ls_d_endtime - argvs.ls_d_starttime) > argvs.timeout):  ##20171012
				sLogBuf += "timeout!\n"

				restore_route(vehicles, argvs)

				break  ##20171012
			if(inswap_cnt==0 and re_cnt==0 and ex_cnt==0 and cross_cnt==0 and merge_cnt==0):
				''' ##20190917 debug
				totalcost=0
				totalcost_wolast=0
				for v in vehicles:
					if len(v.route)>=3:
						totalcost+=v.totalcost
						totalcost_wolast+=v.totalcost_wolast
						v = []
				printlog(["===== 総走行距離: mp",round(totalcost,2)," ====="])
				printlog(["===== 総走行距離 mp（最後の配送先から拠点までを含まない）: ",round(totalcost_wolast,2)," ====="])
				'''
			
				restore_route(vehicles, argvs)
			
				break

		#荷物自動分割
		if autoloaddivide_flag==True:
			#同じCUSTNOが連続する場合は削除する
			if argvs.bulkShipping_flag==False:
				for v in vehicles:
					if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
						continue
					i=1
					while True:
						if i>len(v.route)-2:
							break

						if v.route[i].custno==v.route[i-1].custno:
							if v.route[i].custno!="0" and v.route[i].custno[0]!="b":
								for ac in v.route[i-1].additionalcust:
									ac.dem+=v.route[i].dem
									ac.dem2+=v.route[i].dem2
									ac.demdivideunit+=v.route[i].demdivideunit
									if v.route[i].changecust=="additive":
										ac.changecust="additive"
								for ac in v.route[i].additionalcust:
									customers.remove(ac)
								remove_customers_specified([v.route[i]],v,argvs)
								i=1
								continue

						i+=1

			route_after=[[c for c in v.route] for v in vehicles]
			# if route_before==route_after:
			# 	break #改善しなかったら終了

			digits=min([len(str('{:f}'.format(c.dem).rstrip('0')).split(".")[1]) for c in customers])
			digits2=min([len(str('{:f}'.format(c.dem2).rstrip('0')).split(".")[1]) for c in customers])

			load_pen_after=0
			load2_pen_after=0
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
					continue

				load_pen_after+=v.load_pen
				load2_pen_after+=v.load_pen2

			if 0<=load_pen_before-load_pen_after<10**(-digits-2) and 0<=load2_pen_before-load2_pen_after<10**(-digits2-2):
				break #違反量合計の改善値が小さい場合は終了
			else:
				load_pen_before=load_pen_after
				load2_pen_before=load2_pen_after

			load_over=autoloaddivide(vehicles,customers,argvs)
			if not load_over:
				break #積載オーバーがなければ終了
			else:
				route_before=[[c for c in v.route] for v in vehicles]

				divided_customers=[]
				for j in range(len(route_before)):
					divided_customers+=list(set(route_after[j])^set(route_before[j]))

				sLogBuf += "customers(custno = " + ", ".join(list(map(str,[c.custno for c in divided_customers if c.custno!="0" and c.custno[0]!="b"]))) + ") were divided" "\n"

			if cpp_flag==True:
				cpp_customers=set_customer_vectors(customers,vehicles,argvs.bulkShipping_flag,argvs)
		else:
			break

	#同じCUSTNOが連続する場合は削除する
	if argvs.bulkShipping_flag==False:
		for v in vehicles:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue
			i=1
			while True:
				if i>len(v.route)-2:
					break

				if v.route[i].custno==v.route[i-1].custno:
					if v.route[i].custno!="0" and v.route[i].custno[0]!="b":
						for ac in v.route[i-1].additionalcust:
							ac.dem+=v.route[i].dem
							ac.dem2+=v.route[i].dem2
							ac.demdivideunit+=v.route[i].demdivideunit
							if v.route[i].changecust=="additive":
								ac.changecust="additive"
						for ac in v.route[i].additionalcust:
							customers.remove(ac)
					remove_customers_specified([v.route[i]],v,argvs)
					i=1
					continue

				i+=1

			pick_opt_flag, pick_opt_idx = get_pick_opt_status(v, argvs)
			if v.route[pick_opt_idx].custno=="0" :
				if argvs.pickup_flag==True and pick_opt_flag==True:
					continue

				remove_customers_specified([v.route[pick_opt_idx]],v,argvs)
	else:
		for v in vehicles:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue
			i=1
			while True:
				if i>len(v.route)-2:
					break

				if v.route[i].customers[0].custno=="0" and v.route[i-1].customers[0].custno=="0":
					remove_customers_specified([v.route[i]],v,argvs)
					i=1
					continue

				i+=1

			if v.route[-2].customers[0].custno=="0" :
				if argvs.pickup_flag==True and v.route[-1].customers[0].custno!="0":
					pick_opt_flag=False
					depo_idx=[]
					for i,c in enumerate(v.route[0:-2]):
						if c.customers[0].custno=="0":
							depo_idx.append(i)

					for i in range(depo_idx[-1]+1,len(v.route)-1):
						if v.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break

					if pick_opt_flag==True: #集荷最適化の場合は最終訪問先直前のDEPOは削除しない
						continue

				remove_customers_specified([v.route[-2]],v,argvs)
	
	if autoloaddivide_flag==True: #入力の有効桁数に合わせる
		for c in customers:
			c.dem=round(c.dem,input_digits)
			c.dem2=round(c.dem2,input_digits2)

		for v in vehicles:
			v.update_load_onbrd()

			if argvs.pickup_flag==True:
				max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v.route,v)
			else:
				max_load_pen,max_load_pen2=0,0

			depo_idx1=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

			load_pen,load_pen2=0,0
			for j in range(len(depo_idx1)-1):
				load_onbrd,load_onbrd2=0,0
				for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
					if v.route[k].requestType=="DELIVERY":
						if v.route[k].custno[0] != "b":
							load_onbrd+=v.route[k].dem
							load_onbrd2+=v.route[k].dem2

				load_pen+=max(load_onbrd-v.cap,0)
				load_pen2+=max(load_onbrd2-v.cap2,0)

			v.load_pen =load_pen+max_load_pen
			v.load_pen2 = load_pen2+max_load_pen2
			
	vehicles=skill_operation(customers,vehicles,skills,argvs)

	if argvs.evplan==False and argvs.delaystart_flag:
		delay_arr_time(vehicles,argvs)

	oRetVehicles = []
	for v in vehicles:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			oRetVehicles.append(v)

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	if argvs.evplan==False:
		check_hard_constraint(oRetVehicles,argvs)

	# 休憩スポットのCUST IDのふりなおし(パターン３のみ)
	if get_breakspot_pattern(vehicles, argvs)==3:
		bcnt = 0
		for bv in vehicles:
			for r in bv.route:
				if r.custno[0] == 'b':
					r.custno = 'b' + str(bcnt)
					bcnt += 1

	return oRetVehicles,customers

##20190917
# def localsearch_dtable_mp(customers,vehicles,nbflag,ivnum,lflag,decr_vnum,ls_d_starttime,opnum,argvs): #20190917
# 	#opnumの数(cr,me,ex,in,reの順)だけ改善処理をpoolで並列実行する。crは3プロセス使用。multiprocessing of opnum
# 	#re,in,ex,me,crの順に行い、改善があればその結果だけ返して終了。mulitprocess in order of re,in,ex,me,cr,if good result then return
# 	sLogBuf = "\n"

# 	if argvs.timeout > 0.0:
# 		pool = Pool(min(opnum+4, argvs.multi_p))
# 	else:
# 		pool = Pool(min(opnum+2, argvs.multi_p))
# 	lastc_flag=lflag
# 	re_cnt=inswap_cnt=ex_cnt=merge_cnt=cross_cnt=cross_cnt1=cross_cnt2=cross_cnt3 = 0
# 	re_veh=inswap_veh=ex_veh=merge_veh=cross_veh=cross_veh1=cross_veh2=cross_veh3= []
# 	cross_veh[:] = vehicles[:] ##20190927 for last result

# 	if opnum > 4:
# 		if nbflag.relflag==True:
# 			re_result=pool.apply_async(relocate_dtable_mp,(customers,vehicles,lastc_flag,ls_d_starttime,argvs.timeout,argvs,))
# 	if opnum > 3:
# 		if nbflag.inswapflag==True:
# 			inswap_result=pool.apply_async(inswap_dtable_mp,(customers,vehicles,lastc_flag,ls_d_starttime,argvs.timeout,argvs,))
# 	if opnum > 2:
# 		if nbflag.exflag==True:
# 			ex_result=pool.apply_async(exchange_dtable_mp,(customers,vehicles,lastc_flag,ls_d_starttime,argvs.timeout,argvs,))
# 	if opnum > 1:
# 		if nbflag.mergeflag==True:
# 			merge_result=pool.apply_async(merge_dtable_mp,(customers,vehicles,lastc_flag,ivnum,decr_vnum,ls_d_starttime,argvs.timeout,argvs.lowertime,argvs.uppertime,argvs))
# 	if opnum > 0:
# 		if nbflag.crossflag==True:
# 			##20190927 devide cr into 3
# 			vs1, vs2, vs3 = [], [], [] #[[v1.vehno,v2.vehno],[v1.vehno,v3.vehno],,,[vN.vehno,vN.vehno]]
# 			for v1,v2 in [(v1,v2) for v1 in vehicles for v2 in vehicles if v1!=v2 and len(v1.route)>=3 and len(v2.route)>=3]:
# 				vs1.append([v1.vehno,v2.vehno])
# 			vs3 = vs1[(len(vs1)*2//3):]
# 			vs2 = vs1[(len(vs1)//3):(len(vs1)*2//3)]
# 			vs1 = vs1[:(len(vs1)//3)]
# 			cross_result1=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs1,11,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 			cross_result2=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs2,2,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #if good then return
# 			cross_result3=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs3,3,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #if good then return
# 			if argvs.timeout > 0.0:
# 				cross_result12=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs2,12,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 				cross_result13=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs3,13,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 			##20190927

# 	if opnum > 4:
# 		re_cnt,re_veh=re_result.get()
# 		if re_cnt != 0: #改善があったら並列実行した処理は不要 if good result then  discard others and return
# 			pool.close()
# 			pool.terminate()
# 			return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh
# 	if opnum > 3:
# 		inswap_cnt,inswap_veh=inswap_result.get()
# 		if inswap_cnt != 0: #改善があったら並列実行した処理は不要
# 			pool.close()
# 			pool.terminate()
# 			return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh
# 	if opnum > 2:
# 		ex_cnt,ex_veh=ex_result.get()
# 		if ex_cnt != 0: #改善があったら並列実行した処理は不要
# 			pool.close()
# 			pool.terminate()
# 			return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh
# 	if opnum > 1:
# 		merge_cnt,merge_veh=merge_result.get()
# 		ls_d_endtime=time.time()
# 		if argvs.outputstime > 0.0 and ((ls_d_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
# 			outputs_middle(customers,merge_veh,argvs)
# 			argvs.outputs_count+=1
# 		while True:
# 			if argvs.outputstime > 0.0 and (ls_d_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
# 				argvs.outputs_count+=1
# 			else:
# 				break
# 		if argvs.timeout > 0.0 and ((ls_d_endtime - ls_d_starttime) > argvs.timeout):
# 			sLogBuf += "mps merge timeout!\n"
# 			pool.close()
# 			pool.terminate()
# 			return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh
# 		if merge_cnt != 0: #改善があったら並列実行した処理は不要 if merge is good then return and discard other multiprocess
# 			pool.close()
# 			pool.terminate()
# 			return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh
# 	if opnum > 0:
# 		cross_cnt1,cross_veh1=cross_result1.get()

# 		while True:
# 			ls_d_endtime=time.time()
# 			if argvs.outputstime > 0.0 and ((ls_d_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
# 				outputs_middle(customers,cross_veh1,argvs)
# 				argvs.outputs_count+=1
# 			while True:
# 				if argvs.outputstime > 0.0 and (ls_d_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
# 					argvs.outputs_count+=1
# 				else:
# 					break
# 			if argvs.timeout > 0.0 and ((ls_d_endtime - ls_d_starttime) > argvs.timeout):
# 				sLogBuf += "mps cross1 timeout!\n"
# 				totalcost1,totalcost_wolast1,totalcost2,totalcost_wolast2,totalcost3,totalcost_wolast3 = 0,0,0,0,0,0
# 				cross_cnt2,cross_veh2=cross_result12.get()
# 				cross_cnt3,cross_veh3=cross_result13.get()
# 				pool.close()
# 				pool.terminate()
# 				for v in cross_veh1:
# 					if len(v.route)>=3:
# 						totalcost1+=v.totalcost
# 						totalcost_wolast1+=v.totalcost_wolast
# 				for v in cross_veh2:
# 					if len(v.route)>=3:
# 						totalcost2+=v.totalcost
# 						totalcost_wolast2+=v.totalcost_wolast
# 				for v in cross_veh3:
# 					if len(v.route)>=3:
# 						totalcost3+=v.totalcost
# 						totalcost_wolast3+=v.totalcost_wolast
# 				if lastc_flag == True:
# 					if totalcost_wolast2 < totalcost_wolast1:
# 						if totalcost_wolast3 < totalcost_wolast2:
# 							return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt3,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh3
# 						else:
# 							return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt2,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh2
# 					else:
# 						if totalcost_wolast3 < totalcost_wolast1:
# 							return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt3,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh3
# 						else:
# 							return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt1,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh1
# 				else:
# 					if totalcost2 < totalcost1:
# 						if totalcost3 < totalcost2:
# 							return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt3,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh3
# 						else:
# 							return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt2,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh2
# 					else:
# 						if totalcost3 < totalcost1:
# 							return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt3,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh3
# 						else:
# 							return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt1,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh1

# 			if cross_cnt1 != 0: #v1が終わり改善があればその時点の結果でv2から実行 if v1 finishes good result then execute v2 successing of v1result
# 				cross_cnt=cross_cnt+cross_cnt1
# 				pool.close()
# 				pool.terminate()
# 				if argvs.timeout > 0.0:
# 					pool = Pool(min(4, argvs.multi_p))
# 				else:
# 					pool = Pool(min(2, argvs.multi_p))
# 				cross_result2=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs2,2,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #if good then return
# 				cross_result3=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs3,3,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #if good then return
# 				if argvs.timeout > 0.0:
# 					cross_result12=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs2,12,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 					cross_result13=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs3,13,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 				cross_cnt2,cross_veh1=cross_result2.get()
# 			else: #vs1で改善がなかったらvs1を無視してvs2をチェック if vs1 is no good result then discard vs1 and check vs2result
# 				cross_cnt2,cross_veh1=cross_result2.get()

# 			ls_d_endtime=time.time()
# 			if argvs.outputstime > 0.0 and ((ls_d_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
# 				outputs_middle(customers,cross_veh1,argvs)
# 				argvs.outputs_count+=1
# 			while True:
# 				if argvs.outputstime > 0.0 and (ls_d_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
# 					argvs.outputs_count+=1
# 				else:
# 					break
# 			if argvs.timeout > 0.0 and ((ls_d_endtime - ls_d_starttime) > argvs.timeout):
# 				totalcost2,totalcost_wolast2,totalcost3,totalcost_wolast3 = 0,0,0,0
# 				cross_cnt2,cross_veh2=cross_result12.get()
# 				cross_cnt3,cross_veh3=cross_result13.get()
# 				pool.close()
# 				pool.terminate()
# 				for v in cross_veh2:
# 					if len(v.route)>=3:
# 						totalcost2+=v.totalcost
# 						totalcost_wolast2+=v.totalcost_wolast
# 				for v in cross_veh3:
# 					if len(v.route)>=3:
# 						totalcost3+=v.totalcost
# 						totalcost_wolast3+=v.totalcost_wolast
# 				if lastc_flag == True:
# 					if totalcost_wolast3 < totalcost_wolast2:
# 						return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt+cross_cnt3,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh3
# 					else:
# 						return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt+cross_cnt2,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh2
# 				else:
# 					if totalcost3 < totalcost2:
# 						return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt+cross_cnt3,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh3
# 					else:
# 						return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt+cross_cnt2,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh2

# 			if cross_cnt2 != 0: #改善があったら続きを最初から実行 if vs2 is good result then execute from the beginning successing of vs2result
# 				cross_cnt=cross_cnt+cross_cnt2
# 				pool.close()
# 				pool.terminate()
# 				if argvs.timeout > 0.0:
# 					pool = Pool(min(5, argvs.multi_p))
# 				else:
# 					pool = Pool(min(3, argvs.multi_p))
# 				cross_result1=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs1,11,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 				cross_result2=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs2,2,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #if good then return
# 				cross_result3=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs3,3,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #if good then return
# 				if argvs.timeout > 0.0:
# 					cross_result12=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs2,12,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 					cross_result13=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs3,13,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 				cross_cnt1,cross_veh1=cross_result1.get()
# 			else: #vs2で改善がなかったらvs2を無視してvs3をチェック if vs2 is no good result then discard vs2 and check vs3result
# 				cross_cnt3,cross_veh1=cross_result3.get()

# 				ls_d_endtime=time.time()
# 				if argvs.outputstime > 0.0 and ((ls_d_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count):
# 					outputs_middle(customers,cross_veh1,argvs)
# 					argvs.outputs_count+=1
# 				while True:
# 					if argvs.outputstime > 0.0 and (ls_d_endtime - ls_d_starttime) > argvs.outputstime*argvs.outputs_count:
# 						argvs.outputs_count+=1
# 					else:
# 						break

# 				if cross_cnt3 != 0: #vs3で改善があったら続きを最初から実行 if vs3 is good result then execute from the beginning successing of v3result
# 					cross_cnt=cross_cnt+cross_cnt3
# 					pool.close()
# 					pool.terminate()
# 					if argvs.timeout > 0.0:
# 						pool = Pool(min(5, argvs.multi_p))
# 					else:
# 						pool = Pool(min(3, argvs.multi_p))
# 					cross_result1=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs1,11,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 					cross_result2=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs2,2,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #if good then return
# 					cross_result3=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs3,3,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #if good then return
# 					if argvs.timeout > 0.0:
# 						cross_result12=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs2,12,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 						cross_result13=pool.apply_async(cross_dtable_mps,(customers,cross_veh1,lastc_flag,ls_d_starttime,vs3,13,argvs.timeout,argvs.outputstime,argvs.outputs_count,argvs.lowertime,argvs.uppertime,argvs.inputfile,argvs.outputfile,argvs.decr_vnum,argvs,)) #continue to last
# 					cross_cnt1,cross_veh1=cross_result1.get()
# 				else: #vs3で改善がなかったら終了 if vs3 is no good then return
# 					cross_cnt=cross_cnt+cross_cnt3
# 					pool.close()
# 					pool.terminate()
# 					return re_cnt,inswap_cnt,ex_cnt,merge_cnt,cross_cnt,re_veh,inswap_veh,ex_veh,merge_veh,cross_veh1

# 	if sLogBuf != "\n":
# 		if rank==0:
# 			logging.log(logging.INFO,sLogBuf)

##20190917

##20200331
def relatedness_measure(customers,vehicles,argvs):
	phi_1,phi_2,phi_3,phi_4=1,0,0,0
	rel_measure={}

	for v in vehicles:
		if v.direct_flag==True:
			continue

		for c in list(permutations(v.route[1:-1],2)):
			if c[0]!=c[1] and not c[0].custno.startswith("e") and not c[1].custno.startswith("e") and c[0].custno!="0" and c[1].custno!="0":
				lij,eij,Dij=-1,0,0
				lv = find_lv_time(c[0], v.route, v.lv)
				dtable1 = get_dtable(v.vtype, lv, argvs.management_dtable)
				dij=dtable1[c[0].spotno][c[1].spotno]
				rel_measure[c[0],c[1]]=phi_1*dij
	return rel_measure
##20200331

##20200410
def remove_customers_specified(custs_to_rm,vehicle,argvs):
	for c in custs_to_rm:
		if c not in vehicle.route:
			sErrMes = str(c.custno)+" is not in vehicle "+str(vehicle.vehno)
			raise ValueError(sErrMes) # sys.exit(1) # daic
		else:
			vehicle.route.remove(c)
			vehicle.update_totalcost_dtable(argvs)
##20200410

##20200331
def remove_a_customer(customer,vehicles,argvs):
	veh=[v for v in vehicles if customer in v.route and v.direct_flag==False][0]
	veh.route.remove(customer)	
	veh.update_totalcost_dtable(argvs)
	neg_ind=[i for i in range(0,len(veh.route)) if veh.rem_batt[i]<0]
	if len(neg_ind)>=1:
		espot_in_rt=[r for r in veh.route if r.custno.startswith("e")]
		if len(espot_in_rt)>=2:
			sErrMes = "there are more than one espots. stop"
			raise ValueError(sErrMes) # sys.exit(1) # daic
##20200331

def remove_an_espot_justbefore_depot(vehicles,customers,espots,argvs):
	for v in vehicles:
		if v.route[-2].custno.startswith("e"):
			from_c,to_c=v.route[-3],v.route[-1]
			dtable1 = get_dtable(v.vtype, v.lv[-3], argvs.management_dtable)
			ttable1 = get_ttable(v.vtype, v.lv[-3], argvs.management_ttable)
			if argvs.management_etable:
				etable1 = get_etable(v.vtype, v.etype, v.lv[-3], argvs.management_etable)
			if argvs.management_xtable:
				xtable1 = get_xtable(v.vtype, v.lv[-3], argvs.management_xtable)
			if dtable1[from_c.spotno][to_c.spotno]!=-1 and ttable1[from_c.spotno][to_c.spotno]!=-1 and (not argvs.management_etable or etable1[from_c.spotno][to_c.spotno]!=-1) and (not argvs.management_xtable or xtable1[from_c.spotno][to_c.spotno]!=-1)\
			and ((not argvs.management_etable and (dtable1[from_c.spotno][to_c.spotno]/1000.0) + v.e_margin/v.e_cost<v.rem_batt[-3]) or (argvs.management_etable and etable1[from_c.spotno][to_c.spotno] + v.e_margin/v.e_cost<v.rem_batt[-3])):
				v.route.remove(v.route[-2])
				v.update_totalcost_dtable(argvs)
		elif v.route[-3].custno.startswith("e") and v.route[-2].custno=="0":
			from_c,to_c=v.route[-4],v.route[-2]
			dtable1 = get_dtable(v.vtype, v.lv[-4], argvs.management_dtable)
			ttable1 = get_ttable(v.vtype, v.lv[-4], argvs.management_ttable)
			if argvs.management_etable:
				etable1 = get_etable(v.vtype, v.etype, v.lv[-4], argvs.management_etable)
			if argvs.management_xtable:
				xtable1 = get_xtable(v.vtype, v.lv[-4], argvs.management_xtable)
			
			if dtable1[from_c.spotno][to_c.spotno]==-1 or ttable1[from_c.spotno][to_c.spotno]==-1 or (argvs.management_etable and etable1[from_c.spotno][to_c.spotno]==-1) or (argvs.management_xtable and xtable1[from_c.spotno][to_c.spotno]==-1):
				continue

			arr_t=v.lv[-4]+ttable1[from_c.spotno][to_c.spotno]*v.drskill
			lv_t=max(arr_t,v.route[-2].ready_fs)+(v.lv[-2]-max(v.arr[-2],v.route[-2].ready_fs))

			dtable2 = get_dtable(v.vtype, lv_t, argvs.management_dtable)
			ttable2 = get_ttable(v.vtype, lv_t, argvs.management_ttable)
			if argvs.management_etable:
				etable2 = get_etable(v.vtype, v.etype, lv_t, argvs.management_etable)
			if argvs.management_xtable:
				xtable2 = get_xtable(v.vtype, lv_t, argvs.management_xtable)
			
			if dtable2[to_c.spotno][v.route[-1].spotno]==-1 or ttable2[to_c.spotno][v.route[-1].spotno]==-1 or (argvs.management_etable and etable2[to_c.spotno][v.route[-1].spotno]==-1) or (argvs.management_xtable and xtable2[to_c.spotno][v.route[-1].spotno]==-1):
				continue

			if ((not argvs.management_etable and (dtable1[from_c.spotno][to_c.spotno]/1000.0) + (dtable2[to_c.spotno][v.route[-1].spotno]/1000.0) + v.e_margin/v.e_cost<v.rem_batt[-4]) or (argvs.management_etable and etable1[from_c.spotno][to_c.spotno] + etable2[to_c.spotno][v.route[-1].spotno] + v.e_margin/v.e_cost<v.rem_batt[-4])):
				v.route.remove(v.route[-3])
				v.update_totalcost_dtable(argvs)

#20200525
def remove_an_espot(vehicles,customers,espots,argvs):
	#vidx=[v.vehno for v in vehicles]
	v_with_espot=[]
	for v in vehicles:
		if v.direct_flag==True:
			continue
		num_espots=len([r for r in v.route if r.custno.startswith("e")])
		if num_espots>0:
			v_with_espot+=[v]
	if v_with_espot == []:
		return [],[]

	v_no=[v.vehno for v in v_with_espot]
	random.shuffle(v_no)
	v_rm=[v for v in vehicles if v.vehno==v_no[0] and v.direct_flag==False][0]
	#v_rm.output()
	e_in_rt=[c for c in v_rm.route if c.custno.startswith("e")][0]
	#type(e_in_rt)
	v_rm.route.remove(e_in_rt)
	v_rm.update_totalcost_dtable(argvs)
	#v_rm.output()

	return v_rm,e_in_rt
#20200525

#20200525
def insert_an_espot_in_a_vehicle(vehicle,customers,espots,vehicles,argvs,pickup_opt_flag=False):
	sLogBuf = "insert_an_espot in a vehicle start"
	if rank==0 and pickup_opt_flag==False:
		logging.log(logging.INFO,sLogBuf)

	btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp,bunass=1e12,1e12,1e12,1e12,1e12,1e12,1e12,1e12,1e12,1e12,1e12
	atpen,adist,aload,aload2,atime_error,avisits_error,adist_error,atime,apower,aexp,aunass=0,0,0,0,0,0,0,0,0,0,0

	#vehicle.output()
	nearest_espot={}
	min_pen={}
	nec_q=0

	pick_opt_flag=False
	if argvs.pickup_flag==True:
		for c in vehicle.route[1:-1]:
			if not c.custno.startswith("e") and c.requestType=="PICKUP":
				pick_opt_flag=True
				break	

	depo_idx=[j for j,c in enumerate(vehicle.route[:-1]) if c.custno=="0"]+[len(vehicle.route)-1]
	servt_dict={}
	for k in range(len(depo_idx)-1):
		servt_dict[vehicle.route[depo_idx[k]]]=0
		servt=0
		for j in range(depo_idx[k]+1,depo_idx[k+1]):
			if vehicle.route[j].requestType=="DELIVERY" and vehicle.route[j].custno[0]!='b':
				servt+=vehicle.route[j].depotservt
		if vehicle.route[depo_idx[k]+1].custno!="0":
			servt_dict[vehicle.route[depo_idx[k]]]+=servt+vehicle.depotservt
		else:
			servt_dict[vehicle.route[depo_idx[k]]]+=servt
	#集荷時間
	servt_dict[vehicle.route[len(vehicle.route)-1]]=0
	for k in range(1,len(depo_idx)):
		servt=0
		for j in range(depo_idx[k-1]+1,depo_idx[k]):
			if vehicle.route[j].requestType=="PICKUP":
				servt+=vehicle.route[j].depotservt
		servt_dict[vehicle.route[depo_idx[k]]]+=servt

	for idx in range(len(vehicle.route)-1):
		from_c,to_c=vehicle.route[idx],vehicle.route[idx+1]

		ttable1 = get_ttable(vehicle.vtype, vehicle.lv[idx], argvs.management_ttable)
		dtable1 = get_dtable(vehicle.vtype, vehicle.lv[idx], argvs.management_dtable)
		if argvs.management_etable:
			etable1 = get_etable(vehicle.vtype, vehicle.etype, vehicle.lv[idx], argvs.management_etable)
		if argvs.management_xtable:
			xtable1 = get_xtable(vehicle.vtype, vehicle.lv[idx], argvs.management_xtable)

		min_pen[idx]=1e+12
		nearest_espot[idx]=None	
		for e in espots:
			if e.custno == from_c.custno or e.custno == to_c.custno:
				continue

			if ttable1[vehicle.route[idx].spotno][e.spotno]==-1 or \
				dtable1[vehicle.route[idx].spotno][e.spotno]==-1 or \
				(argvs.management_etable and etable1[vehicle.route[idx].spotno][e.spotno]==-1) or \
				(argvs.management_xtable and xtable1[vehicle.route[idx].spotno][e.spotno]==-1):
				continue

			lv_time = vehicle.lv[idx]+ttable1[vehicle.route[idx].spotno][e.spotno]*vehicle.drskill #仮のlv_time(=arr_time)
			dist_diff=dtable1[from_c.spotno][e.spotno]+max_dist_from_table(vehicle.vtype,lv_time,e,to_c,argvs.management_dtable)
			dist_diff-=dtable1[from_c.spotno][to_c.spotno]
			arr_time = lv_time+max_time_from_table(vehicle.vtype,lv_time,e,to_c,argvs.management_ttable)*vehicle.drskill

			arr_t=vehicle.lv[idx]+ttable1[vehicle.route[idx].spotno][e.spotno]*vehicle.drskill
			lv_t=max(arr_t,e.ready_fs)+nec_q/e.e_rate+e.servt*vehicle.opskill
			# if e.spotid!=vehicle.route[idx].spotid:
			# 	lv_t+=e.parkt_open
			ttable5 = get_ttable(vehicle.vtype, lv_t, argvs.management_ttable)
			dtable5 = get_dtable(vehicle.vtype, lv_t, argvs.management_dtable)
			if argvs.management_etable:
				etable5 = get_etable(vehicle.vtype, vehicle.etype, lv_t, argvs.management_etable)
			if argvs.management_xtable:
				xtable5 = get_xtable(vehicle.vtype, lv_t, argvs.management_xtable)
			if ttable5[e.spotno][vehicle.route[idx+1].spotno]==-1 or \
				dtable5[e.spotno][vehicle.route[idx+1].spotno]==-1 or \
				(argvs.management_etable and etable5[e.spotno][vehicle.route[idx+1].spotno]==-1) or \
				(argvs.management_xtable and xtable5[e.spotno][vehicle.route[idx+1].spotno]==-1):
				continue
			else:
				arr_t=lv_t+ttable5[e.spotno][vehicle.route[idx+1].spotno]*vehicle.drskill
				if vehicle.route[idx+1] in servt_dict:
					if vehicle.route[idx+1].spotid!=e.spotid and (idx+1!=len(vehicle.route)-1 or ((vehicle.load_pickup>0 or vehicle.load_pickup2>0) and vehicle.route[-2].custno!="0" and vehicle.route[-3].custno!="0")):
						lv_t=max(arr_t+vehicle.route[idx+1].parkt_arrive,vehicle.route[idx+1].ready_fs)+servt_dict[vehicle.route[idx+1]]*vehicle.opskill
					else:
						lv_t=max(arr_t,vehicle.route[idx+1].ready_fs)+servt_dict[vehicle.route[idx+1]]*vehicle.opskill
				else:
					if vehicle.route[idx+1].spotid!=e.spotid and (idx+1!=len(vehicle.route)-1 or ((vehicle.load_pickup>0 or vehicle.load_pickup2>0) and vehicle.route[-2].custno!="0" and vehicle.route[-3].custno!="0")):
						lv_t=max(arr_t+vehicle.route[idx+1].parkt_arrive,vehicle.route[idx+1].ready_fs)+vehicle.route[idx+1].servt*vehicle.opskill
					else:
						lv_t=max(arr_t,vehicle.route[idx+1].ready_fs)+vehicle.route[idx+1].servt*vehicle.opskill
				if vehicle.route[idx+1].spotid!=e.spotid and (idx+1!=len(vehicle.route)-1 or ((vehicle.load_pickup>0 or vehicle.load_pickup2>0) and vehicle.route[-2].custno!="0" and vehicle.route[-3].custno!="0")):
					lv_t+=vehicle.route[idx+1].parkt_open

				no_park_idx=[]
				for c in vehicle.route[1:-1]:
					if c.custno!="0" and c.requestType=="DELIVERY":
						break
				else:
					no_park_idx.append(0)

				if vehicle.load_pickup==0 and vehicle.load_pickup2==0:
					if vehicle.route[-2].custno=="0":
						no_park_idx.append(len(vehicle.route)-2)
					no_park_idx.append(len(vehicle.route)-1)


				impassable,dist,_,_,_=check_impassability(customers,vehicle,lv_t,idx+2,servt_dict,len(vehicle.route)-1,no_park_idx,pick_opt_flag,argvs)
				if impassable==False:
					continue

				dist_diff+=dist

				_,dist,_,_,_=check_impassability(customers,vehicle,vehicle.lv[idx+1],idx+2,servt_dict,len(vehicle.route)-1,no_park_idx,pick_opt_flag,argvs)

				dist_diff-=dist

			if not argvs.management_etable: #電力テーブルが無い場合			
				nec_q=(dist_diff/1000)/vehicle.e_cost
				nec_q+=max(0,(vehicle.remdist[idx+1]/1000)/vehicle.e_cost-vehicle.rem_batt[idx+1] + vehicle.e_margin)
			else: #電力テーブルが有る場合
				etable1 = get_etable(vehicle.vtype, vehicle.etype,vehicle.lv[idx],argvs.management_etable)
				nec_q=etable1[from_c.spotno][e.spotno]+max_e_from_table(vehicle.vtype,vehicle.etype,lv_time,e,to_c,argvs.management_etable)
				nec_q-=etable1[from_c.spotno][to_c.spotno]
				e_sum = 0
				ar_time_tmp=arr_time
				for r1, r2 in zip(vehicle.route[idx+1:-1], vehicle.route[idx+2:]):
					if r1 in servt_dict:
						if r1.spotid!=vehicle.route[vehicle.route.index(r1)-1].spotid:
							lv_time_tmp=max(ar_time_tmp+r1.parkt_arrive,r1.ready_fs)+servt_dict[r1]*vehicle.opskill 
						else:
							lv_time_tmp=max(ar_time_tmp,r1.ready_fs)+servt_dict[r1]*vehicle.opskill 
					else:
						if r1.spotid!=vehicle.route[vehicle.route.index(r1)-1].spotid:
							lv_time_tmp=max(ar_time_tmp+r1.parkt_arrive,r1.ready_fs)+r1.servt*vehicle.opskill 
						else:
							lv_time_tmp=max(ar_time_tmp,r1.ready_fs)+r1.servt*vehicle.opskill 
					if r1.spotid!=vehicle.route[vehicle.route.index(r1)-1].spotid:
						lv_time_tmp+=r1.parkt_open
					etable2 = get_etable(vehicle.vtype, vehicle.etype, lv_time_tmp, argvs.management_etable)
					ttable3 = get_ttable(vehicle.vtype, lv_time_tmp, argvs.management_ttable)
					e_sum += etable2[r1.spotno][r2.spotno]
					ar_time_tmp=lv_time_tmp+ttable3[r1.spotno][r2.spotno]*vehicle.drskill
				nec_q+=max(0,(e_sum)-vehicle.rem_batt[idx+1] + vehicle.e_margin)

			time_diff=ttable1[from_c.spotno][e.spotno]*vehicle.drskill+max_time_from_table(vehicle.vtype,lv_time,e,to_c,argvs.management_ttable)*vehicle.drskill
			time_diff-=ttable1[from_c.spotno][to_c.spotno]*vehicle.drskill

			if not argvs.management_etable: #電力テーブルが無い場合
				#必要な電力量(req_pow)を算出
				lv_time = vehicle.lv[idx]+ttable1[vehicle.route[idx].spotno][e.spotno]*vehicle.drskill #仮のlv_time(=arr_time)
				req_pow = max_dist_from_table(vehicle.vtype,lv_time,e,to_c,argvs.management_dtable)/1000/vehicle.e_cost
				d_sum = 0
				for lv1, r1, r2 in zip(vehicle.lv[idx+1:-1], vehicle.route[idx+1:-1], vehicle.route[idx+2:]):
					dtable3 = get_dtable(vehicle.vtype, lv1, argvs.management_dtable)
					d_sum += dtable3[r1.spotno][r2.spotno]
				req_pow = (d_sum/1000) / vehicle.e_cost
			else: #電力テーブルが有る場合
				#必要な電力量(req_pow)を算出
				req_pow=max_e_from_table(vehicle.vtype,vehicle.etype,lv_time,e,to_c,argvs.management_etable)				#e->route[idx+1]電力
				ar_time_tmp=arr_time
				for r1, r2 in zip(vehicle.route[idx+1:-1], vehicle.route[idx+2:]):
					if r1 in servt_dict:
						if r1.spotid!=vehicle.route[vehicle.route.index(r1)-1].spotid:
							lv_time_tmp=max(ar_time_tmp+r1.parkt_arrive,r1.ready_fs)+servt_dict[r1]*vehicle.opskill 
						else:
							lv_time_tmp=max(ar_time_tmp,r1.ready_fs)+servt_dict[r1]*vehicle.opskill 
					else:
						if r1.spotid!=vehicle.route[vehicle.route.index(r1)-1].spotid:
							lv_time_tmp=max(ar_time_tmp+r1.parkt_arrive,r1.ready_fs)+r1.servt*vehicle.opskill 
						else:
							lv_time_tmp=max(ar_time_tmp,r1.ready_fs)+r1.servt*vehicle.opskill 
					if r1.spotid!=vehicle.route[vehicle.route.index(r1)-1].spotid:
						lv_time_tmp+=r1.parkt_open
					etable3 = get_etable(vehicle.vtype, vehicle.etype, lv_time_tmp, argvs.management_etable)
					ttable4= get_ttable(vehicle.vtype, lv_time_tmp, argvs.management_ttable)
					req_pow += etable3[r1.spotno][r2.spotno]		#route[idx+1]>..->route[-1]
					ar_time_tmp=lv_time_tmp+ttable4[r1.spotno][r2.spotno]*vehicle.drskill

			#必要な残り電力量が運搬車の電力容量を超える場合、実行不能(route[idx]とroute[idx+1]の間にeは挿入できない）と判断する
			if req_pow > vehicle.e_capacity:
				continue

			#集荷最適化における初期解作成時には電欠もチェック
			if pickup_opt_flag==True and nec_q+vehicle.e_margin > vehicle.e_capacity:
				continue

			espots_in_rt=[c for c in vehicle.route if c.custno.startswith("e")]


			if argvs.lastc_flag==True and vehicle.route[-2].custno!="0":
				bvfinal_t=vehicle.lv[-2]
			elif argvs.lastc_flag==True and vehicle.route[-2].custno=="0":
				bvfinal_t=vehicle.lv[-3]
			else:
				bvfinal_t=vehicle.lv[-1]

			tvehicle=copy.deepcopy(vehicle)
			tvehicles=copy.deepcopy(vehicles)
	
			tvehicle.insert_espot_at(idx+1,e,argvs)
			for v in tvehicles:
				if v.vehno==tvehicle.vehno:
					v=tvehicle
					break

			for j in range(1,len(tvehicle.route)-2):
				atpen+=max(tvehicle.st[j]-tvehicle.route[j].due_fs,0)
			if argvs.lastc_flag==True and tvehicle.route[-2].custno!="0":
				atpen+=max(tvehicle.st[-2]-tvehicle.route[-2].due_fs,0)+max(tvehicle.lv[-2]-tvehicle.endhour,0)
			elif argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
				atpen+=max(tvehicle.lv[-3]-tvehicle.endhour,0)+max(tvehicle.lv[-3]-tvehicle.endhour,0)
			else:
				atpen+=max(tvehicle.st[-2]-tvehicle.route[-2].due_fs,0)+max(tvehicle.st[-1]-tvehicle.route[-1].due_fs,0)+max(tvehicle.lv[-1]-tvehicle.endhour,0)
			if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0 and is_reserved(tvehicle,argvs)==False:
				if argvs.lastc_flag==True:
					atpen,btpen=return_lutime_penalty(tvehicle.lv[-2]-tvehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],atpen,btpen)
				else:
					atpen,btpen=return_lutime_penalty(tvehicle.lv[-1]-tvehicle.arr[0],argvs.lowertime,argvs.uppertime,bvfinal_t-vehicle.arr[0],atpen,btpen)

			if argvs.lastc_flag==True:
				adist=tvehicle.totalcost_wolast
			else:
				adist=tvehicle.totalcost

			aload = max(tvehicle.load_onbrd - tvehicle.cap,0.0)
			aload2 = max(tvehicle.load_onbrd2 - tvehicle.cap2,0.0)
			if argvs.pickup_flag==True:
				max_load_pen1,max_load_pen2=calc_vehicle_loadpickup_penalty(tvehicle.route,tvehicle)
				aload += max_load_pen1
				aload2 += max_load_pen2

			if argvs.avetime_ape_flag==True:
				atime_error=calc_avetime_APE(tvehicles,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
			elif argvs.avetime_ae_flag==True:
				atime_error=calc_avetime_AE(tvehicles,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
			else:
				atime_error=0.0

			if argvs.avevisits_ape_flag==True:
				avisits_error=calc_avevisits_APE(tvehicles,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
			elif argvs.avevisits_ae_flag==True:
				avisits_error=calc_avevisits_AE(tvehicles,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
			else:
				avisits_error=0.0

			if argvs.avedist_ape_flag==True:
				adist_error=calc_avedist_APE(tvehicles,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
			elif argvs.avedist_ae_flag==True:
				adist_error=calc_avedist_AE(tvehicles,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
			else:
				adist_error=0.0

			if argvs.lastc_flag==True and tvehicle.route[-2].custno!="0":
				atime=tvehicle.lv[-2]
			elif argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
				atime=tvehicle.lv[-3]
			else:
				atime=tvehicle.lv[-1]

			if argvs.management_etable:
				if argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
					for j in range(len(tvehicle.route)-3):
						etable3=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[j], argvs.management_etable)
						apower=power_etable(tvehicle.route[j],tvehicle.route[j+1],etable3)
				else:
					for j in range(len(tvehicle.route)-2):
						etable3=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[j], argvs.management_etable)
						apower=power_etable(tvehicle.route[j],tvehicle.route[j+1],etable3)
				if argvs.lastc_flag==False:
					etable4=get_etable(tvehicle.vtype, tvehicle.etype, tvehicle.lv[-2], argvs.management_etable)
					apower=power_etable(tvehicle.route[-2],tvehicle.route[-1],etable4)
				
			if argvs.management_xtable:
				if argvs.lastc_flag==True and tvehicle.route[-2].custno=="0":
					for j in range(len(tvehicle.route)-3):
						xtable3=get_xtable(tvehicle.vtype, tvehicle.lv[j], argvs.management_xtable)
						apower=exp_xtable(tvehicle.route[j],tvehicle.route[j+1],xtable3)
				else:
					for j in range(len(tvehicle.route)-2):
						xtable3=get_xtable(tvehicle.vtype, tvehicle.lv[j], argvs.management_xtable)
						apower=exp_xtable(tvehicle.route[j],tvehicle.route[j+1],xtable3)
				if argvs.lastc_flag==False:
					xtable4=get_xtable(tvehicle.vtype, tvehicle.lv[-2], argvs.management_xtable)
					apower=exp_xtable(tvehicle.route[-2],tvehicle.route[-1],xtable4)

			#改善後未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
			if argvs.opt_unassigned_flag==True:
				if tvehicle.reserved_v_flag==True:
					aunass = len([c for c in tvehicle.route if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

			ires,cdiff=improved_or_not(atpen,btpen,adist,bdist,aload,bload,aload2,bload2,atime_error,btime_error,avisits_error,bvisits_error,adist_error,bdist_error,argvs,atime,btime,apower,bpower,aexp,bexp,aunass,bunass)

			if len(espots_in_rt)==0 and min_pen[idx]>cdiff and compare_time(tvehicle.slack_t[idx+1])>0 and not vehicle.vehno in e.reje_ve:
				btpen,bdist,bload,bload2,btime_error,bvisits_error,bdist_error,btime,bpower,bexp=atpen,adist,aload,aload2,atime_error,avisits_error,adist_error,atime,apower,aexp
				min_pen[idx]=cdiff
				nearest_espot[idx]=e
				bvfinal_t=atime
	min_pen2=sorted(min_pen.items(),key=lambda x:x[1])
	spot_to_insert=nearest_espot[min_pen2[0][0]]
	if spot_to_insert == None: #充電スポットが見つからない場合何もしない、呼び出し元で判定
		return False
	else:
		insert_idx=min_pen2[0][0]+1

		v_spotid=[c.spotid for c in vehicle.route]
		v_spotid.insert(insert_idx,spot_to_insert.spotid)
		visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-1 #充電スポットはカウントしない

		if vehicle.maxvisit==0 or visitnum<=vehicle.maxvisit:
			vehicle.insert_espot_at(insert_idx,spot_to_insert,argvs)

			if argvs.bulkShipping_flag==False and pick_opt_flag==True and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-2].custno!="0" and vehicle.route[len(vehicle.route)-3].custno!="0":
				vehicle.insert_customer_at(-1,copy.deepcopy(customers[0]),argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==True and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-2].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-3].customers[0].custno!="0":
				depo=TiedCustomer(customers[0].custno,customers[0].spotid,customers[0].ready_fs,customers[0].due_fs,customers[0].x,customers[0].y,customers[0].e_rate)
				depo.customers.append(copy.deepcopy(customers[0].customers[0]))
				depo.servt=customers[0].servt
				depo.dem=customers[0].dem
				depo.dem2=customers[0].dem2
				depo.reje_ve=customers[0].reje_ve
				depo.parkt_open=customers[0].parkt_open
				depo.parkt_arrive=customers[0].parkt_arrive
				depo.depotservt=customers[0].depotservt
				depo.additionalcust=[depo]
				depo.demdivideunit=customers[0].demdivideunit
				depo.requestType=customers[0].requestType
				depo.deny_unass=customers[0].deny_unass #未割り当て荷物
				vehicle.insert_customer_at(-1,depo,argvs)
			elif argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-2].custno=="0" and len(vehicle.route)-2!=0:
				remove_customers_specified([vehicle.route[-2]],vehicle,argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-2].customers[0].custno=="0" and len(vehicle.route)-2!=0:
				remove_customers_specified([vehicle.route[-2]],vehicle,argvs)
			elif argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].custno!="0" and vehicle.route[len(vehicle.route)-3].custno=="0" and len(vehicle.route)-3!=0:
				remove_customers_specified([vehicle.route[-3]],vehicle,argvs)
			elif argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[len(vehicle.route)-1].customers[0].custno!="0" and vehicle.route[len(vehicle.route)-3].customers[0].custno=="0" and len(vehicle.route)-3!=0:
				remove_customers_specified([vehicle.route[-3]],vehicle,argvs)
				
			return True
		else:
			return False
	#vehicle.output()

##20200331
def Shaw_remove_customers(customers,vehicles,argvs):
	rel_measure=relatedness_measure(customers,vehicles,argvs)
	rel_measure_cust={}
	for c in customers:
		rel_measure_cust[c]=[(k,v) for k,v in rel_measure.items() if k[0].custno==c.custno]
		rel_measure_cust[c]=sorted(rel_measure_cust[c],key=lambda x:x[1])
	gamma =10 
	custno_list=[i for i in range(1,len(customers))]   # daic custnoが数字であることを前提に作っている
	random.shuffle(custno_list)
	from_c=custno_list[0]
	icnt=0
	
	while len(rel_measure_cust[customers[from_c]])==0 and icnt < len(custno_list)-1:
		icnt+=1
		from_c=custno_list[icnt]
	
	custs_to_rm=[]
	for c in rel_measure_cust[customers[from_c]][:3]:
		custs_to_rm+=[c[0][1]]
	rm_cnt=min(3,len(custs_to_rm))

	# routeが全て取り除かれる場合はやめる
	
	for v in vehicles:
		if (argvs.decr_vnum==False or v.rmpriority==0) and [c for c in v.route[1:-1] if c in custs_to_rm]==[c for c in v.route[1:-1] if c.custno!="0"]:
			return []

	#for i in range(0,3):
	for i in range(0,rm_cnt):
		remove_a_customer(custs_to_rm[i],vehicles,argvs)
	return custs_to_rm
##20200331

def generate_timetable_from_dtable(dtable):
	ttable={}
	vspeed=20
	for k,v in dtable.items():
		ttable[k]=float(v)*(1.0/1000.0)/vspeed
	return ttable

def output_timetable(timetable,ofilename):
	if rank==0:
		with open(ofilename,'w') as f:
			writecsv=csv.writer(f,lineterminator='\n')
			for k,v in timetable.items():
				writecsv.writerow([k[0],k[1],v])

def output_disttable(dtable,ofilename):
	if rank==0:
		with open(ofilename,'w') as f:
			writecsv=csv.writer(f,lineterminator='\n')
			for k,v in dtable.items():
				writecsv.writerow([k[0],k[1],v])

def write_chargetime(filename,vehicles,lastc_flag,argvs):
	if rank==0:
		with open(filename,'a') as f:
			writecsv=csv.writer(f,lineterminator='\n')
			olist=[]
			for v in [vt for vt in vehicles if len(vt.route)>=3]:
				if v.delay_arr==[]:
					olist=[]
					olist+=["route"+str(v.vehno)+"-echarge"]

					if argvs.bulkShipping_flag:
						if lastc_flag==True:
							##for i in v.route[:-1]: ##20200626
								##olist+=[0] ##20200626
							for i in range(len(v.route)-1): ##20200626
								if v.route[i].custno=="0":
									break
								for j in v.route[i].customers:
									olist+=[v.chg_batt[i]]
						else: 
							##for i in v.route: ##20200626
								##olist+=[0] ##20200626
							for i in range(len(v.route)): ##20200626
								for j in v.route[i].customers:
									olist+=[v.chg_batt[i]]
					else:
						if lastc_flag==True:
							##for i in v.route[:-1]: ##20200626
								##olist+=[0] ##20200626
							for i in range(len(v.route)-1): ##20200626
								if v.route[i].custno=="0":
									break
								olist+=[v.chg_batt[i]]
						else: 
							##for i in v.route: ##20200626
								##olist+=[0] ##20200626
							for i in v.chg_batt: ##20200626
								olist+=[i]
					writecsv.writerow(olist)
					olist=[]
					olist+=["route"+str(v.vehno)+"-eremarr"]
					feasible=False
					if argvs.bulkShipping_flag:
						for i in range(len(v.route)): 
							for j in v.route[i].customers:
								olist+=[v.rem_batt[i]-v.chg_batt[i]]
								if v.rem_batt[i]-v.chg_batt[i] < v.e_margin:
									feasible=True
					else:
						for i,j in zip(v.rem_batt, v.chg_batt): ##20200626
							olist+=[i-j]
							if i-j < v.e_margin:
								feasible=True
				else:
					olist=[]
					olist+=["route"+str(v.vehno)+"-echarge"]

					if argvs.bulkShipping_flag:
						if lastc_flag==True:
							##for i in v.route[:-1]: ##20200626
								##olist+=[0] ##20200626
							for i in range(len(v.route)-1): ##20200626
								if v.route[i].custno=="0":
									break
								for j in v.route[i].customers:
									olist+=[v.delay_chg_batt[i]]
						else: 
							##for i in v.route: ##20200626
								##olist+=[0] ##20200626
							for i in range(len(v.route)): ##20200626
								for j in v.route[i].customers:
									olist+=[v.delay_chg_batt[i]]
					else:
						if lastc_flag==True:
							##for i in v.route[:-1]: ##20200626
								##olist+=[0] ##20200626
							for i in range(len(v.route)-1): ##20200626
								if v.route[i].custno=="0":
									break
								olist+=[v.delay_chg_batt[i]]
						else: 
							##for i in v.route: ##20200626
								##olist+=[0] ##20200626
							for i in v.delay_chg_batt: ##20200626
								olist+=[i]
					writecsv.writerow(olist)
					olist=[]
					olist+=["route"+str(v.vehno)+"-eremarr"]
					feasible=False
					if argvs.bulkShipping_flag:
						for i in range(len(v.route)): 
							for j in v.route[i].customers:
								olist+=[v.delay_rem_batt[i]-v.delay_chg_batt[i]]
								if v.delay_rem_batt[i]-v.delay_chg_batt[i] < v.e_margin:
									feasible=True
					else:
						for i,j in zip(v.delay_rem_batt, v.delay_chg_batt): ##20200626
							olist+=[i-j]
							if i-j < v.e_margin:
								feasible=True
				if feasible:
					olist+=["NG(margin=)"]
					olist+=[v.e_margin]
				else:
					olist+=["OK(margin=)"]
					olist+=[v.e_margin]
				writecsv.writerow(olist)

def generate_inputfile(filename,vehicles,lastc_flag,argvs):
	if rank==0:
		with open(argvs.inputfile,"r") as fi:
			with open(filename,'w') as fo:
				readcsv=csv.reader(fi,delimiter=",",quotechar='"')
				writecsv=csv.writer(fo,lineterminator='\n')

				for row in readcsv:
					if "CUST NO." in row or row[0]=="0":
						writecsv.writerow(row)
					else:
						if argvs.bulkShipping_flag==False:
							for v in vehicles:
								for c in v.route[1:-1]:
									if row[0]==c.custno:
										writecsv.writerow(row)
										break
						else:
							for v in vehicles:
								for tc in v.route[1:-1]:
									for c in tc.customers:
										if row[0]==c.custno:
											writecsv.writerow(row)
											break
				


	

#def generate_routefile(filename,customers,vehicles,insfilename,lastc_flag):
def generate_routefile(filename,vehicles,lastc_flag,argvs):
	if rank==0:
		with open(filename,'w') as f:
			writecsv=csv.writer(f,lineterminator='\n')
			olist=[]
			olist+=["route#"]
			olist+=["Id"]
			writecsv.writerow(olist)
			#vidx=0
			#for v in vehicles:
			for v in [vt for vt in vehicles if len([c for c in vt.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1]:
				olist=[]
				##20180904
				##if v.rtid != None:
				##	olist+=[v.rtid]
				##else:
				##20180904
				olist+=["route"+str(v.vehno)]
				if argvs.bulkShipping_flag:
					for i in range(len(v.route)):
						for j in v.route[i].customers:
							olist+=[j.custno]
				else:
					for i in range(len(v.route)):
						olist+=[v.route[i].custno]
				writecsv.writerow(olist)

def generate_resultfile(filename,customers,vehicles,insfilename,lastc_flag,argvs):
	if rank==0:
		with open(filename,'w') as f:
			writecsv=csv.writer(f,lineterminator='\n')
			for v in [vt for vt in vehicles if len([c for c in vt.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1]:
				last_idx = get_last_idx(v, argvs)
				olist=[]
				olist+=["VEHICLE"]
				##20180904
				##if v.rtid != None:
				##	olist+=[v.rtid]
				##else:
				##20180904
				olist+=[v.vehno]
				olist+=["ROUTE"]


				if argvs.bulkShipping_flag:
					olist+=[len([c for tc in v.route for c in tc.customers])]
				else:
					olist+=[len(v.route)]

				for i in v.route:
					if argvs.bulkShipping_flag:
						for j in i.customers:
							olist+=[j.custno]
					else:
						olist+=[i.custno]
				#olist+=["COST"] ##20190903
				if lastc_flag:
					olist+=["COST_TO_LAST"] ##20190903
					if v.delay_arr==[]:
						olist+=[v.totalcost_wolast]
					else:
						olist+=[v.delay_totalcost_wolast]
				else:
					olist+=["COST_TO_DEPO"] ##20190903
					if v.delay_arr==[]:
						olist+=[v.totalcost]
					else:
						olist+=[v.delay_totalcost]
				##20180904
				olist+=["OPSKILL"]
				olist+=[v.opskill]
				olist+=["DRSKILL"]
				olist+=[v.drskill]

				olist+=["DEMAND+"]
				olist+=[v.load_onbrd]
				olist+=["DEMAND-"]
				olist+=[v.load_pickup]
				olist+=["LOADLIMIT"]
				olist+=[v.cap]
				olist+=["DEMAND2+"]
				olist+=[v.load_onbrd2]
				olist+=["DEMAND2-"]
				olist+=[v.load_pickup2]
				olist+=["LOADLIMIT2"]
				olist+=[v.cap2]

				##20180904
				writecsv.writerow(olist)
				olist=[]
				olist+=["ARRIVAL"]
				##20180904
				##if v.rtid != None:
				##	olist+=[v.rtid]
				##else:
				##20180904
				olist+=[v.vehno]
				olist+=["TIME"]
				
				if argvs.bulkShipping_flag:
					olist+=[len([c for tc in v.route for c in tc.customers])]
				else:
					olist+=[len(v.route)]

				if argvs.bulkShipping_flag:
					if argvs.delaystart_flag and v.delay_arr!=[] and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
						for i in range(len(v.delay_arr)):
							for j in range(len(v.route[i].customers)):
								olist+=[round(v.delay_arr[i],5)+0.0]
					else:
						for i in range(len(v.arr)):
							for j in range(len(v.route[i].customers)):
								olist+=[round(v.arr[i],5)+0.0]
				else:
					if argvs.delaystart_flag and v.delay_arr!=[] and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
						for i in v.delay_arr:
							olist+=[round(i,5)+0.0]
					else:
						for i in v.arr:
							olist+=[round(i,5)+0.0]


				writecsv.writerow(olist)

			##20200626
			totalcost_wolast=0
			totalcost=0
			for v in vehicles:
				if v.delay_arr==[]:
					totalcost_wolast+=v.totalcost_wolast
					totalcost+=v.totalcost
				else:
					totalcost_wolast+=v.delay_totalcost_wolast
					totalcost+=v.delay_totalcost
			if lastc_flag==True: 
				##totalcost_wolast=0
				##for v in vehicles:
				##	totalcost_wolast+=round(v.totalcost_wolast,3)
				olist=[]
				olist+=["TOTALCOST"]
				olist+=[totalcost_wolast]
				writecsv.writerow(olist)
			else:
				##totalcost=0
				##for v in vehicles:
				##	totalcost+=round(v.totalcost,3)
				olist=[]
				olist+=["TOTALCOST"]
				olist+=[totalcost]
				writecsv.writerow(olist)
			olist=[]
			olist+=["TOTALCOST_TO_LAST"]
			olist+=[totalcost_wolast]
			writecsv.writerow(olist)
			olist=[]
			olist+=["TOTALCOST_TO_DEPO"]
			olist+=[totalcost]
			writecsv.writerow(olist)

			totaltime_wolast,totaltime=0,0
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])==0:
					continue
				if argvs.delaystart_flag and v.delay_arr!=[] and argvs.break_flag==False and v.reserved_v_flag==False: #休憩スポットが有効ならばdelayしない
					totaltime+=v.delay_lv[-1]-v.delay_arr[0]
					for i in range(len(v.route)-2,0,-1):
						if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
							totaltime_wolast+=v.delay_lv[i]-v.delay_arr[0]
							break
				else:
					totaltime+=v.lv[-1]-v.arr[0]
					for i in range(len(v.route)-2,0,-1):
						if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
							totaltime_wolast+=v.lv[i]-v.arr[0]
							break

			olist=[]
			olist+=["TOTALTIME_TO_LAST"]
			olist+=[totaltime_wolast]
			writecsv.writerow(olist)
			olist=[]
			olist+=["TOTALTIME_TO_DEPO"]
			olist+=[totaltime]
			writecsv.writerow(olist)

			if argvs.evplan:
				if argvs.management_etable:
					totalerec_wolast,totalerec=0,0
					for v in vehicles:
						for i in reversed(range(1,len(v.route))):
							if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
								last_idx=i-1
							else:
								break
						if v.delay_arr==[]:
							for i in range(last_idx):
								etable1=get_etable(v.vtype,v.etype,v.lv[i],argvs.management_etable)

								totalerec_wolast+=etable1[v.route[i].spotno][v.route[i+1].spotno]
								totalerec+=etable1[v.route[i].spotno][v.route[i+1].spotno]
							
							etable2=get_etable(v.vtype,v.etype,v.lv[-2],argvs.management_etable)
							totalerec+=etable2[v.route[-2].spotno][v.route[-1].spotno]
						else:
							for i in range(last_idx):
								etable1=get_etable(v.vtype,v.etype,v.delay_lv[i],argvs.management_etable)

								totalerec_wolast+=etable1[v.route[i].spotno][v.route[i+1].spotno]
								totalerec+=etable1[v.route[i].spotno][v.route[i+1].spotno]
							
							etable2=get_etable(v.vtype,v.etype,v.delay_lv[-2],argvs.management_etable)
							totalerec+=etable2[v.route[-2].spotno][v.route[-1].spotno]
				else:
					totalerec_wolast,totalerec=0,0
					for v in vehicles:
						for i in reversed(range(1,len(v.route))):
							if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
								last_idx=i-1
							else:
								break
						if v.delay_arr==[]:
							for i in range(last_idx):
								dtable1=get_dtable(v.vtype,v.lv[i],argvs.management_dtable)

								totalerec_wolast+=(dtable1[v.route[i].spotno][v.route[i+1].spotno]/1000)/v.e_cost
								totalerec+=(dtable1[v.route[i].spotno][v.route[i+1].spotno]/1000)/v.e_cost
							
							dtable2=get_dtable(v.vtype,v.lv[-2],argvs.management_dtable)
							totalerec+=(dtable2[v.route[-2].spotno][v.route[-1].spotno]/1000)/v.e_cost
						else:
							for i in range(last_idx):
								dtable1=get_dtable(v.vtype,v.delay_lv[i],argvs.management_dtable)

								totalerec_wolast+=(dtable1[v.route[i].spotno][v.route[i+1].spotno]/1000)/v.e_cost
								totalerec+=(dtable1[v.route[i].spotno][v.route[i+1].spotno]/1000)/v.e_cost
							
							dtable2=get_dtable(v.vtype,v.delay_lv[-2],argvs.management_dtable)
							totalerec+=(dtable2[v.route[-2].spotno][v.route[-1].spotno]/1000)/v.e_cost

				olist=[]
				olist+=["TOTALEREC_TO_LAST"]
				olist+=[totalerec_wolast]
				writecsv.writerow(olist)
				olist=[]
				olist+=["TOTALEREC_TO_DEPO"]
				olist+=[totalerec]
				writecsv.writerow(olist)

			if argvs.management_xtable:
				totalxcost_wolast,totalxcost=0,0
				for v in vehicles:
					for i in reversed(range(1,len(v.route))):
						if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
							last_idx=i-1
						else:
							break
					if v.delay_arr==[]:
						for i in range(last_idx):
							xtable1=get_xtable(v.vtype,v.lv[i],argvs.management_xtable)

							totalxcost_wolast+=exp_xtable(v.route[i],v.route[i+1],xtable1)
							totalxcost+=exp_xtable(v.route[i],v.route[i+1],xtable1)
						
						xtable2=get_xtable(v.vtype,v.lv[last_idx],argvs.management_xtable)
						totalxcost+=exp_xtable(v.route[last_idx],v.route[-1],xtable2)
					else:
						for i in range(last_idx):
							xtable1=get_xtable(v.vtype,v.delay_lv[i],argvs.management_xtable)

							totalxcost_wolast+=exp_xtable(v.route[i],v.route[i+1],xtable1)
							totalxcost+=exp_xtable(v.route[i],v.route[i+1],xtable1)
						
						xtable2=get_xtable(v.vtype,v.delay_lv[last_idx],argvs.management_xtable)
						totalxcost+=exp_xtable(v.route[last_idx],v.route[-1],xtable2)

				olist=[]
				olist+=["TOTALXCOST_TO_LAST"]
				olist+=[totalxcost_wolast]
				writecsv.writerow(olist)
				olist=[]
				olist+=["TOTALXCOST_TO_DEPO"]
				olist+=[totalxcost]
				writecsv.writerow(olist)

			olist=[]
			olist+=["LAST_FLAG"]
			olist+=[lastc_flag]
			writecsv.writerow(olist)

			olist=[]
			olist+=["OPT_D"]
			olist+=["OPT_T"]
			olist+=["OPT_E"]
			olist+=["OPT_X"]
			olist+=[argvs.opt_d_weight]
			olist+=[argvs.opt_t_weight]
			olist+=[argvs.opt_e_weight]
			olist+=[argvs.opt_x_weight]
			writecsv.writerow(olist)
			##20200626

			if argvs.bulkShipping_flag:
				for c in customers:
					for tc in c.customers:
						olist=[]
						olist+=["LOC"]
						olist+=[tc.custno]
						olist+=[tc.y]
						olist+=[tc.x]
						writecsv.writerow(olist)
			else:	
				for c in customers:		
					olist=[]
					olist+=["LOC"]
					olist+=[c.custno]
					olist+=[c.y]
					olist+=[c.x]
					writecsv.writerow(olist)
		
	# writecsv.writerow(["INSTANCE",insfilename])

# def check_capfeasibility(customers,vehicles,argvs):
# 	frame=inspect.currentframe().f_back
# 	printlog(["\nmain_tw.py:"+str(frame.f_lineno),"check_capfeasibility : ","customers = ",[c.custno for c in customers],", vehicles = ",[v.vehno for v in vehicles],", argvs = ",argvs],logging.DEBUG)

# 	try:
# 		for c in customers:
# 			if c.dem < 0:
# 				argvs.pickup_flag=True
# 			cap_feas=False
# 			for v in vehicles:
# 				if v.cap>=abs(c.dem)-1e-2:
# 					cap_feas=True
# 			if cap_feas==False:	
# 				sErrMes = "customer demand > vehicle capacity (customer demand = "+str(c.dem)+", vehicle capacities = "
# 				for v in vehicles:
# 					sErrMes += str(v.cap)+" " 
# 				sErrMes += ")"
# 				raise ValueError(sErrMes)
# 	except Exception:
# 		sErr = traceback.format_exc()
# 		printlog(["<Error message log>",sErr], logging.ERROR)
# 		raise

# 	#全車両が同じ時間テーブルを使うときskillshuffle_flag=Trueにする
# 	if argvs.skillfile!=None:
# 		argvs.skillshuffle_flag=True
# 		for (v1,v2) in [(v1,v2) for v1 in vehicles for v2 in vehicles if v1.vehno<v2.vehno]:
# 			for table in argvs.management_ttable:
# 				if table["vehno"]==str(v1.vehno):
# 					if table["table"]!=get_ttable(v2.vehno,table["start_time"],argvs.management_ttable):
# 						argvs.skillshuffle_flag=False
# 			for table in argvs.management_ttable:
# 				if table["vehno"]==str(v2.vehno):
# 					if table["table"]!=get_ttable(v1.vehno,table["start_time"],argvs.management_ttable):
# 						argvs.skillshuffle_flag=False
	
		
# 初期解で違反解を許容するため
# def check_feasibility_of_the_first(customer,vehicle,customers,argvs):
# 	depot=customers[0]
# 	lv = find_lv_time(depot, vehicle.route, vehicle.lv)
# 	ttable1 = get_ttable(vehicle.vehno, lv, argvs.management_ttable)

# 	arr_t=travel_time(depot,customer,ttable1)
# 	#if vehicle.cap+1e-2<customer.dem:
# 	if vehicle.cap+1e-2<abs(customer.dem) or arr_t>customer.due_fs+1e-8:
# 		printlog(["We cannot deliver the following cargo:"], logging.ERROR)
# 		customer.output()
# 		if vehicle.cap+1e-2<abs(customer.dem):
# 			printlog(["The demand of the customer is larger than the vehicle capacity."], logging.ERROR)
# 			printlog(["Try with the vehicles with larger capacity"], logging.ERROR)
# 		if arr_t>customer.due_fs+1e-8:
# 			printlog(["The time window at the customer is too strict"], logging.ERROR)
# 			printlog(["Try with larger time window at the customer."], logging.ERROR)
# 		raise ValueError() # sys.exit(1) # daic

# def check_twfeasibility(customers,starttime,endtime):
# 	#due_fs<sttimeまたはendtime<ready_fsの時は，時間枠をチェックするように出力して，終了する。 error for input delivery time error
# 	frame=inspect.currentframe().f_back
# 	printlog(["\nmain_tw.py:"+str(frame.f_lineno),"check_twfeasibility : ","customers = ",[c.custno for c in customers],", starttime = ",starttime,", endtime = ",endtime],logging.DEBUG)

# 	try:
# 		if len(starttime) < 6: ##20200626
# 			st=starttime.split(":")
# 			et=endtime.split(":")
# 			st=datetime.datetime(2000,1,1,int(st[0]),int(st[1]),00)
# 			et=datetime.datetime(2000,1,1,int(et[0]),int(et[1]),00)
# 			for c in customers:
# 				ready_str,due_str=c.ready.split(":"),c.due.split(":")
# 				ready_dt=datetime.datetime(2000,1,1,int(ready_str[0]),int(ready_str[1]),00)
# 				due_dt=datetime.datetime(2000,1,1,int(due_str[0]),int(due_str[1]),00)
# 				if due_dt<st or et<ready_dt:
# 					sErrMes = "customer endtime < depo starttime or depo endtime < customer startime (customer endtime = "+str(due_dt)+", depo starttime = "+str(st)+", depo endtime = "+str(et)+", customer startime = "+str(ready_dt)+")"
# 					raise ValueError(sErrMes)
# 		else: ##20200626
# 			st=datetime.datetime.strptime(starttime, '%Y/%m/%d %H:%M:%S')
# 			et=datetime.datetime.strptime(endtime, '%Y/%m/%d %H:%M:%S')
# 			for c in customers:
# 				ready_dt=datetime.datetime.strptime(c.ready, '%Y/%m/%d %H:%M:%S')
# 				due_dt=datetime.datetime.strptime(c.due, '%Y/%m/%d %H:%M:%S')
# 				if due_dt<st or et<ready_dt:
# 					sErrMes = "customer endtime < depo starttime or depo endtime < customer startime (customer endtime = "+str(due_dt)+", depo starttime = "+str(st)+", depo endtime = "+str(et)+", customer startime = "+str(ready_dt)+")"
# 					raise ValueError(sErrMes)
# 	except Exception:
# 		sErr = traceback.format_exc()
# 		printlog(["<Error message log>",sErr], logging.ERROR)
# 		raise
	
##20190903
def outputs_middle(custs3,vehs,argvs,divnum=0):
	#得られた解をファイルに出力 midlle output file
	#generate_routefile(argvs.outputfile,custs3,vehs,argvs.inputfile,argvs.lastc_flag)
	sLogBuf = "\n"
	sLog = ["output_middle:time,count" ,argvs.outputstime,int(argvs.outputs_count)]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	tod = str(datetime.datetime.today())
	sLog = ["output_middle nowtime:",tod]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	tod = tod.replace(":", "-")
	generate_routefile(argvs.outputfile+str(divnum)+"_"+tod+"(noskill).csv",vehs,argvs.lastc_flag,argvs)
	generate_resultfile(argvs.outputfile+str(divnum)+"_"+tod+"(noskill).detail.csv",custs3,vehs,argvs.inputfile,argvs.lastc_flag,argvs)
	vidx=0
	totalcost=0
	totalcost_wolast=0
	for v in vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			totalcost+=v.totalcost
			totalcost_wolast+=v.totalcost_wolast
			vidx=vidx+1
	sLog = ["===== output middle(skills not supported): TOTAL_DISTANCE: ",round(totalcost,2)," =====",divnum]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== output middle(skills not supported): TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	sLogBuf += "\n"
	totaltime,totaltime_wolast=0,0
	for v in vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
			totaltime+=v.lv[-1]-v.arr[0]
			for i in range(len(v.route)-2,0,-1):
				if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
					totaltime_wolast+=v.lv[i]-v.arr[0]
					break
	sLog = ["===== output middle(skills not supported): TOTAL_DELIVERY_TIME: ",round(totaltime,2)," =====",divnum]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== output middle(skills not supported): TOTAL_DELIVERY_TIME_TO_LASTCUST : ",round(totaltime_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	if argvs.decr_vnum==True: ##20180611 -rv
		sLog = ["===== output middle(skills not supported): TOTAL_NUMBER_OF_VEHICLES: ",vidx," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	if rank==0:
		logging.log(logging.INFO,sLogBuf)

##20190903
##20190917
# def outputs_middle_mp(custs3,vehs,lastc_flag,outputstime,outputs_count,inputfile,outputfile,decr_vnum,argvs,divnum=0):
# 	#得られた解をファイルに出力 midlle output file for multiprocess
# 	sLogBuf = "\n"
# 	sLog = ["output_middle:time,count" ,outputstime,int(outputs_count)]
# 	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
# 	tod = str(datetime.datetime.today())
# 	sLog = ["output_middle nowtime:",tod]
# 	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
# 	tod = tod.replace(":", "-")
# 	generate_routefile(outputfile+str(divnum)+"_"+tod+"(noskill).csv",vehs,lastc_flag,argvs)
# 	generate_resultfile(outputfile+str(divnum)+"_"+tod+"(noskill).detail.csv",custs3,vehs,inputfile,lastc_flag,argvs)
# 	vidx=0
# 	totalcost=0
# 	totalcost_wolast=0
# 	for v in vehs:
# 		if len(v.route)>=3:
# 			totalcost+=v.totalcost
# 			totalcost_wolast+=v.totalcost_wolast
# 			vidx=vidx+1
# 	sLog = ["===== output middle(skills not supported): TOTAL_DISTANCE: ",round(totalcost,2)," =====",divnum]
# 	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
# 	sLog = ["===== output middle(skills not supported): TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
# 	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
# 	if decr_vnum==True: ##20180611 -rv
# 		sLog = ["===== output middle(skills not supported): TOTAL_NUMBER_OF_VEHICLES: ",vidx," ====="]
# 		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
# 	if rank==0:
# 		logging.log(logging.INFO,sLogBuf)
##20190917

def generate_rotate_file(outputfile,custs3,vehs,inputfile,argvs):
	newroute=[[{'custno':r.custno, 'index':i} for i,r in enumerate(v.route) if r.custno[0] != 'b'] for v in vehs]

	rotate_num=[len([newroute[v][i]["index"] for i in range(1,len(newroute[v])) if (newroute[v][i]["custno"]=="0" or i==len(newroute[v])-1) and (newroute[v][i-1]["custno"]!="0" and i!=1)]) for v in range(len(newroute))]
	max_rotate=max(rotate_num)

	start_idx=[[newroute[v][i]["index"] for i in range(len(newroute[v])-1) if (newroute[v][i]["custno"]=="0" or i==0) and (newroute[v][i+1]["custno"]!="0" and i+1!=len(newroute[v])-1)] for v in range(len(newroute))]
	end_idx=[[newroute[v][i]["index"] for i in range(1,len(newroute[v])) if (newroute[v][i]["custno"]=="0" or i==len(newroute[v])-1) and (newroute[v][i-1]["custno"]!="0" and i!=1)] for v in range(len(newroute))]

	#集荷最適化
	for i in range(len(vehs)):
		end_idx[i][-1]=len(vehs[i].route)-1

	for i in range(max_rotate):
		vehs_per_rotate=[]
		for j in range(len(vehs)):
			if i+1>len(start_idx[j]):
				v_tmp=copy.deepcopy(vehs[j])
				v_tmp.route=[vehs[j].route[0],vehs[j].route[-1]]
				v_tmp.update_totalcost_dtable(argvs)

				vehs_per_rotate.append(v_tmp)
			else:
				v_tmp=copy.deepcopy(vehs[j])
				v_tmp.route=vehs[j].route[start_idx[j][i]:end_idx[j][i]+1]
				v_tmp.starthour=vehs[j].arr[start_idx[j][i]]
				v_tmp.update_totalcost_dtable(argvs)

				vehs_per_rotate.append(v_tmp)

		custs_per_rotate=[custs3[0]]
		for c in custs3[1:]:
			for v in vehs_per_rotate:
				if c in  v.route[1:-1]:
					custs_per_rotate.append(c)


		generate_inputfile(inputfile+"_"+str(i+1)+"_input.csv",vehs_per_rotate,argvs.lastc_flag,argvs)
		generate_routefile(outputfile+"_"+str(i+1)+"_output.csv",vehs_per_rotate,argvs.lastc_flag,argvs)
		generate_resultfile(outputfile+"_"+str(i+1)+"_detail.csv",custs_per_rotate,vehs_per_rotate,inputfile+"_"+str(i+1)+"_input.csv",argvs.lastc_flag,argvs)

def generate_divide_file(filename,vehicles):
	if rank==0:
		with open(filename+".divide.csv",'w') as f:
			writecsv=csv.writer(f,lineterminator='\n')
			olist=[]
			olist+=["VEHICLE NO."]
			olist+=["CUST NO."]
			olist+=["load"]
			olist+=["load2"]
			olist+=["DEMDIVIDEUNIT"]
			writecsv.writerow(olist)
			#vidx=0
			#for v in vehicles:
			for v in [vt for vt in vehicles if len([c for c in vt.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1]:
				for c in v.route:
					olist=[]
					olist+=[str(v.vehno)]
					olist+=[str(c.custno)]
					olist+=[str(c.dem)]
					olist+=[str(c.dem2)]
					olist+=[str(c.demdivideunit)]
					
					writecsv.writerow(olist)


def init_message():
	sLogBuf = "\n"
	sLogBuf += "#####################################################################\n"
	sLogBuf += "########################## ROUTING SOLVER ###########################\n"
	sLogBuf += "#####################################################################\n"
	if rank==0:
		logging.log(logging.INFO,sLogBuf)

##20200407
def check_assignment(customers,vehicles):
	sLogBuf = "\n"
	sLogBuf += "===== check_assigment start===== \n"
	custs_in_routes=[]
	for v in vehicles:
		for c in v.route:
			custs_in_routes+=[c]
	for c in customers:
		if custs_in_routes.count(c)!=1:
			sLog = ["number of ",c.custno," in routes is not 1"]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLogBuf += "===== check_assigment end  ===== \n"
	if rank==0:
		logging.log(logging.INFO,sLogBuf)
##20200407


# daic
# 関数化
###def localsearch_ev(custs3, vehs, dtable, ttable, e_spots):
def localsearch_ev(custs3, vehs, e_spots, argvs):###
	#利用期限を過ぎていたらエラー出力して終了
	if is_expired():
		sErrMes="license expired"
		raise ValueError(sErrMes)

	reserved_vehs=[]
	if argvs.opt_unassigned_flag==True:
		# 未割り当て荷物最適化ならば、予約車両を取り除く
		reserved_vehs=[v for v in vehs if v.reserved_v_flag!=False]
		vehs=[v for v in vehs if v.reserved_v_flag!=True]

	sLog = ["custs3 = ",[c.custno for c in custs3],", vehs = ",[v.vehno for v in vehs],", e_spots = ",[c.custno for c in e_spots],", argvs = ",argvs]
	sLogBuf = " ".join(list(map(str,sLog)))
	if rank==0:
		logging.log(logging.DEBUG,sLogBuf)

	try:
		#充電スポット以外が格納されている場合
		for c in e_spots:
			if not c.custno.startswith("e"):
				sErrMes = "CS_spots include something not \"e\" + positive integer (custno = "+c.custno+")"
				raise ValueError(sErrMes)
	except Exception:
		sErr = traceback.format_exc()
		sErr = ["<Error message log>",sErr]
		sLogBuf_error = " ".join(list(map(str,sErr)))
		if rank==0:
			logging.log(logging.ERROR,sLogBuf_error)
		raise

	loop_cnt=100

	#集荷最適化用のデポは一旦削除
	for v in vehs:
		if v.route[-2].custno=="0":
			remove_customers_specified([v.route[-2]],v,argvs)

	vehs=reconstruct_routes_withcharging(custs3,vehs,e_spots,argvs)

	#集荷最適化
	if argvs.pickup_flag==True:
		#デポ削除
		for v in vehs:
			if v.route[-1].custno=="0" or v.route[-2].custno!="0": #enddepot!=DEPOTかつDEPOTが直前にある場合のみ処理
				continue

			if v.load_pickup==0 and v.load_pickup2==0 and len(v.route)-2!=0:
				ttable13 = get_ttable(v.vtype, v.lv[-3], argvs.management_ttable)
				if ttable13[v.route[-3].spotno][v.route[-1].spotno]==-1:
					continue

				dtable11 = get_dtable(v.vtype,v.lv[-3], argvs.management_dtable)
				if dtable11[v.route[-3].spotno][v.route[-1].spotno]==-1:
					continue

				if argvs.management_etable:
					etable10 = get_etable(v.vtype, v.etype, v.lv[-3], argvs.management_etable)
					if etable10[v.route[-3].spotno][v.route[-1].spotno]==-1:
						continue

				if argvs.management_xtable:
					xtable10 = get_xtable(v.vtype, v.lv[-3], argvs.management_xtable)
					if xtable10[v.route[-3].spotno][v.route[-1].spotno]==-1:
						continue

				remove_customers_specified([v.route[-2]],v,argvs) #DEPOを削除

		#デポ追加
		for v in vehs:
			if argvs.bulkShipping_flag==False:
				if v.route[-1].custno=="0" or v.route[-2].custno=="0": #enddepot!=DEPOTかつDEPOTが直前にない場合のみ処理
					continue

				if v.load_pickup>0 or v.load_pickup2>0:
					ttable13 = get_ttable(v.vtype, v.lv[-2], argvs.management_ttable)
					if ttable13[v.route[-2].spotno][custs3[0].spotno]==-1:
						continue

					dtable11 = get_dtable(v.vtype,v.lv[-2], argvs.management_dtable)
					if dtable11[v.route[-2].spotno][custs3[0].spotno]==-1:
						continue

					if argvs.management_etable:
						etable10 = get_etable(v.vtype, v.etype, v.lv[-2], argvs.management_etable)
						if etable10[v.route[-2].spotno][custs3[0].spotno]==-1:
							continue

					if argvs.management_xtable:
						xtable10 = get_xtable(v.vtype, v.lv[-2], argvs.management_xtable)
						if xtable10[v.route[-2].spotno][custs3[0].spotno]==-1:
							continue

					depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[v.route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if v.route[j].requestType=="DELIVERY" and v.route[j].custno[0]!='b':
								servt+=v.route[j].depotservt
						if v.route[depo_idx[k]+1].custno!="0":
							servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
						else:
							servt_dict[v.route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[v.route[len(v.route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if v.route[j].requestType=="PICKUP":
								servt+=v.route[j].depotservt
						servt_dict[v.route[depo_idx[k]]]+=servt

					arr_t=v.lv[-2]+ttable13[v.route[-2].spotno][custs3[0].spotno]*v.drskill
					st_t=max(arr_t+custs3[0].parkt_arrive,custs3[0].ready_fs)+custs3[0].parkt_open
					if v.direct_flag==True and compare_time(st_t,custs3[0].due_fs)>0:
						continue
					lv_t=max(arr_t+custs3[0].parkt_arrive,custs3[0].ready_fs)+(servt_dict[v.route[-1]]+v.depotservt)*v.opskill
					lv_t+=custs3[0].parkt_open

					ttable14 = get_ttable(v.vtype, lv_t, argvs.management_ttable)
					if ttable14[custs3[0].spotno][v.route[-1].spotno]==-1:
						continue

					dtable12 = get_dtable(v.vtype,lv_t, argvs.management_dtable)
					if dtable12[custs3[0].spotno][v.route[-1].spotno]==-1:
						continue

					if argvs.management_etable:
						etable11 = get_etable(v.vtype, v.etype, lv_t, argvs.management_etable)
						if etable11[custs3[0].spotno][v.route[-1].spotno]==-1:
							continue

					if argvs.management_xtable:
						xtable11 = get_xtable(v.vtype, lv_t, argvs.management_xtable)
						if xtable11[custs3[0].spotno][v.route[-1].spotno]==-1:
							continue

					arr_t=lv_t+ttable14[custs3[0].spotno][v.route[-1].spotno]*v.drskill
					st_t=max(arr_t,v.route[-1].ready_fs)
					if v.direct_flag==True and compare_time(st_t,v.route[-1].due_fs)>0:
						continue
					lv_t=max(arr_t,v.route[-1].ready_fs)
					if v.direct_flag==True and argvs.lastc_flag==False and compare_time(lv_t,v.endhour)>0:
						continue

					v.insert_customer_at(-1,copy.deepcopy(custs3[0]),argvs) #DEPOを挿入

					#充電スポット挿入
					insert_an_espot_in_a_vehicle(v,custs3,e_spots,vehs,argvs,True)
			else:
				if v.route[-1].customers[0].custno=="0" or v.route[-2].customers[0].custno=="0": #enddepot!=DEPOTかつDEPOTが直前にない場合
					continue

				if v.load_pickup>0 or v.load_pickup2>0:
					ttable13 = get_ttable(v.vtype, v.lv[-2], argvs.management_ttable)
					if ttable13[v.route[-2].spotno][custs3[0].spotno]==-1:
						continue

					dtable11 = get_dtable(v.vtype,v.lv[-2], argvs.management_dtable)
					if dtable11[v.route[-2].spotno][custs3[0].spotno]==-1:
						continue

					if argvs.management_etable:
						etable10 = get_etable(v.vtype, v.etype, v.lv[-2], argvs.management_etable)
						if etable10[v.route[-2].spotno][custs3[0].spotno]==-1:
							continue

					if argvs.management_xtable:
						xtable10 = get_xtable(v.vtype, v.lv[-2], argvs.management_xtable)
						if xtable10[v.route[-2].spotno][custs3[0].spotno]==-1:
							continue

					depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
					servt_dict={}
					for k in range(len(depo_idx)-1):
						servt_dict[v.route[depo_idx[k]]]=0
						servt=0
						for j in range(depo_idx[k]+1,depo_idx[k+1]):
							if v.route[j].requestType=="DELIVERY" and v.route[j].custno[0]!='b':
								servt+=v.route[j].depotservt
						if v.route[depo_idx[k]+1].custno!="0":
							servt_dict[v.route[depo_idx[k]]]+=servt+v.depotservt
						else:
							servt_dict[v.route[depo_idx[k]]]+=servt
					#集荷時間
					servt_dict[v.route[len(v.route)-1]]=0
					for k in range(1,len(depo_idx)):
						servt=0
						for j in range(depo_idx[k-1]+1,depo_idx[k]):
							if v.route[j].requestType=="PICKUP":
								servt+=v.route[j].depotservt
						servt_dict[v.route[depo_idx[k]]]+=servt

					arr_t=v.lv[-2]+ttable13[v.route[-2].spotno][custs3[0].spotno]*v.drskill
					st_t=max(arr_t+custs3[0].parkt_arrive,custs3[0].ready_fs)+custs3[0].parkt_open
					if v.direct_flag==True and compare_time(st_t,custs3[0].due_fs)>0:
						continue
					lv_t=max(arr_t+custs3[0].parkt_arrive,custs3[0].ready_fs)+(servt_dict[v.route[-1]]+v.depotservt)*v.opskill
					lv_t+=custs3[0].parkt_open

					ttable14 = get_ttable(v.vtype, lv_t, argvs.management_ttable)
					if ttable14[custs3[0].spotno][v.route[-1].spotno]==-1:
						continue

					dtable12 = get_dtable(v.vtype,lv_t, argvs.management_dtable)
					if dtable12[custs3[0].spotno][v.route[-1].spotno]==-1:
						continue

					if argvs.management_etable:
						etable11 = get_etable(v.vtype, v.etype, lv_t, argvs.management_etable)
						if etable11[custs3[0].spotno][v.route[-1].spotno]==-1:
							continue

					if argvs.management_xtable:
						xtable11 = get_xtable(v.vtype, lv_t, argvs.management_xtable)
						if xtable11[custs3[0].spotno][v.route[-1].spotno]==-1:
							continue

					arr_t=lv_t+ttable14[custs3[0].spotno][v.route[-1].spotno]*v.drskill
					st_t=max(arr_t,v.route[-1].ready_fs)
					if v.direct_flag==True and compare_time(st_t,v.route[-1].due_fs)>0:
						continue
					lv_t=max(arr_t,v.route[-1].ready_fs)
					if v.direct_flag==True and argvs.lastc_flag==False and compare_time(lv_t,v.endhour)>0:
						continue

					depo=TiedCustomer(custs3[0].custno,custs3[0].spotid,custs3[0].ready_fs,custs3[0].due_fs,custs3[0].x,custs3[0].y,custs3[0].e_rate)
					depo.customers.append(copy.deepcopy(custs3[0].customers[0]))
					depo.servt=custs3[0].servt
					depo.dem=custs3[0].dem
					depo.dem2=custs3[0].dem2
					depo.reje_ve=custs3[0].reje_ve
					depo.parkt_open=custs3[0].parkt_open
					depo.parkt_arrive=custs3[0].parkt_arrive
					depo.depotservt=custs3[0].depotservt
					depo.additionalcust=[depo]
					depo.demdivideunit=custs3[0].demdivideunit
					depo.requestType=custs3[0].requestType
					depo.deny_unass=custs3[0].deny_unass
					v.insert_customer_at(-1,depo,argvs) #DEPOを挿入

					#充電スポット挿入
					insert_an_espot_in_a_vehicle(v,custs3,e_spots,vehs,argvs,True)
	
	sLogBuf = "\n===== Evplan Initial solution: CONSTRUCTION END =====\n"
	if rank==0:
		logging.log(logging.INFO,sLogBuf)
	sLogBuf_veh = "\n"
	totalcost,totalcost_wolast=0,0
	used_customers=[]
	for v in vehs:
		sLogBuf_veh = v.output_ev(argvs, sLogBuf_veh,used_customers,divided)
		sLogBuf_veh += "\n"
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			totalcost+=v.totalcost
			totalcost_wolast+=v.totalcost_wolast
	if rank==0:
		logging.log(logging.INFO,sLogBuf_veh)
	sLogBuf = "\n"
	sLog = ["===== Evplan Initial solution: TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== Evplan Initial solution: TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	sLogBuf += "\n"
	totaltime,totaltime_wolast=0,0
	for v in vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			totaltime+=v.lv[-1]-v.arr[0]
			for i in range(len(v.route)-2,0,-1):
				if v.route[i].custno!="0":
					totaltime_wolast+=v.lv[i]-v.arr[0]
					break
	sLog = ["===== Evplan Initial solution: TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== Evplan Initial solution: TOTAL_DELIVERY_TIME_TO_LAST: ",round(totaltime_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	shaw_cost_history_totalcost=[]
	shaw_cost_history_totalcost_wolast=[]
	min_totalcost,min_totalcost_wolast=totalcost,totalcost_wolast
	not_improved_cnt=0
	for i in range(loop_cnt):
		ls_e_endtime=time.time()
		if argvs.timeout > 0.0 and ((ls_e_endtime - argvs.ls_d_starttime) > argvs.timeout):
			sLogBuf += "evplan timeout!\n"
			break
		t_vehs,t_custs=copy.deepcopy(vehs),copy.deepcopy(custs3)
		customers_removed=Shaw_remove_customers(t_custs,t_vehs,argvs)

		Ret=False
		Ret,t_vehs=insert_customers_nearest(custs3,customers_removed,t_vehs,e_spots,argvs)
		
		if Ret==True:
			for v in t_vehs:
				v.update_totalcost_dtable(argvs)
			if argvs.lastc_flag==True:
				btpen=sum([max(0.0,v.st[j]-v.route[j].due_fs) for v in vehs for j in range(1,len(v.route)-1) if v.direct_flag==False and v.route[j].custno!="0"])+sum([max(0.0,v.lv[-2]-v.endhour) if v.direct_flag==False and v.route[-2].custno!="0" else max(0.0,v.lv[-3]-v.endhour) if v.direct_flag==False and v.route[-2].custno=="0" else 0 for v in vehs])
				atpen=sum([max(0.0,v.st[j]-v.route[j].due_fs) for v in t_vehs for j in range(1,len(v.route)-1) if v.direct_flag==False and v.route[j].custno!="0"])+sum([max(0.0,v.lv[-2]-v.endhour) if v.direct_flag==False and v.route[-2].custno!="0" else max(0.0,v.lv[-3]-v.endhour) if v.direct_flag==False and v.route[-2].custno=="0" else 0 for v in t_vehs])
			else:
				btpen=sum([max(0.0,v.st[j]-v.route[j].due_fs) for v in vehs for j in range(1,len(v.route)) if v.direct_flag==False])+sum([max(0.0,v.lv[-1]-v.endhour) for v in vehs if v.direct_flag==False])
				atpen=sum([max(0.0,v.st[j]-v.route[j].due_fs) for v in t_vehs for j in range(1,len(v.route)) if v.direct_flag==False])+sum([max(0.0,v.lv[-1]-v.endhour) for v in t_vehs if v.direct_flag==False])
			if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
				for v,tv in zip(vehs,t_vehs):
					if is_reserved(v,argvs)==False and is_reserved(tv,argvs)==False:
						if argvs.lastc_flag==True and tv.route[-2].custno!="0":
							atpen,btpen=return_lutime_penalty(tv.lv[-2]-tv.arr[0],argvs.lowertime,argvs.uppertime,v.lv[-2]-v.arr[0],atpen,btpen)
						elif argvs.lastc_flag==True and tv.route[-2].custno=="0":
							atpen,btpen=return_lutime_penalty(tv.lv[-3]-tv.arr[0],argvs.lowertime,argvs.uppertime,v.lv[-2]-v.arr[0],atpen,btpen)
						else:
							atpen,btpen=return_lutime_penalty(tv.lv[-1]-tv.arr[0],argvs.lowertime,argvs.uppertime,v.lv[-1]-v.arr[0],atpen,btpen)
			if argvs.lastc_flag==True:
				bdist=sum([v.totalcost_wolast for v in vehs if v.direct_flag==False])
				adist=sum([v.totalcost_wolast for v in t_vehs if v.direct_flag==False])
			else:
				bdist=sum([v.totalcost for v in vehs if v.direct_flag==False])
				adist=sum([v.totalcost for v in t_vehs if v.direct_flag==False])

			bload=sum([max(v.load_onbrd-v.cap,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[0] for v in vehs if v.direct_flag==False])
			bload2=sum([max(v.load_onbrd2-v.cap2,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[1] for v in vehs if v.direct_flag==False])
			aload=sum([max(v.load_onbrd-v.cap,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[0] for v in t_vehs if v.direct_flag==False])
			aload2=sum([max(v.load_onbrd2-v.cap2,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[1] for v in t_vehs if v.direct_flag==False])

			if argvs.lastc_flag==True:
				btime=sum([v.lv[-2] if v.direct_flag==False and v.route[-2].custno!="0" else v.lv[-3] if v.direct_flag==False and v.route[-2].custno=="0" else 0 for v in vehs])
				atime=sum([v.lv[-2] if v.direct_flag==False and v.route[-2].custno!="0" else v.lv[-3] if v.direct_flag==False and v.route[-2].custno=="0" else 0 for v in t_vehs])
			else:
				btime=sum([v.lv[-1] for v in vehs if v.direct_flag==False])
				atime=sum([v.lv[-1] for v in t_vehs if v.direct_flag==False])
			
			if argvs.management_etable:
				if argvs.lastc_flag==True:
					bpower=sum([get_etable(v.vtype, v.etype,v.lv[j],argvs.management_etable)[v.route[j].spotno][v.route[j+1].spotno] for v in vehs for j in range(len(v.route)-2) if v.direct_flag==False and v.route[j+1].custno!="0"])
					apower=sum([get_etable(v.vtype, v.etype,v.lv[j],argvs.management_etable)[v.route[j].spotno][v.route[j+1].spotno] for v in t_vehs for j in range(len(v.route)-2) if v.direct_flag==False and v.route[j+1].custno!="0"])
				else:
					bpower=sum([get_etable(v.vtype, v.etype,v.lv[j],argvs.management_etable)[v.route[j].spotno][v.route[j+1].spotno] for v in vehs for j in range(len(v.route)-1) if v.direct_flag==False])
					apower=sum([get_etable(v.vtype, v.etype,v.lv[j],argvs.management_etable)[v.route[j].spotno][v.route[j+1].spotno] for v in t_vehs for j in range(len(v.route)-1) if v.direct_flag==False])
			else:
				bpower,apower=0.0,0.0

			if argvs.management_xtable:
				if argvs.lastc_flag==True:
					bexp=sum([exp_xtable(v.route[j],v.route[j+1],get_xtable(v.vtype, v.lv[j],argvs.management_xtable)) for v in vehs for j in range(len(v.route)-2) if v.direct_flag==False and v.route[j+1].custno!="0"])
					aexp=sum([exp_xtable(v.route[j],v.route[j+1],get_xtable(v.vtype, v.lv[j],argvs.management_xtable)) for v in t_vehs for j in range(len(v.route)-2) if v.direct_flag==False and v.route[j+1].custno!="0"])
				else:
					bexp=sum([exp_xtable(v.route[j],v.route[j+1],get_xtable(v.vtype, v.lv[j],argvs.management_xtable)) for v in vehs for j in range(len(v.route)-1) if v.direct_flag==False])
					aexp=sum([exp_xtable(v.route[j],v.route[j+1],get_xtable(v.vtype, v.lv[j],argvs.management_xtable)) for v in t_vehs for j in range(len(v.route)-1) if v.direct_flag==False])
			else:
				bexp,aexp=0.0,0.0

			if argvs.avetime_ape_flag==True:
				atime_error=calc_avetime_APE(t_vehs,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
				btime_error=calc_avetime_APE(vehs,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
			elif argvs.avetime_ae_flag==True:
				atime_error=calc_avetime_AE(t_vehs,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
				btime_error=calc_avetime_AE(vehs,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
			else:
				atime_error=0.0
				btime_error=0.0
		
			if argvs.avevisits_ape_flag==True:
				avisits_error=calc_avevisits_APE(t_vehs,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
				bvisits_error=calc_avevisits_APE(vehs,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
			elif argvs.avevisits_ae_flag==True:
				avisits_error=calc_avevisits_AE(t_vehs,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
				bvisits_error=calc_avevisits_AE(vehs,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
			else:
				avisits_error=0.0
				bvisits_error=0.0

			if argvs.avedist_ape_flag==True:
				adist_error=calc_avedist_APE(t_vehs,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
				bdist_error=calc_avedist_APE(vehs,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
			elif argvs.avedist_ae_flag==True:
				adist_error=calc_avedist_AE(t_vehs,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
				bdist_error=calc_avedist_AE(vehs,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
			else:
				adist_error=0.0
				bdist_error=0.0

			#未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
			bunass,aunass=0,0
			if argvs.opt_unassigned_flag==True:
				aunass = len([c for v in t_vehs for c in v.route if v.reserved_v_flag==True and c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
				bunass = len([c for v in vehs for c in v.route if v.reserved_v_flag==True and c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

			ires, _ = improved_or_not(atpen,btpen,adist,bdist,aload,bload,aload2,bload2,atime_error,btime_error,avisits_error,bvisits_error,adist_error,bdist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass)

			if ires==True:
				vehs,custs3=copy.deepcopy(t_vehs),copy.deepcopy(t_custs)

				if argvs.avetime_ape_flag==True:
					argvs.time_error=calc_avetime_APE(vehs,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
				elif argvs.avetime_ae_flag==True:
					argvs.time_error=calc_avetime_AE(vehs,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
			
				if argvs.avevisits_ape_flag==True:
					argvs.visits_error=calc_avevisits_APE(vehs,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
				elif argvs.avevisits_ae_flag==True:
					argvs.visits_error=calc_avevisits_AE(vehs,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

				if argvs.avedist_ape_flag==True:
					argvs.dist_error=calc_avedist_APE(vehs,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
				elif argvs.avedist_ae_flag==True:
					argvs.dist_error=calc_avedist_AE(vehs,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

				totalcost,totalcost_wolast=0,0
				for v in vehs:
					if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
						totalcost+=v.totalcost
						totalcost_wolast+=v.totalcost_wolast

				min_totalcost=min(min_totalcost,totalcost)
				min_totalcost_wolast=min(min_totalcost_wolast,totalcost_wolast)

				if argvs.lastc_flag==True:
					sLog = ["MINIMUM LCOST UPDATED TO ",round(min_totalcost_wolast,2)]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
				else:
					sLog = ["MINIMUM LCOST UPDATED TO ",round(min_totalcost,2)]
					sLogBuf += " ".join(list(map(str,sLog))) + "\n"
				if rank==0:
					logging.log(logging.INFO,sLogBuf)
				sLogBuf_veh = "\n"
				used_customers=[]
				for v in vehs:
					# v.output_ev(argvs) ##20200626
					sLogBuf_veh = v.output_ev(argvs, sLogBuf_veh,used_customers,divided)
					sLogBuf_veh += "\n"
				if rank==0:
					logging.log(logging.INFO,sLogBuf_veh)
					
				####
				sLogBuf = "\n"
				sLog = ["===== Customer improvement route: TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
				sLog = ["===== Customer improvement route: TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"

				sLogBuf += "\n"
				totaltime,totaltime_wolast=0,0
				for v in vehs:
					if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
						totaltime+=v.lv[-1]-v.arr[0]
						for j in range(len(v.route)-2,0,-1):
							if v.route[j].custno!="0":
								totaltime_wolast+=v.lv[j]-v.arr[0]
								break
				sLog = ["===== Customer improvement route: TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
				sLog = ["===== Customer improvement route: TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
				sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			else:
				not_improved_cnt+=1
		else:
			not_improved_cnt+=1
		
		if not_improved_cnt%(loop_cnt/20)==0 and not_improved_cnt>0:
			sLogBuf += "removing and inserting an espot\n"

			vehs_tmp = copy.deepcopy(vehs)
			v_rm,espot_rm=remove_an_espot(vehs_tmp,custs3,e_spots,argvs)
			if v_rm !=[]:
				e_spots_cand=copy.deepcopy(e_spots)
				t_e=None
				for e in e_spots_cand:
					if espot_rm.custno==e.custno:
						t_e=e
						break
				e_spots_cand.remove(t_e) #t_eを取り除いた充電スポット
				Ret=False
				# Ret,sLogBuf_insert=insert_an_espot_in_a_vehicle(v_rm,custs3,e_spots_cand,vehs_tmp,argvs,sLogBuf_insert)
				Ret=insert_an_espot_in_a_vehicle(v_rm,custs3,e_spots_cand,vehs_tmp,argvs)
				totalcost,totalcost_wolast=0,0
				for v in vehs_tmp:
					if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
						totalcost+=v.totalcost
						totalcost_wolast+=v.totalcost_wolast
				if Ret==True:
					if argvs.lastc_flag == True:
						lack_charge_flag = False #### 電欠チェックのため
						while(1):
							#### 電欠チェック
							for t_v in vehs_tmp:
								if t_v.direct_flag==True:
									continue
								for j,k in zip(t_v.rem_batt, t_v.chg_batt):
									if j-k < t_v.e_margin:
										lack_charge_flag = True
										break 
								if lack_charge_flag == True:
									break
							if lack_charge_flag == True:
								break

							for v in vehs_tmp:
								v.update_totalcost_dtable(argvs)
							btpen=sum([max(0.0,v.st[j]-v.route[j].due_fs) for v in vehs for j in range(1,len(v.route)-1) if v.direct_flag==False and v.route[j].custno!="0"])+sum([max(0.0,v.lv[-2]-v.endhour) if v.direct_flag==False and v.route[-2].custno!="0" else max(0.0,v.lv[-3]-v.endhour) if v.direct_flag==False and v.route[-2].custno=="0" else 0 for v in vehs])
							atpen=sum([max(0.0,v.st[j]-v.route[j].due_fs) for v in vehs_tmp for j in range(1,len(v.route)-1) if v.direct_flag==False and v.route[j].custno!="0"])+sum([max(0.0,v.lv[-2]-v.endhour) if v.direct_flag==False and v.route[-2].custno!="0" else max(0.0,v.lv[-3]-v.endhour) if v.direct_flag==False and v.route[-2].custno=="0" else 0 for v in vehs_tmp])
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
								for v,tv in zip(vehs,vehs_tmp):
									if is_reserved(v,argvs)==False and is_reserved(tv,argvs)==False:
										if tv.route[-2].custno!="0":
											atpen,btpen=return_lutime_penalty(tv.lv[-2]-tv.arr[0],argvs.lowertime,argvs.uppertime,v.lv[-2]-v.arr[0],atpen,btpen)
										else:
											atpen,btpen=return_lutime_penalty(tv.lv[-3]-tv.arr[0],argvs.lowertime,argvs.uppertime,v.lv[-2]-v.arr[0],atpen,btpen)

							bdist=sum([v.totalcost_wolast for v in vehs if v.direct_flag==False])
							adist=sum([v.totalcost_wolast for v in vehs_tmp if v.direct_flag==False])

							bload=sum([max(v.load_onbrd-v.cap,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[0] for v in vehs if v.direct_flag==False])
							bload2=sum([max(v.load_onbrd2-v.cap2,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[1] for v in vehs if v.direct_flag==False])
							aload=sum([max(v.load_onbrd-v.cap,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[0] for v in vehs_tmp if v.direct_flag==False])
							aload2=sum([max(v.load_onbrd2-v.cap2,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[1] for v in vehs_tmp if v.direct_flag==False])

							btime=sum([v.lv[-2] if v.direct_flag==False and v.route[-2].custno!="0" else v.lv[-3] if v.direct_flag==False and v.route[-2].custno=="0" else 0 for v in vehs])
							atime=sum([v.lv[-2] if v.direct_flag==False and v.route[-2].custno!="0" else v.lv[-3] if v.direct_flag==False and v.route[-2].custno=="0" else 0 for v in vehs_tmp])

							if argvs.management_etable:
								bpower=sum([get_etable(v.vtype, v.etype,v.lv[j],argvs.management_etable)[v.route[j].spotno][v.route[j+1].spotno] for v in vehs for j in range(len(v.route)-2) if v.direct_flag==False and v.route[j+1].custno!="0"])
								apower=sum([get_etable(v.vtype, v.etype,v.lv[j],argvs.management_etable)[v.route[j].spotno][v.route[j+1].spotno] for v in vehs_tmp for j in range(len(v.route)-2) if v.direct_flag==False and v.route[j+1].custno!="0"])
							else:
								bpower,apower=0.0,0.0

							if argvs.management_xtable:
								bexp=sum([exp_xtable(v.route[j],v.route[j+1],get_xtable(v.vtype, v.lv[j],argvs.management_xtable)) for v in vehs for j in range(len(v.route)-2) if v.direct_flag==False and v.route[j+1].custno!="0"])
								aexp=sum([exp_xtable(v.route[j],v.route[j+1],get_xtable(v.vtype, v.lv[j],argvs.management_xtable)) for v in vehs_tmp for j in range(len(v.route)-2) if v.direct_flag==False and v.route[j+1].custno!="0"])
							else:
								bexp,aexp=0.0,0.0
							
							if argvs.avetime_ape_flag==True:
								time_error=calc_avetime_APE(vehs_tmp,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avetime_ae_flag==True:
								time_error=calc_avetime_AE(vehs_tmp,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
							else:
								time_error=0.0
						
							if argvs.avevisits_ape_flag==True:
								visits_error=calc_avevisits_APE(vehs_tmp,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
							elif argvs.avevisits_ae_flag==True:
								visits_error=calc_avevisits_AE(vehs_tmp,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
							else:
								visits_error=0.0

							if argvs.avedist_ape_flag==True:
								dist_error=calc_avedist_APE(vehs_tmp,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avedist_ae_flag==True:
								dist_error=calc_avedist_AE(vehs_tmp,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
							else:
								dist_error=0.0

							#未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
							bunass,aunass=0,0
							if argvs.opt_unassigned_flag==True:
								aunass = len([c for v in t_vehs for c in v.route if v.reserved_v_flag==True and c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
								bunass = len([c for v in vehs for c in v.route if v.reserved_v_flag==True and c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

							ires, _ = improved_or_not(atpen,btpen,adist,bdist,aload,bload,aload2,bload2,time_error,argvs.time_error,visits_error,argvs.visits_error,dist_error,argvs.dist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass)
										

							if ires==False:
								break

							if argvs.avetime_ape_flag==True:
								argvs.time_error=calc_avetime_APE(vehs,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avetime_ae_flag==True:
								argvs.time_error=calc_avetime_AE(vehs,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

							if argvs.avevisits_ape_flag==True:
								argvs.visits_error=calc_avevisits_APE(vehs,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
							elif argvs.avevisits_ae_flag==True:
								argvs.visits_error=calc_avevisits_AE(vehs,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

							if argvs.avedist_ape_flag==True:
								argvs.dist_error=calc_avedist_APE(vehs,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avedist_ae_flag==True:
								argvs.dist_error=calc_avedist_AE(vehs,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

							min_totalcost_wolast=totalcost_wolast
							vehs = copy.deepcopy(vehs_tmp)
							sLog = ["ESPOT MINIMUM LCOST UPDATED TO ",round(min_totalcost_wolast,2)]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"
							if rank==0:
								logging.log(logging.INFO,sLogBuf)
							sLogBuf_veh = "\n"
							used_customers=[]
							for v in vehs:
								# v.output_ev(argvs) ##20200626
								sLogBuf_veh = v.output_ev(argvs, sLogBuf_veh,used_customers,divided)
								sLogBuf_veh += "\n"
							if rank==0:
								logging.log(logging.INFO,sLogBuf_veh)
							sLogBuf = "\n"
							sLog = ["===== Evplan improvement route: TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"
							sLog = ["===== Evplan improvement route: TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"

							sLogBuf += "\n"
							totaltime,totaltime_wolast=0,0
							for v in vehs:
								if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
									totaltime+=v.lv[-1]-v.arr[0]
									for j in range(len(v.route)-2,0,-1):
										if v.route[j].custno!="0":
											totaltime_wolast+=v.lv[j]-v.arr[0]
											break
							sLog = ["===== Evplan improvement route: TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"
							sLog = ["===== Evplan improvement route: TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"
							break

					else:
						lack_charge_flag = False #### 電欠チェックのため
						while(1):
							#### 電欠チェック
							for t_v in vehs_tmp:
								if t_v.direct_flag==True:
									continue
								for j,k in zip(t_v.rem_batt, t_v.chg_batt):
									if j-k < t_v.e_margin:
										lack_charge_flag = True
										break 
								if lack_charge_flag == True:
									break
							if lack_charge_flag == True:
								break

							for v in vehs_tmp:
								v.update_totalcost_dtable(argvs)
							btpen=sum([max(0.0,v.st[j]-v.route[j].due_fs) for v in vehs for j in range(1,len(v.route)) if v.direct_flag==False])+sum([max(0.0,v.lv[-1]-v.endhour) for v in vehs if v.direct_flag==False])
							atpen=sum([max(0.0,v.st[j]-v.route[j].due_fs) for v in vehs_tmp for j in range(1,len(v.route)) if v.direct_flag==False])+sum([max(0.0,v.lv[-1]-v.endhour) for v in vehs_tmp if v.direct_flag==False])
							if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
								for v,tv in zip(vehs,vehs_tmp):
									if is_reserved(v,argvs)==False and is_reserved(tv,argvs)==False:
										atpen,btpen=return_lutime_penalty(tv.lv[-1]-tv.arr[0],argvs.lowertime,argvs.uppertime,v.lv[-1]-v.arr[0],atpen,btpen)
							
							bdist=sum([v.totalcost for v in vehs if v.direct_flag==False])
							adist=sum([v.totalcost for v in vehs_tmp if v.direct_flag==False])

							bload=sum([max(v.load_onbrd-v.cap,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[0] for v in vehs if v.direct_flag==False])
							bload2=sum([max(v.load_onbrd2-v.cap2,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[1] for v in vehs if v.direct_flag==False])
							aload=sum([max(v.load_onbrd-v.cap,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[0] for v in vehs_tmp if v.direct_flag==False])
							aload2=sum([max(v.load_onbrd2-v.cap2,0.0)+calc_vehicle_loadpickup_penalty(v.route,v)[1] for v in vehs_tmp if v.direct_flag==False])
							
							btime=sum([v.lv[-1] for v in vehs if v.direct_flag==False])
							atime=sum([v.lv[-1] for v in vehs_tmp if v.direct_flag==False])

							if argvs.management_etable:
								bpower=sum([get_etable(v.vtype, v.etype,v.lv[j],argvs.management_etable)[v.route[j].spotno][v.route[j+1].spotno] for v in vehs for j in range(len(v.route)-1) if v.direct_flag==False])
								apower=sum([get_etable(v.vtype, v.etype,v.lv[j],argvs.management_etable)[v.route[j].spotno][v.route[j+1].spotno] for v in vehs_tmp for j in range(len(v.route)-1) if v.direct_flag==False])
							else:
								bpower,apower=0.0,0.0

							if argvs.management_xtable:
								bexp=sum([exp_xtable(v.route[j],v.route[j+1],get_xtable(v.vtype, v.lv[j],argvs.management_xtable)) for v in vehs for j in range(len(v.route)-1) if v.direct_flag==False])
								aexp=sum([exp_xtable(v.route[j],v.route[j+1],get_xtable(v.vtype, v.lv[j],argvs.management_xtable)) for v in vehs_tmp for j in range(len(v.route)-1) if v.direct_flag==False])
							else:
								bexp,aexp=0.0,0.0
							
							if argvs.avetime_ape_flag==True:
								time_error=calc_avetime_APE(vehs_tmp,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avetime_ae_flag==True:
								time_error=calc_avetime_AE(vehs_tmp,[],argvs.avetime_ae,argvs.lastc_flag,argvs)
							else:
								time_error=0.0

							if argvs.avevisits_ape_flag==True:
								visits_error=calc_avevisits_APE(vehs_tmp,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
							elif argvs.avevisits_ae_flag==True:
								visits_error=calc_avevisits_AE(vehs_tmp,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)
							else:
								visits_error=0.0

							if argvs.avedist_ape_flag==True:
								dist_error=calc_avedist_APE(vehs_tmp,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avedist_ae_flag==True:
								dist_error=calc_avedist_AE(vehs_tmp,[],argvs.avedist_ae,argvs.lastc_flag,argvs)
							else:
								dist_error=0.0
							
							#未割り当て荷物最適化ペナルティの算出(重み付けはここではしない)
							bunass,aunass=0,0
							if argvs.opt_unassigned_flag==True:
								aunass = len([c for v in t_vehs for c in v.route if v.reserved_v_flag==True and c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])
								bunass = len([c for v in vehs for c in v.route if v.reserved_v_flag==True and c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])

							ires, _ = improved_or_not(atpen,btpen,adist,bdist,aload,bload,aload2,bload2,time_error,argvs.time_error,visits_error,argvs.visits_error,dist_error,argvs.dist_error,argvs, atime, btime,apower,bpower,aexp,bexp,aunass,bunass)

							if ires==False:
								break

							if argvs.avetime_ape_flag==True:
								argvs.time_error=calc_avetime_APE(vehs,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avetime_ae_flag==True:
								argvs.time_error=calc_avetime_AE(vehs,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

							if argvs.avevisits_ape_flag==True:
								argvs.visits_error=calc_avevisits_APE(vehs,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
							elif argvs.avevisits_ae_flag==True:
								argvs.visits_error=calc_avevisits_AE(vehs,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

							if argvs.avedist_ape_flag==True:
								argvs.dist_error=calc_avedist_APE(vehs,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
							elif argvs.avedist_ae_flag==True:
								argvs.dist_error=calc_avedist_AE(vehs,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

							min_totalcost=totalcost
							vehs = copy.deepcopy(vehs_tmp)
							sLog = ["ESPOT MINIMUM LCOST UPDATED TO ",round(min_totalcost_wolast,2)]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"
							if rank==0:
								logging.log(logging.INFO,sLogBuf)
							sLogBuf_veh = "\n"
							used_customers=[]
							for v in vehs:
								# v.output_ev(argvs) ##20200626
								sLogBuf_veh = v.output_ev(argvs, sLogBuf_veh,used_customers,divided)
								sLogBuf_veh += "\n"
							if rank==0:
								logging.log(logging.INFO,sLogBuf_veh)
							sLogBuf = "\n"
							sLog = ["===== Evplan improvement route: TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"
							sLog = ["===== Evplan improvement route: TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"

							sLogBuf += "\n"
							totaltime,totaltime_wolast=0,0
							for v in vehs:
								if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
									totaltime+=v.lv[-1]-v.arr[0]
									for j in range(len(v.route)-2,0,-1):
										if v.route[j].custno!="0":
											totaltime_wolast+=v.lv[j]-v.arr[0]
											break
							sLog = ["===== Evplan improvement route: TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"
							sLog = ["===== Evplan improvement route: TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
							sLogBuf += " ".join(list(map(str,sLog))) + "\n"
							break

###		shaw_cost_history_totalcost+=[totalcost]
###		shaw_cost_history_totalcost_wolast+=[totalcost_wolast]

	#拠点に帰る直前の充電スポットは取り除く
	remove_an_espot_justbefore_depot(vehs,custs3,e_spots,argvs)
	totalcost,totalcost_wolast=0,0
	for v in vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			# mainで同様のログを出力しているためコメントアウト
			# # printlog(["===== VEHICLE ",v.vehno," ====="])
			# sLog = ["===== VEHICLE ",v.vehno," ====="]
			# sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			# logging.log(logging.INFO,sLogBuf)
			# v.output_ev(argvs) ##20200626
			# sLogBuf = "\n"
			# # printlog(["\n"])
			# sLogBuf += "\n"
			totalcost+=v.totalcost
			totalcost_wolast+=v.totalcost_wolast
	if min_totalcost_wolast>totalcost_wolast:
		min_totalcost_wolast=totalcost_wolast
	if min_totalcost>totalcost:
		min_totalcost=totalcost
###	shaw_cost_history_totalcost+=[totalcost]
###	shaw_cost_history_totalcost_wolast+=[totalcost_wolast]

	#return (custs3, vehs)

	if argvs.opt_unassigned_flag==True:
		#未割り当て荷物最適化で一旦取り除いた予約車両を元に戻す
		vehs = vehs + reserved_vehs

	#同じCUSTNOが連続する場合は削除する
	if argvs.bulkShipping_flag==False:
		for v in vehs:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue
			i=1
			while True:
				if i>len(v.route)-2:
					break

				if v.route[i].custno==v.route[i-1].custno:
					if v.route[i].custno!="0":
						for ac in v.route[i-1].additionalcust:
							ac.dem+=v.route[i].dem
							ac.dem2+=v.route[i].dem2
							ac.demdivideunit+=v.route[i].demdivideunit
					remove_customers_specified([v.route[i]],v,argvs)
					i=1
					continue

				i+=1

			if v.route[-2].custno=="0" :
				if argvs.pickup_flag==True and v.route[-1].custno!="0":
					pick_opt_flag=False
					depo_idx=[]
					for i,c in enumerate(v.route[0:-2]):
						if c.custno=="0":
							depo_idx.append(i)

					for i in range(depo_idx[-1]+1,len(v.route)-1):
						if v.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break

					if pick_opt_flag==True: #集荷最適化の場合は最終訪問先直前のDEPOは削除しない
						continue

				remove_customers_specified([v.route[-2]],v,argvs)
	else:
		for v in vehs:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue
			i=1
			while True:
				if i>len(v.route)-2:
					break

				if v.route[i].customers[0].custno=="0" and v.route[i-1].customers[0].custno=="0":
					remove_customers_specified([v.route[i]],v,argvs)
					i=1
					continue

				i+=1

			if v.route[-2].customers[0].custno=="0" :
				if argvs.pickup_flag==True and v.route[-1].customers[0].custno!="0":
					pick_opt_flag=False
					depo_idx=[]
					for i,c in enumerate(v.route[0:-2]):
						if c.customers[0].custno=="0":
							depo_idx.append(i)

					for i in range(depo_idx[-1]+1,len(v.route)-1):
						if v.route[i].requestType=="PICKUP":
							pick_opt_flag=True
							break

					if pick_opt_flag==True: #集荷最適化の場合は最終訪問先直前のDEPOは削除しない
						continue

				remove_customers_specified([v.route[-2]],v,argvs)

	if (argvs.delaystart_flag or argvs.delaystart2_flag):
		delay_arr_time(vehs,argvs)
		if argvs.delaystart2_flag:
			for v in vehs:
				v.arr[0]=v.delay_arr[0]
				v.update_totalcost_dtable(argvs)

	oRetVehicles = [] 
	for v in vehs:
		#現在(=最新)のatpenとaloadとAPEを保存する
		if argvs.lastc_flag:
			for i in reversed(range(0,len(v.route))):
				if v.route[i].custno=="0" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
					last_idx=i
				else:
					break
			v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,last_idx)])+max(0.0,v.lv[last_idx-1]-v.endhour)
		else:
			v.time_pen=sum([max(0.0,v.st[i]-v.route[i].due_fs) for i in range(1,len(v.route))])+max(0.0,v.lv[-1]-v.endhour)

		if argvs.pickup_flag==True:
			max_load_pen,max_load_pen2=calc_vehicle_loadpickup_penalty(v.route,v)
		else:
			max_load_pen,max_load_pen2=0,0

		depo_idx1=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

		load_pen,load_pen2=0,0
		for j in range(len(depo_idx1)-1):
			load_onbrd,load_onbrd2=0,0
			for k in range(depo_idx1[j]+1,depo_idx1[j+1]):
				if v.route[k].requestType=="DELIVERY":
					if v.route[k].custno[0] != "b":
						load_onbrd+=v.route[k].dem
						load_onbrd2+=v.route[k].dem2

			load_pen+=max(load_onbrd-v.cap,0)
			load_pen2+=max(load_onbrd2-v.cap2,0)

		v.load_pen =load_pen+max_load_pen
		v.load_pen2 = load_pen2+max_load_pen2

		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])>=1:
			oRetVehicles.append(v)

	argvs.atpen=sum([v.time_pen for v in vehs])
	argvs.aload=sum([v.load_pen+v.load_pen2 for v in vehs])
	if argvs.avetime_ape_flag==True:
		argvs.time_error=calc_avetime_APE(vehs,[],argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
	elif argvs.avetime_ae_flag==True:
		argvs.time_error=calc_avetime_AE(vehs,[],argvs.avetime_ae,argvs.lastc_flag,argvs)

	if argvs.avevisits_ape_flag==True:
		argvs.visits_error=calc_avevisits_APE(vehs,[],argvs.avevisits_ape,argvs.bulkShipping_flag,argvs.break_flag,argvs)
	elif argvs.avevisits_ae_flag==True:
		argvs.visits_error=calc_avevisits_AE(vehs,[],argvs.avevisits_ae,argvs.bulkShipping_flag,argvs)

	if argvs.avedist_ape_flag==True:
		argvs.dist_error=calc_avedist_APE(vehs,[],argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
	elif argvs.avedist_ae_flag==True:
		argvs.dist_error=calc_avedist_AE(vehs,[],argvs.avedist_ae,argvs.lastc_flag,argvs)

	# logging.log(logging.INFO,sLogBuf_insert)
	if rank==0:
		logging.log(logging.INFO,sLogBuf)

	check_hard_constraint(oRetVehicles,argvs)

	return (custs3, oRetVehicles) 

def skill_operation(custs3,vehs,skills,argvs):
	sLogBuf = "\n"
	if skills != None and argvs.init_changecust=="free":
		td = datetime.datetime.today()
		ls_starttime = time.time()
		##20180904
		if argvs.skillshuffle_flag==True:
			sLog = ["===== Skill: IMPROVEMENTS_START ===== at ",td]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			for v in vehs[:]:
				if len([ c for c in v.route[1:-1] if c.custno!="0"]) < 1:
					vehs.remove(v)

			#台数削減用
			skills_temp=skills[:]
			if argvs.decr_vnum:
				veh_list=vehs[:]
				for sk in skills_temp[:]:
					for v in veh_list:
						if float(sk[1])==v.opskill and float(sk[2])==v.drskill:
							veh_list.remove(v)
							break
					else:
						skills_temp.remove(sk)

			vlist = []
			vlist_dr_op_sort = []
			vlist_op_dr_sort = []
			vlist_route_sort = []
			for v in vehs:
				if v.direct_flag==True or v.reserved_v_flag==True: #直送便、未割り当て荷物予約車両だったらスキルシャッフルしない
					continue

				vlist.append([v.vehno, v.opskill, v.drskill, len(v.route), v.totalcost, v.totalcost_wolast, v.opskill, v.drskill])
				vlist_dr_op_sort = sorted(vlist, key = lambda x: (x[2], x[1]), reverse=True)
				vlist_op_dr_sort = sorted(vlist, key = lambda x: (x[1], x[2]), reverse=True)
				vlist_route_sort = sorted(vlist, key = lambda x: x[3])

			if argvs.lastc_flag == True:
				#最初の解の最後の配送先までの仕事時間合計 total working time of original output
				timeini = 0.0 
				for v in vehs: 
					last_idx = get_last_idx(v, argvs)
					if v.direct_flag==False and v.route[last_idx].custno!="0":
						timeini = timeini + v.lv[last_idx]-v.arr[0]
					elif v.direct_flag==False and v.route[last_idx].custno=="0":
						timeini = timeini + v.lv[last_idx]-v.arr[0]
				vlist_totalcost_wolast_sort = sorted(vlist, key = lambda x: x[5])

				#drskillで最適化した仕事時間合計 total working time of driver skill optimization
				timedr,vlist_dr = 0.0,[]
				for sk,to in zip(vlist_dr_op_sort, vlist_totalcost_wolast_sort): #vlist_dr_op_sortに対してvlist_totalcost_wolast_sortの昇順で割当て
					vlist_dr.append([to[0], sk[1], sk[2], sk[3], sk[4], sk[5], sk[6], sk[7]])
				vlist_dr.sort(key = lambda x: (-x[2], x[3])) #drskill(降順)が同じ値の範囲は軒数の昇順(drと軒数をキーにしてソート)

				skvs=copy.deepcopy(vehs)

				# 休憩機能に伴う退避
				t_ttable = t_dcopy(argvs.management_ttable)
				t_dtable = t_dcopy(argvs.management_dtable)
				t_etable = t_dcopy(argvs.management_etable)
				t_xtable = t_dcopy(argvs.management_xtable)
				t_route = r_backup(vehs)

				for i in range(len(vlist_dr)):

					# 休憩機能に伴う復元
					argvs.management_ttable = t_dcopy(t_ttable)
					argvs.management_dtable = t_dcopy(t_dtable)
					argvs.management_etable = t_dcopy(t_etable)
					argvs.management_xtable = t_dcopy(t_xtable)
					vehs = r_restore(vehs, t_route, argvs)

					for v in vehs:
						if v.vehno == vlist_dr[i][0] and v.direct_flag==False:
							skv = copy.deepcopy(v)
							break
					skvreturn = skvcheck(vlist_dr, skvs, skv, vlist_dr[i][1], vlist_dr[i][2], argvs.lowertime, argvs.uppertime,custs3,argvs) #skvの時間再計算、チェック
					last_idx = get_last_idx(skv, argvs)
					if skvreturn == True and skv.route[last_idx].custno!="0":
						timedr = timedr + skv.lv[last_idx]-skv.arr[0] #OKなら時間を累積合計
						continue
					elif skvreturn == True and skv.route[last_idx].custno=="0":
						timedr = timedr + skv.lv[last_idx-1]-skv.arr[0] #OKなら時間を累積合計
						continue
					else: #NGならvlist_drリストのその後を順次再計算
						for j in range(i+1, len(vlist_dr)): #理想の条件から徐々に緩めていく 計算オーダ(範囲)はn2乗
							skvreturn = skvcheck(vlist_dr, skvs, skv, vlist_dr[j][1], vlist_dr[j][2], argvs.lowertime, argvs.uppertime,custs3,argvs)
							if skvreturn == True: #OKになったらその要素のvehno以外をi番目に変更してつぎからまた繰り返し(後のリストが変更される)
								vlist_dr[i][1:8],vlist_dr[j][1:8] = vlist_dr[j][1:8],vlist_dr[i][1:8] #vlist_dr[i]の[1]から[7]([1:8])を[j]と入替え
								if skv.route[last_idx].custno!="0":
									timedr = timedr + skv.lv[last_idx]-skv.arr[0] #OKなら時間を累積合計
								else:
									timedr = timedr + skv.lv[last_idx-1]-skv.arr[0] #OKなら時間を累積合計
								break
							else:
								continue
						else:
							timedr = 100000.0 #NG判定用に100000.0にする
							break

				# 休憩機能に伴う復元
				argvs.management_ttable = t_dcopy(t_ttable)
				argvs.management_dtable = t_dcopy(t_dtable)
				argvs.management_etable = t_dcopy(t_etable)
				argvs.management_xtable = t_dcopy(t_xtable)
				vehs = r_restore(vehs, t_route, argvs)

				#opskillで最適化した仕事時間合計 total working time of operation skill optimization
				timeop,vlist_op = 0.0,[]
				for sk,to in zip(vlist_op_dr_sort, vlist_route_sort): #vlist_op_dr_sortに対してvlist_route_sortの昇順で割当て
					vlist_op.append([to[0], sk[1], sk[2], sk[3], sk[4], sk[5], sk[6], sk[7]])
				vlist_op.sort(key = lambda x: (-x[1], x[5])) #opskill(降順)が同じ値の範囲は距離の昇順(opと距離をキーにしてソート)

				skvs=copy.deepcopy(vehs)

				# 休憩機能に伴う退避
				t_ttable = t_dcopy(argvs.management_ttable)
				t_dtable = t_dcopy(argvs.management_dtable)
				t_etable = t_dcopy(argvs.management_etable)
				t_xtable = t_dcopy(argvs.management_xtable)
				t_route = r_backup(vehs)

				for i in range(len(vlist_op)):

					# 休憩機能に伴う復元
					argvs.management_ttable = t_dcopy(t_ttable)
					argvs.management_dtable = t_dcopy(t_dtable)
					argvs.management_etable = t_dcopy(t_etable)
					argvs.management_xtable = t_dcopy(t_xtable)
					vehs = r_restore(vehs, t_route, argvs)

					for v in vehs:
						if v.vehno == vlist_op[i][0] and v.direct_flag==False:
							skv = copy.deepcopy(v)
							break
					skvreturn = skvcheck(vlist_op, skvs, skv, vlist_op[i][1], vlist_op[i][2], argvs.lowertime, argvs.uppertime,custs3,argvs) #skvの時間再計算、チェック
					last_idx = get_last_idx(skv, argvs)
					if skvreturn == True and skv.route[last_idx].custno!="0":
						timeop = timeop + skv.lv[last_idx]-skv.arr[0] #OKなら時間を累積合計
						continue
					elif skvreturn == True and skv.route[last_idx].custno=="0":
						timeop = timeop + skv.lv[last_idx-1]-skv.arr[0] #OKなら時間を累積合計
						continue
					else: #NGならvlist_drリストのその後を順次再計算
						for j in range(i+1, len(vlist_op)): #理想の条件から徐々に緩めていく　計算オーダ(範囲)はn2乗
							skvreturn = skvcheck(vlist_op, skvs, skv, vlist_op[j][1], vlist_op[j][2], argvs.lowertime, argvs.uppertime,custs3,argvs)
							if skvreturn == True: #OKになったらその要素のvehno以外をi番目に変更してつぎからまた繰り返し(後のリストが変更される)
								vlist_op[i][1:8],vlist_op[j][1:8] = vlist_op[j][1:8],vlist_op[i][1:8] #vlist_op[i]の[1]から[7]([1:8])を[j]と入替え
								if skv.route[last_idx].custno!="0":
									timeop = timeop + skv.lv[last_idx]-skv.arr[0] #OKなら時間を累積合計
								else:
									timeop = timeop + skv.lv[last_idx-1]-skv.arr[0] #OKなら時間を累積合計
								break
							else:
								continue
						else:
							timeop = 100000.0 #NG判定用に100000.0にする
							break

				# 休憩機能に伴う復元
				argvs.management_ttable = t_dcopy(t_ttable)
				argvs.management_dtable = t_dcopy(t_dtable)
				argvs.management_etable = t_dcopy(t_etable)
				argvs.management_xtable = t_dcopy(t_xtable)
				vehs = r_restore(vehs, t_route, argvs)

			else:
				#最初の解の最後の拠点までの仕事時間合計 total working time of original output
				timeini = 0.0 
				for v in vehs: 
					if v.direct_flag==False:
						timeini = timeini + v.arr[(len(v.route)-1)]-v.arr[0]
				vlist_totalcost_sort = sorted(vlist, key = lambda x: x[4])
			
				#drskillで最適化した仕事時間合計 total working time of driver skill optimization
				timedr,vlist_dr = 0.0,[]
				for sk,to in zip(vlist_dr_op_sort, vlist_totalcost_sort): #vlist_dr_op_sortに対してvlist_totalcost_sortの昇順で割当て
					vlist_dr.append([to[0], sk[1], sk[2], sk[3], sk[4], sk[5], sk[6], sk[7]])
				vlist_dr.sort(key = lambda x: (-x[2], x[3])) #drskill(降順)が同じ値の範囲は軒数の昇順(drと軒数をキーにしてソート)

				skvs=copy.deepcopy(vehs)

				# 休憩機能に伴う退避
				t_ttable = t_dcopy(argvs.management_ttable)
				t_dtable = t_dcopy(argvs.management_dtable)
				t_etable = t_dcopy(argvs.management_etable)
				t_xtable = t_dcopy(argvs.management_xtable)
				t_route = r_backup(vehs)

				for i in range(len(vlist_dr)):

					# 休憩機能に伴う復元
					argvs.management_ttable = t_dcopy(t_ttable)
					argvs.management_dtable = t_dcopy(t_dtable)
					argvs.management_etable = t_dcopy(t_etable)
					argvs.management_xtable = t_dcopy(t_xtable)
					vehs = r_restore(vehs, t_route, argvs)

					for v in vehs:
						if v.vehno == vlist_dr[i][0] and v.direct_flag==False:
							skv = copy.deepcopy(v)
							break
					skvreturn = skvcheck(vlist_dr, skvs, skv, vlist_dr[i][1], vlist_dr[i][2], argvs.lowertime, argvs.uppertime,custs3,argvs) #skvの時間再計算、チェック
					if skvreturn == True:
						timedr = timedr + skv.lv[(len(skv.route)-1)]-skv.arr[0] #OKなら時間を累積合計
						continue
					else: #NGならvlist_drリストのその後を順次再計算
						for j in range(i+1, len(vlist_dr)): #理想の条件から徐々に緩めていく 計算オーダ(範囲)はn2乗
							skvreturn = skvcheck(vlist_dr, skvs, skv, vlist_dr[j][1], vlist_dr[j][2], argvs.lowertime, argvs.uppertime,custs3,argvs)
							if skvreturn == True: #OKになったらその要素のvehno以外をi番目に変更してつぎからまた繰り返し(後のリストが変更される)
								vlist_dr[i][1:8],vlist_dr[j][1:8] = vlist_dr[j][1:8],vlist_dr[i][1:8] #vlist_dr[i]の[1]から[7]([1:8])を[j]と入替え
								timedr = timedr + skv.lv[(len(skv.route)-1)]-skv.arr[0] #OKなら時間を累積合計
								break
							else:
								continue
						else:
							timedr = 100000.0 #NG判定用に100000.0にする
							break

				# 休憩機能に伴う復元
				argvs.management_ttable = t_dcopy(t_ttable)
				argvs.management_dtable = t_dcopy(t_dtable)
				argvs.management_etable = t_dcopy(t_etable)
				argvs.management_xtable = t_dcopy(t_xtable)
				vehs = r_restore(vehs, t_route, argvs)

				#opskillで最適化した仕事時間合計 total working time of operation skill optimization
				timeop,vlist_op = 0.0,[]
				for sk,to in zip(vlist_op_dr_sort, vlist_route_sort): #vlist_op_dr_sortに対してvlist_route_sortの昇順で割当て
					vlist_op.append([to[0], sk[1], sk[2], sk[3], sk[4], sk[5], sk[6], sk[7]])
				vlist_op.sort(key = lambda x: (-x[1], x[4])) #opskill(降順)が同じ値の範囲は距離の昇順(opと距離をキーにしてソート)

				skvs=copy.deepcopy(vehs)

				# 休憩機能に伴う退避
				t_ttable = t_dcopy(argvs.management_ttable)
				t_dtable = t_dcopy(argvs.management_dtable)
				t_etable = t_dcopy(argvs.management_etable)
				t_xtable = t_dcopy(argvs.management_xtable)
				t_route = r_backup(vehs)

				for i in range(len(vlist_op)):

					# 休憩機能に伴う復元
					argvs.management_ttable = t_dcopy(t_ttable)
					argvs.management_dtable = t_dcopy(t_dtable)
					argvs.management_etable = t_dcopy(t_etable)
					argvs.management_xtable = t_dcopy(t_xtable)
					vehs = r_restore(vehs, t_route, argvs)

					for v in vehs:
						if v.vehno == vlist_op[i][0] and v.direct_flag==False:
							skv = copy.deepcopy(v)
							break
					skvreturn = skvcheck(vlist_op, skvs, skv, vlist_op[i][1], vlist_op[i][2], argvs.lowertime, argvs.uppertime,custs3,argvs) #skvの時間再計算、チェック
					if skvreturn == True:
						timeop = timeop + skv.lv[(len(skv.route)-1)]-skv.arr[0] #OKなら時間を累積合計
						continue
					else: #NGならvlist_drリストのその後を順次再計算
						for j in range(i+1, len(vlist_op)): #理想の条件から徐々に緩めていく 計算オーダ(範囲)はn2乗
							skvreturn = skvcheck(vlist_op, skvs, skv, vlist_op[j][1], vlist_op[j][2], argvs.lowertime, argvs.uppertime,custs3,argvs)
							if skvreturn == True: #OKになったらその要素のvehno以外をi番目に変更してつぎからまた繰り返し(後のリストが変更される)
								vlist_op[i][1:8],vlist_op[j][1:8] = vlist_op[j][1:8],vlist_op[i][1:8] #vlist_op[i]の[1]から[7]([1:8])を[j]と入替え
								timeop = timeop + skv.lv[(len(skv.route)-1)]-skv.arr[0] #OKなら時間を累積合計
								break
							else:
								continue
						else:
							timeop = 100000.0 #NG判定用に100000.0にする
							break

				# 休憩機能に伴う復元
				argvs.management_ttable = t_dcopy(t_ttable)
				argvs.management_dtable = t_dcopy(t_dtable)
				argvs.management_etable = t_dcopy(t_etable)
				argvs.management_xtable = t_dcopy(t_xtable)
				vehs = r_restore(vehs, t_route, argvs)

			#合計時間の短いものを採用、opskillとdrskillを上書き(時間は出力時に計算) select minimum total working time and overwrite opskill,drskill
			sLog = ["init_time, drskill_time, opskill_time",timeini,timedr,timeop]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			if compare_time(timedr , timeini)<0 and compare_time(timedr , timeop)<=0: #vlist_drを採用
				sLogBuf += "re_optimize_drskill\n"
				for v in vehs:
					if v.direct_flag==True or v.reserved_v_flag==True: #直送便、未割り当て荷物予約車両だったらスキルシャッフルしない
						continue
					for v_dr in vlist_dr:
						if v.vehno == v_dr[0]:
							v.opskill,v.drskill = v_dr[1],v_dr[2]
							v.update_arrtime_tw(argvs)
							if argvs.break_flag:
								_management_ttable = t_dcopy(argvs.management_ttable)
								_management_dtable = t_dcopy(argvs.management_dtable)
								_management_xtable = t_dcopy(argvs.management_xtable)
								_management_etable = t_dcopy(argvs.management_etable)
								_t_route = r_backup(vehs)
								tv = dcopy(v)
								tv = insert_breakspot(tv.takebreak, None, custs3, tv, vehs, argvs)
								if tv != None:
									v = dcopy(tv)
								else:
									argvs.management_ttable = t_dcopy(_management_ttable)
									argvs.management_dtable = t_dcopy(_management_dtable)
									argvs.management_xtable = t_dcopy(_management_xtable)
									argvs.management_etable = t_dcopy(_management_etable)
									vehs = r_restore(vehs, _t_route, argvs)
									continue
							break
					else:
						sLogBuf += "re_optimize_drskill error!\n"
			if compare_time(timeop , timeini)<0 and compare_time(timeop , timedr)<0: #vlist_opを採用
				sLogBuf += "re_optimize_opskill\n"
				for v in vehs:
					if v.direct_flag==True or v.reserved_v_flag==True: #直送便、未割り当て荷物予約車両だったらスキルシャッフルしない
						continue
					for v_op in vlist_op:
						if v.vehno == v_op[0]:
							v.opskill,v.drskill = v_op[1],v_op[2]
							v.update_arrtime_tw(argvs)
							if argvs.break_flag:
								_management_ttable = t_dcopy(argvs.management_ttable)
								_management_dtable = t_dcopy(argvs.management_dtable)
								_management_xtable = t_dcopy(argvs.management_xtable)
								_management_etable = t_dcopy(argvs.management_etable)
								_t_route = r_backup(vehs)
								tv = dcopy(v)
								tv = insert_breakspot(tv.takebreak, None, custs3, tv, vehs, argvs)
								if tv != None:
									v = dcopy(tv)
								else:
									argvs.management_ttable = t_dcopy(_management_ttable)
									argvs.management_dtable = t_dcopy(_management_dtable)
									argvs.management_xtable = t_dcopy(_management_xtable)
									argvs.management_etable = t_dcopy(_management_etable)
									vehs = r_restore(vehs, _t_route, argvs)
									continue
							break
					else:
						sLogBuf += "re_optimize_opskill error!\n"

			ls_endtime=time.time() ##20190917
			##ls_endtime=time.clock()
			td = datetime.datetime.today()
			sLog = ["===== Skill: IMPROVEMENTS_END ===== at ",td]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["===== Initial routes: IMPROVEMENT_TIME =====    ",round(ls_endtime-ls_starttime,1),"sec."]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		##20180904

		if argvs.skillshuffle_flag==True:	
			v_sklist = [] #outputのroute#と合わせるスキル設定を格納する(スキルにroute#が記述されていると限らない)
			for i,sk in enumerate(skills_temp[:]):
				v_sklist.append([vehs[i].vehno,sk[1],sk[2]])
			for v_sk in v_sklist:
				for v in [vt for vt in vehs if len(vt.route)>=3 and vt.direct_flag==False]:
					if v_sk[0] == v.vehno: #元々同じならそのまま何もしない
						continue
					if float(v_sk[1]) == v.opskill and float(v_sk[2]) == v.drskill:
						#vehicles中のsk[0]をv.vehnoにまず変更してからv.vehnoをsk[0]に変更する
						v.vehno = v_sk[0]
						break
			tvehs=[]
			for v_sk in v_sklist:
				for v in vehs:
					if v_sk[0]==v.vehno:
						tvehs.append(v)
						break
			if get_breakspot_pattern(tvehs, argvs)==3:
				for v in tvehs:
					for r in v.route:
						if r.custno[0] == 'b':
							tmpcustno = 'b' + str(v.vehno) + r.custno[2:]
							r.custno = tmpcustno
			vehs=tvehs

	if sLogBuf != "\n":
		if rank==0:
			logging.log(logging.INFO,sLogBuf)

	return vehs

#集荷荷物の違反量を計算
def calc_vehicle_loadpickup_penalty(route, vehicle):
	max_load_pen=0
	max_load_pen2=0
	depo_idx=[j for j,c in enumerate(route[:-1]) if c.custno=="0"]+[len(route)-1]
	load_onbrd=[sum([c.dem for c in route[depo_idx[i]+1:depo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(depo_idx)-1)]
	load_onbrd2=[sum([c.dem2 for c in route[depo_idx[i]+1:depo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(depo_idx)-1)]
			
	if len(route)>=2:
		for j in range(len(depo_idx)-1):
			load_pens=[]
			load_pens2=[]
			for i in range(depo_idx[j]+1,depo_idx[j+1]):
				if route[i].custno[0] != "b":
					if route[i].requestType=="PICKUP":
						load_onbrd[j]+=route[i].dem
						load_onbrd2[j]+=route[i].dem2
					else:
						load_onbrd[j]-=route[i].dem
						load_onbrd2[j]-=route[i].dem2
				
				if route[i].requestType=="PICKUP":
					# その地点での荷物量と車両の積載量を比較して、積載量を超えている値を違反値としてリストに格納
					load_pen=load_onbrd[j]-vehicle.cap
					if load_pen > 0:
						load_pens.append(load_pen)
				
					# その地点での荷物量と車両の積載量を比較して、積載量を超えている値を違反値としてリストに格納
					load_pen2=load_onbrd2[j]-vehicle.cap2
					if load_pen2 > 0:
						load_pens2.append(load_pen2)
			if len(load_pens) > 0:
				max_load_pen+=max(load_pens)
			if len(load_pens2) > 0:
				max_load_pen2+=max(load_pens2)
		
	return max_load_pen,max_load_pen2

def delay_arr_time(vehicles,argvs):
	if argvs.lastc_flag:
		for v in vehicles:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue
			#未割り当て荷物最適化 予約車両は除外する
			if argvs.break_flag==True or v.reserved_v_flag==True:
				v.delay_arr = v.arr[:]
				v.delay_st = v.st[:]
				v.delay_lv = v.lv[:]
				v.delay_totalcost = v.totalcost
				v.delay_totalcost_wolast = v.totalcost_wolast
				v.delay_rem_batt = v.rem_batt[:]
				v.delay_chg_batt = v.chg_batt[:]
				v.delay_slack_t = v.slack_t[:]
				v.delay_chg_batt_dict = copy.deepcopy(v.chg_batt_dict)
				#v.update_totalcost_dtable(argvs)
				continue

			depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
			servt_dict={}
			#配送時間
			for i in range(len(depo_idx)-1):
				servt_dict[v.route[depo_idx[i]]]=0
				servt=0
				for j in range(depo_idx[i]+1,depo_idx[i+1]):
					if not v.route[j].custno.startswith("e") and v.route[j].requestType=="DELIVERY" and v.route[j].custno!=v.route[j-1].custno and not v.route[j].custno.startswith("b"):
						servt+=v.route[j].depotservt
				if v.route[depo_idx[i]+1].custno!="0":
					servt_dict[v.route[depo_idx[i]]]+=servt+v.depotservt
				else:
					servt_dict[v.route[depo_idx[i]]]+=servt
			#集荷時間
			servt_dict[v.route[len(v.route)-1]]=0
			for i in range(1,len(depo_idx)):
				servt=0
				for j in range(depo_idx[i-1]+1,depo_idx[i]):
					if not v.route[j].custno.startswith("e") and v.route[j].requestType=="PICKUP" and v.route[j].custno!=v.route[j-1].custno:
						servt+=v.route[j].depotservt
				servt_dict[v.route[depo_idx[i]]]+=servt

			load=[0 for c in v.route]
			load2=[0 for c in v.route]
			for i in range(len(v.route)-1):
				if i in depo_idx:
					for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
						if v.route[j].requestType=="DELIVERY":
							if v.route[j].custno[0] != "b":
								load[i]+=v.route[j].dem
								load2[i]+=v.route[j].dem2
				else:
					if v.route[i].custno[0] != "b":
						if v.route[i].requestType=="DELIVERY":
							load[i]=load[i-1]-v.route[i].dem
							load2[i]=load2[i-1]-v.route[i].dem2
						else:
							load[i]=load[i-1]+v.route[i].dem
							load2[i]=load2[i-1]+v.route[i].dem2

			for i in reversed(range(len(load))):
				if i in depo_idx and i+1 in depo_idx:
					load[i]=load[i+1]
					load2[i]=load2[i+1]

			load=[i if i>1e-9 else 0 for i in load] #誤差対策
			load2=[i if i>1e-9 else 0 for i in load2] #誤差対策
				
			no_park_idx=[]
			for c in v.route[depo_idx[0]+1:depo_idx[1]]:
				if c.requestType=="DELIVERY":
					break
			else:
				if load[0]==0 and load2[0]==0:
					no_park_idx.append(0)
			
			for i in range(1,len(depo_idx)-1):
				if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
					for c in v.route[depo_idx[i]+1:depo_idx[i+1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
							no_park_idx.append(depo_idx[i])
			if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
				no_park_idx.append(depo_idx[-1])


			v.delay_arr=[0 for i in range(len(v.arr))]

			for i in reversed(range(0,len(v.route))):
				if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
					last_idx=i
				else:
					break

			if len(v.route)==2 or v.route[last_idx-1].spotid!=v.route[last_idx-2].spotid:
				v.delay_arr[last_idx-1]=max(v.route[last_idx-1].ready_fs-v.route[last_idx-1].parkt_arrive,v.arr[last_idx-1]) #一番最後の配送先の到着時刻
			else:
				v.delay_arr[last_idx-1]=max(v.route[last_idx-1].ready_fs,v.arr[last_idx-1]) #一番最後の配送先の到着時刻
			if v.route[last_idx-1] in servt_dict: 
				lv_t=v.delay_arr[last_idx-1]+servt_dict[v.route[last_idx-1]]*v.opskill
			else:
				lv_t=v.delay_arr[last_idx-1]+v.route[last_idx-1].servt*v.opskill
			if len(v.route)==2 or v.route[last_idx-1].spotid!=v.route[last_idx-2].spotid:
				lv_t+=v.route[last_idx-1].parkt_open
			if v.route[last_idx-1] in v.chg_batt_dict:
				lv_t+=v.chg_batt_dict[v.route[last_idx-1]]/v.route[last_idx-1].e_rate

			ttable5=get_ttable(v.vtype,lv_t,argvs.management_ttable)
			dtable5=get_dtable(v.vtype,lv_t,argvs.management_dtable)
			if argvs.management_etable:
				etable5=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
			if argvs.management_xtable:
				xtable5=get_xtable(v.vtype,lv_t,argvs.management_xtable)

			#通行不可なら遅延しない
			if ttable5[v.route[last_idx-1].spotno][v.route[last_idx].spotno]==-1 \
			or dtable5[v.route[last_idx-1].spotno][v.route[last_idx].spotno]==-1 \
			or (argvs.management_etable and etable5[v.route[last_idx-1].spotno][v.route[last_idx].spotno]==-1) \
			or (argvs.management_xtable and xtable5[v.route[last_idx-1].spotno][v.route[last_idx].spotno]==-1):
				v.delay_arr=v.arr[:]
				v.update_totalcost_dtable(argvs)
				continue

			v.delay_arr[last_idx]=lv_t+ttable5[v.route[last_idx-1].spotno][v.route[last_idx].spotno]*v.drskill

			if last_idx!=len(v.route)-1:
				lv_t=v.delay_arr[last_idx]+servt_dict[v.route[last_idx]]*v.opskill
				if len(v.route)==2 or v.route[last_idx].spotid!=v.route[last_idx-1].spotid:
					lv_t+=v.route[last_idx].parkt_open+v.route[last_idx].parkt_arrive
					
				ttable6=get_ttable(v.vtype,lv_t,argvs.management_ttable)
				dtable6=get_dtable(v.vtype,lv_t,argvs.management_dtable)
				if argvs.management_etable:
					etable6=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
				if argvs.management_xtable:
					xtable6=get_xtable(v.vtype,lv_t,argvs.management_xtable)

				#通行不可なら遅延しない
				if ttable6[v.route[last_idx].spotno][v.route[len(v.route)-1].spotno]==-1 \
				or dtable6[v.route[last_idx].spotno][v.route[len(v.route)-1].spotno]==-1 \
				or (argvs.management_etable and etable6[v.route[last_idx].spotno][v.route[len(v.route)-1].spotno]==-1) \
				or (argvs.management_xtable and xtable6[v.route[last_idx].spotno][v.route[len(v.route)-1].spotno]==-1):
					v.delay_arr=v.arr[:]
					v.update_totalcost_dtable(argvs)
					continue

				v.delay_arr[len(v.route)-1]=lv_t+ttable6[v.route[last_idx].spotno][v.route[len(v.route)-1].spotno]*v.drskill


			start_idx=last_idx-2
			for i in range(len(v.route)-1):
				if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0 or v.route[i].custno.startswith("e")) and compare_time(v.st[i],v.route[i].due_fs)>0:
					start_idx=i-1
					for j in range(i,len(v.route)):
						v.delay_arr[i]=v.arr[i]

					break


			for i in range(start_idx,-1,-1):
				if v.route[i].custno==v.route[i+1].custno and v.route[i].custno!="0":
					v.delay_arr[i]=v.delay_arr[i+1]
					continue
				ttable1=get_ttable(v.vtype,v.delay_arr[i+1],argvs.management_ttable)
				dtable1=get_dtable(v.vtype,v.delay_arr[i+1],argvs.management_dtable)
				if argvs.management_etable:
					etable1=get_etable(v.vtype,v.etype,v.delay_arr[i+1],argvs.management_etable)
				if argvs.management_xtable:
					xtable1=get_xtable(v.vtype,v.delay_arr[i+1],argvs.management_xtable)

				#通行不可なら遅延しない
				if ttable1[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or dtable1[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or (argvs.management_etable and etable1[v.route[i].spotno][v.route[i+1].spotno]==-1) \
				or (argvs.management_xtable and xtable1[v.route[i].spotno][v.route[i+1].spotno]==-1):
					v.delay_arr=v.arr[:]
					v.update_totalcost_dtable(argvs)
					break

				tr_time_temp=ttable1[v.route[i].spotno][v.route[i+1].spotno]*v.drskill #仮の移動時間
				lv_t=v.delay_arr[i+1]-tr_time_temp #仮の出発時刻

				ttable2=get_ttable(v.vtype,lv_t,argvs.management_ttable)
				dtable2=get_dtable(v.vtype,lv_t,argvs.management_dtable)
				if argvs.management_etable:
					etable2=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
				if argvs.management_xtable:
					xtable2=get_xtable(v.vtype,lv_t,argvs.management_xtable)

				#通行不可なら遅延しない
				if ttable2[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or dtable2[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or (argvs.management_etable and etable2[v.route[i].spotno][v.route[i+1].spotno]==-1) \
				or (argvs.management_xtable and xtable2[v.route[i].spotno][v.route[i+1].spotno]==-1):
					v.delay_arr=v.arr[:]
					v.update_totalcost_dtable(argvs)
					break

				tr_time=ttable2[v.route[i].spotno][v.route[i+1].spotno]*v.drskill #移動時間を再計算

				if compare_time(tr_time, tr_time_temp)!=0:
					impassable=True 
					ttable_temp=ttable1
					while True:
						common_table_flag=False
						for table in argvs.management_ttable:
							if table["vtype"]=="common":
								if table["table"]==ttable_temp:
									v.delay_arr=v.arr[:]
									common_table_flag=True

									lv_t=v.delay_arr[i+1]-tr_time

									break

						if common_table_flag==True:
							break

						for index,table in enumerate(argvs.management_ttable):
							if table["table"]==ttable_temp and index>0 and table["vtype"]==argvs.management_ttable[index-1]["vtype"]:
								lv_t=argvs.management_ttable[index-1]["start_time"]
								ttable4=argvs.management_ttable[index-1]["table"] #次に遅い時刻を採用
								break
							elif table["table"]==ttable_temp:
								start_time=table["start_time"]
						else:
							same_table_flag=False
							for table in reversed(argvs.management_ttable):
								if table["vtype"]=="time_common" and compare_time(start_time,table["start_time"])>0:
									if table["table"]==ttable_temp:
										same_table_flag=True
										continue
									lv_t=table["start_time"]
									ttable4=table["table"] #次に遅い時刻を採用
									break
							else:
								for table in argvs.management_ttable:
									if table["vtype"]=="common":
										if same_table_flag==True or table["table"]==ttable_temp:
											continue
										lv_t=table["start_time"]
										ttable4=table["table"] #次に遅い時刻を採用
										break
								else: #繰り返す対象のテーブルがなくなっても出発時刻が確定しなければ遅延なし
									v.delay_arr=v.arr[:]
									break

						dtable4=get_dtable(v.vtype,lv_t,argvs.management_dtable)
						if argvs.management_etable:
							etable4=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
						if argvs.management_xtable:
							xtable4=get_xtable(v.vtype,lv_t,argvs.management_xtable)

						#通行不可なら遅延しない
						if ttable4[v.route[i].spotno][v.route[i+1].spotno]==-1 \
						or dtable4[v.route[i].spotno][v.route[i+1].spotno]==-1 \
						or (argvs.management_etable and etable4[v.route[i].spotno][v.route[i+1].spotno]==-1) \
						or (argvs.management_xtable and xtable4[v.route[i].spotno][v.route[i+1].spotno]==-1):
							v.delay_arr=v.arr[:]
							v.update_totalcost_dtable(argvs)
							impassable=False
							break

						tr_time=ttable4[v.route[i].spotno][v.route[i+1].spotno]*v.drskill #移動時間を再計算

						if compare_time(v.lv[i],v.delay_arr[i+1]-tr_time)<=0 and get_ttable(v.vtype,v.delay_arr[i+1]-tr_time,argvs.management_ttable)==ttable4: #出発時刻確定
							lv_t=v.delay_arr[i+1]-tr_time
							if v.route[i] in servt_dict: 
								v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill
							else:
								v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not v.route[i].spotid.startswith("e") and not i in no_park_idx:
								v.delay_arr[i]-=v.route[i].parkt_open+v.route[i].parkt_arrive
							if v.route[i] in v.chg_batt_dict:
								v.delay_arr[i]-=v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							break

						ttable_temp=ttable4

					if impassable==False:
						break

				if v.route[i] in v.chg_batt_dict:
					lv=v.route[i].due_fs+v.route[i].servt*v.opskill+v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
					# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
					# 	lv+=v.route[i].parkt_open
					if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(lv_t, lv)>0:
						if v.route[i] in servt_dict: 
							lv_t=v.route[i].due_fs+servt_dict[v.route[i]]*v.opskill+v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
							# 	lv_t+=v.route[i].parkt_open
							v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill-v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
							# 	v.delay_arr[i]-=v.route[i].parkt_open
						else:
							lv_t=v.route[i].due_fs+v.route[i].servt*v.opskill+v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
							# 	lv_t+=v.route[i].parkt_open
							v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill-v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
							# 	v.delay_arr[i]-=v.route[i].parkt_open

						impassable=True
						for j in range(i+1,len(v.route)): #その後の到着時刻を再計算
							if v.route[j].custno==v.route[j-1].custno and v.route[j].custno!="0":
								v.delay_arr[j]=v.delay_arr[j-1]
								continue
							ttable3=get_ttable(v.vtype,lv_t,argvs.management_ttable)
							dtable3=get_dtable(v.vtype,lv_t,argvs.management_dtable)
							if argvs.management_etable:
								etable3=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
							if argvs.management_xtable:
								xtable3=get_xtable(v.vtype,lv_t,argvs.management_xtable)

							#通行不可なら遅延しない
							if ttable3[v.route[j-1].spotno][v.route[j].spotno]==-1 \
							or dtable3[v.route[j-1].spotno][v.route[j].spotno]==-1 \
							or (argvs.management_etable and etable3[v.route[j-1].spotno][v.route[j].spotno]==-1) \
							or (argvs.management_xtable and xtable3[v.route[j-1].spotno][v.route[j].spotno]==-1):
								v.delay_arr=v.arr[:]
								v.update_totalcost_dtable(argvs)
								impassable=False 
								break

							tr_time=ttable3[v.route[j-1].spotno][v.route[j].spotno]*v.drskill 
							v.delay_arr[j]=lv_t+tr_time
							if v.route[j] in servt_dict: 
								if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
									lv_t=max(v.delay_arr[j]+v.route[j].parkt_arrive,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
								else:
									lv_t=max(v.delay_arr[j],v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
							else:
								if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
									lv_t=max(v.delay_arr[j]+v.route[j].parkt_arrive,v.route[j].ready_fs)+v.route[j].servt*v.opskill
								else:
									lv_t=max(v.delay_arr[j],v.route[j].ready_fs)+v.route[j].servt*v.opskill
							if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
								lv_t+=v.route[j].parkt_open
							if v.route[j] in v.chg_batt_dict:
								lv_t+=v.chg_batt_dict[v.route[j]]/v.route[j].e_rate

						if impassable==False:
							break

					else:
						if v.route[i] in servt_dict: 
							v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill-v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
						else:
							v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill-v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
						# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
						# 	v.delay_arr[i]-=v.route[i].parkt_open
				else:
					lv=v.route[i].due_fs+v.route[i].servt*v.opskill
					if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
						lv+=v.route[i].parkt_open
					if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(lv_t, lv)>0:
						if v.route[i] in servt_dict: 
							lv_t=v.route[i].due_fs+servt_dict[v.route[i]]*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
								lv_t+=v.route[i].parkt_open
							v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
								v.delay_arr[i]-=v.route[i].parkt_open+v.route[i].parkt_arrive
						else:
							lv_t=v.route[i].due_fs+v.route[i].servt*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
								lv_t+=v.route[i].parkt_open
							v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
								v.delay_arr[i]-=v.route[i].parkt_open+v.route[i].parkt_arrive

						impassable=True
						for j in range(i+1,len(v.route)): #その後の到着時刻を再計算
							if v.route[j].custno==v.route[j-1].custno and v.route[j].custno!="0":
								v.delay_arr[j]=v.delay_arr[j-1]
								continue
							ttable3=get_ttable(v.vtype,lv_t,argvs.management_ttable)
							dtable3=get_dtable(v.vtype,lv_t,argvs.management_dtable)
							if argvs.management_etable:
								etable3=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
							if argvs.management_xtable:
								xtable3=get_xtable(v.vtype,lv_t,argvs.management_xtable)

							#通行不可なら遅延しない
							if ttable3[v.route[j-1].spotno][v.route[j].spotno]==-1 \
							or dtable3[v.route[j-1].spotno][v.route[j].spotno]==-1 \
							or (argvs.management_etable and etable3[v.route[j-1].spotno][v.route[j].spotno]==-1) \
							or (argvs.management_xtable and xtable3[v.route[j-1].spotno][v.route[j].spotno]==-1):
								v.delay_arr=v.arr[:]
								v.update_totalcost_dtable(argvs)
								impassable=False 
								break

							tr_time=ttable3[v.route[j-1].spotno][v.route[j].spotno]*v.drskill 
							v.delay_arr[j]=lv_t+tr_time
							if v.route[j] in servt_dict: 
								if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
									lv_t=max(v.delay_arr[j]+v.route[j].parkt_arrive,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
								else:
									lv_t=max(v.delay_arr[j],v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
							else:
								if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
									lv_t=max(v.delay_arr[j]+v.route[j].parkt_arrive,v.route[j].ready_fs)+v.route[j].servt*v.opskill
								else:
									lv_t=max(v.delay_arr[j],v.route[j].ready_fs)+v.route[j].servt*v.opskill
							if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
								lv_t+=v.route[j].parkt_open
							if v.route[j] in v.chg_batt_dict:
								lv_t+=v.chg_batt_dict[v.route[j]]/v.route[j].e_rate

						if impassable==False:
							break

					else:
						if v.route[i] in servt_dict: 
							v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill
						else:
							v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill
						if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
							v.delay_arr[i]-=v.route[i].parkt_open+v.route[i].parkt_arrive
		
			v.update_totalcost_dtable(argvs)

			for i,j,k,l in zip(v.rem_batt,v.chg_batt,v.delay_rem_batt,v.delay_chg_batt):
				if i-j>=v.e_margin and k-l<v.e_margin: #遅延することで電欠となるなら遅延しない
					v.delay_arr=v.arr[:]
					break

			if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and v.arr[0]!=v.delay_arr[0] and argvs.lowertime>0:
				if compare_time(v.delay_lv[last_idx-1]-argvs.lowertime,v.delay_arr[0])<0 and compare_time(v.arr[0],v.delay_lv[last_idx-1]-argvs.lowertime)<=0:
					v.delay_arr[0]=v.delay_lv[last_idx-1]-argvs.lowertime #ltimeを下回らないように遅延する

			v.update_totalcost_dtable(argvs)

			for i in range(len(v.route)-1):
				ttable1=get_ttable(v.vtype,v.delay_lv[i],argvs.management_ttable)
				dtable1=get_dtable(v.vtype,v.delay_lv[i],argvs.management_dtable)
				if argvs.management_etable:
					etable1=get_etable(v.vtype,v.etype,v.delay_lv[i],argvs.management_etable)
				if argvs.management_xtable:
					xtable1=get_xtable(v.vtype,v.delay_lv[i],argvs.management_xtable)

				#通行不可なら遅延しない
				if ttable1[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or dtable1[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or (argvs.management_etable and etable1[v.route[i].spotno][v.route[i+1].spotno]==-1) \
				or (argvs.management_xtable and xtable1[v.route[i].spotno][v.route[i+1].spotno]==-1):
					v.delay_arr=v.arr[:]
					v.update_totalcost_dtable(argvs)
					break
				
					
	else:
		for v in vehicles:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue
			#未割り当て荷物最適化 予約車両は除外する
			if argvs.break_flag==True or v.reserved_v_flag==True:
				v.delay_arr = v.arr[:]
				v.delay_st = v.st[:]
				v.delay_lv = v.lv[:]
				v.delay_totalcost = v.totalcost
				v.delay_totalcost_wolast = v.totalcost_wolast
				v.delay_rem_batt = v.rem_batt[:]
				v.delay_chg_batt = v.chg_batt[:]
				v.delay_slack_t = v.slack_t[:]
				v.delay_chg_batt_dict = copy.deepcopy(v.chg_batt_dict)
				#v.update_totalcost_dtable(argvs)
				continue

			depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
			servt_dict={}
			#配送時間
			for i in range(len(depo_idx)-1):
				servt_dict[v.route[depo_idx[i]]]=0
				servt=0
				for j in range(depo_idx[i]+1,depo_idx[i+1]):
					if not v.route[j].custno.startswith("e") and v.route[j].requestType=="DELIVERY" and v.route[j].custno!=v.route[j-1].custno and not v.route[j].custno.startswith("b"):
						servt+=v.route[j].depotservt
				if v.route[depo_idx[i]+1].custno!="0":
					servt_dict[v.route[depo_idx[i]]]+=servt+v.depotservt
				else:
					servt_dict[v.route[depo_idx[i]]]+=servt
			#集荷時間
			servt_dict[v.route[len(v.route)-1]]=0
			for i in range(1,len(depo_idx)):
				servt=0
				for j in range(depo_idx[i-1]+1,depo_idx[i]):
					if not v.route[j].custno.startswith("e") and v.route[j].requestType=="PICKUP" and v.route[j].custno!=v.route[j-1].custno:
						servt+=v.route[j].depotservt
				servt_dict[v.route[depo_idx[i]]]+=servt
				
			load=[0 for c in v.route]
			load2=[0 for c in v.route]
			for i in range(len(v.route)-1):
				if i in depo_idx:
					for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
						if v.route[j].requestType=="DELIVERY":
							if v.route[j].custno[0] != "b":
								load[i]+=v.route[j].dem
								load2[i]+=v.route[j].dem2
				else:
					if v.route[i].custno[0] != "b":
						if v.route[i].requestType=="DELIVERY":
							load[i]=load[i-1]-v.route[i].dem
							load2[i]=load2[i-1]-v.route[i].dem2
						else:
							load[i]=load[i-1]+v.route[i].dem
							load2[i]=load2[i-1]+v.route[i].dem2

			for i in reversed(range(len(load))):
				if i in depo_idx and i+1 in depo_idx:
					load[i]=load[i+1]
					load2[i]=load2[i+1]

			load=[i if i>1e-9 else 0 for i in load] #誤差対策
			load2=[i if i>1e-9 else 0 for i in load2] #誤差対策
				
			no_park_idx=[]
			for c in v.route[depo_idx[0]+1:depo_idx[1]]:
				if c.requestType=="DELIVERY":
					break
			else:
				if load[0]==0 and load2[0]==0:
					no_park_idx.append(0)
			
			for i in range(1,len(depo_idx)-1):
				if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
					for c in v.route[depo_idx[i]+1:depo_idx[i+1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
							no_park_idx.append(depo_idx[i])
			if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
				no_park_idx.append(depo_idx[-1])


			v.delay_arr=[0 for i in range(len(v.arr))]

			v.delay_arr[-1]=max(v.route[-1].ready_fs,v.arr[-1]) #最終訪問先の到着時刻


			start_idx=len(v.route)-2
			for i in range(len(v.route)):
				if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0 or v.route[i].custno.startswith("e")) and compare_time(v.st[i],v.route[i].due_fs)>0:
					start_idx=i-1
					for j in range(i,len(v.route)):
						v.delay_arr[i]=v.arr[i]

					break


			for i in range(start_idx,-1,-1):
				if v.route[i].custno==v.route[i+1].custno and v.route[i].custno!="0":
					v.delay_arr[i]=v.delay_arr[i+1]
					continue
				ttable1=get_ttable(v.vtype,v.delay_arr[i+1],argvs.management_ttable)
				dtable1=get_dtable(v.vtype,v.delay_arr[i+1],argvs.management_dtable)
				if argvs.management_etable:
					etable1=get_etable(v.vtype,v.etype,v.delay_arr[i+1],argvs.management_etable)
				if argvs.management_xtable:
					xtable1=get_xtable(v.vtype,v.delay_arr[i+1],argvs.management_xtable)

				#通行不可なら遅延しない
				if ttable1[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or dtable1[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or (argvs.management_etable and etable1[v.route[i].spotno][v.route[i+1].spotno]==-1) \
				or (argvs.management_xtable and xtable1[v.route[i].spotno][v.route[i+1].spotno]==-1):
					v.delay_arr=v.arr[:]
					v.update_totalcost_dtable(argvs)
					break

				tr_time_temp=ttable1[v.route[i].spotno][v.route[i+1].spotno]*v.drskill #仮の移動時間
				lv_t=v.delay_arr[i+1]-tr_time_temp #仮の出発時刻

				ttable2=get_ttable(v.vtype,lv_t,argvs.management_ttable)
				dtable2=get_dtable(v.vtype,lv_t,argvs.management_dtable)
				if argvs.management_etable:
					etable2=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
				if argvs.management_xtable:
					xtable2=get_xtable(v.vtype,lv_t,argvs.management_xtable)

				#通行不可なら遅延しない
				if ttable2[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or dtable2[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or (argvs.management_etable and etable2[v.route[i].spotno][v.route[i+1].spotno]==-1) \
				or (argvs.management_xtable and xtable2[v.route[i].spotno][v.route[i+1].spotno]==-1):
					v.delay_arr=v.arr[:]
					v.update_totalcost_dtable(argvs)
					break

				tr_time=ttable2[v.route[i].spotno][v.route[i+1].spotno]*v.drskill #移動時間を再計算

				if compare_time(tr_time, tr_time_temp)!=0:
					impassable=True 
					ttable_temp=ttable1
					while True:
						common_table_flag=False
						for table in argvs.management_ttable:
							if table["vtype"]=="common":
								if table["table"]==ttable_temp:
									v.delay_arr=v.arr[:]
									common_table_flag=True

									lv_t=v.delay_arr[i+1]-tr_time

									break

						if common_table_flag==True:
							break

						for index,table in enumerate(argvs.management_ttable):
							if table["table"]==ttable_temp and index>0 and table["vtype"]==argvs.management_ttable[index-1]["vtype"]:
								lv_t=argvs.management_ttable[index-1]["start_time"]
								ttable4=argvs.management_ttable[index-1]["table"] #次に遅い時刻を採用
								break
							elif table["table"]==ttable_temp:
								start_time=table["start_time"]
						else:
							same_table_flag=False
							for table in reversed(argvs.management_ttable):
								if table["vtype"]=="time_common" and compare_time(start_time,table["start_time"])>0:
									if table["table"]==ttable_temp:
										same_table_flag=True
										continue
									lv_t=table["start_time"]
									ttable4=table["table"] #次に遅い時刻を採用
									break
							else:
								for table in argvs.management_ttable:
									if table["vtype"]=="common":
										if same_table_flag==True or table["table"]==ttable_temp:
											continue
										lv_t=table["start_time"]
										ttable4=table["table"] #次に遅い時刻を採用
										break
								else: #繰り返す対象のテーブルがなくなっても出発時刻が確定しなければ遅延なし
									v.delay_arr=v.arr[:]
									break

						dtable4=get_dtable(v.vtype,lv_t,argvs.management_dtable)
						if argvs.management_etable:
							etable4=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
						if argvs.management_xtable:
							xtable4=get_xtable(v.vtype,lv_t,argvs.management_xtable)

						#通行不可なら遅延しない
						if ttable4[v.route[i].spotno][v.route[i+1].spotno]==-1 \
						or dtable4[v.route[i].spotno][v.route[i+1].spotno]==-1 \
						or (argvs.management_etable and etable4[v.route[i].spotno][v.route[i+1].spotno]==-1) \
						or (argvs.management_xtable and xtable4[v.route[i].spotno][v.route[i+1].spotno]==-1):
							v.delay_arr=v.arr[:]
							v.update_totalcost_dtable(argvs)
							impassable=False
							break

						tr_time=ttable4[v.route[i].spotno][v.route[i+1].spotno]*v.drskill #移動時間を再計算

						if compare_time(v.lv[i],v.delay_arr[i+1]-tr_time)<=0 and get_ttable(v.vtype,v.delay_arr[i+1]-tr_time,argvs.management_ttable)==ttable4: #出発時刻確定
							lv_t=v.delay_arr[i+1]-tr_time
							if v.route[i] in servt_dict: 
								v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill
							else:
								v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not v.route[i].spotid.startswith("e") and not i in no_park_idx:
								v.delay_arr[i]-=v.route[i].parkt_open+v.route[i].parkt_arrive
							if v.route[i] in v.chg_batt_dict:
								v.delay_arr[i]-=v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							break

						ttable_temp=ttable4

					if impassable==False:
						break

				if v.route[i] in v.chg_batt_dict:
					lv=v.route[i].due_fs+v.route[i].servt*v.opskill+v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
					# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
					# 	lv+=v.route[i].parkt_open
					if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(lv_t, lv)>0:
						if v.route[i] in servt_dict:
							lv_t=v.route[i].due_fs+servt_dict[v.route[i]]*v.opskill+v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
							# 	lv_t+=v.route[i].parkt_open
							v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill-v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
							# 	v.delay_arr[i]-=v.route[i].parkt_open
						else:
							lv_t=v.route[i].due_fs+v.route[i].servt*v.opskill+v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
							# 	lv_t+=v.route[i].parkt_open
							v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill-v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
							# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
							# 	v.delay_arr[i]-=v.route[i].parkt_open

						impassable=True
						for j in range(i+1,len(v.route)): #その後の到着時刻を再計算
							if v.route[j].custno==v.route[j-1].custno and v.route[j].custno!="0":
								v.delay_arr[j]=v.delay_arr[j-1]
								continue
							ttable3=get_ttable(v.vtype,lv_t,argvs.management_ttable)
							dtable3=get_dtable(v.vtype,lv_t,argvs.management_dtable)
							if argvs.management_etable:
								etable3=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
							if argvs.management_xtable:
								xtable3=get_xtable(v.vtype,lv_t,argvs.management_xtable)

							#通行不可なら遅延しない
							if ttable3[v.route[j-1].spotno][v.route[j].spotno]==-1 \
							or dtable3[v.route[j-1].spotno][v.route[j].spotno]==-1 \
							or (argvs.management_etable and etable3[v.route[j-1].spotno][v.route[j].spotno]==-1) \
							or (argvs.management_xtable and xtable3[v.route[j-1].spotno][v.route[j].spotno]==-1):
								v.delay_arr=v.arr[:]
								v.update_totalcost_dtable(argvs)
								impassable=False
								break

							tr_time=ttable3[v.route[j-1].spotno][v.route[j].spotno]*v.drskill 
							v.delay_arr[j]=lv_t+tr_time
							if v.route[j] in servt_dict:
								if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
									lv_t=max(v.delay_arr[j]+v.route[j].parkt_arrive,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
								else:
									lv_t=max(v.delay_arr[j],v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
							else:
								if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
									lv_t=max(v.delay_arr[j]+v.route[j].parkt_arrive,v.route[j].ready_fs)+v.route[j].servt*v.opskill
								else:
									lv_t=max(v.delay_arr[j],v.route[j].ready_fs)+v.route[j].servt*v.opskill
							if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
								lv_t+=v.route[j].parkt_open
							if v.route[j] in v.chg_batt_dict:
								lv_t+=v.chg_batt_dict[v.route[j]]/v.route[j].e_rate

						if impassable==False:
							break

					else:
						if v.route[i] in servt_dict:
							v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill-v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
						else:
							v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill-v.chg_batt_dict[v.route[i]]/v.route[i].e_rate
						# if i==0 or v.route[i].spotid!=v.route[i-1].spotid:
						# 	v.delay_arr[i]-=v.route[i].parkt_open
				else:
					lv=v.route[i].due_fs+v.route[i].servt*v.opskill
					if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
						lv+=v.route[i].parkt_open
					if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and compare_time(lv_t, lv)>0:
						if v.route[i] in servt_dict:
							lv_t=v.route[i].due_fs+servt_dict[v.route[i]]*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
								lv_t+=v.route[i].parkt_open
							v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
								v.delay_arr[i]-=v.route[i].parkt_open
						else:
							lv_t=v.route[i].due_fs+v.route[i].servt*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
								lv_t+=v.route[i].parkt_open
							v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill
							if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
								v.delay_arr[i]-=v.route[i].parkt_open

						impassable=True
						for j in range(i+1,len(v.route)): #その後の到着時刻を再計算
							if v.route[j].custno==v.route[j-1].custno and v.route[j].custno!="0":
								v.delay_arr[j]=v.delay_arr[j-1]
								continue
							ttable3=get_ttable(v.vtype,lv_t,argvs.management_ttable)
							dtable3=get_dtable(v.vtype,lv_t,argvs.management_dtable)
							if argvs.management_etable:
								etable3=get_etable(v.vtype,v.etype,lv_t,argvs.management_etable)
							if argvs.management_xtable:
								xtable3=get_xtable(v.vtype,lv_t,argvs.management_xtable)

							#通行不可なら遅延しない
							if ttable3[v.route[j-1].spotno][v.route[j].spotno]==-1 \
							or dtable3[v.route[j-1].spotno][v.route[j].spotno]==-1 \
							or (argvs.management_etable and etable3[v.route[j-1].spotno][v.route[j].spotno]==-1) \
							or (argvs.management_xtable and xtable3[v.route[j-1].spotno][v.route[j].spotno]==-1):
								v.delay_arr=v.arr[:]
								v.update_totalcost_dtable(argvs)
								impassable=False 
								break

							tr_time=ttable3[v.route[j-1].spotno][v.route[j].spotno]*v.drskill 
							v.delay_arr[j]=lv_t+tr_time
							if v.route[j] in servt_dict:
								if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
									lv_t=max(v.delay_arr[j]+v.route[j].parkt_arrive,v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
								else:
									lv_t=max(v.delay_arr[j],v.route[j].ready_fs)+servt_dict[v.route[j]]*v.opskill
							else:
								if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
									lv_t=max(v.delay_arr[j]+v.route[j].parkt_arrive,v.route[j].ready_fs)+v.route[j].servt*v.opskill
								else:
									lv_t=max(v.delay_arr[j],v.route[j].ready_fs)+v.route[j].servt*v.opskill
							if (j==0 or v.route[j].spotid!=v.route[j-1].spotid) and not v.route[j].spotid.startswith("e") and not j in no_park_idx:
								lv_t+=v.route[j].parkt_open
							if v.route[j] in v.chg_batt_dict:
								lv_t+=v.chg_batt_dict[v.route[j]]/v.route[j].e_rate

						if impassable==False:
							break

					else:
						if v.route[i] in servt_dict:
							v.delay_arr[i]=lv_t-servt_dict[v.route[i]]*v.opskill
						else:
							v.delay_arr[i]=lv_t-v.route[i].servt*v.opskill
						if (i==0 or v.route[i].spotid!=v.route[i-1].spotid) and not i in no_park_idx:
							v.delay_arr[i]-=v.route[i].parkt_open+v.route[i].parkt_arrive

			v.update_totalcost_dtable(argvs)

			for i,j,k,l in zip(v.rem_batt,v.chg_batt,v.delay_rem_batt,v.delay_chg_batt):
				if i-j>=v.e_margin and k-l<v.e_margin: #遅延することで電欠となるなら遅延しない
					v.delay_arr=v.arr[:]
					break

			if (argvs.timePenaltyType=="hard" or argvs.timePenaltyWeight>0) and v.arr[0]!=v.delay_arr[0] and argvs.lowertime>0:
				if compare_time(v.delay_lv[-1]-argvs.lowertime,v.delay_arr[0])<0 and compare_time(v.arr[0],v.delay_lv[-1]-argvs.lowertime)<=0:
					v.delay_arr[0]=v.delay_lv[-1]-argvs.lowertime #ltimeを下回らないように遅延する

			v.update_totalcost_dtable(argvs)

			for i in range(len(v.route)-1):
				ttable1=get_ttable(v.vtype,v.delay_lv[i],argvs.management_ttable)
				dtable1=get_dtable(v.vtype,v.delay_lv[i],argvs.management_dtable)
				if argvs.management_etable:
					etable1=get_etable(v.vtype,v.etype,v.delay_lv[i],argvs.management_etable)
				if argvs.management_xtable:
					xtable1=get_xtable(v.vtype,v.delay_lv[i],argvs.management_xtable)

				#通行不可なら遅延しない
				if ttable1[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or dtable1[v.route[i].spotno][v.route[i+1].spotno]==-1 \
				or (argvs.management_etable and etable1[v.route[i].spotno][v.route[i+1].spotno]==-1) \
				or (argvs.management_xtable and xtable1[v.route[i].spotno][v.route[i+1].spotno]==-1):
					v.delay_arr=v.arr[:]
					v.update_totalcost_dtable(argvs)
					break

def delay_arr_time2(all_vehicles,vehicles,argvs):
	delay_arr_time(vehicles,argvs)

	adist,bdist,atime,btime,apower,bpower,aexp,bexp,atpen,btpen=0,0,0,0,0,0,0,0,0,0

	bmvehicles={}
	amvehicles={}

	for v in vehicles:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
			continue

		if argvs.break_flag==True or v.reserved_v_flag==True:
			v.delay_arr = v.arr[:]
			v.delay_st = v.st[:]
			v.delay_lv = v.lv[:]
			v.delay_totalcost = v.totalcost
			v.delay_totalcost_wolast = v.totalcost_wolast
			v.delay_rem_batt = v.rem_batt[:]
			v.delay_chg_batt = v.chg_batt[:]
			v.delay_slack_t = v.slack_t[:]
			v.delay_chg_batt_dict = copy.deepcopy(v.chg_batt_dict)
			#v.update_totalcost_dtable(argvs)
			continue

		last_idx=len(v.route)-1
		if argvs.lastc_flag==True:
			for i in reversed(range(0,len(v.route))):
				if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
					last_idx=i
				else:
					last_idx-=1
					break

		if compare_time(argvs.lowertime)>0 or compare_time(argvs.uppertime)>0:
			atpen,btpen=return_lutime_penalty(v.delay_lv[last_idx]-v.delay_arr[0],argvs.lowertime,argvs.uppertime,v.lv[last_idx]-v.arr[0],atpen,btpen)

		bmvehicles[v] = v.lv[last_idx]-v.arr[0]
		amvehicles[v] = v.delay_lv[last_idx]-v.delay_arr[0]

		for i in range(last_idx):
			dtable1=get_dtable(v.vtype,v.lv[i],argvs.management_dtable)
			bdist+=dtable1[v.route[i].spotno][v.route[i+1].spotno]
			dtable2=get_dtable(v.vtype,v.delay_lv[i],argvs.management_dtable)
			adist+=dtable2[v.route[i].spotno][v.route[i+1].spotno]

			if argvs.management_etable:
				etable1=get_etable(v.vtype,v.etype,v.lv[i],argvs.management_etable)
				bpower+=etable1[v.route[i].spotno][v.route[i+1].spotno]
				etable2=get_etable(v.vtype,v.etype,v.delay_lv[i],argvs.management_etable)
				apower+=etable2[v.route[i].spotno][v.route[i+1].spotno]

			if argvs.management_xtable:
				xtable1=get_xtable(v.vtype,v.lv[i],argvs.management_xtable)
				bexp+=xtable1[v.route[i].spotno][v.route[i+1].spotno]
				xtable2=get_xtable(v.vtype,v.delay_lv[i],argvs.management_xtable)
				aexp+=xtable2[v.route[i].spotno][v.route[i+1].spotno]

		btime+=v.lv[last_idx]-v.arr[0]
		atime+=v.delay_lv[last_idx]-v.delay_arr[0]

	if argvs.avetime_ape_flag==True:
		btime_error=calc_avetime_APE(all_vehicles,bmvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
		atime_error=calc_avetime_APE(all_vehicles,amvehicles,argvs.avetime_ape,argvs.lastc_flag,argvs.break_flag,argvs)
	elif argvs.avetime_ae_flag==True:
		btime_error=calc_avetime_AE(all_vehicles,bmvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
		atime_error=calc_avetime_AE(all_vehicles,amvehicles,argvs.avetime_ae,argvs.lastc_flag,argvs)
	else:
		btime_error=0.0
		atime_error=0.0

	if argvs.avedist_ape_flag==True or argvs.avedist_ae_flag==True:
		for v in vehicles:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue

			if argvs.lastc_flag==True:
				bmvehicles[v] = v.totalcost_wolast
				amvehicles[v] = v.delay_totalcost_wolast
			else:
				bmvehicles[v] = v.totalcost
				amvehicles[v] = v.delay_totalcost

	if argvs.avedist_ape_flag==True:
		bdist_error=calc_avedist_APE(all_vehicles,bmvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
		adist_error=calc_avedist_APE(all_vehicles,amvehicles,argvs.avedist_ape,argvs.lastc_flag,argvs.break_flag,argvs)
	elif argvs.avedist_ae_flag==True:
		bdist_error=calc_avedist_AE(all_vehicles,bmvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
		adist_error=calc_avedist_AE(all_vehicles,amvehicles,argvs.avedist_ae,argvs.lastc_flag,argvs)
	else:
		bdist_error=0.0
		adist_error=0.0

	ires,cdiff=improved_or_not(atpen,btpen,adist,bdist,0,0,0,0,atime_error,btime_error,0,0,adist_error,bdist_error,argvs,atime,btime,apower,bpower,aexp,bexp,0,0)

	if cdiff<=0:
		for v in vehicles:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue

			if compare_time(v.arr[0],v.delay_arr[0])!=0:
				v.arr[0]=v.delay_arr[0]
				v.update_totalcost_dtable(argvs)
	else:
		for v in vehicles:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0:
				continue

			v.delay_arr[0]=v.arr[0]
			v.update_totalcost_dtable(argvs)


######### 時刻比較 #########
# 引数a,bの大小関係を比較
# (引数が一つの場合は0比較(b=0)とする
# 戻り値： 1 (a > b)
#         -1 (a < b)
#          0 (a == b)
# 時刻を実数(float)で扱う場合、誤差が発生する。
# 誤差の影響を抑えるため、マージン(eps)を加えた後比較する
# 時刻変数の中で、float型、単位[H]の比較に対して本関数を適用する
#############################
def compare_time(a,b=0, eps=1.0e-5):

	if a-b>eps:
		rc=1 #a>b
	elif b-a>eps:
		rc=-1 #b>a
	else:
		rc=0 #a=b

	return rc

def sort_table(management_table):
	table_to_int=[] #vtypeをint変換
	etype_flag=False

	for table in management_table:
		if not "etype" in table:
			if table["vtype"]=="common":
				type_index=0
			elif table["vtype"]=="time_common":
				type_index=1
			else:
				type_index=int(table["vtype"])+2

			table_to_int.append([type_index,table["start_time"],table])
		else:
			etype_flag=True
			if table["vtype"]=="common":
				vtype_index=0
			elif table["vtype"]=="time_common":
				vtype_index=1
			else:
				vtype_index=int(table["vtype"])+2

			if table["etype"]=="common":
				etype_index=0
			elif table["etype"]=="time_common":
				etype_index=1
			else:
				etype_index=int(table["etype"])+2

			table_to_int.append([vtype_index,etype_index,table["start_time"],table])

	if not etype_flag:
		management_table=[table[2] for table in sorted(table_to_int,key=lambda x:(x[0],x[1]))]
	else:
		management_table=[table[3] for table in sorted(table_to_int,key=lambda x:(x[0],x[1],x[2]))]

	return management_table

def output_violations(vehicles,argvs,evplan=False):
	sLogBuf="\n"

	tw_violation_list=[]
	et_violation_list=[]
	load_violation_num=0
	load_violation_list=[]
	avetime_ape_violation_list=[]
	avetime_ae_violation_list=[]
	avevisits_ape_violation_list=[]
	avevisits_ae_violation_list=[]
	avedist_ape_violation_list=[]
	avedist_ae_violation_list=[]
	impassable_violation_list=[]
	rejeve_violation_list=[]
	maxvisit_violation_list=[]
	e_margin_violation_list=[]
	e_cap_violation_list=[]
	br_violation_list=[]
	

	for v in vehicles:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])==0:
			continue #空車両はスキップ

		depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]

		last_idx=get_last_idx(v, argvs)
		#配送時間
		if argvs.bulkShipping_flag==True:
			for i,tc in enumerate(v.route):
				if argvs.lastc_flag==True and (i==len(v.route)-1 or (i==last_idx and v.route[i].custno=="0")):
					break
				for c in tc.customers:
					if compare_time(v.st[i],c.due_fs)>0:
						tw_violation_list.append((v.vehno,c.custno))
		else:
			for i,c in enumerate(v.route):
				if argvs.lastc_flag==True and (i==len(v.route)-1 or (i==last_idx and v.route[i].custno=="0")):
					break
				if compare_time(v.st[i],c.due_fs)>0:
					tw_violation_list.append((v.vehno,c.custno))

		#営業時間
		if argvs.lastc_flag==True:
			if v.route[last_idx].custno!="0" and compare_time(v.lv[last_idx],v.endhour)>0:
				et_violation_list.append(v.vehno)
			elif v.route[last_idx].custno=="0" and compare_time(v.lv[last_idx-1],v.endhour)>0:
				et_violation_list.append(v.vehno)
		else:
			if compare_time(v.lv[-1],v.endhour)>0:
				et_violation_list.append(v.vehno)

		#休憩スポット
		if argvs.break_flag:
			br_pattern = get_breakspot_pattern(vehicles, argvs)
			#パターン1,2 ready due に収まっているかのチェック
			if br_pattern==1 or br_pattern==2:
				for i,c in enumerate(v.route):
					if c.custno[0]=="b" and compare_time(v.st[i],c.due_fs)>0:
						br_violation_list.append(v.vehno)

			#パターン2,3 break_int が取れているかのチェック
			if br_pattern==2 or br_pattern==3:
				bbreak_end = 0
				for i,c in enumerate(v.route):
					if c.custno[0]=="b":
						bbreak_end = v.lv[i]
					if argvs.break_interval < v.lv[i] - bbreak_end:
						br_violation_list.append(v.vehno)

		#積載量
		load=[0 for c in v.route]
		load2=[0 for c in v.route]
		for i in range(len(v.route)-1):
			if i in depo_idx:
				for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
					if v.route[j].requestType=="DELIVERY":
						if v.route[j].custno[0] != "b":
							load[i]+=v.route[j].dem
							load2[i]+=v.route[j].dem2
			else:
				if v.route[i].custno[0] != "b":
					if v.route[i].requestType=="DELIVERY":
						load[i]=load[i-1]-v.route[i].dem
						load2[i]=load2[i-1]-v.route[i].dem2
					else:
						load[i]=load[i-1]+v.route[i].dem
						load2[i]=load2[i-1]+v.route[i].dem2

		load=[i if i>1e-9 else 0 for i in load] #誤差対策
		load2=[i if i>1e-9 else 0 for i in load2] #誤差対策

		for i in range(len(depo_idx)-1):
			for j in range(depo_idx[i],depo_idx[i+1]):
				if load[j]>v.cap or load2[j]>v.cap2:
					load_violation_num+=1
					break
			else:
				continue
			if not v.vehno in load_violation_list:
				load_violation_list.append(v.vehno)

		#通行不可
		for i in range(len(v.route)-1):
			if v.route[i].custno[0]=="b" and v.route[i].spotid=="":
				for l in reversed(range(0, i)):
					if v.route[l].custno[0]!="b":
						break
				for m in (range(i+1, len(v.route)-1)):
					if v.route[m].custno[0]!="b":
						break
				from_c,to_c=v.route[l],v.route[m]		
			else:
				from_c,to_c=v.route[i],v.route[i+1]

			dtable=get_dtable(v.vtype,v.lv[i],argvs.management_dtable)
			ttable=get_dtable(v.vtype,v.lv[i],argvs.management_ttable)
			if argvs.management_etable:
				etable=get_etable(v.vtype,v.etype,v.lv[i],argvs.management_etable)
			if argvs.management_xtable:
				xtable=get_xtable(v.vtype,v.lv[i],argvs.management_xtable)

			if dtable[from_c.spotno][to_c.spotno]==-1 or \
				ttable[from_c.spotno][to_c.spotno]==-1 or \
				(argvs.management_etable and etable[from_c.spotno][to_c.spotno]==-1) or \
				(argvs.management_xtable and xtable[from_c.spotno][to_c.spotno]==-1):
				if argvs.bulkShipping_flag==True:
					impassable_violation_list.append((v.vehno,to_c.customers[0].custno))
				else:
					impassable_violation_list.append((v.vehno,to_c.custno))

		#立寄不可
		if argvs.bulkShipping_flag==True:
			for tc in v.route:
				for c in tc.customers:
					if v.vehno in c.reje_ve:
						rejeve_violation_list.append((v.vehno,c.custno))

			if argvs.break_flag: #休憩スポットはroute内に有るもので判定
				for c in v.route:
					if c.custno[0]=="b":
						if v.vehno in c.reje_ve:
							rejeve_violation_list.append((v.vehno,c.custno))
		else:
			for c in v.route:
				if v.vehno in c.reje_ve:
					rejeve_violation_list.append((v.vehno,c.custno))

		#訪問上限
		#v_spotid=[c.spotid for c in v.route]
		#visitnum=len([len([*group]) for i,group in groupby(v_spotid[1:-1])])-len([c for c in v_spotid[1:-1] if c=="0" or c.startswith("e") or c.startswith("b")])
		visitnum=calc_visitnum(v.route)
		if v.maxvisit>0 and visitnum>v.maxvisit:
			maxvisit_violation_list.append(v.vehno)

		#残電力量
		if evplan==True:
			if min(v.rem_batt)<v.e_margin:
				e_margin_violation_list.append(v.vehno)

		#充電上限
		if evplan==True:
			if max(v.rem_batt)>v.e_capacity:
				e_cap_violation_list.append(v.vehno)


	#時間平準
	if argvs.avetime_ape_flag==True:
		if len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!='b']) >= 1 and v.direct_flag==False])!=0:
			if argvs.lastc_flag==True:
				last_idx={}
				for v in vehicles:
					if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!='b']) >= 1 and v.direct_flag==False:
						for i in reversed(range(0,len(v.route))):
							if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
								last_idx[v]=i
							else:
								break

				mu=sum([v.lv[last_idx[v]-1]-v.arr[0] for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False])
			else:
				mu=sum([v.lv[-1]-v.arr[0] for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False])							
			
			mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False]))															
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False:
					if argvs.lastc_flag==True:
						if compare_time(mu)==0:
							sErrMes = "failed to calculate APE margin of time-leveling (aka avetime_ape) due to delivery time = 0"
							raise ValueError(sErrMes)

						diff = math.fabs(mu-(v.lv[last_idx[v]-1]-v.arr[0]))/mu

						if diff>argvs.avetime_ape:
							avetime_ape_violation_list.append(v.vehno)
					else:
						if compare_time(mu)==0:
							sErrMes = "failed to calculate APE margin of time-leveling (aka avetime_ape) due to delivery time = 0"
							raise ValueError(sErrMes)

						diff = math.fabs(mu-(v.lv[-1]-v.arr[0]))/mu    

						if diff>argvs.avetime_ape:
							avetime_ape_violation_list.append(v.vehno)        
	elif argvs.avetime_ae_flag==True:
		time_veh = []
		if argvs.lastc_flag:
			last_idx={}
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"]) >= 1 and v.direct_flag==False:
					for i in reversed(range(0,len(v.route))):
						if v.route[i].custno=="0" or v.route[i].custno[0]=="b" or v.route[i].custno[0]=="e" or i==len(v.route)-1:
							last_idx[v]=i
						else:
							time_veh.append((v.lv[last_idx[v]-1]-v.arr[0],v.vehno))
							break
		else:
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False:
					time_veh.append((v.lv[-1]-v.arr[0],v.vehno))
		
		# 全ての組み合わせで走行時間のペナルティを計算
		for custs in combinations(time_veh, 2):
			diff = math.fabs(custs[0][0] - custs[1][0])
			
			if diff>argvs.avetime_ae:
				if not custs[0][1] in avetime_ae_violation_list:
					avetime_ae_violation_list.append(custs[0][1]) 
				if not custs[1][1] in avetime_ae_violation_list:
					avetime_ae_violation_list.append(custs[1][1])                        

	#件数平準	
	if argvs.avevisits_ape_flag==True:
		if len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False])!=0:
			if argvs.bulkShipping_flag:
				mu=sum([len(r.customers) for v in vehicles for r in v.route[1:-1] if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False and not r.spotid.startswith("e") and r.custno!="0"])	
			else:
				mu=sum([len(v.route)-2 for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False])	
				e_cnt = len([r for v in vehicles for r in v.route[1:-1] if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and (r.spotid.startswith("e") or r.custno=="0")])
				mu -= e_cnt
			mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False]))	
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False:
					if compare_time(mu)==0:
						sErrMes = "failed to calculate APE margin of visits-leveling (aka avevisits_ape) due to delivery number = 0"
						raise ValueError(sErrMes)

					if argvs.bulkShipping_flag:
						visit_num = 0
						for r in v.route[1:-1]:
							visit_num += len(r.customers)
						e_cnt = len([r for r in v.route[1:-1] for c in r.customers if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and (c.spotid.startswith("e") or c.custno=="0" or c.custno[0]=="b")])
						diff = math.fabs(mu-(visit_num-e_cnt))/mu
						
						if diff>argvs.avevisits_ape:
							avevisits_ape_violation_list.append(v.vehno)
					else:
						e_cnt = len([r for r in v.route[1:-1] if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and (r.spotid.startswith("e") or r.custno=="0" or c.custno[0]=="b")])
						diff = math.fabs(mu-(len(v.route)-e_cnt-2))/mu
						
						if diff>argvs.avevisits_ape:
							avevisits_ape_violation_list.append(v.vehno)
	elif argvs.avevisits_ae_flag==True:
		visits_veh = []
		if argvs.bulkShipping_flag:
			# 対象車両以外の訪問数
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False:
					visits = 0
					for r in v.route[1:-1]:
						visits += len([c for c in r.customers if not c.spotid.startswith("e") and c.custno!="0" and not c.spotid.startswith("b")])
					visits_veh.append((visits,v.vehno))
		else:
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False:
					visits = len([r for r in v.route[1:-1] if not r.spotid.startswith("e") and r.custno!="0" and r.custno[0]!="b"])
					visits_veh.append((visits,v.vehno))
		
		# 全ての組み合わせで訪問数のペナルティを計算
		for custs in combinations(visits_veh, 2):
			diff = math.fabs(custs[0][0] - custs[1][0])
			
			if diff>argvs.avevisits_ae:
				if not custs[0][1] in avevisits_ae_violation_list:
					avevisits_ae_violation_list.append(custs[0][1]) 
				if not custs[1][1] in avevisits_ae_violation_list:
					avevisits_ae_violation_list.append(custs[1][1])  	

	#距離平準
	if argvs.avedist_ape_flag==True:
		if len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False])!=0:
			if argvs.lastc_flag==True:
				mu=sum([v.totalcost_wolast for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False])
			else:
				mu=sum([v.totalcost for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False])							
			
			mu/=float(len([v for v in vehicles if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False]))															
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False:
					if argvs.lastc_flag==True:
						if mu==0:
							sErrMes = "failed to calculate APE margin of distance-leveling (aka avedist_ape) due to distance = 0"
							raise ValueError(sErrMes)

						diff = math.fabs(mu-v.totalcost_wolast)/mu

						if diff>argvs.avedist_ape:
							avedist_ape_violation_list.append(v.vehno)
					else:
						if mu==0:
							sErrMes = "failed to calculate APE margin of distance-leveling (aka avedist_ape) due to distance = 0"
							raise ValueError(sErrMes)

						diff = math.fabs(mu-v.totalcost)/mu    

						if diff>argvs.avedist_ape:
							avedist_ape_violation_list.append(v.vehno)        
	elif argvs.avedist_ae_flag==True:
		dist_veh = []
		if argvs.lastc_flag:
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False:
					dist_veh.append((v.totalcost_wolast,v.vehno))
		else:
			for v in vehicles:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) >= 1 and v.direct_flag==False:
					dist_veh.append((v.totalcost,v.vehno))
		
		# 全ての組み合わせで走行時間のペナルティを計算
		for custs in combinations(dist_veh, 2):
			diff = math.fabs(custs[0][0] - custs[1][0])
			
			if diff>argvs.avedist_ae:
				if not custs[0][1] in avedist_ae_violation_list:
					avedist_ae_violation_list.append(custs[0][1]) 
				if not custs[1][1] in avedist_ae_violation_list:
					avedist_ae_violation_list.append(custs[1][1])    	


	sLogBuf += "Vehicles violating DELIVERY-TIMEWINDOW, The CUSTOMER:"+str(len(tw_violation_list))
	if tw_violation_list!=[]:
		sLogBuf+=" ("+"("+str(tw_violation_list[0][0])+","+str(tw_violation_list[0][1])+")"
		for i in tw_violation_list[1:]:
			sLogBuf+=",("+str(i[0])+","+str(i[1])+")"
		sLogBuf+=")"
	sLogBuf+="\n"

	sLogBuf += "Vehicles violating WORKING-TIME:"+str(len(et_violation_list))
	if et_violation_list!=[]:
		sLogBuf+=" ("+str(et_violation_list[0])
		for i in et_violation_list[1:]:
			sLogBuf+=","+str(i)
		sLogBuf+=")"
	sLogBuf+="\n"

	sLogBuf += "Vehicles violating LOAD-CAPACITY:"+str(load_violation_num)
	if load_violation_list!=[]:
		sLogBuf+=" ("+str(load_violation_list[0])
		for i in load_violation_list[1:]:
			sLogBuf+=","+str(i)
		sLogBuf+=")"
	sLogBuf+="\n"

	if argvs.avetime_ape_flag==True:
		sLogBuf += "Vehicles violating TIME-LEVELING:"+str(len(avetime_ape_violation_list))
		if avetime_ape_violation_list!=[]:
			sLogBuf+=" ("+str(avetime_ape_violation_list[0])
			for i in avetime_ape_violation_list[1:]:
				sLogBuf+=","+str(i)
			sLogBuf+=")"
		sLogBuf+="\n"
	elif argvs.avetime_ae_flag==True:
		sLogBuf += "Vehicles violating TIME-LEVELING:"+str(len(avetime_ae_violation_list))
		if avetime_ae_violation_list!=[]:
			sLogBuf+=" ("+str(avetime_ae_violation_list[0])
			for i in avetime_ae_violation_list[1:]:
				sLogBuf+=","+str(i)
			sLogBuf+=")"
		sLogBuf+="\n"
	else:
		sLogBuf += "Vehicles violating TIME-LEVELING:0\n"

	if argvs.avevisits_ape_flag==True:
		sLogBuf += "Vehicles violating VISIT-LEVELING:"+str(len(avevisits_ape_violation_list))
		if avevisits_ape_violation_list!=[]:
			sLogBuf+=" ("+str(avevisits_ape_violation_list[0])
			for i in avevisits_ape_violation_list[1:]:
				sLogBuf+=","+str(i)
			sLogBuf+=")"
		sLogBuf+="\n"
	elif argvs.avevisits_ae_flag==True:
		sLogBuf += "Vehicles violating VISIT-LEVELING:"+str(len(avevisits_ae_violation_list))
		if avevisits_ae_violation_list!=[]:
			sLogBuf+=" ("+str(avevisits_ae_violation_list[0])
			for i in avevisits_ae_violation_list[1:]:
				sLogBuf+=","+str(i)
			sLogBuf+=")"
		sLogBuf+="\n"
	else:
		sLogBuf += "Vehicles violating VISIT-LEVELING:0\n"

	if argvs.avedist_ape_flag==True:
		sLogBuf += "Vehicles violating DISTANCE-LEVELING:"+str(len(avedist_ape_violation_list))
		if avedist_ape_violation_list!=[]:
			sLogBuf+=" ("+str(avedist_ape_violation_list[0])
			for i in avedist_ape_violation_list[1:]:
				sLogBuf+=","+str(i)
			sLogBuf+=")"
		sLogBuf+="\n"
	elif argvs.avedist_ae_flag==True:
		sLogBuf += "Vehicles violating DISTANCE-LEVELING:"+str(len(avedist_ae_violation_list))
		if avedist_ae_violation_list!=[]:
			sLogBuf+=" ("+str(avedist_ae_violation_list[0])
			for i in avedist_ae_violation_list[1:]:
				sLogBuf+=","+str(i)
			sLogBuf+=")"
		sLogBuf+="\n"
	else:
		sLogBuf += "Vehicles violating DISTANCE-LEVELING:0\n"

	impassable_veh={}
	for i in impassable_violation_list:
		impassable_veh[i[0]]=i[1]
	sLogBuf += "Vehicles violating IMPASSABLE:"+str(len(impassable_veh))
	if impassable_violation_list!=[]:
		sLogBuf+=" ("+"("+str(impassable_violation_list[0][0])+","+str(impassable_violation_list[0][1])+")"
		for i in impassable_violation_list[1:]:
			sLogBuf+=",("+str(i[0])+","+str(i[1])+")"
		sLogBuf+=")"
	sLogBuf+="\n"

	reje_veh={}
	for i in rejeve_violation_list:
		reje_veh[i[0]]=i[1]
	sLogBuf += "Vehicles violating UNVISITABLE-VEHICLES:"+str(len(reje_veh))
	if rejeve_violation_list!=[]:
		sLogBuf+=" ("+"("+str(rejeve_violation_list[0][0])+","+str(rejeve_violation_list[0][1])+")"
		for i in rejeve_violation_list[1:]:
			sLogBuf+=",("+str(i[0])+","+str(i[1])+")"
		sLogBuf+=")"
	sLogBuf+="\n"

	sLogBuf += "Vehicles violating MAX-VISITS:"+str(len(maxvisit_violation_list))
	if maxvisit_violation_list!=[]:
		sLogBuf+=" ("+str(maxvisit_violation_list[0])
		for i in maxvisit_violation_list[1:]:
			sLogBuf+=","+str(i)
		sLogBuf+=")"
	sLogBuf+="\n"

	if evplan==True:
		sLogBuf += "Vehicles violating E-MARGIN:"+str(len(e_margin_violation_list))
		if e_margin_violation_list!=[]:
			sLogBuf+=" ("+str(e_margin_violation_list[0])
			for i in e_margin_violation_list[1:]:
				sLogBuf+=","+str(i)
			sLogBuf+=")"
		sLogBuf+="\n"

		sLogBuf += "Vehicles violating E-CAPACITY:"+str(len(e_cap_violation_list))
		if e_cap_violation_list!=[]:
			sLogBuf+=" ("+str(e_cap_violation_list[0])
			for i in e_cap_violation_list[1:]:
				sLogBuf+=","+str(i)
			sLogBuf+=")"
		sLogBuf+="\n"

	if argvs.break_flag:
		br_veh={}
		for i in br_violation_list:
			br_veh[i]=i

		sLogBuf += "Vehicles violating BREAKSPOT:"+str(len(br_veh))
		if br_veh != {}:
			for i, k in enumerate(br_veh):
				sLogBuf+=" ("+str(k)
				break
			for i, k in enumerate(br_veh):
				if i==0:
					continue
				sLogBuf+=","+str(k)
			sLogBuf+=")"
		sLogBuf+="\n"

	if rank==0:
		logging.log(logging.INFO,sLogBuf)

def check_hard_constraint(vehicles,argvs):
	for v in vehicles:
		if (argvs.timePenaltyType=="hard" and compare_time(v.time_pen)>0) or \
			(argvs.loadPenaltyType=="hard" and v.load_pen>0) or \
			(argvs.load2PenaltyType=="hard" and v.load_pen2>0):
			sErrMes = "failed to create solution due to hard constraint"
			raise ValueError(sErrMes)

	if (argvs.timeLevelingPenaltyType=="hard" and compare_time(argvs.time_error)>0) or \
		(argvs.visitsLevelingPenaltyType=="hard" and argvs.visits_error>0) or \
		(argvs.distLevelingPenaltyType=="hard" and argvs.dist_error>0):
		sErrMes = "failed to create solution due to hard constraint"
		raise ValueError(sErrMes)

	#休憩スポット
	for v in vehicles:
		if argvs.break_flag:
			br_pattern = get_breakspot_pattern(vehicles, argvs)
			#パターン1,2 ready due に収まっているかのチェック
			if br_pattern==1 or br_pattern==2:
				for i,c in enumerate(v.route):
					if c.custno[0]=="b" and compare_time(v.st[i],c.due_fs)>0:
						sErrMes = "failed to create solution due to take break hard constraint"
						raise ValueError(sErrMes)

				for c in v.takebreak:
					if compare_time(v.lv[-1],c.ready_fs)>0 and compare_time(v.lv[0],c.due_fs)<0:
						custnos = [cc.custno for cc in c.additionalcust if cc.custno[0]=="b"]
						if c.custno not in custnos:
							sErrMes = "failed to create solution due to take break hard constraint"
							raise ValueError(sErrMes)

			#パターン2,3 break_int が取れているかのチェック
			if br_pattern==2 or br_pattern==3:
				bbreak_end = 0
				for i,c in enumerate(v.route):
					if c.custno[0]=="b":
						bbreak_end = v.lv[i]
					if argvs.break_interval < v.lv[i] - bbreak_end:
						sErrMes = "failed to create solution due to take break hard constraint"
						raise ValueError(sErrMes)



def autoloaddivide(vehicles,customers,argvs):
	global divided
	load_over=False

	for v in vehicles:
		if v.direct_flag==True or len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])==0 or (v.cap==0 and v.cap2==0):
			continue

		depo_idx=[j for j,c in enumerate(v.route[:-1]) if c.custno=="0"]+[len(v.route)-1]
		load_onbrd=[sum([c.dem for c in v.route[depo_idx[i]+1:depo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0] != "b"] ) for i in range(len(depo_idx)-1)]
		load_onbrd2=[sum([c.dem2 for c in v.route[depo_idx[i]+1:depo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0] != "b"] ) for i in range(len(depo_idx)-1)]

		for j in range(len(depo_idx)-1):
			max_load=load_onbrd[j]
			max_load2=load_onbrd2[j]
			for i in range(depo_idx[j]+1,depo_idx[j+1]):
				if v.route[i].custno[0]!="b":
					if v.route[i].requestType=="PICKUP":
						load_onbrd[j]+=v.route[i].dem
						load_onbrd2[j]+=v.route[i].dem2
					else:
						load_onbrd[j]-=v.route[i].dem
						load_onbrd2[j]-=v.route[i].dem2
				
				if v.route[i].requestType=="PICKUP":
					if load_onbrd[j]>max_load:
						max_load=load_onbrd[j]
				
					if load_onbrd2[j]>max_load2:
						max_load2=load_onbrd2[j]

			if max_load>v.cap or max_load2>v.cap2: #積載オーバーの場合
				cust_list=[v.route[i] for i in range(depo_idx[j]+1,depo_idx[j+1]) if v.route[i].custno[0] != "b"]	#bを除く
				# 分割優先度は高い順に以下
					# 	一番荷量が大きい荷物
					# 	荷量が同じ場合、受け入れ時間が一番長い荷物
					# 	上記同じ場合、荷作業時間が一番短い荷物
					# 	全て同じ場合、CUST NO.の一番若い荷物
				if v.cap!=0 and (v.cap2==0 or (max_load-v.cap)/v.cap>=(max_load2-v.cap2)/v.cap2):
					cust_list.sort(key=lambda x :int(x.custno))
					cust_list.sort(key=lambda x :x.servt)
					cust_list.sort(key=lambda x :x.due_fs-x.ready_fs,reverse=True)
					cust_list.sort(key=lambda x :abs(x.dem),reverse=True)

					for k in range(len(cust_list)):
						if cust_list[k].demdivideunit==1 or cust_list[k].dem==0:
							continue
						if max_load-v.cap<abs(cust_list[k].dem): #一番荷量が大きい荷物がオーバー分以上の場合
							load_over=True

							cust_over=copy.deepcopy(cust_list[k])
							additionalcust=[cust_over]+[copy.copy(ac) for ac in cust_over.additionalcust[1:]]
							cust_over.additionalcust=additionalcust
							for ac in cust_over.additionalcust[1:]:
								ac.additionalcust=copy.copy(additionalcust)
								for i in range(len(ac.additionalcust)):
									#自身を先頭に移動
									if ac.additionalcust[i]==ac:
										ac.additionalcust[0],ac.additionalcust[i]=ac.additionalcust[i],ac.additionalcust[0]
										break
							for ac in cust_over.additionalcust:
								ac.changecust="free"

							if cust_list[k].demdivideunit!=0:
								divideunit=math.floor((v.cap-(max_load-abs(cust_list[k].dem)))/(abs(cust_list[k].dem)/cust_list[k].demdivideunit))
								if divideunit==0:
									continue				#余裕がなさすぎて分割した荷物を１つも積めないときは次のkに移動する
								for c in cust_over.additionalcust:
									c.dem-=(c.dem/c.demdivideunit)*divideunit
									c.dem2-=(c.dem2/c.demdivideunit)*divideunit
									c.demdivideunit-=divideunit
								for c in cust_list[k].additionalcust:
									c.dem=(c.dem/c.demdivideunit)*divideunit
									c.dem2=(c.dem2/c.demdivideunit)*divideunit
									c.demdivideunit=divideunit

								if argvs.multitrip_flag==False:
									v.insert_customer_at(v.route.index(cust_list[k])+1,cust_over,argvs)
								else:
									rem_customers=[customers[0]] + [c for c in cust_over.additionalcust]
									rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])!=0]
									construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
									for m in vehicles:
										for n in rem_vehicles:
											if m.vehno==n.vehno:
												m.route=n.route[:]
												break
										m.update_totalcost_dtable(argvs)
									
								for ac in cust_over.additionalcust:
									customers.append(ac)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])

								divided=True
								break
							else:
								for c in cust_over.additionalcust:
									c.dem2-=c.dem2*(v.cap-(max_load-abs(c.dem)))/abs(c.dem)
									c.dem-=(v.cap-(max_load-abs(c.dem)))*(c.dem/abs(c.dem))
								for c in cust_list[k].additionalcust:
									c.dem2=c.dem2*(v.cap-(max_load-abs(c.dem)))/abs(c.dem)
									c.dem=(v.cap-(max_load-abs(c.dem)))*(c.dem/abs(c.dem))
									
								if argvs.multitrip_flag==False:
									v.insert_customer_at(v.route.index(cust_list[k])+1,cust_over,argvs)
								else:
									rem_customers=[customers[0]] + [c for c in cust_over.additionalcust]
									rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])!=0]
									construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
									for m in vehicles:
										for n in rem_vehicles:
											if m.vehno==n.vehno:
												m.route=n.route[:]
												break
										m.update_totalcost_dtable(argvs)

								for ac in cust_over.additionalcust:
									customers.append(ac)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])

								divided=True
								break
						elif max_load-v.cap>abs(cust_list[k].dem): #一番荷量が大きい荷物がオーバー分より小さい場合
							load_over=True

							cust_over=copy.deepcopy(cust_list[k])
							additionalcust=[cust_over]+[copy.copy(ac) for ac in cust_over.additionalcust[1:]]
							cust_over.additionalcust=additionalcust
							for ac in cust_over.additionalcust[1:]:
								ac.additionalcust=copy.copy(additionalcust)
								for i in range(len(ac.additionalcust)):
									#自身を先頭に移動
									if ac.additionalcust[i]==ac:
										ac.additionalcust[0],ac.additionalcust[i]=ac.additionalcust[i],ac.additionalcust[0]
										break
							for ac in cust_over.additionalcust:
								ac.changecust="free"

							slack_dem=v.cap
							for c in reversed(cust_list):
								if cust_list[k].requestType==c.requestType and c.custno[0]!="b" and cust_list[k]!=c:
									if slack_dem-c.dem>0:
										slack_dem-=c.dem
									else:
										break

							if cust_list[k].demdivideunit!=0:
								divideunit=math.floor(slack_dem/(abs(cust_list[k].dem)/cust_list[k].demdivideunit))
								if divideunit==0:
									continue				#余裕がなさすぎて分割した荷物を１つも積めないときは次のkに移動する
								for c in cust_over.additionalcust:
									c.dem-=(c.dem/c.demdivideunit)*divideunit
									c.dem2-=(c.dem2/c.demdivideunit)*divideunit
									c.demdivideunit-=divideunit
								for c in cust_list[k].additionalcust:
									c.dem=(c.dem/c.demdivideunit)*divideunit
									c.dem2=(c.dem2/c.demdivideunit)*divideunit
									c.demdivideunit=divideunit

								if argvs.multitrip_flag==False:
									v.insert_customer_at(v.route.index(cust_list[k])+1,cust_over,argvs)
								else:
									rem_customers=[customers[0]] + [c for c in cust_over.additionalcust]
									rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0"])!=0 and c.custno[0]!="b"]
									construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
									for m in vehicles:
										for n in rem_vehicles:
											if m.vehno==n.vehno:
												m.route=n.route[:]
												break
										m.update_totalcost_dtable(argvs)

								for ac in cust_over.additionalcust:
									customers.append(ac)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])

								divided=True
								break
							else:
								for c in cust_over.additionalcust:
									c.dem2-=c.dem2*slack_dem/abs(c.dem)
									c.dem-=slack_dem*(c.dem/abs(c.dem))
								for c in cust_list[k].additionalcust:
									c.dem2=c.dem2*slack_dem/abs(c.dem)
									c.dem=slack_dem*(c.dem/abs(c.dem))
									
								if argvs.multitrip_flag==False:
									v.insert_customer_at(v.route.index(cust_list[k])+1,cust_over,argvs)
								else:
									rem_customers=[customers[0]] + [c for c in cust_over.additionalcust]
									rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])!=0]
									construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
									for m in vehicles:
										for n in rem_vehicles:
											if m.vehno==n.vehno:
												m.route=n.route[:]
												break
										m.update_totalcost_dtable(argvs)

								for ac in cust_over.additionalcust:
									customers.append(ac)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])

								divided=True
								break
						else:
							if cust_list[k].changecust=="free":
								v.route.remove(cust_list[k])
								v.update_totalcost_dtable(argvs)
								rem_customers=[customers[0], cust_list[k]]
								rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])!=0]
								construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
								for m in vehicles:
									for n in rem_vehicles:
										if m.vehno==n.vehno:
											m.route=n.route[:]
											break
									m.update_totalcost_dtable(argvs)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])
							else:
								continue

							break
				else:
					cust_list.sort(key=lambda x :int(x.custno))
					cust_list.sort(key=lambda x :x.servt)
					cust_list.sort(key=lambda x :x.due_fs-x.ready_fs,reverse=True)
					cust_list.sort(key=lambda x :abs(x.dem2),reverse=True)

					for k in range(len(cust_list)):
						if cust_list[k].demdivideunit==1 or cust_list[k].dem2==0:
							continue
						if max_load2-v.cap2<=abs(cust_list[k].dem2): #一番荷量が大きい荷物がオーバー分以上の場合
							load_over=True

							cust_over=copy.deepcopy(cust_list[k])
							additionalcust=[cust_over]+[copy.copy(ac) for ac in cust_over.additionalcust[1:]]
							cust_over.additionalcust=additionalcust
							for ac in cust_over.additionalcust[1:]:
								ac.additionalcust=copy.copy(additionalcust)
								for i in range(len(ac.additionalcust)):
									#自身を先頭に移動
									if ac.additionalcust[i]==ac:
										ac.additionalcust[0],ac.additionalcust[i]=ac.additionalcust[i],ac.additionalcust[0]
										break
							for ac in cust_over.additionalcust:
								ac.changecust="free"

							if cust_list[k].demdivideunit!=0:
								divideunit=math.floor((v.cap2-(max_load2-abs(cust_list[k].dem2)))/(abs(cust_list[k].dem2)/cust_list[k].demdivideunit))
								if divideunit==0:
									continue				#余裕がなさすぎて分割した荷物を１つも積めないときは次のkに移動する
								for c in cust_over.additionalcust:
									c.dem-=(c.dem/c.demdivideunit)*divideunit
									c.dem2-=(c.dem2/c.demdivideunit)*divideunit
									c.demdivideunit-=divideunit
								for c in cust_list[k].additionalcust:
									c.dem=(c.dem/c.demdivideunit)*divideunit
									c.dem2=(c.dem2/c.demdivideunit)*divideunit
									c.demdivideunit=divideunit

								if argvs.multitrip_flag==False:
									v.insert_customer_at(v.route.index(cust_list[k])+1,cust_over,argvs)
								else:
									rem_customers=[customers[0]] + [c for c in cust_over.additionalcust]
									rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0"])!=0 and c.custno[0]!="b"]
									construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
									for m in vehicles:
										for n in rem_vehicles:
											if m.vehno==n.vehno:
												m.route=n.route[:]
												break
										m.update_totalcost_dtable(argvs)

								for ac in cust_over.additionalcust:
									customers.append(ac)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])

								divided=True
								break
							else:
								for c in cust_over.additionalcust:
									c.dem-=c.dem*(v.cap2-(max_load2-abs(c.dem2)))/abs(c.dem2)
									c.dem2-=(v.cap2-(max_load2-abs(c.dem2)))*(c.dem2/abs(c.dem2))
								for c in cust_list[k].additionalcust:
									c.dem=c.dem*(v.cap2-(max_load2-abs(c.dem2)))/abs(c.dem2)
									c.dem2=(v.cap2-(max_load2-abs(c.dem2)))*(c.dem2/abs(c.dem2))
									
								if argvs.multitrip_flag==False:
									v.insert_customer_at(v.route.index(cust_list[k])+1,cust_over,argvs)
								else:
									rem_customers=[customers[0]] + [c for c in cust_over.additionalcust]
									rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])!=0]
									construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
									for m in vehicles:
										for n in rem_vehicles:
											if m.vehno==n.vehno:
												m.route=n.route[:]
												break
										m.update_totalcost_dtable(argvs)

								for ac in cust_over.additionalcust:
									customers.append(ac)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])

								divided=True
								break
						elif max_load2-v.cap2>abs(cust_list[k].dem2): #一番荷量が大きい荷物がオーバー分より小さい場合
							load_over=True

							cust_over=copy.deepcopy(cust_list[k])
							additionalcust=[cust_over]+[copy.copy(ac) for ac in cust_over.additionalcust[1:]]
							cust_over.additionalcust=additionalcust
							for ac in cust_over.additionalcust[1:]:
								ac.additionalcust=copy.copy(additionalcust)
								for i in range(len(ac.additionalcust)):
									#自身を先頭に移動
									if ac.additionalcust[i]==ac:
										ac.additionalcust[0],ac.additionalcust[i]=ac.additionalcust[i],ac.additionalcust[0]
										break
							for ac in cust_over.additionalcust:
								ac.changecust="free"

							slack_dem=v.cap2
							for c in reversed(cust_list):
								if cust_list[k].requestType==c.requestType and c.custno[0]!="b" and cust_list[k]!=c:
									if slack_dem-c.dem2>0:
										slack_dem-=c.dem2
									else:
										break

							if cust_list[k].demdivideunit!=0:
								divideunit=math.floor(slack_dem/(abs(cust_list[k].dem2)/cust_list[k].demdivideunit))
								if divideunit==0:
									continue				#余裕がなさすぎて分割した荷物を１つも積めないときは次のkに移動する
								for c in cust_over.additionalcust:
									c.dem-=(c.dem/c.demdivideunit)*divideunit
									c.dem2-=(c.dem2/c.demdivideunit)*divideunit
									c.demdivideunit-=divideunit
								for c in cust_list[k].additionalcust:
									c.dem=(c.dem/c.demdivideunit)*divideunit
									c.dem2=(c.dem2/c.demdivideunit)*divideunit
									c.demdivideunit=divideunit

								if argvs.multitrip_flag==False:
									v.insert_customer_at(v.route.index(cust_list[k])+1,cust_over,argvs)
								else:
									rem_customers=[customers[0]] + [c for c in cust_over.additionalcust]
									rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])!=0]
									construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
									for m in vehicles:
										for n in rem_vehicles:
											if m.vehno==n.vehno:
												m.route=n.route[:]
												break
										m.update_totalcost_dtable(argvs)

								for ac in cust_over.additionalcust:
									customers.append(ac)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])

								divided=True
								break
							else:
								for c in cust_over.additionalcust:
									c.dem-=c.dem*slack_dem/abs(c.dem2)
									c.dem2-=slack_dem*(c.dem2/abs(c.dem2))
								for c in cust_list[k].additionalcust:
									c.dem=c.dem*slack_dem/abs(c.dem2)
									c.dem2=slack_dem*(c.dem2/abs(c.dem2))
									
								if argvs.multitrip_flag==False:
									v.insert_customer_at(v.route.index(cust_list[k])+1,cust_over,argvs)
								else:
									rem_customers=[customers[0]] + [c for c in cust_over.additionalcust]
									rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])!=0]
									construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
									for m in vehicles:
										for n in rem_vehicles:
											if m.vehno==n.vehno:
												m.route=n.route[:]
												break
										m.update_totalcost_dtable(argvs)

								for ac in cust_over.additionalcust:
									customers.append(ac)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])

								divided=True
								break
						else:
							if cust_list[k].changecust=="free":
								v.route.remove(cust_list[k])
								v.update_totalcost_dtable(argvs)
								rem_customers=[customers[0], cust_list[k]]
								rem_vehicles=[m for m in vehicles if len([c for c in m.route[1:-1] if c.custno!="0" and c.custno[0]!="b"])!=0]
								construction_II(rem_customers,rem_vehicles,len(rem_vehicles),argvs.avetime_ape_flag,argvs.avetime_ae_flag,argvs.avevisits_ape_flag,argvs.avevisits_ae_flag,argvs.avedist_ape_flag,argvs.avedist_ae_flag,argvs.lastc_flag,argvs.decr_vnum,argvs,False)
								for m in vehicles:
									for n in rem_vehicles:
										if m.vehno==n.vehno:
											m.route=n.route[:]
											break
									m.update_totalcost_dtable(argvs)
								for n in vehicles:
									tdepo_idx=[i for i,c in enumerate(n.route[:-1]) if c.custno=="0" and c.custno[0]!="b"]+[len(n.route)-1]
									tload_onbrd=[sum([c.dem for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									tload_onbrd2=[sum([c.dem2 for c in n.route[tdepo_idx[i]+1:tdepo_idx[i+1]] if c.requestType=="DELIVERY" and c.custno[0]!="b"] ) for i in range(len(tdepo_idx)-1)]
									n.load_pen,n.load_pen2=calc_vehicle_loadpickup_penalty(n.route, v)
									n.load_pen+=sum([max(m-n.cap,0.0) for m in tload_onbrd])
									n.load_pen2+=sum([max(m-n.cap2,0.0) for m in tload_onbrd2])
							else:
								continue

							break
		
	return load_over


def remove_breakspot(veh, vehicles, argvs):
	"""休憩ノードの削除

	Args:
		veh (_type_): vehicle
		argvs (_type_): argvs
	"""
	no_spotid = False
	rmlst = []
	for r in veh.route:
		if r.custno[0]=='b':
			if r.spotid!='':
				rmlst = rmlst + [r]
			else:
				no_spotid = True

	for rm in rmlst:
		veh.route.remove(rm)

	if no_spotid:
		if rmlst != []:
			veh.update_arrtime_tw(argvs)
			veh.update_load_onbrd()
		remove_breakspot_pat3(veh, vehicles, argvs)
	else:
		veh.update_arrtime_tw(argvs)
		veh.update_load_onbrd()

	return veh


def remove_breakspot_pat3(veh, vehicles, argvs):
	"""パターン3の時にテーブルに追加した休憩スポットを削除する
	Args:

	"""
	bspotnos = []

	veh.update_arrtime_tw(argvs)
	veh.update_load_onbrd()
	for i, r in enumerate(veh.route):
		if r.custno[0] == 'b' and r.spotno != -1:
			bspotnos.append([r.spotno, veh.lv[i-1]])

	for r in reversed(veh.route):
		if r.custno[0] == 'b':
			veh.route.remove(r)

	bspotnos = sorted(bspotnos, key=lambda x: x[0])
	for snn in reversed(bspotnos):
		sn = snn[0]

		#ttable
		#table検索(配送時刻がある場合)
		management_ttable = argvs.management_ttable
		for table in reversed(management_ttable):
			#from_timeの削除(列削除)
			for t in table['table']:
				del t[sn]
			#to_timeの削除(行削除)
			del table['table'][sn]

		#dtable
		#table検索(配送時刻がある場合)
		management_dtable = argvs.management_dtable
		for table in reversed(management_dtable):
			#from_timeの削除(列削除)
			for t in table['table']:
				del t[sn]
			#to_timeの削除(行削除)
			del table['table'][sn]

		#xtable
		if argvs.management_xtable:
			#table検索(配送時刻がある場合)
			management_xtable = argvs.management_xtable
			for table in reversed(management_xtable):
				#from_timeの削除(列削除)
				for t in table['table']:
					del t[sn]
				#to_timeの削除(行削除)
				del table['table'][sn]

		#etable
		if argvs.management_etable:
			#table検索(配送時刻がある場合)
			management_etable = argvs.management_etable
			for table in reversed(management_etable):
				#from_timeの削除(列削除)
				for t in table['table']:
					del t[sn]
				#to_timeの削除(行削除)
				del table['table'][sn]

		#spotnoの更新
		for v1 in vehicles:
			for r1 in v1.route:
				if r1.spotno > sn:
					r1.spotno -= 1

	veh.update_arrtime_tw(argvs)
	veh.update_load_onbrd()

	# sc = []
	# for v1 in vehicles:
	# 	if v1.vehno != veh.vehno:
	# 		for r1 in v1.route:
	# 			if r1.custno[0] == "b":
	# 				if r1.spotno in sc:
	# 					print("error")
	# 				sc.append(r1.spotno)

	return veh


def add_table(veh, from_spotno, to_spotno, from_time, to_time, arr_p, argvs):
	"""パターン3の時にテーブルに作成した休憩スポットを追加する
	Args:
		veh
		start_time
		from_spotno
		to_spotno
		from_time
		to_time
		argvs

	Returns:
		_type_: 追加したspotno
	"""
	vtype = veh.vtype
	start_time1 = veh.lv[arr_p-1]
	start_time2 = start_time1 + argvs.break_time

	#ttable
	#table検索(配送時刻がある場合)
	management_ttable = argvs.management_ttable
	table1 = []
	for table in reversed(management_ttable):
		if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time1)<=0:
			table1 = table['table']
			break
		if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time1)<=0:
			table1 = table['table']	
			break
	else:
		#table検索(配送時刻が無い場合)
		for table in management_ttable:
			if table['vtype'] == 'common':
				table1 = table['table']	
				break

	table2 = []
	for table in reversed(management_ttable):
		if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time2)<=0:
			table2 = table['table']
			break
		if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time2)<=0:
			table2 = table['table']	
			break
	else:
		#table検索(配送時刻が無い場合)
		for table in management_ttable:
			if table['vtype'] == 'common':
				table2 = table['table']	
				break

	#from_timeの追加(列追加)
	for t in table1:
		t.append(0)
	tl = len(table1[from_spotno])
	table1[from_spotno][tl - 1] = from_time

	#to_timeの追加(行追加)
	tt = [0] * len(table2[0])
	tt[to_spotno] = to_time
	table2.append(tt)

	last_spotno = len(table2)-1

	for table in reversed(management_ttable):
		if table['table']!=table1:
			for t in table['table']:
				t.append(0)
		if table['table']!=table2:
			table['table'].append([0]*len(table['table'][0]))

	#dtable
	#table検索(配送時刻がある場合)
	management_dtable = argvs.management_dtable
	table1 = []
	for table in reversed(management_dtable):
		if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time1)<=0:
			table1 = table['table']
			break
		if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time1)<=0:
			table1 = table['table']	
			break
	else:
		#table検索(配送時刻が無い場合)
		for table in management_dtable:
			if table['vtype'] == 'common':
				table1 = table['table']	
				break

	table2 = []
	for table in reversed(management_dtable):
		if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time2)<=0:
			table2 = table['table']
			break
		if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time2)<=0:
			table2 = table['table']	
			break
	else:
		#table検索(配送時刻が無い場合)
		for table in management_dtable:
			if table['vtype'] == 'common':
				table2 = table['table']	
				break

	to_val = table1[from_spotno][to_spotno]
	#from_timeの追加(列追加)
	for t in table1:
		t.append(0)
	if to_time > 0:
		table1[from_spotno][tl - 1] = to_val / 2
	else:
		table1[from_spotno][tl - 1] = to_val

	#to_timeの追加(行追加)
	tt = [0] * len(table2[0])
	if to_time > 0:
		tt[to_spotno] = to_val / 2
	else:
		tt[to_spotno] = 0
	table2.append(tt)

	for table in reversed(management_dtable):
		if table['table']!=table1:
			for t in table['table']:
				t.append(0)
		if table['table']!=table2:
			table['table'].append([0]*len(table['table'][0]))

	#xtable
	if argvs.management_xtable:
		#table検索(配送時刻がある場合)
		management_xtable = argvs.management_xtable
		table1 = []
		for table in reversed(management_xtable):
			if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time1)<=0:
				table1 = table['table']
				break
			if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time1)<=0:
				table1 = table['table']	
				break
		else:
			#table検索(配送時刻が無い場合)
			for table in management_xtable:
				if table['vtype'] == 'common':
					table1 = table['table']	
					break

		table2 = []
		for table in reversed(management_xtable):
			if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time2)<=0:
				table2 = table['table']
				break
			if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time2)<=0:
				table2 = table['table']	
				break
		else:
			#table検索(配送時刻が無い場合)
			for table in management_xtable:
				if table['vtype'] == 'common':
					table2 = table['table']	
					break

		to_val = table1[from_spotno][to_spotno]
		#from_timeの追加(列追加)
		for t in table1:
			t.append(0)
		if to_time > 0:
			table1[from_spotno][tl - 1] = to_val / 2
		else:
			table1[from_spotno][tl - 1] = to_val

		#to_timeの追加(行追加)
		tt = [0] * len(table2[0])
		if to_time > 0:
			tt[to_spotno] = to_val / 2
		else:
			tt[to_spotno] = 0
		table2.append(tt)

		for table in reversed(management_xtable):
			if table['table']!=table1:
				for t in table['table']:
					t.append(0)
			if table['table']!=table2:
				table['table'].append([0]*len(table['table'][0]))

	#etable
	if argvs.management_etable:
		#table検索(配送時刻がある場合)
		management_etable = argvs.management_etable
		table1 = []
		for table in reversed(management_etable):
			if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time1)<=0:
				table1 = table['table']
				break
			if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time1)<=0:
				table1 = table['table']	
				break
		else:
			#table検索(配送時刻が無い場合)
			for table in management_etable:
				if table['vtype'] == 'common':
					table1 = table['table']	
					break

		table2 = []
		for table in reversed(management_etable):
			if (table['vtype'] == vtype) and compare_time(table['start_time'] , start_time2)<=0:
				table2 = table['table']
				break
			if (table['vtype'] == 'time_common') and compare_time(table['start_time'] , start_time2)<=0:
				table2 = table['table']	
				break
		else:
			#table検索(配送時刻が無い場合)
			for table in management_etable:
				if table['vtype'] == 'common':
					table2 = table['table']	
					break

		to_val = table1[from_spotno][to_spotno]
		#from_timeの追加(列追加)
		for t in table1:
			t.append(0)
		if to_time > 0:
			table1[from_spotno][tl - 1] = to_val / 2
		else:
			table1[from_spotno][tl - 1] = to_val

		#to_timeの追加(行追加)
		tt = [0] * len(table2[0])
		if to_time > 0:
			tt[to_spotno] = to_val / 2
		else:
			tt[to_spotno] = 0
		table2.append(tt)

		for table in reversed(management_etable):
			if table['table']!=table1:
				for t in table['table']:
					t.append(0)
			if table['table']!=table2:
				table['table'].append([0]*len(table['table'][0]))

	return last_spotno


def get_breakspot_pattern(vehicles, argvs):
	"""休憩スポットのパターン番号を返す

	Args:
		vehicles (_type_): _description_
		argvs (_type_): _description_

	Returns:
		_type_: _description_
	"""	
	no_takebreak = True
	for v in vehicles:
		if v.takebreak!=[]:
			no_takebreak = False
			break

	if no_takebreak==True and argvs.break_interval!=0 and argvs.break_time!=0:
		return 3
	elif no_takebreak==False and argvs.break_interval==0:
		return 1
	elif no_takebreak==False and argvs.break_interval!=0:
		return 2
	else:
		return 0


def insert_breakspot(takebreak_list1, takebreak_list2, customers, veh, vehicles, argvs, error_type=0, veh2=None):
	"""休憩ノードの挿入

	Args:
		customers (_type_): customers
		veh (_type_): vehicle
		argvs (_type_): argvs
		error_type (_type_): 0:エラー終了しない, 1:エラー終了する

	Returns:
		veh: 休憩スポットを挿入後のveh
"""
	def create_customer(_custno,argvs):
		"""パターン3の時に休憩スポットを作成する

		Args:
			cust (_type_): 1つ目前のスポット(customer)
			argvs (_type_): argvs

		Returns:
			_type_: _description_
		"""
		custno = 'b00'
		spotid = ""
		y = 0
		x = 0
		dem = 0
		dem2 = 0
		ready = '1000/01/01 00:00:00'
		due = '3000/01/01 00:00:00'
		servt = argvs.break_time
		starttime = argvs.starttime
		reje_ve = []
		parkt_arrive = 0
		parkt_open = 0
		depotservt = 0
		additionalcust = []
		demdivideunit = 1
		requestType = "DELIVERY"
		deny_unass = True

		cust = Customer(custno,spotid,y,x,dem,dem2,ready,due,servt,starttime,reje_ve,parkt_arrive,parkt_open,depotservt,additionalcust,demdivideunit,requestType,deny_unass)
		cust.custno = _custno
		cust.additionalcust = [cust]
		return cust


	def get_no_park_idx(veh):
		"""no_park_idxを作成する

		Args:
			veh (_type_): _description_
		"""
		no_park_idx=[]

		if len(veh.route)>=2:
			depo_idx=[j for j,c in enumerate(veh.route[:-1]) if c.custno=="0"]+[len(veh.route)-1]
			load=[0 for c in veh.route]
			load2=[0 for c in veh.route]
			for i in range(len(veh.route)-1):
				if i in depo_idx:
					for j in range(i+1,depo_idx[depo_idx.index(i)+1]):
						if veh.route[j].requestType=="DELIVERY":
							if veh.route[j].custno[0]!="b":
								load[i]+=veh.route[j].dem
								load2[i]+=veh.route[j].dem2
				else:
					if veh.route[i].custno[0]!="b":
						if veh.route[i].requestType=="DELIVERY":
							load[i]=load[i-1]-veh.route[i].dem
							load2[i]=load2[i-1]-veh.route[i].dem2
						else:
							load[i]=load[i-1]+veh.route[i].dem
							load2[i]=load2[i-1]+veh.route[i].dem2

			for i in reversed(range(len(load))):
				if i in depo_idx and i+1 in depo_idx:
					load[i]=load[i+1]
					load2[i]=load2[i+1]

			load=[i if i>1e-9 else 0 for i in load] #誤差対策
			load2=[i if i>1e-9 else 0 for i in load2] #誤差対策
			
			for c in veh.route[depo_idx[0]+1:depo_idx[1]]:
				if c.requestType=="DELIVERY":
					break
			else:
				if load[0]==0 and load2[0]==0:
					no_park_idx.append(0)
			
			for i in range(1,len(depo_idx)-1):
				if load[depo_idx[i]-1]==0 and load2[depo_idx[i]-1]==0:
					for c in veh.route[depo_idx[i]+1:depo_idx[i+1]]:
						if c.requestType=="DELIVERY":
							break
					else:
						if load[depo_idx[i]]==0 and load2[depo_idx[i]]==0:
							no_park_idx.append(depo_idx[i])
			if load[depo_idx[-1]-1]==0 and load2[depo_idx[-1]-1]==0:
				no_park_idx.append(depo_idx[-1])

		return no_park_idx


	def pattern1(takebreak_list, customers, veh, vehicles, argvs, error_type):
		"""_summary_

		Args:
			customers (_type_): _description_
			veh (_type_): _description_
			argvs (_type_): _description_
			error_type (_type_): 0:エラー終了しない, 1:エラー終了する

		Raises:
			ValueError: _description_

		Returns:
			veh: 休憩スポットを挿入後のveh
		"""
		if len([c for c in veh.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) == 0:
			return veh

		#一旦全ての休憩スポットを削除する
		veh = remove_breakspot(veh, vehicles, argvs)

		#休憩ノードを休憩期間開始時刻順に並べる
		takebreak_sorted = sorted(takebreak_list, key=lambda x: x.ready_fs)

		bbreak_p = 0

		#休憩期間開始時刻を初めて超える配送先の直前に休憩ノードを追加
		for tb in takebreak_sorted:
			tveh = dcopy(veh)
			arr_ts = veh.arr
			lv_ts = veh.lv
			arr_t_len = len(arr_ts)

			#開始前の休憩は捨てる
			if tb.due_fs < lv_ts[0]:
				continue

			#休憩期間開始時刻を初めて超える配送先を求める
			for arr_p in range(1,arr_t_len):
				if veh.st[arr_p] > tb.ready_fs:
					break
			else:
				#休憩開始時間より早く配送が終了した
				continue #次の休憩スポットの挿入処理へ

			#直前に休憩ノードを追加
			while True:
				if arr_p <= bbreak_p:
					#一つ前の休憩時間にまで戻ってしまった
					if error_type == 1:
						sErrMes = "failed to create initial solution due to break-time"
						raise ValueError(sErrMes)
					else:
						veh = None
						return veh

				#休憩ノードを追加
				if tb.spotid == '':
					#spotid無し対応
					from_spotno = veh.route[arr_p - 1].spotno
					to_spotno = veh.route[arr_p].spotno
					tdiff = arr_ts[arr_p] - lv_ts[arr_p - 1]
					from_time = tb.ready_fs - lv_ts[arr_p - 1]
					to_time = tdiff - from_time
					last_spotno = add_table(veh, from_spotno, to_spotno, from_time, to_time, arr_p, argvs)	#時間テーブルなどに休憩スポットを追加
					tb.spotno = last_spotno
				if argvs.bulkShipping_flag == False:
					veh.insert_customer_at(arr_p,tb,argvs)
				else:
					tied_customers = TiedCustomer(tb.custno,tb.spotid,tb.ready_fs,tb.due_fs,tb.x,tb.y)
					tied_customers.customers.append(tb)
					tied_customers.servt=tb.servt
					tied_customers.dem=tb.dem
					tied_customers.dem2=tb.dem2
					tied_customers.reje_ve=tb.reje_ve
					tied_customers.parkt_open=tb.parkt_open
					tied_customers.parkt_arrive=tb.parkt_arrive
					tied_customers.depotservt=tb.depotservt
					tied_customers.additionalcust=[tied_customers]
					tied_customers.demdivideunit=tb.demdivideunit
					tied_customers.requestType=tb.requestType
					tied_customers.deny_unass=tb.deny_unass #未割り当て荷物
					tied_customers.spotno=tb.spotno
					veh.insert_customer_at(arr_p,tied_customers,argvs)

				no_park_idx = get_no_park_idx(veh)

				#dueチェック
				if veh.st[arr_p] > tb.due_fs:
					#休憩スポット到着が間に合わなかった
					veh = tveh
					arr_p -= 1
					continue

				#通行止チェック
				pick_opt_flag=get_pick_opt_status(veh, argvs)[0]

				depo_idx=[j for j,c in enumerate(veh.route[:-1]) if c.custno=="0"]+[len(veh.route)-1]
				servt_dict={}
				for k in range(len(depo_idx)-1):
					servt_dict[veh.route[depo_idx[k]]]=0
					servt=0
					for j in range(depo_idx[k]+1,depo_idx[k+1]):
						if not veh.route[j].custno.startswith("e") and not veh.route[j].custno.startswith("b") and veh.route[j].requestType=="DELIVERY":
							servt+=veh.route[j].depotservt
					if veh.route[depo_idx[k]+1].custno!="0":
						servt_dict[veh.route[depo_idx[k]]]+=servt+veh.depotservt
					else:
						servt_dict[veh.route[depo_idx[k]]]+=servt
				#集荷時間
				servt_dict[veh.route[len(veh.route)-1]]=0
				for k in range(1,len(depo_idx)):
					servt=0
					for j in range(depo_idx[k-1]+1,depo_idx[k]):
						if not veh.route[j].custno.startswith("e") and veh.route[j].requestType=="PICKUP":
							if veh.route[j].custno[0]!="b":
								servt+=veh.route[j].depotservt
					servt_dict[veh.route[depo_idx[k]]]+=servt

				impassable,_,_,_,_= check_impassability(customers,veh,veh.lv[0],1,servt_dict,len(veh.route),no_park_idx,pick_opt_flag,argvs)
				if impassable:
					bbreak_p = arr_p
					break	#通行可能だったら挿入成功
				else:
					#通行止なので次を探索
					veh = tveh
					arr_p -= 1

		return veh


	def pattern2(takebreak_list1, customers, veh, vehicles, argvs, error_type):
		"""_summary_

		Args:
			customers (_type_): _description_
			veh (_type_): _description_
			argvs (_type_): _description_
			error_type (_type_): 0:エラー終了しない, 1:エラー終了する

		Raises:
			ValueError: _description_

		Returns:
			veh: 休憩スポットを挿入後のveh
			errf: 0:エラー無し,1:エラー有り
		"""
		if len([c for c in veh.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) == 0:
			return veh

		#一旦全ての休憩スポットを削除する
		veh = remove_breakspot(veh, vehicles, argvs)

		#休憩ノードを休憩期間開始時刻順に並べる
		takebreak_sorted = sorted(takebreak_list1, key=lambda x: x.ready_fs)

		bbreak_p = 0

		#休憩間隔用変数の初期化
		abreak_start, abreak_end, bbreak_end = 0, 0, 0

		#休憩期間開始時刻を初めて超える配送先の直前に休憩ノードを追加
		for tb in takebreak_sorted:
			tveh = dcopy(veh)
			arr_ts = veh.arr
			lv_ts = veh.lv
			arr_t_len = len(arr_ts)

			#開始前の休憩は捨てる
			if tb.due_fs < lv_ts[0]:
				continue

			#休憩期間開始時刻を初めて超える配送先を求める
			for arr_p in range(1,arr_t_len):
				if veh.st[arr_p] > tb.ready_fs:
					break
			else:
				#休憩開始時間より早く配送が終了した
				continue #次の休憩スポットの挿入処理へ

			#直前に休憩ノードを追加
			while True:
				if arr_p <= bbreak_p:
					#一つ前の休憩時間にまで戻ってしまった
					if error_type == 1:
						sErrMes = "failed to create initial solution due to break-time"
						raise ValueError(sErrMes)
					else:
						veh = None
						return veh

				#休憩ノードを追加
				if tb.spotid == '':
					#spotid無し対応
					from_spotno = veh.route[arr_p - 1].spotno
					to_spotno = veh.route[arr_p].spotno
					tdiff = arr_ts[arr_p] - lv_ts[arr_p - 1]
					if tdiff == 0.0:
						#移動時間が0の場合は一つ前に行く
						arr_p -= 1
						continue
					from_time = 0.0
					if veh.st[arr_p] <= bbreak_end + argvs.break_interval and tb.ready_fs > lv_ts[arr_p - 1]:
						#移動中に休憩間隔を超えずかつ休憩開始時間枠より前に出発する場合
						from_time = tb.ready_fs - lv_ts[arr_p - 1]
					elif veh.st[arr_p] > bbreak_end + argvs.break_interval and tb.ready_fs > lv_ts[arr_p - 1]:
						#移動中に休憩間隔を超えてかつ休憩開始時間枠より前に出発する場合
						from_time = bbreak_end + argvs.break_interval - lv_ts[arr_p - 1]
					to_time = tdiff - from_time
					last_spotno = add_table(veh, from_spotno, to_spotno, from_time, to_time, arr_p, argvs)	#時間テーブルなどに休憩スポットを追加
					tb.spotno = last_spotno

				if argvs.bulkShipping_flag == False:
					veh.insert_customer_at(arr_p,tb,argvs)
				else:
					tied_customers = TiedCustomer(tb.custno,tb.spotid,tb.ready_fs,tb.due_fs,tb.x,tb.y)
					tied_customers.customers.append(tb)
					tied_customers.servt=tb.servt
					tied_customers.dem=tb.dem
					tied_customers.dem2=tb.dem2
					tied_customers.reje_ve=tb.reje_ve
					tied_customers.parkt_open=tb.parkt_open
					tied_customers.parkt_arrive=tb.parkt_arrive
					tied_customers.depotservt=tb.depotservt
					tied_customers.additionalcust=[tied_customers]
					tied_customers.demdivideunit=tb.demdivideunit
					tied_customers.requestType=tb.requestType
					tied_customers.deny_unass=tb.deny_unass #未割り当て荷物
					tied_customers.spotno=tb.spotno
					veh.insert_customer_at(arr_p,tied_customers,argvs)
				abreak_start = veh.arr[arr_p]
				abreak_end = veh.lv[arr_p]

				no_park_idx = get_no_park_idx(veh)

				#dueチェック
				if veh.st[arr_p] > tb.due_fs:
					#休憩スポット到着が間に合わなかった
					veh = tveh
					arr_p -= 1
					continue

				#intervalチェック
				abreak_end = veh.lv[arr_p]
				if bbreak_end + argvs.break_interval < abreak_start:
					#休憩間隔を超えてしまった
					veh = tveh
					arr_p -= 1
					continue

				#通行止チェック
				pick_opt_flag=get_pick_opt_status(veh, argvs)[0]

				depo_idx=[j for j,c in enumerate(veh.route[:-1]) if c.custno=="0"]+[len(veh.route)-1]
				servt_dict={}
				for k in range(len(depo_idx)-1):
					servt_dict[veh.route[depo_idx[k]]]=0
					servt=0
					for j in range(depo_idx[k]+1,depo_idx[k+1]):
						if not veh.route[j].custno.startswith("e") and not veh.route[j].custno.startswith("b") and veh.route[j].requestType=="DELIVERY":
							servt+=veh.route[j].depotservt
					if veh.route[depo_idx[k]+1].custno!="0":
						servt_dict[veh.route[depo_idx[k]]]+=servt+veh.depotservt
					else:
						servt_dict[veh.route[depo_idx[k]]]+=servt
				#集荷時間
				servt_dict[veh.route[len(veh.route)-1]]=0
				for k in range(1,len(depo_idx)):
					servt=0
					for j in range(depo_idx[k-1]+1,depo_idx[k]):
						if not veh.route[j].custno.startswith("e") and veh.route[j].requestType=="PICKUP":
							if veh.route[j].custno[0]!="b":
								servt+=veh.route[j].depotservt
					servt_dict[veh.route[depo_idx[k]]]+=servt

				impassable,_,_,_,_ = check_impassability(customers,veh,veh.lv[0],1,servt_dict,len(veh.route),no_park_idx,pick_opt_flag,argvs)
				if impassable:
					#通行可能だったら挿入成功
					bbreak_p = arr_p
					bbreak_end = abreak_end
					break
				else:
					#通行止なので次を探索
					veh = tveh
					arr_p -= 1

		#配送終了時間まで休憩間隔を守られているかチェック
		lv_last = 0.0
		if argvs.lastc_flag == True:
			alast_idx = len(veh.route)
			for i in reversed(range(0,len(veh.route))):
				if veh.route[i].custno!="0" and veh.route[i].custno[0]!="b" and i!=len(veh.route)-1:
					break
				else:
					alast_idx=i
			lv_last = veh.lv[alast_idx-1]
		else:
			veh_route_size = len(veh.route)
			lv_last = veh.lv[veh_route_size-1]

		if bbreak_end + argvs.break_interval < lv_last:
			#最後の休憩から配送終了時間までの時間が休憩間隔を超えてしまった
			if error_type == 1:
				sErrMes = "failed to create initial solution due to break-time"
				raise ValueError(sErrMes)
			else:
				veh = None
				return veh

		return veh


	def pattern3(customers, veh, vehicles, argvs, error_type):
		"""br_intとbr_timeの値を守るように休憩を内部で生成する。

		Args:
			customers (_type_): _description_
			veh (_type_): vehicle
			argvs (_type_): argvs
			error_type (_type_): 0:エラー終了しない, 1:エラー終了する

		Returns:
			veh: 休憩スポットを挿入後のveh
		"""		
		if len([c for c in veh.route[1:-1] if c.custno!="0" and c.custno[0]!="b"]) == 0:
			return veh

		#一旦全ての休憩スポットを削除する
		veh = remove_breakspot(veh, vehicles, argvs)

		#休憩間隔より滞在時間が長い配送先が有ったら終了する
		route_size = len(veh.route)
		for i in range(1, route_size):
			if veh.lv[i] - veh.arr[i] >= argvs.break_interval:
				sErrMes = "failed to create initial solution due to break-time"
				raise ValueError(sErrMes)

		bbreak_p = 0

		#休憩間隔用変数の初期化
		abreak_end, bbreak_end = veh.lv[0], veh.lv[0]

		#挿入した休憩スポットのカウンタ
		br_cnt = 0

		mainloop_breakf = True
		while mainloop_breakf:
			tveh = dcopy(veh)
			arr_ts = veh.arr
			arr_t_len = len(arr_ts)
			lv_ts = veh.lv

			#休憩期間開始時刻を初めて超える配送先を求める
			for arr_p in range(1, arr_t_len):
				if veh.st[arr_p] >= bbreak_end + argvs.break_interval:
					break
			else:
				#休憩スポットの挿入を完了した
				break

			#直前に休憩ノードを追加
			while arr_p > 0:
				if arr_p <= bbreak_p:
					#一つ前の休憩時間にまで戻ってしまった
					if error_type == 1:
						sErrMes = "failed to create initial solution due to break-time"
						raise ValueError(sErrMes)
					else:
						veh = None
						return veh

				if (lv_ts[arr_p] == bbreak_end + argvs.break_interval) and argvs.break_interval == argvs.break_time:
					# 休憩時間=休憩間隔の場合
					mainloop_breakf = False
					break

				if lv_ts[arr_p - 1] > bbreak_end + argvs.break_interval:
					# 配送先異滞在中に休憩間隔が過ぎた
					arr_p -= 1
					continue

				if veh.st[arr_p] - arr_ts[arr_p] >= argvs.break_interval:
					#もしparktが休憩間隔より長い場合は一つ前に行く
					arr_p -= 1
					continue

				#休憩スポットを作成して追加
				br_spot = create_customer('b'+str(veh.vehno)+'_'+str(br_cnt), argvs)
				tdiff = arr_ts[arr_p] - lv_ts[arr_p - 1]
				if tdiff == 0.0:
					# 移動時間が0の場合は一つ前に行く
					if veh.route[arr_p-1].spotno!=veh.route[arr_p].spotno:
						arr_p -= 1
						continue
					else:
						if veh.route[arr_p-1].custno=="b":
							#この場合は無限の休憩スポットの後に移動がないため無限に休憩スポットが入るから解は無い
							veh = None
							return veh

				from_spotno = veh.route[arr_p - 1].spotno
				to_spotno = veh.route[arr_p].spotno
				from_time = min(bbreak_end + argvs.break_interval, arr_ts[arr_p]) - lv_ts[arr_p-1]
				to_time = tdiff - from_time
				last_spotno = add_table(veh, from_spotno, to_spotno, from_time, to_time, arr_p, argvs)	#時間テーブルなどに休憩スポットを追加
				br_spot.spotno = last_spotno
				if argvs.bulkShipping_flag == False:
					veh.insert_customer_at(arr_p,br_spot,argvs)
				else:
					tied_customers = TiedCustomer(br_spot.custno,br_spot.spotid,br_spot.ready_fs,br_spot.due_fs,br_spot.x,br_spot.y)
					tied_customers.customers.append(br_spot)
					tied_customers.servt=br_spot.servt
					tied_customers.dem=br_spot.dem
					tied_customers.dem2=br_spot.dem2
					tied_customers.reje_ve=br_spot.reje_ve
					tied_customers.parkt_open=br_spot.parkt_open
					tied_customers.parkt_arrive=br_spot.parkt_arrive
					tied_customers.depotservt=br_spot.depotservt
					tied_customers.additionalcust=[tied_customers]
					tied_customers.demdivideunit=br_spot.demdivideunit
					tied_customers.requestType=br_spot.requestType
					tied_customers.deny_unass=br_spot.deny_unass #未割り当て荷物
					tied_customers.spotno=br_spot.spotno
					veh.insert_customer_at(arr_p,tied_customers,argvs)
				abreak_end = veh.lv[arr_p]

				#通行止チェック
				pick_opt_flag=get_pick_opt_status(veh, argvs)[0]

				no_park_idx=get_no_park_idx(veh)

				depo_idx=[j for j,c in enumerate(veh.route[:-1]) if c.custno=="0"]+[len(veh.route)-1]
				servt_dict={}
				for k in range(len(depo_idx)-1):
					servt_dict[veh.route[depo_idx[k]]]=0
					servt=0
					for j in range(depo_idx[k]+1,depo_idx[k+1]):
						if not veh.route[j].custno.startswith("e") and not veh.route[j].custno.startswith("b") and veh.route[j].requestType=="DELIVERY":
							servt+=veh.route[j].depotservt
					if veh.route[depo_idx[k]+1].custno!="0":
						servt_dict[veh.route[depo_idx[k]]]+=servt+veh.depotservt
					else:
						servt_dict[veh.route[depo_idx[k]]]+=servt
				#集荷時間
				servt_dict[veh.route[len(veh.route)-1]]=0
				for k in range(1,len(depo_idx)):
					servt=0
					for j in range(depo_idx[k-1]+1,depo_idx[k]):
						if not veh.route[j].custno.startswith("e") and veh.route[j].requestType=="PICKUP":
							if veh.route[j].custno[0]!="b":
								servt+=veh.route[j].depotservt
					servt_dict[veh.route[depo_idx[k]]]+=servt

				impassable,_,_,_,_ = check_impassability(customers,veh,veh.lv[0],1,servt_dict,len(veh.route),no_park_idx,pick_opt_flag,argvs)
				if impassable:
					#通行可能だったら挿入成功
					br_cnt += 1
					bbreak_p = arr_p
					bbreak_end = abreak_end
					break
				else:
					#通行止なので次を探索
					veh = tveh
					arr_p -= 1
			else:
				if error_type == 1:
					#出発拠点まで戻っても休憩を挿入できなかった
					sErrMes = "failed to create initial solution due to break-time"
					raise ValueError(sErrMes)
				else:
					veh = None
					return veh

		return veh

	pat = get_breakspot_pattern(vehicles, argvs)
	vehnos=[v.vehno for v in vehicles]
	if pat==3:
		if veh2 == None:
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			veh = pattern3(customers, veh, vehicles, argvs, error_type)
			if veh==None:
				return None
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			return veh
		else:
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			vehicles[vehnos.index(veh2.vehno)].route = veh2.route
			veh = pattern3(customers, veh, vehicles, argvs, error_type)
			if veh==None:
				return None, None
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			veh2.route = vehicles[vehnos.index(veh2.vehno)].route
			veh2 = pattern3(customers, veh2, vehicles, argvs, error_type)
			if veh2==None:
				return None, None
			veh.route = vehicles[vehnos.index(veh.vehno)].route
			return veh, veh2

	elif pat==1:
		if veh2 == None:
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			veh = pattern1(takebreak_list1, customers, veh, vehicles, argvs, error_type)
			if veh==None:
				return None
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			return veh
		else:
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			vehicles[vehnos.index(veh2.vehno)].route = veh2.route
			veh = pattern1(takebreak_list1, customers, veh, vehicles, argvs, error_type)	#休憩ファイルのみに従って休憩を取る。⇒パターン1 
			if veh==None:
				return None, None
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			veh2.route = vehicles[vehnos.index(veh2.vehno)].route
			veh2 = pattern1(takebreak_list2, customers, veh2, vehicles, argvs, error_type)	#休憩ファイルのみに従って休憩を取る。⇒パターン1 
			if veh2==None:
				return None, None
			veh.route = vehicles[vehnos.index(veh.vehno)].route
			return veh, veh2

	elif pat==2:
		if veh2 == None:
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			veh = pattern2(takebreak_list1, customers, veh, vehicles, argvs, error_type)
			if veh==None:
				return None
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			return veh
		else:
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			vehicles[vehnos.index(veh2.vehno)].route = veh2.route
			veh = pattern2(takebreak_list1, customers, veh, vehicles, argvs, error_type)	#休憩ファイルのみに従って休憩を取る。⇒パターン1 
			if veh==None:
				return None, None
			vehicles[vehnos.index(veh.vehno)].route = veh.route
			veh2.route = vehicles[vehnos.index(veh2.vehno)].route
			veh2 = pattern2(takebreak_list2, customers, veh2, vehicles, argvs, error_type)	#休憩ファイルのみに従って休憩を取る。⇒パターン1 
			if veh2==None:
				return None, None
			veh.route = vehicles[vehnos.index(veh.vehno)].route
			return veh, veh2
	else:
		if veh2 == None:
			return veh
		else:
			return veh, veh2


def check_break_initroute(vehicles, argvs):
	"""読み込んだ初期解に休憩スポットが正しく入っているかチェック

	Args:
		_vehs (_type_): _description_
		argvs (_type_): _description_
	"""
	for veh in vehicles:
		pat=get_breakspot_pattern(vehicles, argvs)
		if pat==1:
			### パターン1 ###
			takebreak_sorted = sorted(veh.takebreak, key=lambda x: x.ready_fs) #休憩ノードを休憩期間開始時刻順に並べる
			for tb in takebreak_sorted:
				if tb.ready_fs > max(veh.lv):
					#休憩スポットの開始時間より早く配送が終わったので終了
					break
				for i, r in enumerate(veh.route):
					if r.custno == tb.custno:
						if tb.due_fs > veh.st[i]:
							break
						elif argvs.opt_unassigned_flag==True:
							#休憩時間に間に合っていないのでエラー
							sErrMes = "failed to read initial solution due to break-time"
							raise ValueError(sErrMes,veh.route[i-1])
						else:
							pass
				else:
					if argvs.opt_unassigned_flag==True:
						#必要な休憩が入っていないのでエラー
						sErrMes = "failed to read initial solution due to break-time"
						raise ValueError(sErrMes,veh.route[i-1])
					else:
						## 初期解入力、パターン１では、休憩違反は許容する
						pass

		elif pat==2:
			### パターン2 ###
			takebreak_sorted = sorted(veh.takebreak, key=lambda x: x.ready_fs) #休憩ノードを休憩期間開始時刻順に並べる
			for tb in takebreak_sorted:
				if tb.ready_fs > max(veh.lv):
					#休憩スポットの開始時間より早く配送が終わったので終了
					break
				for i, r in enumerate(veh.route):
					if r.custno == tb.custno:
						bbreak_end = veh.lv[i]
						break
						## 初期解入力、パターン２では、休憩間隔違反は許容する
				else:
					if argvs.opt_unassigned_flag==True:
						#必要な休憩が入っていないのでエラー
						sErrMes = "failed to read initial solution due to break-time"
						raise ValueError(sErrMes,veh.route[i-1])
					else:
						## 初期解入力、パターン２では、休憩違反は許容する
						pass

def check_break_createroute(vehicles, argvs):
	"""生成した初期解に休憩スポットが正しく入っているかチェック

	Args:
		_vehs (_type_): _description_
		argvs (_type_): _description_

	returns:
		True: OK
		False: NG
	"""
	for veh in vehicles:
		pat=get_breakspot_pattern(vehicles, argvs)
		if pat==1:
			### パターン1 ###
			takebreak_sorted = sorted(veh.takebreak, key=lambda x: x.ready_fs) #休憩ノードを休憩期間開始時刻順に並べる
			for tb in takebreak_sorted:
				if tb.ready_fs > max(veh.lv):
					#休憩スポットの開始時間より早く配送が終わったので終了
					break
				for i, r in enumerate(veh.route):
					if r.custno == tb.custno:
						if tb.due_fs >= veh.st[i]:
							break
						else:
							#休憩時間に間に合っていないのでエラー
							return veh.vehno
				else:
					#必要な休憩が入っていないのでエラー
					return veh.vehno

		elif pat==2:
			### パターン2 ###
			takebreak_sorted = sorted(veh.takebreak, key=lambda x: x.ready_fs) #休憩ノードを休憩期間開始時刻順に並べる
			bbreak_end = 0
			for tb in takebreak_sorted:
				if tb.ready_fs > max(veh.lv):
					#休憩スポットの開始時間より早く配送が終わったので終了
					break
				for i, r in enumerate(veh.route):
					if r.custno == tb.custno:
						if tb.due_fs > veh.st[i]:
							bbreak_end = veh.lv[i]
							break
						else:
							#休憩間隔を超えてしまった
							return veh.vehno
				else:
					#必要な休憩が入っていないのでエラー
					return veh.vehno

			#配送終了時間まで休憩間隔を守られているかチェック
			last_idx=get_last_idx(veh, argvs)
			if bbreak_end + argvs.break_interval < veh.st[last_idx]:
				#最後の休憩から配送終了時間までの時間が休憩間隔を超えてしまった
				return veh.vehno

		elif pat==3:
			### パターン3 ###
			bbreak_end = 0
			last_idx = get_last_idx(veh, argvs)
			for i in range(1,last_idx):
				if bbreak_end + argvs.break_interval < veh.st[i]:
					#休憩間隔エラー
					return veh.vehno
				if veh.route[i].custno[0] == "b":
					bbreak_end = veh.lv[i]

	return -1


def get_pick_opt_status(vehicle, argvs):
	"""現状の集荷最適化の状態を取得

	Returns:
		_type_: _description_
	"""
	pick_opt_flag=False
	last_nobrspot_idx = -1

	if argvs.bulkShipping_flag==True:
		for idx in reversed(range(1, len(vehicle.route)-1)):
			if vehicle.route[idx].customers[0].custno[0] != 'b':
				last_nobrspot_idx = idx
				break

		if last_nobrspot_idx != -1:
			if vehicle.route[last_nobrspot_idx].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0":
				for i in reversed(range(1, last_nobrspot_idx)):
					if vehicle.route[i].customers[0].custno=="0":
						break
					if vehicle.route[i].requestType=="PICKUP":
						pick_opt_flag=True
						break

	else:
		for idx in reversed(range(1, len(vehicle.route)-1)):
			if vehicle.route[idx].custno[0] != 'b':
				last_nobrspot_idx = idx
				break

		if last_nobrspot_idx != -1:
			if vehicle.route[last_nobrspot_idx].custno=="0" and vehicle.route[-1].custno!="0":
				for i in reversed(range(1, last_nobrspot_idx)):
					if vehicle.route[i].custno=="0":
						break
					if vehicle.route[i].requestType=="PICKUP":
						pick_opt_flag=True
						break

	if argvs.pickup_flag==False:
		pick_opt_flag = False

	return pick_opt_flag, last_nobrspot_idx


def pick_opt_rest(vehicle, pick_opt_flag, argvs):
	"""不要になった集荷最適化用の depo の削除

	Args:
		veh (_type_): _description_
		argvs (_type_): _description_
	"""    
	idx = get_pick_opt_status(vehicle, argvs)[1]

	if (argvs.bulkShipping_flag==False and pick_opt_flag==False and vehicle.route[idx].custno=="0" and vehicle.route[-1].custno!="0") or \
		(argvs.bulkShipping_flag==True and pick_opt_flag==False and vehicle.route[idx].customers[0].custno=="0" and vehicle.route[-1].customers[0].custno!="0"):
		remove_customers_specified([vehicle.route[idx]],vehicle,argvs)


def dcopy(sv):
	#手製deepcopy
	dv = copy.copy(sv)
	dv.route = sv.route[:]
	dv.arr = sv.arr[:]
	dv.rem_batt = sv.rem_batt[:]
	dv.chg_batt = sv.chg_batt[:]
	dv.slack_t = sv.slack_t[:]
	dv.delay_arr = sv.delay_arr[:]
	dv.delay_rem_batt = sv.delay_rem_batt[:]
	dv.delay_chg_batt = sv.delay_chg_batt[:]
	dv.delay_slack_t = sv.delay_slack_t[:]
	dv.takebreak = sv.takebreak[:]

	return dv


def t_dcopy(st):
	#手製deepcopy
	dt = []
	for idx in range(len(st)):
		t = copy.copy(st[idx])
		tt = copy.copy(t['table'])
		tdr = []
		for tr in range(len(tt)):
			trm = copy.copy(tt[tr])
			tdr.append(trm)
		t['table'] = tdr
		dt.append(t)

	return dt


def r_backup(vehicles):
	#手製deepcopy
	rs = []
	bs = []
	tbs = []
	for v in vehicles:
		r = []
		b = []
		t = []
		for c in v.route:
			if c.custno[0] == 'b':
				cus = copy.copy(c)
				cus.additionalcust = []
				cus.additionalcust.append(cus)
				for ac in c.additionalcust[1:]:
					adc = copy.copy(ac)
					cus.additionalcust.append(adc)
				r.append(cus)
				bssn = cus.spotno
				b.append(bssn)
			else:
				r.append(c)
			for tb in v.takebreak:
				t.append(tb.spotno)
				for ac in tb.additionalcust[1:]:
					t.append(ac.spotno)
		rs.append(r)
		bs.append(b)
		tbs.append(t)
	return {'route':rs, 'spotno':bs, 'takebreak': tbs}

def r_restore(vehicles, rss, argvs):
	rs = rss['route']
	bs = rss['spotno']
	tbs = rss['takebreak']

	rsidx = 0
	for v in vehicles:
		if len(rs[rsidx]) > 0:
			v.route = copy.copy(rs[rsidx])
			bidx=0
			for r in v.route:
				if r.custno[0] == "b":
					r.spotno = bs[rsidx][bidx]
					bidx += 1
					tidx = 0
					for tb in v.takebreak:
						tb.spotno = tbs[rsidx][tidx]
						tidx += 1
						for ac in tb.additionalcust[1:]:
							ac.spotno = tbs[rsidx][tidx]
							tidx += 1

			v.update_totalcost_dtable(argvs)
			rsidx += 1

	return vehicles


def calc_visitnum(route):
	visitnum = 0
	bspotid = "-1"
	lstbb = []
	for r in route[1:-1]:
		if r.custno[0]=="e" or r.custno=="0":	# デポと充電スポットはカウントしない
			bspotid = r.spotid
			lstbb.clear()
			continue

		if r.custno[0]=="b":
			lstbb.append(r.spotid)
			continue

		elif len(lstbb) > 0 and bspotid == r.spotid:
			bspotid = r.spotid
			for bb in lstbb:
				if bb != r.spotid and bb != "":
					break

			else:
				lstbb.clear()
				continue

			visitnum += 1
			lstbb.clear()

		else:
			if r.spotid == bspotid:	#同じスポットIDが連続したらカウントしない
				continue
			visitnum += 1
			bspotid = r.spotid

	return visitnum


def get_parkt_time_flag(route):
	"""parkt_arrive,parkt_openの加算の有無

	Args:
		veh (_type_): _description_
	"""
	parkt_time_flag = []
	bspotid = "-1"
	no_breakspot_bspotid = "-1"
		
	for r in route:
		if r.custno.startswith("e") or r.custno.startswith("b"):
			parkt_time_flag.append(False)
			bspotid = r.spotid

		else:
			if ((r.spotid != bspotid) or (r.spotid != no_breakspot_bspotid)):
				parkt_time_flag.append(True)
			else:
				parkt_time_flag.append(False)

			bspotid = r.spotid
			no_breakspot_bspotid = r.spotid

	return parkt_time_flag


def get_last_idx(veh, argvs):
	last_idx = len(veh.route)-1
	if argvs.lastc_flag:
		veh_route_size=len(veh.route)
		for i in reversed(range(1,veh_route_size)):
			if veh.route[i].custno=="0" or veh.route[i].custno[0]=='b' or veh.route[i].custno[0]=='e' or i==len(veh.route)-1:
				last_idx=i-1
			else:
				break

	return last_idx


def disp_Vehicles(vehicles, route1=None, skv1=None, route2=None, skv2=None):
	if "debugpy" in sys.modules:
		s=""
		if route1 != None:
			for i,c in enumerate(route1):
				custno = ("   "+c.custno)[-3:]
				s += custno + ","
			s += '\n'

		if route2 != None:
			for i,c in enumerate(route2):
				custno = ("   "+c.custno)[-3:]
				s += custno + ","
			s += '\n'

		if skv1 != None:
			for i,c in enumerate(skv1):
				custno = ("   "+c.custno)[-3:]
				s += custno + ","
			s += '\n'

		if skv2 != None:
			for i,c in enumerate(skv2):
				custno = ("   "+c.custno)[-3:]
				s += custno + ","
			s += '\n'

		if route1 == None:
			_load_pen = 0
			_totalcost = 0
			_time_pen = 0
			for v in vehicles:
				_load_pen += v.load_pen + v.load_pen2
				_totalcost += v.totalcost
				_time_pen += v.time_pen
				for i,c in enumerate(v.route):
					custno = ("   "+c.custno)[-3:]
					ar = "   {:.1f}".format(v.arr[i])[-5:]
					#ar = "   {:.1f}".format(c.dem)[-5:]
					s += custno + "(" + ar + "),"
				s += '\n'
			s +=  "totaocost="+str(_totalcost)+" , load_pen="+str(_load_pen)+" , time_pen="+str(_time_pen)+"\n"
		
		print(s)


#### 未割り当て荷物最適化関数 ####

# 荷物が今ある車両でfreeかadditiveかを判定
#  in  : customer, vehicle, argvs
#  out : free、additive
#
def free_or_additive(cust, veh, vehicles, argvs):

	if argvs.opt_unassigned_flag==False:
		# 未割り当て荷物最適化がFalseならばそのまま返す
		return cust.changecust

	#初期解を通常車両と予約車両でグルーピング
	n_grp=[] #通常車両の荷物
	r_grp=[] #予約車両の荷物
	for ir in argvs.initroute:
		for v in vehicles:
			if v.vehno==ir:
				if v.reserved_v_flag==True:
					r_grp+=[c for c in argvs.initroute[ir] if c!="0" and c[0]!="b" and c[0]!="e"]
				else:
					n_grp+=[c for c in argvs.initroute[ir] if c!="0" and c[0]!="b" and c[0]!="e"]
				break

	if veh.reserved_v_flag==True:
		if cust.custno in r_grp:
			#車両が予約車両で、荷物が初期解の予約車両に有ったならばchangecustを返す
			return cust.changecust
	else:
		if cust.custno in n_grp:
			#車両が通常車両で、荷物が初期解の通常車両に有ったならばchangecustを返す
			return cust.changecust

	return 'free'


# 荷物がfreeからaddtitiveになる際に、additiveのルールを守っているか判定
#  in  : cust 荷物、veh 移動先車両、skv 移動先の仮ルート、argvs
#  out : True ルールを守っている、False ルールを守っていない
#
def in_additive(cust, veh, skv, vehicles, argvs):

	if free_or_additive(cust, veh, vehicles, argvs)=='additive':
		# additive
		# 車両は合ってるか？
		if cust.custno in argvs.initroute[veh.vehno]==False:
			#元の車両じゃなかったらルールエラー
			return False

		# 回転の便数は合ってるか？
		# 初期解での便数の取得
		mt_cnt=0
		init_custs1=[]
		init_custs2=[]
		loop_out=False
		for c in argvs.initroute[veh.vehno][1:-1]:
			if c=="0":
				if loop_out==True:
					break
				else:
					init_custs1=[]
					init_custs2=[]
					mt_cnt += 1 #depoならば便数+1
			else:
				if c==cust.custno:
					loop_out=True #荷物が見つかった
				else:
					if loop_out==True:
						init_custs2 += c #対象荷物より後ろにあるべき荷物
					else:
						init_custs1 += c #対象荷物より前にあるべき荷物

		# 移動先での便数の取得
		skv_mt_cnt=0
		skv_custs1=[]
		skv_custs2=[]
		loop_out=False
		for c in skv[1:-1]:
			if c.custno=="0":
				if loop_out==True:
					break
				else:
					skv_custs1=[]
					skv_custs2=[]
					skv_mt_cnt += 1 #depoならば便数+1
			else:
				if c.custno==cust.custno:
					loop_out=True #荷物が見つかった
				else:
					if free_or_additive(c, veh, vehicles, argvs)=="additive":
						if loop_out==True:
							skv_custs2 += c.custno #対象荷物より後ろにある荷物
						else:
							skv_custs1 += c.custno #対象荷物より前にある荷物
		
		if mt_cnt!=skv_mt_cnt:
			#便が違うのでルールエラー
			return False

		# 便内での他の荷物との順序は合っているかチェック
		# 対象荷物より前のチェック
		for c in skv_custs1:
			if c in init_custs2:
				#前にある荷物が初期解では後ろに有った
				return False

		# 対象荷物より後ろのチェック
		for c in skv_custs2:
			if c in init_custs1:
				#後ろにある荷物が初期解では前に有った
				return False
			
	return True


def main():
	global divided
	divided=False
	formatter='%(message)s'
	logging.basicConfig(level=logging.DEBUG,format=formatter,stream=sys.__stdout__)
	sLogBuf = "\n"
	
	if sys.platform.startswith('win'):
		# On Windows calling this function is necessary.
		freeze_support()

	init_message()

	#20200401
	random.seed(0)
	#20200401

	argvs=Argvs(sys.argv)

	#コマンドライン関係のエラーチェック
	error_check(argvs)

	fpre=argvs.inputfile[:argvs.inputfile.rfind(".")]
	fpre=fpre[(fpre.rfind("/")+1):]

	ivnum=int(argvs.ivnum)
	if len(argvs.starttime) < 6: ##20200626
		sttime=argvs.starttime.split(":")
		dt1=datetime.datetime(2000,1,1,int(sttime[0]),int(sttime[1]),00)
		endtime=argvs.endtime.split(":")
		dt2=datetime.datetime(2000,1,1,int(endtime[0]),int(endtime[1]),00)
	else: ##20200626
		dt1=datetime.datetime.strptime(argvs.starttime, '%Y/%m/%d %H:%M:%S')
		dt2=datetime.datetime.strptime(argvs.endtime, '%Y/%m/%d %H:%M:%S')
	
	dt3=dt2-dt1
	tmlim=dt3.total_seconds()/3600.0
	##
	if compare_time(argvs.lowertime , tmlim)>0:
		sErrMes = str(tmlim)+" "+str(argvs.lowertime)+" Usage:ltime must be smaller than timelimit"
		raise ValueError(sErrMes) # sys.exit() # daic
	if compare_time(argvs.uppertime , tmlim)>0:
		sErrMes = str(tmlim)+" "+str(argvs.uppertime)+" Usage:utime must be smaller than timelimit"
		raise ValueError(sErrMes) # sys.exit() # daic
	##

	nbflag=NbFlag(True,True,True,True,False)	#2020/9/1要望対応　初期解生成時にmerge処理を行わなくなり、初期解生成で台数が減る可能性をなくす

	start=time.time() ##20190917
	##start=time.clock()

	if argvs.evplan == True: ##20200626
		#充電対応車の情報読み込み
		e_vehicle_info=read_e_vehicle_info(argvs.e_vehicle_file) ##20200305
		sLogBuf += "e_vehicle\n"
		sLogBuf += str(e_vehicle_info) + "\n"
		#充電スポット情報の読み込み
		e_spots=read_e_spot_info(argvs.e_spot_file,argvs.starttime,argvs) ##20200305 20200726

		sLogBuf += "e_spots\n"
		if rank==0:
			logging.log(logging.INFO,sLogBuf)
		sLogBuf = "\n"
		sLogBuf_espots = "\n"
		for c in e_spots:
			sLogBuf_espots = c.output(sLogBuf_espots)
		if rank==0:
			logging.log(logging.INFO,sLogBuf_espots)
	else:
		e_vehicle_info = {}
		e_vehicle_info["E-CAPACITY"]=float(10)
		e_vehicle_info["E-INITIAL"]=float(0)
		e_vehicle_info["E-COST"]=float(1)
		e_vehicle_info["E-MARGIN"]=float(0)
		e_spots = []

	#休憩定義ファイルの読み込み
	br_info_list = []
	if argvs.br_file != None:
		br_info_list = read_br_file(argvs.br_file,argvs.starttime,argvs)

	#配送先データ読み込み read delivery point information
	custs3=read_customers(argvs.inputfile,argvs.starttime,argvs)

	##20200526
	if argvs.skillfile != None:
		skills = read_skills(argvs.skillfile)
	else:
		skills = None

	#運搬車をセット set vehicle
	vehs=[]
	#for i in range(ivnum*2):
	#for i in range(ivnum+1):
	#	vehs+=[Vehicle(i,200,veh_speed,proc_time,dtable,ttable,tmlim)];

	#ヘテロ車両情報読み出し
	hetero_vehicle_info_list = []
	if argvs.hetero_file != None:
		hetero_vehicle_info_list = read_hetero_info(argvs.hetero_file,argvs)

	#最終訪問先情報読み出し
	enddepot_info_list = []
	if argvs.vendfile != None:
		enddepot_info_list = read_enddepot_info(argvs.vendfile,argvs)

	#車両別営業時間情報読み出し
	vtime_info_list = []
	if argvs.vtimefile != None:
		vtime_info_list = read_vtime_info(argvs.vtimefile)

	#車両別訪問上限数読み出し
	if argvs.num_addv==-1:
		maxvisit=[0 for i in range(ivnum)]
	else:
		maxvisit=[0 for i in range(ivnum+argvs.num_addv)]

	if argvs.maxvisit_file != None:
		read_maxvisit(argvs.maxvisit_file,maxvisit)

	#回転数上限情報読み出し
	rotate_info_list = []
	if argvs.multitripv_file != None:
		rotate_info_list = read_rotate_info(argvs.multitripv_file)

	#台数削減優先度情報読み出し
	rmpriority_info_list = []
	if argvs.rmpriority_file != None:
		rmpriority_info_list = read_rmpriority_info(argvs.rmpriority_file)

	#未割り当て荷物 予約車両情報読み出し
	reservedv_info_list = []
	if argvs.reservedv_file != None:
		reservedv_info_list = read_reservedv_file(argvs.reservedv_file, argvs)
		

	if argvs.num_addv==-1:
		for i in range(ivnum):
			#vehs+=[Vehicle(i,200,veh_speed,proc_time,dtable,ttable,tmlim)];
			##20200317 e_vehicle_infoを追加
			###vehs+=[Vehicle(i,argvs.demand,veh_speed,proc_time,dtable,ttable,tmlim,e_vehicle_info)] #daic

			e_vehicle_info_work = e_vehicle_info.copy()	# 車両オリジナル情報設定
			demand_work = argvs.demand					# 積載量オリジナル情報設定
			demand_work2 = argvs.demand2				# 第2積載量オリジナル情報設定
			vtype = "common"							# vtypeオリジナル情報設定
			etype = "common"							# etypeオリジナル情報設定
			enddepot = copy.deepcopy(custs3[0])				# 最終訪問先オリジナル情報設定
			startoptime = argvs.starttime				# 営業開始時刻オリジナル情報設定
			endoptime = argvs.endtime					# 営業終了時刻オリジナル情報設定
			maxrotate = 0								# 回転数上限オリジナル情報設定
			depotservt = 0								# 拠点での作業時間オリジナル情報設定
			if argvs.decr_vnum==True:
				rmpriority = 2								# 台数削減優先度オリジナル情報設定
			else:
				rmpriority = 0								# 台数削減優先度オリジナル情報設定

			#ヘテロ車両定義ファイルが存在する場合、車両情報としてヘテロ車両情報を使用
			if argvs.hetero_file != None:
				for hetero in hetero_vehicle_info_list:
					if i == hetero["VEHICLE NO."]:
						e_vehicle_info_work["E-CAPACITY"] = hetero["E-CAPACITY"]
						e_vehicle_info_work["E-INITIAL"] = hetero["E-INITIAL"]
						e_vehicle_info_work["E-MARGIN"] = hetero["E-MARGIN"]
						e_vehicle_info_work["E-COST"] = hetero["E-COST"]
						demand_work = hetero["LOAD_LIMIT"]
						demand_work2 = hetero["LOAD_LIMIT2"]
						vtype = hetero["VTYPE"]
						etype = hetero["ETYPE"]
					

			#最終訪問先定義ファイルが存在する場合
			if argvs.vendfile != None:
				rejectve_dict={}
				if argvs.rejectve_file != None:
					with open(argvs.rejectve_file, "r") as f:
						rejectve_file = csv.reader(f, delimiter=",", quotechar='"', )
						for row in rejectve_file:
							if row[0]!="CUST NO.":
								rejectve_dict[row[0]]=[int(row[i]) for i in range(1,len(row))]
				addtwspot_dict={}
				if argvs.addtwspot_file != None:
					with open(argvs.addtwspot_file, "r") as f:
						addtwspot_file = csv.reader(f, delimiter=",", quotechar='"', )
						for row in addtwspot_file:
							if row[0]!="CUST NO.(ORIGINAL)":
								if row[0] in addtwspot_dict:
									addtwspot_dict[row[0]].append([row[1],row[2],row[3],row[4],float(row[5]),float(row[6])])
								else:
									addtwspot_dict[row[0]]=[[row[1],row[2],row[3],row[4],float(row[5]),float(row[6])]]

				for depot in enddepot_info_list:
					if i == depot["VEHICLE NO."]:
						if float(depot["DEMAND"])<0 or float(depot["DEMAND2"])<0:
							depot["DEMAND"]=str(abs(float(depot["DEMAND"])))
							depot["DEMAND2"]=str(abs(float(depot["DEMAND2"])))
							requestType="PICKUP"
						else:
							requestType="DELIVERY"
						deny_unass = True
						if depot["CUST NO."] in rejectve_dict:
							if depot["CUST NO."] in addtwspot_dict:
								addtwspot=[]
								for i in range(len(addtwspot_dict[depot["CUST NO."]])):
									addtwspot.append(Customer(addtwspot_dict[depot["CUST NO."]][i][0],addtwspot_dict[depot["CUST NO."]][i][3],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],addtwspot_dict[depot["CUST NO."]][i][1],addtwspot_dict[depot["CUST NO."]][i][2],depot["SERVICE TIME"],argvs.starttime,rejectve_dict[depot["CUST NO."]],addtwspot_dict[depot["CUST NO."]][i][4],addtwspot_dict[depot["CUST NO."]][i][5],depotservt,[],1,requestType,deny_unass))
								enddepot=Customer(depot["CUST NO."],depot["SPOT ID"],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],depot["FROM TIME"],depot["TO TIME"],depot["SERVICE TIME"],argvs.starttime,rejectve_dict[depot["CUST NO."]],depot["PARKING TIME ARRIVE"],depot["PARKING TIME OPEN"],0,addtwspot,1,requestType,deny_unass)
							else:
								enddepot=Customer(depot["CUST NO."],depot["SPOT ID"],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],depot["FROM TIME"],depot["TO TIME"],depot["SERVICE TIME"],argvs.starttime,rejectve_dict[depot["CUST NO."]],depot["PARKING TIME ARRIVE"],depot["PARKING TIME OPEN"],0,[],1,requestType,deny_unass)
						else:
							if depot["CUST NO."] in addtwspot_dict:
								addtwspot=[]
								for i in range(len(addtwspot_dict[depot["CUST NO."]])):
									addtwspot.append(Customer(addtwspot_dict[depot["CUST NO."]][i][0],addtwspot_dict[depot["CUST NO."]][i][3],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],addtwspot_dict[depot["CUST NO."]][i][1],addtwspot_dict[depot["CUST NO."]][i][2],depot["SERVICE TIME"],argvs.starttime,[],addtwspot_dict[depot["CUST NO."]][i][4],addtwspot_dict[depot["CUST NO."]][i][5],depotservt,[],1,requestType,deny_unass))
								enddepot=Customer(depot["CUST NO."],depot["SPOT ID"],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],depot["FROM TIME"],depot["TO TIME"],depot["SERVICE TIME"],argvs.starttime,[],depot["PARKING TIME ARRIVE"],depot["PARKING TIME OPEN"],0,addtwspot,1,requestType,deny_unass)
							else:
								enddepot=Customer(depot["CUST NO."],depot["SPOT ID"],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],depot["FROM TIME"],depot["TO TIME"],depot["SERVICE TIME"],argvs.starttime,[],depot["PARKING TIME ARRIVE"],depot["PARKING TIME OPEN"],0,[],1,requestType,deny_unass)

			#車両別営業時間ファイルが存在する場合
			if argvs.vtimefile != None:
				for veh in vtime_info_list:
					if i == veh["VEHICLE NO."]:
						startoptime=veh["FROM TIME"]
						endoptime=veh["TO TIME"]		

			#車両別回転数上限ファイルが存在する場合	
			if argvs.multitripv_file != None:
				for veh in rotate_info_list:
					if i == veh["VEHICLE NO."]:
						maxrotate=veh["MAXROTATE"]
						depotservt=veh["DEPOSERVICETIME"]	

			#台数削減優先度ファイルが存在する場合	
			if argvs.rmpriority_file != None:
				for veh in rmpriority_info_list:
					if i == veh["VEHICLE NO."]:
						rmpriority=veh["REMOVEPRIORITY"]			

			#休憩定義ファイルが存在する場合
			_takebreak=[]
			if argvs.br_file != None:
				for vehno in br_info_list:
					if i == vehno:
						_takebreak=br_info_list[i]

			#未割り当て荷物 予約車両ファイルが存在する場合
			reserved_v_flag = False
			if argvs.reservedv_file != None:
				reserved_v_flag = False
				for veh in reservedv_info_list:
					if i == veh["VEHICLE NO."]:
						reserved_v_flag=True
						break

			#vehs+=[Vehicle(i,demand_work,dtable,ttable,tmlim,e_vehicle_info_work,management_disttable,management_timetable)] #daic
			vehs+=[Vehicle(i,demand_work,demand_work2,e_vehicle_info_work,vtype,etype,enddepot,maxvisit[i],startoptime,endoptime,maxrotate,depotservt,rmpriority,_takebreak,reserved_v_flag,argvs)] #daic

		
	else:
		for i in range(ivnum+argvs.num_addv):
			#vehs+=[Vehicle(i,200,veh_speed,proc_time,dtable,ttable,tmlim)];
			##20200317 e_vehicle_infoを追加
			###vehs+=[Vehicle(i,argvs.demand,veh_speed,proc_time,dtable,ttable,tmlim,e_vehicle_info)] #daic

			e_vehicle_info_work = e_vehicle_info.copy()	# 車両オリジナル情報設定
			demand_work = argvs.demand					# 積載量オリジナル情報設定
			demand_work2 = argvs.demand2				# 第2積載量オリジナル情報設定
			vtype = "common"							# vtypeオリジナル情報設定
			etype = "common"							# etypeオリジナル情報設定
			enddepot = copy.deepcopy(custs3[0])				# 最終訪問先オリジナル情報設定
			startoptime = argvs.starttime				# 営業開始時刻オリジナル情報設定
			endoptime = argvs.endtime					# 営業終了時刻オリジナル情報設定
			maxrotate = 0								# 回転数上限オリジナル情報設定
			depotservt = 0								# 拠点での作業時間オリジナル情報設定
			if argvs.decr_vnum==True:
				rmpriority = 2								# 台数削減優先度オリジナル情報設定
			else:
				rmpriority = 0								# 台数削減優先度オリジナル情報設定

			#ヘテロ車両定義ファイルが存在する場合、車両情報としてヘテロ車両情報を使用
			if argvs.hetero_file != None:
				for hetero in hetero_vehicle_info_list:
					if i == hetero["VEHICLE NO."]:
						e_vehicle_info_work["E-CAPACITY"] = hetero["E-CAPACITY"]
						e_vehicle_info_work["E-INITIAL"] = hetero["E-INITIAL"]
						e_vehicle_info_work["E-MARGIN"] = hetero["E-MARGIN"]
						demand_work = hetero["LOAD_LIMIT"]
						demand_work2 = hetero["LOAD_LIMIT2"]
						vtype = hetero["VTYPE"]
						etype = hetero["ETYPE"]

			#最終訪問先定義ファイルが存在する場合
			if argvs.vendfile != None:
				rejectve_dict={}
				if argvs.rejectve_file != None:
					with open(argvs.rejectve_file, "r") as f:
						rejectve_file = csv.reader(f, delimiter=",", quotechar='"', )
						for row in rejectve_file:
							if row[0]!="CUST NO.":
								rejectve_dict[row[0]]=[int(row[i]) for i in range(1,len(row))]
				addtwspot_dict={}
				if argvs.addtwspot_file != None:
					with open(argvs.addtwspot_file, "r") as f:
						addtwspot_file = csv.reader(f, delimiter=",", quotechar='"', )
						for row in addtwspot_file:
							if row[0]!="CUST NO.(ORIGINAL)":
								if row[0] in addtwspot_dict:
									addtwspot_dict[row[0]].append([row[1],row[2],row[3],row[4],float(row[5]),float(row[6])])
								else:
									addtwspot_dict[row[0]]=[[row[1],row[2],row[3],row[4],float(row[5]),float(row[6])]]

				for depot in enddepot_info_list:
					if i == depot["VEHICLE NO."]:
						if float(depot["DEMAND"])<0 or float(depot["DEMAND2"])<0:
							depot["DEMAND"]=str(abs(float(depot["DEMAND"])))
							depot["DEMAND2"]=str(abs(float(depot["DEMAND2"])))
							requestType="PICKUP"
						else:
							requestType="DELIVERY"
						deny_unass=False
						if depot["CUST NO."] in rejectve_dict:
							if depot["CUST NO."] in addtwspot_dict:
								addtwspot=[]
								for i in range(len(addtwspot_dict[depot["CUST NO."]])):
									addtwspot.append(Customer(addtwspot_dict[depot["CUST NO."]][i][0],addtwspot_dict[depot["CUST NO."]][i][3],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],addtwspot_dict[depot["CUST NO."]][i][1],addtwspot_dict[depot["CUST NO."]][i][2],depot["SERVICE TIME"],argvs.starttime,rejectve_dict[depot["CUST NO."]],addtwspot_dict[depot["CUST NO."]][i][4],addtwspot_dict[depot["CUST NO."]][i][5],depotservt,[],1,requestType,deny_unass))
								enddepot=Customer(depot["CUST NO."],depot["SPOT ID"],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],depot["FROM TIME"],depot["TO TIME"],depot["SERVICE TIME"],argvs.starttime,rejectve_dict[depot["CUST NO."]],depot["PARKING TIME ARRIVE"],depot["PARKING TIME OPEN"],0,addtwspot,1,requestType,deny_unass)
							else:
								enddepot=Customer(depot["CUST NO."],depot["SPOT ID"],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],depot["FROM TIME"],depot["TO TIME"],depot["SERVICE TIME"],argvs.starttime,rejectve_dict[depot["CUST NO."]],depot["PARKING TIME ARRIVE"],depot["PARKING TIME OPEN"],0,[],1,requestType,deny_unass)
						else:
							if depot["CUST NO."] in addtwspot_dict:
								addtwspot=[]
								for i in range(len(addtwspot_dict[depot["CUST NO."]])):
									addtwspot.append(Customer(addtwspot_dict[depot["CUST NO."]][i][0],addtwspot_dict[depot["CUST NO."]][i][3],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],addtwspot_dict[depot["CUST NO."]][i][1],addtwspot_dict[depot["CUST NO."]][i][2],depot["SERVICE TIME"],argvs.starttime,[],addtwspot_dict[depot["CUST NO."]][i][4],addtwspot_dict[depot["CUST NO."]][i][5],depotservt,[],1,requestType,deny_unass))
								enddepot=Customer(depot["CUST NO."],depot["SPOT ID"],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],depot["FROM TIME"],depot["TO TIME"],depot["SERVICE TIME"],argvs.starttime,[],depot["PARKING TIME ARRIVE"],depot["PARKING TIME OPEN"],0,addtwspot,1,requestType,deny_unass)
							else:
								enddepot=Customer(depot["CUST NO."],depot["SPOT ID"],depot["LATITUDE"],depot["LONGITUDE"],depot["DEMAND"],depot["DEMAND2"],depot["FROM TIME"],depot["TO TIME"],depot["SERVICE TIME"],argvs.starttime,[],depot["PARKING TIME ARRIVE"],depot["PARKING TIME OPEN"],0,[],1,requestType,deny_unass)


			#車両別営業時間ファイルが存在する場合
			if argvs.vtimefile != None:
				for veh in vtime_info_list:
					if i == veh["VEHICLE NO."]:
						startoptime=veh["FROM TIME"]
						endoptime=veh["TO TIME"]	
				
			#車両別回転数上限ファイルが存在する場合	
			if argvs.multitripv_file != None:
				for veh in rotate_info_list:
					if i == veh["VEHICLE NO."]:
						maxrotate=veh["MAXROTATE"]
						depotservt=veh["DEPOSERVICETIME"]

			#台数削減優先度ファイルが存在する場合	
			if argvs.rmpriority_file != None:
				for veh in rmpriority_info_list:
					if i == veh["VEHICLE NO."]:
						rmpriority=veh["REMOVEPRIORITY"]

			#休憩定義ファイルが存在する場合
			_takebreak=[]
			if argvs.br_file != None:
				for veh in br_info_list:
					if i == vehno:
						_takebreak=br_info_list[i]

			#未割り当て荷物 予約車両ファイルが存在する場合
			reserved_v_flag = False
			if argvs.reservedv_file != None:
				reserved_v_flag = False
				for veh in reservedv_info_list:
					if i == veh["VEHICLE NO."]:
						reserved_v_flag=True
						break

			vehs+=[Vehicle(i,demand_work,demand_work2,e_vehicle_info_work,vtype,etype,enddepot,maxvisit[i],startoptime,endoptime,maxrotate,depotservt,rmpriority,[],reserved_v_flag,argvs)] #daic
	

	# check_capfeasibility(custs3,vehs,argvs)
	# check_twfeasibility(custs3,argvs.starttime,argvs.endtime)

	if "-si" in sys.argv:
		#スポットID定義ファイルがない場合
		if argvs.spot_input_file==None:
			sErrMes = "no spotinput file"
			raise ValueError(sErrMes)

		#inputファイル(+充電スポットファイル)のcustnoと過不足なく一致していない場合
		spots=list(set([c.custno for c in custs3]+[c.custno for c in e_spots]+[v.enddepot.custno for v in vehs]))

		with open(argvs.spot_input_file,"r") as f:
			csv_reader=csv.reader(f,delimiter=",",quotechar='"')
			for row in csv_reader:
				if not row[0]=="CUST NO.":
					if row[0] in spots:
						spots.remove(row[0])
					elif row[0][0] != "b":
						sErrMes = "spotid does not match CUST NO. (spotid = "+row[0]+")"
						raise ValueError(sErrMes)

			if spots!=[]:
				sErrMes = "spotid does not match CUST NO. (CUST NO. = "+str(spots)+")"
				raise ValueError(sErrMes)

	##20190722
	#パラメータ出力
	sLogBuf_argvs = "\n"
	# argvs.output()
	sLogBuf_argvs = argvs.output(sLogBuf_argvs)
	if rank==0:
		logging.log(logging.INFO,sLogBuf_argvs)
	sLogBuf = "\n"

	#初期解生成 make initial solution
	if argvs.initfile==None and argvs.loaddivide_initfile==None:
		td = datetime.datetime.today()
		sLogBuf += "===== no Initial route =====\n"
		init_starttd = datetime.datetime.today()
		init_starttime=time.time() ##20190917
		##init_starttime=time.clock()
		sLog = ["===== Initial solution: CONSTRUCTION_START  ===== at ",td]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		# sLogBuf += " ".join(list(map(str,sLog)))
		if rank==0:
			logging.log(logging.INFO,sLogBuf)
		#tnbflag=adjust_nveh_construction_I(custs3,vehs,ivnum,dtable,nbflag,ttable,mresult_false)
		#tnbflag=adjust_nveh_construction_I(custs3,vehs,ivnum,dtable,nbflag,ttable)
		#tnbflag=adjust_nveh_construction_I(custs3,vehs,ivnum,dtable,nbflag,ttable,argvs.decr_vnum)
		#tnbflag=adjust_nveh_construction_I(custs3,vehs,ivnum,dtable,nbflag,ttable,argvs.decr_vnum,argvs.aveflag)
		##20200526

		tnbflag,custs3=adjust_nveh_construction_I2(custs3,e_spots,vehs,ivnum,nbflag,skills,argvs)
		##tnbflag=adjust_nveh_construction_I(custs3,vehs,ivnum,dtable,nbflag,ttable,argvs.decr_vnum,argvs.aveflag,argvs.lastc_flag)
		
		#insert_espot_for_feasibility(custs3,vehs,dtable,e_spots)

		sLogBuf = "\n"
		init_endtd = datetime.datetime.today()
		init_endtime=time.time() ##20190917
		##init_endtime=time.clock()
		sLog = ["===== Initial solution: CONSTRUCTIONS_END   ===== at ",init_endtd]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["===== Initial solution: CONSTRUCTION_TIME   =====    ",round(init_endtime-init_starttime,1),"sec."]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"


	else:
		sLogBuf += "===== Initial route =====\n"
		initread_starttd=datetime.datetime.today()
		initread_starttime=time.time() ##20190917
		##initread_starttime=time.clock()
		sLog = ["===== Initial route: READ_FILE_START  ===== at ",initread_starttd]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		##20200526
		if argvs.loaddivide_initfile==None:
			iniroutes = read_initroutes(argvs.initfile)
		else:
			iniroutes = read_loaddivide_initroutes(argvs.loaddivide_initfile,custs3,argvs)
		tnbflag,custs3=set_initroutes2(custs3,e_spots,vehs,nbflag,iniroutes,skills,argvs)
		##tnbflag=set_initroutes(custs3,vehs,dtable,nbflag,argvs.lastc_flag,ttable)
		initread_endtd=datetime.datetime.today()
		initread_endtime=time.time() ##20190917
		##initread_endtime=time.clock()
		sLog = ["===== Initial route: READ_FILE_END   ===== at ",initread_endtd]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["===== Initial route: READ_FILE_TIME   =====    ",round(initread_endtime-initread_starttime,1),"sec."]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	totalcost,totalcost_wolast=0,0
	vidx=0
	for v in vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
			totalcost+=v.totalcost
			totalcost_wolast+=v.totalcost_wolast
			vidx=vidx+1
	sLog = ["===== TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	sLogBuf += "\n"
	totaltime,totaltime_wolast=0,0
	for v in vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
			totaltime+=v.lv[-1]-v.arr[0]
			for i in range(len(v.route)-2,0,-1):
				if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
					totaltime_wolast+=v.lv[i]-v.arr[0]
					break
	sLog = ["===== TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	if rank==0:
		logging.log(logging.INFO,sLogBuf)

	sLogBuf = "\n"
	sLogBuf += "=======================================\n"
	sLogBuf += "\n"

	#初期解をファイルに書き出し output initial solution to file
	##generate_resultfile("results/"+fpre+"-best0.txt",custs3,vehs,argvs.inputfile,argvs.lastc_flag)
	generate_resultfile(fpre+"-best0.txt",custs3,vehs,argvs.inputfile,argvs.lastc_flag,argvs)


	# relocate,inswap,exchange,cross,merge
	#tnbflag=NbFlag(True,True,True,True,False)
	#tnbflag=NbFlag(False,False,False,True,False)
	#tnbflag=NbFlag(True,True,True,True,False)
	tnbflag=NbFlag(True,True,True,True,True)

	#改善解を探索 start to improv solution
	td = datetime.datetime.today()
	sLog = ["===== Initial routes: IMPROVEMENTS_START ===== at ",td]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	ls_starttime=time.time() ##20190917
	##ls_starttime=time.clock()
	if rank==0:
		logging.log(logging.INFO,sLogBuf)
	vehs,custs3 = localsearch_dtable(custs3,vehs,tnbflag,ivnum,skills,argvs)

	sLogBuf = "\n"
	ls_endtime=time.time() ##20190917
	##ls_endtime=time.clock()
	td = datetime.datetime.today()
	sLog = ["===== Initial routes: IMPROVEMENTS_END  ===== at ",td]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== Initial routes: IMPROVEMENT_TIME =====    ",round(ls_endtime-ls_starttime,1),"sec."]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	sLogBuf += "\n"
	

	#得られた解をファイルに出力
	#generate_routefile(argvs.outputfile,custs3,vehs,argvs.inputfile,argvs.lastc_flag)
	if argvs.evplan == False: ##20200626
		generate_routefile(argvs.outputfile,vehs,argvs.lastc_flag,argvs)
		##write_chargetime(argvs.outputfile,vehs,argvs.lastc_flag)
		generate_resultfile(argvs.outputfile+".detail.csv",custs3,vehs,argvs.inputfile,argvs.lastc_flag,argvs)

	if argvs.multitrip_flag==True:
		generate_rotate_file(argvs.outputfile,custs3,vehs,argvs.inputfile,argvs)

	if divided==True:
		generate_divide_file(argvs.outputfile,vehs)

	vidx=0
	totalcost=0
	totalcost_wolast=0
	sLogBuf += "============================== RESULT =============================\n"
	if rank==0:
		logging.log(logging.INFO,sLogBuf)
	sLogBuf = "\n"
	sLogBuf_veh = "\n"
	used_customers=[]
	for v in vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
			sLogBuf_veh = v.output(argvs, sLogBuf_veh,used_customers,divided)
			sLogBuf_veh += "\n"
			totalcost+=v.totalcost
			totalcost_wolast+=v.totalcost_wolast
			vidx=vidx+1
	if rank==0:
		logging.log(logging.INFO,sLogBuf_veh)
	sLog = ["===== TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	sLogBuf += "\n"
	totaltime,totaltime_wolast=0,0
	for v in vehs:
		if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
			totaltime+=v.lv[-1]-v.arr[0]
			for i in range(len(v.route)-2,0,-1):
				if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
					totaltime_wolast+=v.lv[i]-v.arr[0]
					break
	sLog = ["===== TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	if argvs.delaystart_flag and argvs.evplan==False and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
		totalcost=0
		totalcost_wolast=0
		vidx=0
		sLogBuf += "============================== RESULT(reduce waiting time) =============================\n"
		logging.log(logging.INFO,sLogBuf)
		sLogBuf = "\n"
		sLogBuf_veh = "\n"
		used_customers=[]
		for v in vehs:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
				sLogBuf_veh = v.output(argvs, sLogBuf_veh, used_customers, divided, True)
				sLogBuf_veh += "\n"
				totalcost+=v.delay_totalcost
				totalcost_wolast+=v.delay_totalcost_wolast
				vidx=vidx+1
		if rank==0:
			logging.log(logging.INFO,sLogBuf_veh)
		sLog = ["===== TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["===== TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"

		sLogBuf += "\n"
		totaltime,totaltime_wolast=0,0
		for v in vehs:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
				totaltime+=v.delay_lv[-1]-v.delay_arr[0]
				for i in range(len(v.route)-2,0,-1):
					if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
						totaltime_wolast+=v.delay_lv[i]-v.delay_arr[0]
						break
		sLog = ["===== TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["===== TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	if argvs.decr_vnum==True: ##20180611 -rv
		sLog = ["===== TOTAL_NUMBER_OF VEHICLES: ",vidx," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLogBuf += "\n"
	if argvs.initfile==None and argvs.loaddivide_initfile==None:
		sLog = ["===== Initial solution: CONSTRUCTION_TIME   =====    ",round(init_endtime-init_starttime,1),"sec."]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	else:
		sLog = ["===== Initial route: READ_FILE_TIME   =====    ",round(initread_endtime-initread_starttime,1),"sec."]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
	sLog = ["===== Initial routes: IMPROVEMENT_TIME =====    ",round(ls_endtime-ls_starttime,1),"sec."]
	sLogBuf += " ".join(list(map(str,sLog))) + "\n"

	if rank==0:
		logging.log(logging.INFO,sLogBuf)

	output_violations(vehs,argvs)

	#ここから充電対応
	if argvs.evplan == True: ##20200626
		(custs3, vehs) = localsearch_ev(custs3, vehs, e_spots, argvs)
		sLogBuf = "\n"
		sLogBuf += "===== after all Shaw removal =====\n"
		totalcost,totalcost_wolast=0,0

		generate_routefile(argvs.outputfile,vehs,argvs.lastc_flag,argvs)
		write_chargetime(argvs.outputfile,vehs,argvs.lastc_flag,argvs)
		generate_resultfile(argvs.outputfile+".detail.csv",custs3,vehs,argvs.inputfile,argvs.lastc_flag,argvs)
		write_chargetime(argvs.outputfile+".detail.csv",vehs,argvs.lastc_flag,argvs)

		sLogBuf += "========================== EVPLAN RESULT =========================\n"
		if rank==0:
			logging.log(logging.INFO,sLogBuf)
		sLogBuf = "\n"
		sLogBuf_veh = "\n"
		used_customers=[]
		for v in vehs:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
				sLogBuf_veh = v.output_ev(argvs, sLogBuf_veh,used_customers,divided)
				sLogBuf_veh += "\n"
				totalcost+=v.totalcost
				totalcost_wolast+=v.totalcost_wolast
		if rank==0:
			logging.log(logging.INFO,sLogBuf_veh)
		sLog = ["===== TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["===== TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"

		sLogBuf += "\n"
		totaltime,totaltime_wolast=0,0
		for v in vehs:
			if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
				totaltime+=v.lv[-1]-v.arr[0]
				for i in range(len(v.route)-2,0,-1):
					if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
						totaltime_wolast+=v.lv[i]-v.arr[0]
						break
		sLog = ["===== TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["===== TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"

		if argvs.delaystart_flag and argvs.break_flag==False: #休憩スポットが有効ならばdelayしない
			totalcost,totalcost_wolast=0,0
			vidx=0
			sLogBuf += "========================== EVPLAN RESULT(reduce waiting time) =========================\n"
			if rank==0:
				logging.log(logging.INFO,sLogBuf)
			sLogBuf = "\n"
			sLogBuf_veh = "\n"
			used_customers=[]
			for v in vehs:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
					sLogBuf_veh = v.output_ev(argvs, sLogBuf_veh, used_customers, divided, True)
					sLogBuf_veh += "\n"
					totalcost+=v.delay_totalcost
					totalcost_wolast+=v.delay_totalcost_wolast
			if rank==0:
				logging.log(logging.INFO,sLogBuf_veh)
			sLog = ["===== TOTAL_DISTANCE: ",round(totalcost,2)," ====="]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["===== TOTAL_DISTANCE_TO_LASTCUST: ",round(totalcost_wolast,2)," ====="]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"

			sLogBuf += "\n"
			totaltime,totaltime_wolast=0,0
			for v in vehs:
				if len([c for c in v.route[1:-1] if c.custno!="0" and c.custno[0]!="b" and c.custno[0]!="e"])>=1:
					totaltime+=v.delay_lv[-1]-v.delay_arr[0]
					for i in range(len(v.route)-2,0,-1):
						if v.route[i].custno!="0" and v.route[i].custno[0]!="b" and v.route[i].custno[0]!="e":
							totaltime_wolast+=v.lv[i]-v.delay_arr[0]
							break
			sLog = ["===== TOTAL_DELIVERY_TIME: ",round(totaltime,2)," ====="]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			sLog = ["===== TOTAL_DELIVERY_TIME_TO_LASTCUST: ",round(totaltime_wolast,2)," ====="]
			sLogBuf += " ".join(list(map(str,sLog))) + "\n"
			
		ev_endtime=time.time()
		sLogBuf += "\n"
		sLog = ["===== Evplan improvement route: CONSTRUCTION_TIME =====    ",round(ev_endtime-ls_endtime,1),"sec."]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		sLog = ["===== TOTAL_CONSTRUCTION_TIME =====    ",round(ev_endtime-start,1),"sec."]
		sLogBuf += " ".join(list(map(str,sLog))) + "\n"
		#sys.exit(1) #daic

		if rank==0:
			logging.log(logging.INFO,sLogBuf)

		output_violations(vehs,argvs,True)
		

if __name__ == '__main__':
	main()
